#Область Интерфейс

Функция СведенияОВнешнейОбработке() Экспорт
	
	НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке(СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
    ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Наименование = НаименованиеОбработки;
    ПараметрыРегистрации.Версия = "1.0";
	ПараметрыРегистрации.БезопасныйРежим = Ложь;
	
    Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Идентификатор = "КСП_ЗаполнитьПроцентПредоплаты";
	Команда.Представление = "Заполнить процент предоплаты";
	Команда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	Команда.ПоказыватьОповещение = Ложь;
	
	Возврат ПараметрыРегистрации; 
	
КонецФункции

Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения = Неопределено) Экспорт
	
	Если ИмяКоманды = "КСП_ЗаполнитьПроцентПредоплаты" Тогда
		
		ЗаполнитьПроцентПредоплаты();
		
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВызовСерверныхПроцедур

Процедура ЗаполнитьПроцентПредоплаты()

	ЗаписьЖурналаРегистрации(
		"ЗаполнениеПроцентаПредоплатыЗаказаКлиента",
		УровеньЖурналаРегистрации.Информация,,,
		"Начало выполенения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
		|ПОМЕСТИТЬ втЗаказыКлиента
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Проведен
		|	И НАЧАЛОПЕРИОДА(ЗаказКлиента.КСП_Коллекция.КСП_ДатаПредоплаты_2, ДЕНЬ) < НАЧАЛОПЕРИОДА(&ТекущаяДатаСеанса, ДЕНЬ)
		//|	И ЗаказКлиента.КСП_ПроцентПредоплаты = 0
		//|	И ЗаказКлиента.КСП_СуммаПредоплаты = 0
		|	И ЗаказКлиента.КСП_Коллекция.КСП_ДатаПредоплаты_2 <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗаказыКлиента.ЗаказКлиента КАК ЗаказКлиента,
		|	ПриходныйКассовыйОрдер.Ссылка КАК ДокументФиксацииЦены
		|ПОМЕСТИТЬ втЗаказыДокументыФиксацииЦены
		|ИЗ
		|	втЗаказыКлиента КАК втЗаказыКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|		ПО (втЗаказыКлиента.ЗаказКлиента = (ВЫРАЗИТЬ(ПриходныйКассовыйОрдер.ДокументОснование КАК Документ.ЗаказКлиента)))
		|			И (ПриходныйКассовыйОрдер.Проведен)
		|			И (НЕ ПриходныйКассовыйОрдер.ПометкаУдаления)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втЗаказыКлиента.ЗаказКлиента,
		|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка
		|ИЗ
		|	втЗаказыКлиента КАК втЗаказыКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
		|		ПО (втЗаказыКлиента.ЗаказКлиента = (ВЫРАЗИТЬ(ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ОбъектРасчетов.Объект КАК Документ.ЗаказКлиента)))
		|			И (ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Проведен)
		|			И (НЕ ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втЗаказыДокументыФиксацииЦены.ЗаказКлиента КАК ЗаказКлиента,
		|	втЗаказыДокументыФиксацииЦены.ДокументФиксацииЦены КАК ДокументФиксацииЦены
		|ИЗ
		|	втЗаказыДокументыФиксацииЦены КАК втЗаказыДокументыФиксацииЦены
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументФиксацииЦены)
		|ПО
		|	ЗаказКлиента";
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	ВыборкаЗаказовКлиента = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаказовКлиента.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ЗаказКлиентаОбъект = ВыборкаЗаказовКлиента.ЗаказКлиента.ПолучитьОбъект();
			ЗаказКлиентаСсылка = ВыборкаЗаказовКлиента.ЗаказКлиента;
			//Сообщить(ЗаказКлиентаСсылка);
			//СуммаПредоплаты = ксп_СкидкиНаценкиСервер.СуммаОплатПоЗаказу(ЗаказКлиентаСсылка);
			СуммаПредоплаты = СуммаОплатПоЗаказу(ЗаказКлиентаСсылка);
			АбсолтныйПроцентПредоплаты = СуммаПредоплаты / ксп_СкидкиНаценкиСервер.ПолучитьСуммуДокументаБезСкидокНаценк(ЗаказКлиентаОбъект) * 100;
			//Сообщить(СуммаПредоплаты);
			СтарыйПроцентПредоплаты = ЗаказКлиентаОбъект.КСП_ПроцентПредоплаты;
			СтарыйСуммаПредоплаты = ЗаказКлиентаОбъект.КСП_СуммаПредоплаты;
			
			ЗаказКлиентаОбъект.КСП_ПроцентПредоплаты = ПолучитьПроцентПредоплаты(АбсолтныйПроцентПредоплаты);
			ЗаказКлиентаОбъект.КСП_СуммаПредоплаты = СуммаПредоплаты;
			
			ВыборкаДокументовФиксацииЦены = ВыборкаЗаказовКлиента.Выбрать();
			
			Пока ВыборкаДокументовФиксацииЦены.Следующий() Цикл
				
				ДокументФиксацииЦены = ВыборкаДокументовФиксацииЦены.ДокументФиксацииЦены;
				
				Если ЗначениеЗаполнено(ДокументФиксацииЦены) Тогда
					
					//ДокументФиксацииЦены = ДокументФиксацииЦены.ПолучитьОбъект();
					//
					//Если ТипЗнч(ДокументФиксацииЦены) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
					//	ДокументФиксацииЦены.ДокументОснование = Справочники.ОбъектыРасчетов.ПустаяСсылка();
					//	Для каждого Строка Из ДокументФиксацииЦены.РасшифровкаПлатежа Цикл
					//		Строка.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
					//		Строка.ОснованиеПлатежа = Неопределено;
					//	КонецЦикла;
					//ИначеЕсли ТипЗнч(ДокументФиксацииЦены) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
					//	Для каждого Строка Из ДокументФиксацииЦены.РасшифровкаПлатежа Цикл
					//		Строка.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
					//		Строка.ОснованиеПлатежа = Неопределено;
					//	КонецЦикла;
					//Иначе
					//	Продолжить;
					//КонецЕсли;
					
					// Создание записи в РС КСП_ДокументыПредоплатыЗаказаКлиента
					МенеджерЗаписи = РегистрыСведений.КСП_ДокументыПредоплатыЗаказаКлиента.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ЗаказКлиента = ЗаказКлиентаСсылка;
					МенеджерЗаписи.ДокументПредоплаты = ДокументФиксацииЦены.Ссылка;
					
					//Попытка
					//	ДокументФиксацииЦены.Записать(РежимЗаписиДокумента.Проведение);
					//	МенеджерЗаписи.Записать();
					//Исключение
					//	ВызватьИсключение "Не удалось записать документ фиксации цены по прчиине" + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					//КонецПопытки;
				
				КонецЕсли;
			
			КонецЦикла;
			
			Попытка
				Если ЗаказКлиентаОбъект.КСП_СуммаПредоплаты <> 0 Тогда
					ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЕсли;
			Исключение
				ВызватьИсключение "Не удалось записать заказ клиента по прчиине" + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
			ЗаписьЖурналаРегистрации(
				"ЗаполнениеПроцентаПредоплатыЗаказаКлиента",
				УровеньЖурналаРегистрации.Информация,,
				ЗаказКлиентаСсылка,
				"У заказа клиента изменился процент предоплаты с <" + СтарыйПроцентПредоплаты + "> на <" + ЗаказКлиентаОбъект.КСП_ПроцентПредоплаты + ">" + Символы.ПС +
					"Сумма предоплаты с <" + СтарыйСуммаПредоплаты + "> на <" + ЗаказКлиентаОбъект.КСП_СуммаПредоплаты + ">");
				
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				"ЗаполнениеПроцентаПредоплатыЗаказаКлиента",
				УровеньЖурналаРегистрации.Информация,,
				ЗаказКлиентаСсылка,
				"Не удалось изменить процент предоплаты в заказе клиента по прчине" + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;	
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(
		"ЗаполнениеПроцентаПредоплатыЗаказаКлиента",
		УровеньЖурналаРегистрации.Информация,,,
		"Окончание выполенения");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ПолучитьПроцентПредоплаты(Знач АбсолтныйПроцентПредоплаты)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкидкиНаценки.ЗначениеСкидкиНаценки КАК ЗначениеСкидкиНаценки,
		|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.ПараметрыВнешнейОбработки КАК ПараметрыВнешнейОбработки
		|ИЗ
		|	Справочник.СкидкиНаценки КАК СкидкиНаценки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
		|		ПО СкидкиНаценки.Ссылка = СкидкиНаценкиУсловияПредоставления.Ссылка
		|ГДЕ
		|	СкидкиНаценки.Родитель.Наименование = &Предоплата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначениеСкидкиНаценки";
	
	Запрос.УстановитьПараметр("Предоплата", "Предоплата");
	
	ВыборкаСкидок = Запрос.Выполнить().Выбрать();
	
	ПроцентПредоплаты = 0;
	
	Пока ВыборкаСкидок.Следующий() Цикл
		
		ПараметрыВнешнейОбработки = ВыборкаСкидок.ПараметрыВнешнейОбработки.Получить();
		
		Если АбсолтныйПроцентПредоплаты > ПараметрыВнешнейОбработки.Процент Тогда
			ПроцентПредоплаты = ПараметрыВнешнейОбработки.Процент;
		Иначе
			Возврат ПроцентПредоплаты;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПроцентПредоплаты;
	
КонецФункции

// Возвращает сумму оплаченную по заказу по РН РасчетыСКлиентамиПоСрокам
//
// Параметры:
//  Заказ	 - ЗаказКлиентаСсылка	 - Заказ по которому необходимо посчиать оплату
// 
// Возвращаемое значение:
//  Сумма - Число, оплаченная сумма по заказу
//
Функция СуммаОплатПоЗаказу(Знач Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСКлиентами.ОбъектРасчетов.Объект КАК ОбъектРасчетовОбъект,
		|	СУММА(-РасчетыСКлиентами.Сумма) КАК Оплачено
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.ОбъектРасчетов.Объект = &Заказ
		|	И РасчетыСКлиентами.ВидДвижения = &Расход
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКлиентами.ОбъектРасчетов.Объект";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Расход", ВидДвиженияНакопления.Расход);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Сумма = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сумма = -ВыборкаДетальныеЗаписи.Оплачено;
	КонецЦикла;	
	
	Возврат Сумма;
		
КонецФункции
#КонецОбласти
