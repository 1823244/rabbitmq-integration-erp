////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	Описание = СкидкиНаценкиСервер.ПараметрыРегистрацииВнешнейОбработкиСкидкиНаценки(
		НСтр("ru = 'Процент за курсовую разницу'"),
		НСтр("ru = 'Предоставляется скидка (наценка) процентом. Процент скидки (наценки) зависит от кусовой разницы.'"));
		
	Описание.Версия = "1.3";
	
	Возврат Описание;
	
КонецФункции

// Возвращает способ применения скидки (наценки)
//
// Возвращаемое значение:
//	Перечисления.СпособыПримененияСкидокНаценок - способ применения скидки (наценки)
//
Функция СпособПрименения() Экспорт
	
	Возврат Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок;
	
КонецФункции

// Выполняет расчет скидки (наценки)
//
// Параметры:
//	СкидкаНаценка - Строка дерева скидок (наценок). Включает результаты проверки условий, способы совместного применения
//	Настройки - Структура - Настройки, заданные пользователем в форме настроек внешней обработки
//	Товары - Коллекция товаров, для которых требуется применить скидку (наценку)
//	ПараметрыРасчета - Структура - Параметры расчета скидок (наценок)
//
// Возвращаемое значение:
//	РезультатРасчета - ТаблицаЗначений - результат расчета
//
Функция Рассчитать(СтрокаДерева, Настройки, Товары, ПараметрыРасчета) Экспорт

	РезультатРасчета = СкидкиНаценкиСервер.ПустаяТаблицаСкидокСРасшифровкой();
	Если ТипЗнч(ПараметрыРасчета.Регистратор) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		Если ТипЗнч(ПараметрыРасчета.Объект) = Тип("ДанныеФормыСтруктура") Тогда
			//ОбъектДокумент = ДанныеФормыВЗначение(ПараметрыРасчета.Объект, Тип("ДокументОбъект.ЗаказКлиента"));
			Коллекция = ПараметрыРасчета.Объект.КСП_Коллекция;
			
			СуммаДокументаБезСкидокНаценок = ксп_СкидкиНаценкиСервер.ПолучитьСуммуДокументаБезСкидокНаценк(ПараметрыРасчета.Объект);
				
		    Если НЕ СуммаДокументаБезСкидокНаценок = 0 Тогда
				ПроцентПредоплаты = ксп_СкидкиНаценкиСервер.СуммаОплатПоЗаказу(ПараметрыРасчета.Регистратор) / СуммаДокументаБезСкидокНаценок * 100;
				ЗначениеСкидкиНаценки = - ЗначениеСкидкиНаценки(Коллекция, ПроцентПредоплаты);
			Иначе
				ЗначениеСкидкиНаценки = 0;
			КонецЕсли;
			
			ЭтоУмножение = СтрокаДерева.ПрименятьУмножениеВРамкахВышестоящейГруппы;
			ТоварыЗаказа = ПараметрыРасчета.Объект.Товары;
			
			ПараметрыОтбора = Новый Структура("КлючСвязи", 0);
			Для Каждого Товар Из Товары Цикл
				
				ПараметрыОтбора.КлючСвязи = Товар.КлючСвязи;		
				МассивСтрок = ТоварыЗаказа.НайтиСтроки(ПараметрыОтбора);		
				Если МассивСтрок.Количество() > 0 Тогда
					Если МассивСтрок[0].ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
						Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
							Сумма = ЗначениеСкидкиНаценки / 100 * ОстатокСуммыПоСтроке(СтрокаДерева, МассивСтрок[0], ПараметрыРасчета, ЭтоУмножение);
						Иначе
							Сумма = 0;
						КонецЕсли;
						СкидкиНаценкиСервер.ПрименитьЗначениеСкидкиКТовару(СтрокаДерева, Сумма, Товар, РезультатРасчета, ПараметрыРасчета);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;

		ИначеЕсли ТипЗнч(ПараметрыРасчета.Объект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
			ОбъектДокумент = ПараметрыРасчета.Объект;
			Коллекция = ПараметрыРасчета.Объект.КСП_Коллекция;
			
			СуммаДокументаБезСкидокНаценок = ксп_СкидкиНаценкиСервер.ПолучитьСуммуДокументаБезСкидокНаценк(ОбъектДокумент);
				
		    Если НЕ СуммаДокументаБезСкидокНаценок = 0 Тогда
				ПроцентПредоплаты = ксп_СкидкиНаценкиСервер.СуммаОплатПоЗаказу(ПараметрыРасчета.Регистратор) / СуммаДокументаБезСкидокНаценок * 100;
				ЗначениеСкидкиНаценки = - ЗначениеСкидкиНаценки(Коллекция, ПроцентПредоплаты);
			Иначе
				ЗначениеСкидкиНаценки = 0;
			КонецЕсли;
			
			ЭтоУмножение = СтрокаДерева.ПрименятьУмножениеВРамкахВышестоящейГруппы;
			ТоварыЗаказа = ПараметрыРасчета.Объект.Товары;
			
			ПараметрыОтбора = Новый Структура("КлючСвязи", 0);
			Для Каждого Товар Из Товары Цикл
				
				ПараметрыОтбора.КлючСвязи = Товар.КлючСвязи;		
				МассивСтрок = ТоварыЗаказа.НайтиСтроки(ПараметрыОтбора);		
				Если МассивСтрок.Количество() > 0 Тогда
					Если МассивСтрок[0].ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
						Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
							Сумма = ЗначениеСкидкиНаценки / 100 * ОстатокСуммыПоСтроке(СтрокаДерева, МассивСтрок[0], ПараметрыРасчета, ЭтоУмножение);
						Иначе
							Сумма = 0;
						КонецЕсли;
						СкидкиНаценкиСервер.ПрименитьЗначениеСкидкиКТовару(СтрокаДерева, Сумма, Товар, РезультатРасчета, ПараметрыРасчета);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Возврат 1;	
        КонецЕсли;
	Иначе
		Возврат 1;
	КонецЕсли;

	Возврат РезультатРасчета;
	
КонецФункции

// Возвращает имя формы внешней обработки,
// предназначенной для настройки условия предоставления 
//
// Возвращаемое значение:
//	Строка - Имя формы
//
Функция ИмяФормыНастроек() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает расширенное описание условия предоставления с учетом настроек
//
// Параметры:
//	Настройки - Структура - Значения настроек условия предоставления
//
// Возвращаемое значение:
//	Строка - Расширенное описание
//
Функция ОписаниеДействия(Настройки) Экспорт
	
	Попытка
		Если Настройки<> Неопределено И Настройки.Таблица.Количество() > 0 Тогда
			Описание = "Предоставляется скидка (наценка) процентом. Процент скидки (наценки) зависит от кусовой разницы:";
		Иначе
			Описание = "Не заданы настройки скидки (наценки)";
		КонецЕсли;
	Исключение
		Описание = "Настройки не загружены.
		           |При загрузке настроек скидки (наценки) произошла ошибка:
		           |" + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Описание;
	
КонецФункции

// Возвращает заголовок условия предоставления с учетом настроек
//
// Параметры:
//	Настройки - Структура - Значения настроек условия предоставления
//
// Возвращаемое значение:
//	Строка - Наименование условия
//
Функция Автонаименование(Настройки) Экспорт
	
	Возврат НСтр("ru = 'Процент за кусовую разницу'");
	
КонецФункции

Функция ВалютаДоллар()

	СтрокаНаименования = "USD";
	Валюты = Справочники.Валюты;
	НайденнаяСсылка = Валюты.НайтиПоНаименованию(СтрокаНаименования);
	
	Если НайденнаяСсылка = Валюты.ПустаяСсылка() Тогда
	    ВызватьИсключение "Не найдена валюта доллар"
	КонецЕсли;
	
	Возврат НайденнаяСсылка;

КонецФункции // ВалютаДоллар()

Функция ВалютаЕвро()

	СтрокаНаименования = "EUR";
	Валюты = Справочники.Валюты;
	НайденнаяСсылка = Валюты.НайтиПоНаименованию(СтрокаНаименования);
	
	Если НайденнаяСсылка = Валюты.ПустаяСсылка() Тогда
	    ВызватьИсключение "Не найдена валюта евро"
	КонецЕсли;
	
	Возврат НайденнаяСсылка;

КонецФункции // ВалютаДоллар()

Функция ЗначениеСкидкиНаценки(Знач Коллекция, Знач Предоплата)

	ЗначениеСкидкиНаценки = 0;              
	ДатаСреза = ТекущаяДатаСеанса();

	ПараметрыКурсаДоллара = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоллар(), ДатаСреза);
	ПараметрыКурсаЕвро = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаЕвро(), ДатаСреза);

	РежимРасчетаКурсовогоКоэффициента = Коллекция.КСП_РежимРасчетаКурсовогоКоэффициента;

	Если РежимРасчетаКурсовогоКоэффициента = Перечисления.КСП_РежимыРасчетаКурсовогоКоэффициента.USD_EUR Тогда
		КурсоваяКорзина = (ПараметрыКурсаДоллара.Курс * ПараметрыКурсаДоллара.Кратность 
			+ ПараметрыКурсаЕвро.Курс * ПараметрыКурсаЕвро.Кратность) / 2;
	ИначеЕсли РежимРасчетаКурсовогоКоэффициента = Перечисления.КСП_РежимыРасчетаКурсовогоКоэффициента.USD Тогда
		КурсоваяКорзина = ПараметрыКурсаДоллара.Курс * ПараметрыКурсаДоллара.Кратность;
	Иначе
		КурсоваяКорзина = 0;
	КонецЕсли;
		
	Если КурсоваяКорзина = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КСП_КурсовыеСоглашенияСрезПоследних.ПроцентНаценки КАК ПроцентНаценки,
		|	КСП_КурсовыеСоглашенияСрезПоследних.ПроцентПредоплаты КАК ПроцентПредоплаты,
		|	&ПроцентПредоплаты - КСП_КурсовыеСоглашенияСрезПоследних.ПроцентПредоплаты КАК Разность
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.КСП_КурсовыеСоглашения.СрезПоследних(, Коллекция = &Коллекция) КАК КСП_КурсовыеСоглашенияСрезПоследних
		|ГДЕ
		|	&Курс МЕЖДУ КСП_КурсовыеСоглашенияСрезПоследних.КурсОт И КСП_КурсовыеСоглашенияСрезПоследних.КурсДо
		|	И КСП_КурсовыеСоглашенияСрезПоследних.ПроцентПредоплаты <= &ПроцентПредоплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ.ПроцентНаценки КАК ПроцентНаценки,
		|	ВТ.ПроцентПредоплаты КАК ПроцентПредоплаты,
		|	ВТ.Разность КАК Разность
		|ИЗ
		|	ВТ КАК ВТ
		|ГДЕ
		|	ВТ.Разность В
		|			(ВЫБРАТЬ
		|				МИНИМУМ(ВТ.Разность)
		|			ИЗ
		|				ВТ)";
	
	Запрос.УстановитьПараметр("ПроцентПредоплаты", Предоплата);
	Запрос.УстановитьПараметр("Курс", КурсоваяКорзина);
	Запрос.УстановитьПараметр("Коллекция", Коллекция); 

	Результат = Запрос.Выполнить();

	Процент  = 0;	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Процент = Выборка.ПроцентНаценки;
	КонецЦикла;
		
	Возврат Процент;
	
КонецФункции

Функция ОстатокСуммыПоСтроке(Знач СтрокаДерева, Знач Товар, ПараметрыРасчета, Знач ЭтоУмножение = Истина)
	
	Если ЭтоУмножение Тогда
		
	//	Считается не правильно, если будет умножение нужно рассматривать подробнее этот участок	
	//	ГруппаУмножение = ПолучитьГруппуУмножениеРодитель(СтрокаДерева, ПараметрыРасчета);
	//	
	//	ГруппаИгнорирования = ПолучитьГруппуИгнорирования(СтрокаДерева, ГруппаУмножение);
	//	
	//	Если ГруппаУмножение <> Неопределено Тогда
	//		СуммаПримененнойСкидки = Окр(ПолучитьСуммуПримененныхСкидок(ГруппаУмножение.Строки, Товар.КлючСвязи, ПараметрыРасчета, ГруппаИгнорирования), 2);
	//	Иначе
	//		СуммаПримененнойСкидки = 0;
	//	КонецЕсли;		
	//
	//	Сумма = Товар.Сумма - СуммаПримененнойСкидки;
	//	Если Сумма < 0 Тогда
	//		Сумма = 0;
	//	КонецЕсли;
		Сумма = 0;
	Иначе
		Сумма = Товар.Цена * Товар.КоличествоУпаковок;
	КонецЕсли;
	
	Возврат Сумма;
	
КонецФункции

// Параметры:
// 	СтрокаДерева - СтрокаДереваЗначений - описание см. СформироватьДеревоСкидок
// 
Функция ПолучитьИтогРезультатаРасчета(Знач СтрокаДерева, Знач КлючСвязи, ПараметрыРасчета)
	
	Идентификатор = Строка(СтрокаДерева.Ссылка.УникальныйИдентификатор()) + КлючСвязи;
	Сумма = ПараметрыРасчета.КешУмножениеСуммы.Получить(Идентификатор);
	Если Сумма <> Неопределено Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Сумма = 0;
	
	Для Каждого ТекСтрокаДерева Из СтрокаДерева.РезультатРасчета Цикл
		
		Если Не ТекСтрокаДерева.Действует Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрокаДерева.КлючСвязи <> КлючСвязи Тогда
			Продолжить;
		КонецЕсли;
		
		Сумма = Сумма + ТекСтрокаДерева.Сумма;
		
	КонецЦикла;
	
	ПараметрыРасчета.КешУмножениеСуммы.Вставить(Идентификатор, Сумма);
	
	Возврат Сумма;
	
КонецФункции

// Функция получает сумму примененной скидки подчиненных групп для строки товара с учетом иерархии скидок.
//
// Возвращаемое значение:
//	Число - Сумма примененной скидки.
//
Функция ПолучитьСуммуПримененныхСкидок(Знач СтрокиДерева, Знач КлючСвязи, ПараметрыРасчета, Знач ГруппаИгнорирования)
	
	Сумма = 0;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ЭтоГруппа Тогда			
			Если СтрокаДерева = ГруппаИгнорирования Тогда			
				Продолжить;                              			
			КонецЕсли;
			Если СтрокаДерева.Рассчитано Тогда
				Сумма = Сумма + ПолучитьИтогРезультатаРасчета(СтрокаДерева, КлючСвязи, ПараметрыРасчета);
			Иначе
				Сумма = Сумма + ПолучитьСуммуПримененныхСкидок(СтрокаДерева.Строки, КлючСвязи, ПараметрыРасчета, ГруппаИгнорирования);
			КонецЕсли;
		Иначе
			Если СтрокаДерева.Рассчитано Тогда
				Сумма = Сумма + ПолучитьИтогРезультатаРасчета(СтрокаДерева, КлючСвязи, ПараметрыРасчета);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

Функция ПолучитьГруппуУмножениеРодитель(Знач СтрокаДерева, ПараметрыРасчета)
	
	Результат = ПараметрыРасчета.КешУмножениеГруппы.Получить(СтрокаДерева);
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель = Неопределено Тогда
		Результат = Неопределено;
	Иначе
		
		Родитель = СтрокаДерева.Родитель;
		ГруппаУмноженияВерхнегоУровня = ПолучитьГруппуУмножениеРодитель(Родитель, ПараметрыРасчета);
		
		Если ГруппаУмноженияВерхнегоУровня = Неопределено
			И Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
			Результат = Родитель;
		Иначе
			Результат = ПолучитьГруппуУмножениеРодитель(Родитель, ПараметрыРасчета);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыРасчета.КешУмножениеГруппы.Вставить(СтрокаДерева, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьГруппуИгнорирования(Знач СтрокаДерева, Знач ГруппаУмножение)
	
	Перем РодительскаяГруппа;
	
	РодительскаяГруппа = СтрокаДерева.Родитель;
	Если НЕ (ГруппаУмножение <> РодительскаяГруппа И 
		(РодительскаяГруппа.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум
		ИЛИ РодительскаяГруппа.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум
		ИЛИ РодительскаяГруппа.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение)) Тогда
		
		РодительскаяГруппа = Неопределено;
		
	КонецЕсли;
	
	Возврат РодительскаяГруппа;

КонецФункции

