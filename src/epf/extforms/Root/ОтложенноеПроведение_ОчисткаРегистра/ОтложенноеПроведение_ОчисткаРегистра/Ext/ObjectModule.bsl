
#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.3");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","ОтложенноеПроведение_ОчисткаРегистра");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Удалить проведенные документы из регистра");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : ОтложенноеПроведение_ОчисткаРегистра",
		"Форма_ОтложенноеПроведение_ОчисткаРегистра",
		ТипКоманды, 
		Ложь) ;
		
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Выполнить очистку регистра отложенного проведения",
		"ВыполнитьОчисткуОтложенноеПроведение",
		ТипКоманды, 
		Ложь) ;
	
		
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "ВыполнитьОчисткуОтложенноеПроведение" Тогда
		ВыполнитьОчистку();
		
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти 	



// Точка входа
// Обработчик команды формы
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВыполнитьОчистку() Экспорт

	ВремяНач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ИДСессии = Строка(Новый УникальныйИдентификатор);
	
    ЗаписьЖурналаРегистрации("ОтложенноеПроведение_ИмпортИзRabbit_Очистка", 
		УровеньЖурналаРегистрации.Информация,,,
		"Начало сессии очистки отложенного проведения"
		+Символы.ПС+"Сессия ИД: "+ИДСессии);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Рег.ДокументСсылка КАК ДокументСсылка,
		|	Представление(Рег.ДокументСсылка) КАК ПредставлениеДокумента
		|ИЗ
		|	РегистрСведений.ксп_ОтложенноеПроведение КАК Рег
		|Где 
		|	Рег.СтатусПроведения В (&СтатусыПроведения)
		|	И Рег.СтатусОбъекта В (&СтатусыОбъектов)
		|";

	СтатусыПроведения = Новый Массив;
	СтатусыПроведения.Добавить(Перечисления.КСП_СтатусыОтложенногоПроведения.Проведен);
	
	Запрос.УстановитьПараметр("СтатусыПроведения", СтатусыПроведения);

	СтатусыОбъектов = Новый Массив;
	СтатусыОбъектов.Добавить(Перечисления.ксп_СтатусыКачестваДокументов.ОК);

	Запрос.УстановитьПараметр("СтатусыОбъектов", СтатусыОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполнитьПроведениеОдногоДокумента(ВыборкаДетальныеЗаписи.ДокументСсылка, ВыборкаДетальныеЗаписи.ПредставлениеДокумента, ИДСессии);
			
	КонецЦикла;       

	Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНач;
	
	ЗаписьЖурналаРегистрации("ОтложенноеПроведение_ИмпортИзRabbit_Очистка", 
		УровеньЖурналаРегистрации.Ошибка,,,
		"Завершение сессии очистки отложенного проведения"
		+Символы.ПС+"Сессия ИД: "+ИДСессии+". Длительность "+строка(Длительность)+" мс");
	                                                                            
	
КонецФункции


// Обработчик команды формы
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПровестиОдинДокумент(ДокументСсылка) Экспорт
		
	ВыполнитьПроведениеОдногоДокумента(ДокументСсылка, "Проведение одного документа");
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВыполнитьПроведениеОдногоДокумента(ДокументСсылка, ПредставлениеДокумента,  ИДСессии = "")
	
	мд = ДокументСсылка.Метаданные();
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ксп_ОтложенноеПроведение");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ДокументСсылка", ДокументСсылка);

	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		НЗ = РегистрыСведений.ксп_ОтложенноеПроведение.СоздатьНаборЗаписей();
		НЗ.Отбор.ДокументСсылка.Установить(ДокументСсылка);
		НЗ.Прочитать();
		НЗ.Очистить();
		НЗ.Записать();

		ЗафиксироватьТранзакцию();
		
	Исключение   
		ОтменитьТранзакцию();
		
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	    ЗаписьЖурналаРегистрации("ОтложенноеПроведение_ИмпортИзRabbit_Очистка", 
			УровеньЖурналаРегистрации.Ошибка,мд,,
			"Не удалось удалить запись из регистра ОтложенноеПроведение! Документ: "+ПредставлениеДокумента+". Подробности: "+т
			+Символы.ПС+"Сессия ИД: "+ИДСессии,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			
	КонецПопытки;

КонецФункции

