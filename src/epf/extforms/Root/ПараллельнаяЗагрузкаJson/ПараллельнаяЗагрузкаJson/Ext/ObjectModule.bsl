
Перем мВнешняяСистема;
Перем ИмяСобытияЖР;


Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.0");
	ПараметрыРегистрации.Вставить("Наименование","Параллельная загрузка Json");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Паралельная загрузка Json");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ОбработатьПакет_Фон(Знач пИдВызова, ТЗРекордсет, НомерЗадания, ДопПараметры) Экспорт
     
    ИдВызова = мис_ЛоггерСервер.СоздатьИдВызова(пИдВызова,
        "Импорт. ОбработатьПакет_Фон. Номер задания = "+строка(НомерЗадания),,,,); 
	
    млоггер = мис_логгерСервер.getLogger(ИдВызова);
 
    Попытка
         
	  //ЗДЕСЬ КОД ОБРАБОТКИ КОЛЛЕКЦИИ из параметра "_ТЗ"
 
 
        мОбъектовОшибкаИмпорта  = 0;
		мОбъектовСоздано = 0;
		
         Для Каждого Стрк Из ТЗРекордсет Цикл
            Попытка
				ПрочитатьФайлJson(Стрк._Элемент); 
                мОбъектовСоздано = мОбъектовСоздано +1; 
				//count = count + 1;
            Исключение
                мОбъектовОшибкаИмпорта = мОбъектовОшибкаИмпорта + 1;
				мЛоггер.ерр("Error. Details: "+ОписаниеОшибки());
 
            КонецПопытки;
     
        КонецЦикла;
 
 
        //Это не обязательно возвращать в место вызова, но для контроля - желательно
 
        СтруктураОтвета = Новый Структура;
        СтруктураОтвета.Вставить("Ошибка", мОбъектовОшибкаИмпорта);
        СтруктураОтвета.Вставить("Создано", мОбъектовСоздано);
		
        ПоместитьВоВременноеХранилище(СтруктураОтвета, ДопПараметры.АдресОтвета);
     
     
    Исключение
		т = ОписаниеОшибки();
		мЛоггер.ерр("Ошибка, номер задания = %1. Подробности: %2", НомерЗадания, т);
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		мЛоггер.дебаг("Ошибка, номер задания = %1. Подробности: %2", НомерЗадания, т);
    КонецПопытки;
     
КонецПроцедуры 

Функция ЗагрузитьОбъект(СтруктураОбъекта) Экспорт
	
	//id 	= СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;

	//------------------------------------- Заполнение реквизитов
	Попытка			    
		
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Установить(деф.Штрихкод);
		
		//ЕНС. пока не перезаписываем существующие
		НаборЗаписей.Прочитать();                 
		Если НаборЗаписей.количество() > 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НовСтр = НаборЗаписей.Добавить();
		
		НовСтр.Штрихкод = деф.Штрихкод;
		НовСтр.Номенклатура = ксп_импортСлужебный.найтиНоменклатуру(деф.Владелец);
		НовСтр.Характеристика = ксп_импортСлужебный.НайтиХарактеристику(деф.ХарактеристикаНоменклатуры);
		НовСтр.Упаковка = ксп_импортСлужебный.НайтиЕдиницуИзмерения(деф.ЕдиницаИзмерения);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,деф.Код,
			"Штрихкод не загружен! Ошибка в процессе загрузки: <"+деф.Код+">. Подробности: "+т);
	КонецПопытки;	
			
КонецФункции

Процедура ПрочитатьФайлJson(Файл)   
	
	сч_обработано = 0;       
	сч_ошибок = 0;
	
	//ДвоичныеДанные  = ПолучитьИзВременногоХранилища(Адрес);
	//Если 1=0 Тогда
	//	ДвоичныеДанные = новый ДвоичныеДанные("");
	//КонецЕсли; 
	//
	//ИмяФайла = ПолучитьИмяВременногоФайла("json");
	//ДвоичныеДанные.Записать(ИмяФайла);
		
	мЧтениеJSON = Новый ЧтениеJSON;
	//мЧтениеJSON.ОткрытьФайл(ИмяФайла); 
	мЧтениеJSON.ОткрытьФайл(Файл);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	мЧтениеJson.Закрыть(); 
		
	Попытка
		ЗагрузитьОбъект(СтруктураОбъекта);
		сч_обработано = сч_обработано +1;
	Исключение
		сч_ошибок = сч_ошибок + 1;
	КонецПопытки;
	
КонецПроцедуры

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции

мВнешняяСистема = "upp";
ИмяСобытияЖР = "Параллельная загрузка JSon";
