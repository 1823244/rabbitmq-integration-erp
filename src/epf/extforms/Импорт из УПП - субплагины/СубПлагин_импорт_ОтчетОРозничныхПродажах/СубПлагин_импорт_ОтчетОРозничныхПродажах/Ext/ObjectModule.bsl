
Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
Перем ПОМЕТИТЬ;

Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем jsonText;

Перем СобиратьНенайденнуюНоменклатуру Экспорт;
Перем НеНайденнаяНоменклатураМассив;

Перем мЛоггер;
Перем мИдВызова;

Перем мСкладОтправитель;
Перем мСкладПолучатель;
Перем мДоговор;
Перем ТабЗначДляЗаказов;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.13");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СубПлагин_импорт_ОтчетОРозничныхПродажах");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СубПлагин_импорт_ОтчетОРозничныхПродажах");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Импорт документа Отчет о розничных продажах",
		"СубПлагин_импорт_ОтчетОРозничныхПродажах",
		ТипКоманды, 
		Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти 	


// Возвращает структуру. Поля различаются в зависимости от режима загрузки.
// Это нужно для отладки, а не для обычного режима работы.
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, пjsonText = "", СкладЕРП) Экспорт

	мЛоггер = Вычислить("мис_ЛоггерСервер.getLogger(мИдВызова, ""Импорт документов из УПП: ОтчетОРозничныхПродажах"")");
	
	Попытка
		
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			мЛоггер.Варн("Нет свойства type в сообщении! Объект не загружен.");
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.ОтчетОРозничныхПродажах") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;
		
		ПредставлениеДокументаУПП = "ОтчетОРозничныхПродажах №"+деф.Number+" от "+строка(деф.Date);
		
		Попытка
			Результат = Схема_1_ОтчетОРозничныхПродажах(СтруктураОбъекта);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, ,,ТекстОшибки);
			мЛоггер.ерр("В процессе создания документа: %1, произошла ошибка: %2", ПредставлениеДокументаУПП, ТекстОшибки);
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
		//*************************** Экспорт ненайденной номенклатуры ****************
		Попытка
			ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовНоменклатуры(НеНайденнаяНоменклатураМассив);
			мЛоггер.Инфо("Выполнен экспорт ненайденной номенклатуры - %1 позиций", Строка(НеНайденнаяНоменклатураМассив.Количество()), ТекстОшибки);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			мЛоггер.ерр("Ошибка экспорта ненайденной номенклатуры в УПП: %1", ТекстОшибки);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение,,,
				"Ошибка экспорта ненайденной номенклатуры в УПП. Подробности: " + ТекстОшибки);
		КонецПопытки;
		//***************************
		
		Возврат Результат;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		мЛоггер.ерр("Субплагин: Субплагин_RabbitMQ_импорт_из_УПП_Документ_ОтчетОРозничныхПродажах . Подробности: " + ТекстОшибки);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецФункции


#Область Схема_1_ОтчетОРозничныхПродажах

Функция Схема_1_ОтчетОРозничныхПродажах(СтруктураОбъекта) Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "Отчет о розничных продажах (УПП) № " + деф.Number + " от " + строка(деф.Date);
	
	НачатьТранзакцию();
	
	Попытка
		
		ОтчетОРОзничныхПродажахОбъект = СоздатьОтчетОРозничныхПродажах(СтруктураОбъекта);
			
		Если ТабЗначДляЗаказов.Количество() > 0 Тогда
			ВнутреннееПотреблениеОбъект = СоздатьВнутреннееПотребление(СтруктураОбъекта, ОтчетОРОзничныхПродажахОбъект, ТабЗначДляЗаказов);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Результат = ОтчетОРОзничныхПродажахОбъект.Ссылка;
		
	Исключение
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа " + ПредставлениеДокументаИзУПП + ".
			|Подробности: " + СообщениеОбОшибке);
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка загрузки документа (УПП): %1. 
			|Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
		ВызватьИсключение;
		
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
//Функция СоздатьЗаказНаПеремещение(СтруктураОбъекта, СуществующийЗаказСсылка)
Функция СоздатьОтчетОРозничныхПродажах(СтруктураОбъекта)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	СуществующийДокСсылка = СоздатьПолучитьСсылкуДокумента(id.Ref, "ОтчетОРозничныхПродажах");
	
	ПредставлениеДокументаИзУПП = "Отчет о розничных продажах (УПП) № " + деф.Number + " от " + строка(деф.Date);
	
	// -------------------------------------------- БЛОКИРОВКА
	
	//МассивСсылок = Новый Массив;
	//МассивСсылок.Добавить(СуществующийДокСсылка);
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	Если Не ЭтоНовый Тогда
		//Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(СуществующийДокСсылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СуществующийДокСсылка);
	КонецЕсли;
	
	Если Не ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки документ для " + ПредставлениеДокументаИзУПП + ". Подробности: " + СообщениеОбОшибке);
			ОтменитьТранзакцию();
			
			мЛоггер.ерр("Ошибка блокировки документа (УПП): %1. Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
			
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
	
	Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
		ОтменитьТранзакцию();                                             
		мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ПредставлениеДокументаИзУПП);
		Возврат СуществующийДокСсылка;
	КонецЕсли;

    // добавлено 2024-07-03
    Если Действие = ПОМЕТИТЬ Тогда
        ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
        ОбъектДанных.УстановитьПометкуУдаления(Истина);
        РегистрыСведений.ксп_ОтложенноеПроведение.УдалитьОтложенноеПроведение(СуществующийДокСсылка);//добавлено 2024-07-03
        ЗафиксироватьТранзакцию();
		мЛоггер.дебаг("Действие = ПОМЕТИТЬ. Документ будет помечен на удаление: %1", ПредставлениеДокументаИзУПП);
		Возврат СуществующийДокСсылка;
	КонецЕсли;
		
	Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
		ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
		ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ЗафиксироватьТранзакцию();
		мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ПредставлениеДокументаИзУПП);
		Возврат СуществующийДокСсылка;
	КонецЕсли;
	
	Если Действие = ОБНОВИТЬ Тогда
		ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
		мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ПредставлениеДокументаИзУПП);
	ИначеЕсли Действие = СОЗДАТЬ Тогда
		ОбъектДанных = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		СсылкаНового = Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ПредставлениеДокументаИзУПП);
	Иначе
		ОтменитьТранзакцию();
		ТекстСообщения = "Действие = Неизвестое действие: "+Строка(Действие)+". Документ: " + ПредставлениеДокументаИзУПП;
		мЛоггер.ерр(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ОбъектДанных.Дата = деф.Date;
	//ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	мВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(деф.ТипЦен, мВнешняяСистема);
	Если НЕ ЗначениеЗаполнено(мВидЦены) Тогда
		мВидЦены = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ДокументОтчетОРозничныхПродажах_ВидЦены", мВнешняяСистема);
	КонецЕсли;
	ОбъектДанных.ВидЦены = мВидЦены;
	
	ОбъектДанных.Валюта = Справочники.Валюты.НайтиПоКоду("643");
	
	мКассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ);
	ОбъектДанных.КассаККМ = мКассаККМ;
	
	ОбъектДанных.Комментарий = "[УПП №" + деф.Number + " от " + деф.Date + " ]. Оригинальный коммент.: "+деф.Комментарий;
	
	Если деф.УчитыватьНДС Тогда
		ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	КонецЕсли;
	
	ОбъектДанных.СуммаДокумента  = деф.СуммаДокумента;
	ОбъектДанных.ЦенаВключаетНДС = деф.СуммаВключаетНДС;
	
	мОрганизация	= ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Организация	= мОрганизация;
	ОбъектДанных.Подразделение = СоздатьПолучитьСсылкуСправочника(деф.Подразделение.Ref, "СтруктураПредприятия");
	
	//Сарычев
	//Если деф.Склад.Свойство("Ref") Тогда 
	//	СкладУПП = Справочники.ксп_СкладыУПП.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.Склад.Ref));
	//	//ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение, ,,"Нашли склад УПП: "+ строка(СкладУПП));
	//	мСкладОтправитель = Справочники.КСП_ВидыОперацийПоСкладамУПП.ПоМэппингу(СкладУПП);
	//Иначе
	//	СкладУПП = Справочники.ксп_СкладыУПП.ПустаяСсылка();
	//	ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение, ,,"Склад УПП не заполнен ");
	//	мСкладОтправитель = Справочники.КСП_ВидыОперацийПоСкладамУПП.ПустаяСсылка();
	//КонецЕсли; 
	//--
	
	//СкладУПП = СоздатьПолучитьСсылкуСправочника(деф.Склад.Ref, "КСП_СкладыУПП");
	//Если НЕ ЗНачениезаполнено(СкладУПП) Тогда
	//	
	//	ВидДокумента 		= СтруктураОбъекта.type;
	//	Склад 				= Неопределено;
	//	СкладОтправитель 	= Неопределено;
	//	СкладПолучатель 	= Неопределено;
	//	ТекстСообщения 		= "Не найден склад УПП!";
	//	ЛогикаСклад			= Неопределено;
	//	ЛогикаПеремещения 	= Неопределено;
	//	Обработчик 			= Неопределено;
	//	РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
	//		ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаИзУПП,
	//		деф.Number,деф.date,Ложь,id.ref);
	//	
	//	мЛоггер.ерр("Документ не загружен! Не найден склад УПП для: %1", ПредставлениеДокументаИзУПП);
	//	Возврат Неопределено;
	//	
	//КонецЕсли;
	
	//мСклад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема); //?
	СкладУПП = Справочники.ксп_СкладыУПП.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.Склад.Ref));
	мСклад = Справочники.КСП_ВидыОперацийПоСкладамУПП.ПоМэппингу(СкладУПП);
	Если НЕ ЗначениеЗаполнено(мСклад.ВерсияДанных) Тогда 
		СообщениеОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! СкладУПП не найден! УИД склада: "+деф.Склад.Ref +
			Символы.ПС+ ПредставлениеДокументаИзУПП + ". Подробности: " + СообщениеОбОшибке);
		Возврат СуществующийДокСсылка;
	КонецЕсли;
	
	ОбъектДанных.Склад = мСклад;
	
	ОбъектДанных.ПоРезультатамИнвентаризации = Ложь;
	ОбъектДанных.ВидыЗапасовУказаныВручную = Ложь;
	ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ = Ложь;
	
	ОбъектДанных.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	ОбъектДанных.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	
	мОтветственный = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию(); //?
	ОбъектДанных.Ответственный = мОтветственный;
	
	//ВидОперации = "";
	//НайденноеЗначение = "";
	//Если деф.ВидОперации.свойство("Значение",НайденноеЗначение) Тогда
	//	ВидОперации = НайденноеЗначение;
	//КонецЕсли;
	
	////ЕНС. 2024-01-16. Договор теперь хранится в РС "КСП_КомиссионерыДляРеализацийУПП" для каждого контрагента
	//Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	//мКонтрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	//ОбъектДанных.Контрагент = ?(ЗначениеЗаполнено(мКонтрагент), мКонтрагент, Справочники.Контрагенты.ПустаяСсылка());
	//УзелКонтрагента = Неопределено;
	//*ДоговорКонтрагента = ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента, УзелКонтрагента, Контрагент);
	//ЭтоКомиссионер = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.ЭтоКомиссионер(мВнешняяСистема, Контрагент, ДоговорКонтрагента, деф.date); 
	//*мСкладПолучатель = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.СкладПолучатель(мВнешняяСистема, Контрагент, ДоговорКонтрагента, деф.date);
	//мДоговор = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.Договор(мВнешняяСистема, Контрагент, деф.date);
	
	
	//------------------------------------------------------     ТЧ Товары
	
	МассивУдаляемыхСтрок = Новый Массив;
	ТабЗначДляЗаказов.Очистить();
		
	Если деф.ТЧТовары.Количество()> 0 Тогда
		
		//Для Каждого ЭлемСтруктуры Из деф.ТЧТовары[0] Цикл
		//	ТабЗначДляЗаказов.Колонки.Добавить(ЭлемСтруктуры.Ключ);
		//КонецЦикла;
		
		ОбъектДанных.Товары.Очистить();
		
		// СкидкаВсего = 0;
		Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
			стрк = деф.ТЧТовары[счТовары];
			СтрокаТЧ = ОбъектДанных.Товары.Добавить();
			
			//////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
			
			Если стрк.Номенклатура.Свойство("identification") Тогда
				// это полный объект номенклатуры.
				ТэгНоменклатуры = стрк.Номенклатура.identification;
			Иначе 
				ТэгНоменклатуры = стрк.Номенклатура;
			КонецЕсли;
			
			_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
			
			Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
				НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
				
				НомГУИД = "";
				Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
					Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
						НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТЧ.Номенклатура = _Номенклатура;
			
			///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)
			
			мХарактеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
			СтрокаТЧ.Характеристика = мХарактеристика;
			
			//СтрокаТЧ.Упаковка = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
			//СтрокаТЧ.Упаковка = СправочникСсылка.УпаковкиЕдиницыИзмерения;
			СтрокаТЧ.Количество = стрк.Количество;
			СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
			
			АвтСкидка = 0;
			Если ЗначениеЗаполнено (стрк.ПроцентАвтоматическихСкидок) Тогда
				Если стрк.ПроцентАвтоматическихСкидок<>"" Тогда
					АвтСкидка = Число(стрк.ПроцентАвтоматическихСкидок);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТЧ.ПроцентРучнойСкидки = АвтСкидка;
			СтрокаТЧ.Цена = Число(стрк.Цена) * (100-АвтСкидка) / 100; 
			СтрокаТЧ.СуммаРучнойСкидки = Число(стрк.Цена) * АвтСкидка / 100;
			СтрокаТЧ.Сумма = стрк.Сумма ;      
			СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюУПП(стрк.СтавкаНДС);
			СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
			
			мПартнер = Справочники.Партнеры.НайтиПоНаименованию(Строка(ОбъектДанных.Контрагент));
			СтрокаТЧ.Партнер = мПартнер; //клиент
			
			Если СтрокаТЧ.Цена = 0 Тогда
				
				СтрокаТабЗначДляЗаказов = ТабЗначДляЗаказов.Добавить();
				
				СтрокаТабЗначДляЗаказов.Номенклатура = _Номенклатура;
				СтрокаТабЗначДляЗаказов.ХарактеристикаНоменклатуры = мХарактеристика;
				СтрокаТабЗначДляЗаказов.Количество = стрк.Количество;
				
				МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// удаление строк с конца таблицы
	Если МассивУдаляемыхСтрок.Количество() > 0 Тогда
		КолУдал = МассивУдаляемыхСтрок.Количество()-1;
		Пока КолУдал > -1 Цикл
			ОбъектДанных.Товары.Удалить(МассивУдаляемыхСтрок[КолУдал]);
			КолУдал = КолУдал - 1;
		КонецЦикла;
	КонецЕсли;
	
	Если деф.ТЧОплатаПлатежнымиКартами.Количество()> 0 Тогда
		
		ОбъектДанных.ОплатаПлатежнымиКартами.Очистить();
		ДоговорПодключения = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка(
				"ДокументОтчетОРозничныхПродажах_ДоговорПодключения", мВнешняяСистема);
		
		Для счТовары = 0 По деф.ТЧОплатаПлатежнымиКартами.Количество()-1 Цикл
			стрк = деф.ТЧОплатаПлатежнымиКартами[счТовары];
			СтрокаТЧ = ОбъектДанных.ОплатаПлатежнымиКартами.Добавить();
			СтрокаТЧ.Сумма = стрк.Сумма;
			СтрокаТЧ.ВидОплаты = РегистрыСведений.ксп_МэппингПеречислениеТипыПлатежнойСистемыККТ.ПоМэппингу(
				стрк.ВидОплаты.Ref,"retail");
			СтрокаТЧ.ДоговорПодключения = ДоговорПодключения;
		КонецЦикла;
		
	КонецЕсли;
	
	//------------------------------------------------------ ФИНАЛ	
	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
	Если ОбъектДанных.Проведен Тогда
		ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе 
		ОбъектДанных.Записать();
	КонецЕсли;
	
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	
	
	Возврат ОбъектДанных;
	
КонецФункции

Функция СоздатьВнутреннееПотребление(СтруктураОбъекта, ОтчетОРОзничныхПродажахОбъект, ТабЗначСТоварами)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "Внутреннее потребление(УПП) № " + деф.Number + " от " + строка(деф.Date);
	
	СуществующийЗаказСсылка = СоздатьПолучитьСсылкуДокумента(id.Ref, "ВнутреннееПотребление");
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если ЗначениеЗаполнено(СуществующийЗаказСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	Если НЕ ЭтоНовый Тогда
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(СуществующийЗаказСсылка.Метаданные().ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СуществующийЗаказСсылка);
	КонецЕсли;
	
	Если Не ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки документ для " + ПредставлениеДокументаИзУПП + ". Подробности: " + СообщениеОбОшибке);
			ОтменитьТранзакцию();
			
			мЛоггер.ерр("Ошибка блокировки документа (УПП): %1. Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
			
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийЗаказСсылка, деф);
	
	Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
		ОтменитьТранзакцию();                                             
		мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ПредставлениеДокументаИзУПП);
		Возврат СуществующийЗаказСсылка;
	КонецЕсли;
	
    // добавлено 2024-07-03
    Если Действие = ПОМЕТИТЬ Тогда
        ОбъектДанных = СуществующийЗаказСсылка.ПолучитьОбъект();
        ОбъектДанных.УстановитьПометкуУдаления(Истина);
        РегистрыСведений.ксп_ОтложенноеПроведение.УдалитьОтложенноеПроведение(СуществующийЗаказСсылка);//добавлено 2024-07-03
        ЗафиксироватьТранзакцию();
		мЛоггер.дебаг("Действие = ПОМЕТИТЬ. Документ будет помечен на удаление: %1", ПредставлениеДокументаИзУПП);
		Возврат СуществующийЗаказСсылка;
	КонецЕсли;

	Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
		ОбъектДанных = СуществующийЗаказСсылка.ПолучитьОбъект();
		ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ЗафиксироватьТранзакцию();
		мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ПредставлениеДокументаИзУПП);
		Возврат СуществующийЗаказСсылка;
	КонецЕсли;
	
	Если Действие = ОБНОВИТЬ Тогда
		ОбъектДанных = СуществующийЗаказСсылка.ПолучитьОбъект();
		мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ПредставлениеДокументаИзУПП);
	ИначеЕсли Действие = СОЗДАТЬ Тогда
		ОбъектДанных = Документы.ВнутреннееПотребление.СоздатьДокумент();
		СсылкаНового = Документы.ВнутреннееПотребление.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ПредставлениеДокументаИзУПП);
	Иначе
		ОтменитьТранзакцию();
		ТекстСообщения = "Действие = Неизвестое действие: "+Строка(Действие)+". Документ: " + ПредставлениеДокументаИзУПП;
		мЛоггер.ерр(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	//ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	мКоментарий = "Отчет о розничных продажах (УПП) Номер: " + Строка(ОтчетОРОзничныхПродажахОбъект.Номер)+ ", Дата: " + Строка(ОтчетОРОзничныхПродажахОбъект.Дата);
	ОбъектДанных.Комментарий = мКоментарий;
	
	ОбъектДанных.Организация = ОтчетОРОзничныхПродажахОбъект.Организация;
	ОбъектДанных.Подразделение = ОтчетОРОзничныхПродажахОбъект.Подразделение;
	ОбъектДанных.Склад = ОтчетОРОзничныхПродажахОбъект.Склад;
	ОбъектДанных.Статус = Перечисления.СтатусыВнутреннихПотреблений.Принято;
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	мОтветственный = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию(); //?
	ОбъектДанных.Ответственный = мОтветственный;
	
	ТабЗначСТоварами.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "Количество");
	
	//------------------------------------- ТЧ Товары
	
	ОбъектДанных.Товары.Очистить();
	Для Каждого ТабЗначСтрока Из ТабЗначСТоварами Цикл
		
		СтрокаТаблицы = ОбъектДанных.Товары.Добавить();
		
		СтрокаТаблицы.Номенклатура = ТабЗначСтрока.Номенклатура;
		СтрокаТаблицы.Характеристика = ТабЗначСтрока.ХарактеристикаНоменклатуры;
		СтрокаТаблицы.КоличествоУпаковок = ТабЗначСтрока.Количество;
		СтрокаТаблицы.Количество = ТабЗначСтрока.Количество;
		СтрокаТаблицы.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ОтклонениеВСтоимостиТоваров;
		
	КонецЦикла;
	
	//------------------------------------- ФИНАЛ
	
	Попытка
		
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
	Исключение
		
		СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
		"Объект не загружен! Ошибка в процессе загрузки документа "+ПредставлениеДокументаИзУПП+". Подробности: "+СообщениеОбОшибке);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка загрузки документа (УПП): %1. Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ОбъектДанных;
	
КонецФункции

Функция ПолучитьСкладERP(СкладУПП) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СкладУПП", СкладУПП);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП КАК СкладУПП,
	|	КСП_ВидыОперацийПоСкладамУПП.СкладЕРП КАК СкладЕРП,
	|	КСП_ВидыОперацийПоСкладамУПП.Ссылка КАК Ссылка,
	|ИЗ
	|	Справочник.КСП_ВидыОперацийПоСкладамУПП КАК КСП_ВидыОперацийПоСкладамУПП
	|ГДЕ
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП = &СкладУПП";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		мЛоггер.Варн("Не найдена СкладУПП! - " + СкладУПП);
		Возврат СкладУПП;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СкладЕРП;
	
КонецФункции

Функция ПолучитьЛогикуСклада(СкладУПП) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СкладУПП", СкладУПП);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	КСП_ВидыОперацийПоСкладамУПП.ЛогикаОбработкиВШапке КАК ЛогикаОбработки
	|ИЗ
	|	Справочник.КСП_ВидыОперацийПоСкладамУПП КАК КСП_ВидыОперацийПоСкладамУПП
	|ГДЕ
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП = &СкладУПП";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		мЛоггер.Варн("Не найдена логика склада! - " + СкладУПП);
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ЛогикаОбработки;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных, СкладЕРП)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition; 
	
	//------------------------------------- Заполнение реквизитов -----------------------------------
	
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ДатаПоступления = ОбъектДанных.Дата;
	ОбъектДанных.Количество = деф.Количество;
	ОбъектДанных.КоличествоУпаковок = деф.Количество;
	ОбъектДанных.Склад = СкладЕРП;
	ОбъектДанных.Комментарий = "[УПП № "+Строка(деф.Number)+" от "+Строка(ОбъектДанных.Дата)+"]"+деф.Комментарий;
	
	///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
	
	Если деф.Номенклатура.Свойство("identification") Тогда
		// это полный объект номенклатуры.
		ТэгНоменклатуры = деф.Номенклатура.identification;
	Иначе 
		ТэгНоменклатуры = деф.Номенклатура;
	КонецЕсли;
	
	_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
	
	Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
		НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
		
		НомГУИД = "";
		Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
			Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
				НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектДанных.Номенклатура = _Номенклатура;
	
	///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)	
	
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);
	ОбъектДанных.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
	ОбъектДанных.СтатусУказанияСерий = 0;	
	ОбъектДанных.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(деф.ХарактеристикаНоменклатуры);
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
	
	//------------------------------------------------------     ТЧ Товары
	
	ОбъектДанных.Товары.Очистить();
	
	Для счТовары = 0 По деф.ТЧКомплектующие.Количество()-1 Цикл
		стрк = деф.ТЧКомплектующие[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();
		
		
		//СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);
		
		СтрокаТЧ.ДоляСтоимости = стрк.ДоляСтоимости;
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
		СтрокаТЧ.КодСтроки = счТовары + 1;
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		
		//////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
		
		Если стрк.Номенклатура.Свойство("identification") Тогда
			// это полный объект номенклатуры.
			ТэгНоменклатуры = стрк.Номенклатура.identification;
		Иначе 
			ТэгНоменклатуры = стрк.Номенклатура;
		КонецЕсли;
		
		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
		
		Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
			НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
			
			НомГУИД = "";
			Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
				Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
					НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = _Номенклатура;
		
		///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)
		
		СтрокаТЧ.СтатусУказанияСерий = 0;
		
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		
	КонецЦикла;
	
	//------------------------------------------------------ ФИНАЛ
	
	Возврат ОбъектДанных;
	
КонецФункции

#КонецОбласти


#Область СлужебныеЗаполненияИПолученияСсылок

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//	ВидОбъекта 	- строка - Наименование метеданных
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта) Экспорт
	
	СуществующийОбъект = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе 
		
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		
		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//	ВидОбъекта 	- строка - Наименование метеданных
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуСправочника(ГУИД, ВидОбъекта) Экспорт
	
	СуществующийОбъект = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе 
		
		ОбъектДанных = Справочники[ВидОбъекта].СоздатьЭлемент();
		СсылкаНового = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		
		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область Тестирование

// вызывается из формы
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(JsonText) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(JsonText);	
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	//Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда  //Сарычев
	Если ТипЗнч(СтруктураОбъекта) = Тип("Структура") Тогда //Сарычев
		
		НеНайденнаяНоменклатураМассив = Новый Массив;
		
		//Для Каждого эл из СтруктураОбъекта Цикл
		//	ЗагрузитьОбъект(эл);
		//КонецЦикла;
		
		Рез = Новый Структура;		
		Рез = ЗагрузитьОбъект(СтруктураОбъекта,,); //Сарычев
		Рез.Вставить("НеНайденнаяНоменклатураМассив", НеНайденнаяНоменклатураМассив);
		Возврат Рез; 
		
	Иначе       
		Рез = Новый Структура;
		Рез = ЗагрузитьОбъект(СтруктураОбъекта,,);
	    Возврат Рез;
	КонецЕсли;
	
	
КонецФункции 

#КонецОбласти

// Используется в  ксп_ИмпортСлужебный.ПроверитьКачествоДанных()
//
// Параметры:
//  ДокументОбъект  - ДокументСсылка - <описание параметра>
//
// Возвращаемое значение:
//  ТЗ, Колонки:
//   * ИмяТЧ
//   * ИмяКолонки
//
Функция ТабличныеЧастиДляПроверки(ДокументСсылка = Неопределено) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяТЧ");
	ТЗ.Колонки.Добавить("ИмяКолонки");
	
	Если ДокументСсылка = Неопределено 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "Товары";
		НовСтр.ИмяКолонки = "Номенклатура";
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "Товары";
		НовСтр.ИмяКолонки = "Характеристика";
		
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

 Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции


мВнешняяСистема = "upp";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
СобиратьНенайденнуюНоменклатуру = Истина;
НеНайденнаяНоменклатураМассив = Новый Массив;

ТабЗначДляЗаказов = Новый ТаблицаЗначений;
ТабЗначДляЗаказов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ТабЗначДляЗаказов.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
ТабЗначДляЗаказов.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15));

НЕ_ЗАГРУЖАТЬ = 1;
СОЗДАТЬ = 2;
ОБНОВИТЬ = 3;
ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;
ПОМЕТИТЬ = 5;
