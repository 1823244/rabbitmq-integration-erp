Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
Перем ПОМЕТИТЬ; //добавлено 2024-07-03

Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем jsonText;
Перем СобиратьНенайденнуюНоменклатуру Экспорт;
Перем НеНайденнаяНоменклатураМассив;

Перем мЛоггер;
Перем мИдВызова;
Перем мСкладОтправитель;
Перем мСкладПолучатель;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.10");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СубПлагин_док_ПеремещениеТоваров_В_Магазин_ч1");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СубПлагин_док_ПеремещениеТоваров_В_Магазин_ч1");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : СубПлагин_док_ПеремещениеТоваров_В_Магазин_ч1",
		"Форма_СубПлагин_док_ПеремещениеТоваров_В_Магазин_ч1",
		ТипКоманды, 
		Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти 	


#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "", СкладЕРПОтправитель = Неопределено, СкладЕРППолучатель = Неопределено ) Экспорт
	
	мЛоггер = Вычислить("мис_ЛоггерСервер.getLogger(мИдВызова, ""Субплагин Импорт документов из УПП: ПеремещениеТоваров_В_Магазин_ч1"")");
	
	мСкладОтправитель = СкладЕРПОтправитель;
	мСкладПолучатель = СкладЕРППолучатель;
	
	Попытка
		
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			Возврат Неопределено;
		КонецЕсли;
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.ПеремещениеТоваров") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		def = СтруктураОбъекта.definition;
		//
		//мЛоггер.Инфо("Субплагин. Версия " + Строка(СведенияОВнешнейОбработке().Версия) + ". Импорт док. УПП ПеремещениеТоваров_В_Магазин_ч1 №" + def.Number);
		//
		ПредставлениеДокументаИзУПП = "ПеремещениеТоваров (УПП) № "+def.Number+" от "+строка(def.Date);
		
		Рез = СоздатьДокументыПоСхемеПеремещения_1(СтруктураОбъекта);
		
		//*************************** Экспорт ненайденной номенклатуры ****************
		Попытка
			ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовНоменклатуры(НеНайденнаяНоменклатураМассив);
			Сообщить("Выполнен экспорт ненайденной номенклатуры - " + Строка(НеНайденнаяНоменклатураМассив.Количество()) + " позиций");
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Сообщить("Ошибка экспорта ненайденной номенклатуры в УПП.");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение,,,
				"Ошибка экспорта ненайденной номенклатуры в УПП.
				|Подробности: " + ТекстОшибки);
		КонецПопытки;
		//***************************
		
		Возврат Рез;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		мЛоггер.ерр("Субплагин ПеремещениеТоваров_В_Магазин_ч1.
			|Документ : " + ПредставлениеДокументаИзУПП + "
			|Подробности: " + ТекстОшибки);
		ВызватьИсключение;// для помещения в retry
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти 	


#Область Схема_Перемещение_1

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: структура
//
Функция СоздатьДокументыПоСхемеПеремещения_1(СтруктураОбъекта)
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаказНаПеремещение", Неопределено);
	Результат.Вставить("РО", Неопределено);
	Результат.Вставить("Перемещение", Неопределено);

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "ПеремещениеТоваров (УПП) № "+деф.Number+" от "+строка(деф.Date);
	
	//СуществующийЗаказСсылка 		= Документы["ЗаказНаПеремещение"].ПолучитьСсылку(Новый УникальныйИдентификатор(id.ref));
	//СуществующийРОСсылка 			= Документы["РасходныйОрдерНаТовары"].ПолучитьСсылку(Новый УникальныйИдентификатор(id.ref));
	//СуществующийПеремещениеСсылка 	= Документы["ПеремещениеТоваров"].ПолучитьСсылку(Новый УникальныйИдентификатор(id.ref));

	СуществующийЗаказСсылка			= ПолучитьСсылкуДокументаПоДаннымID(id, "ЗаказНаПеремещение");
	СуществующийРОСсылка			= ПолучитьСсылкуДокументаПоДаннымID(id, "РасходныйОрдерНаТовары");
	СуществующийПеремещениеСсылка	= ПолучитьСсылкуДокументаПоДаннымID(id, "ПеремещениеТоваров");

	Результат.Вставить("ЗаказНаПеремещение", СуществующийЗаказСсылка);
	Результат.Вставить("РО", СуществующийРОСсылка);
	Результат.Вставить("Перемещение", СуществующийПеремещениеСсылка);
	
	// -------------------------------------------- БЛОКИРОВКА
	
	ЭтоНовый = Истина;
	Если ЗначениеЗаполнено(СуществующийЗаказСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	Если НЕ ЭтоНовый Тогда
		МассивСсылок.Добавить(СуществующийЗаказСсылка);
		МассивСсылок.Добавить(СуществующийРОСсылка);
		МассивСсылок.Добавить(СуществующийПеремещениеСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка блокировки цепочки документов для "+ПредставлениеДокументаИзУПП+".
			|Подробности: "+СообщениеОбОшибке);
			ОтменитьТранзакцию();
			
			мЛоггер.ерр("Ошибка загрузки документа (УПП): %1. Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
			
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	// -------------------------------------------- СОБЫТИЕ ДОКУМЕНТА
	
	Попытка
		Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийЗаказСсылка, деф);
		
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ПредставлениеДокументаИзУПП);
			Возврат Результат;
		КонецЕсли;
		
        // добавлено 2024-07-03
        Если Действие = ПОМЕТИТЬ Тогда
			ЗаказНаПеремещениеОбъект = СуществующийЗаказСсылка.ПолучитьОбъект();
			ЗаказНаПеремещениеОбъект.УстановитьПометкуУдаления(Истина);
			
			РООбъект = СуществующийРОСсылка.ПолучитьОбъект();
			РООбъект.УстановитьПометкуУдаления(Истина);
			
			ПеремещениеОбъект = СуществующийПеремещениеСсылка.ПолучитьОбъект();
			ПеремещениеОбъект.УстановитьПометкуУдаления(Истина);

			РегистрыСведений.ксп_ОтложенноеПроведение.УдалитьОтложенноеПроведение(СуществующийЗаказСсылка);//добавлено 2024-07-03
			РегистрыСведений.ксп_ОтложенноеПроведение.УдалитьОтложенноеПроведение(СуществующийРОСсылка);//добавлено 2024-07-03
			РегистрыСведений.ксп_ОтложенноеПроведение.УдалитьОтложенноеПроведение(СуществующийПеремещениеСсылка);//добавлено 2024-07-03

			ЗафиксироватьТранзакцию();
			мЛоггер.дебаг("Действие = ПОМЕТИТЬ. Документ будет помечен на удаление: %1", ПредставлениеДокументаИзУПП);
			Возврат Результат;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ЗаказНаПеремещениеОбъект = СуществующийЗаказСсылка.ПолучитьОбъект();
			ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
			РООбъект = СуществующийРОСсылка.ПолучитьОбъект();
			РООбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
			ПеремещениеОбъект = СуществующийПеремещениеСсылка.ПолучитьОбъект();
			ПеремещениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			
			ЗафиксироватьТранзакцию();
			мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ПредставлениеДокументаИзУПП);
			
			Возврат Результат;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ЗаказНаПеремещениеОбъект 	= СуществующийЗаказСсылка.ПолучитьОбъект();
			РООбъект 					= СуществующийРОСсылка.ПолучитьОбъект();
			ПеремещениеОбъект 			= СуществующийПеремещениеСсылка.ПолучитьОбъект();
			
			мЛоггер.инфо("Действие = Обновить. Документы будут обновлены: %1", ПредставлениеДокументаИзУПП);
			
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ЗаказНаПеремещениеОбъект 	= Документы.ЗаказНаПеремещение.СоздатьДокумент();
			СсылкаНового 				= Документы.ЗаказНаПеремещение.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			ЗаказНаПеремещениеОбъект.УстановитьСсылкуНового(СсылкаНового);

			РООбъект 					= Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
			СсылкаНового 				= Документы.РасходныйОрдерНаТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			РООбъект.УстановитьСсылкуНового(СсылкаНового);

			ПеремещениеОбъект 			= Документы.ПеремещениеТоваров.СоздатьДокумент();
			СсылкаНового 				= Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			ПеремещениеОбъект.УстановитьСсылкуНового(СсылкаНового);
			
			мЛоггер.инфо("Действие = Создать. Документы будут созданы: %1", ПредставлениеДокументаИзУПП);
		Иначе 
			ОтменитьТранзакцию();
			ТекстСообщения = "Действие = Неизвестое действие: "+Строка(Действие)+". Документ: " + ПредставлениеДокументаИзУПП;
			мЛоггер.ерр(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
		// -------------------------------------------- ЗАКАЗ НА ПЕРЕМЕЩЕНИЕ
		
		ЗаполнитьРеквизиты_ЗаказНаПеремещение(СтруктураОбъекта, ЗаказНаПеремещениеОбъект);
		
		// -------------------------------------------- РАСХОДНЫЙ ОРДЕР
		
		ЗаполнитьРеквизиты_РасходныйОрдер(СтруктураОбъекта, РООбъект, ЗаказНаПеремещениеОбъект);
		
		// -------------------------------------------- ПЕРЕМЕЩЕНИЕ
		
		ЗаполнитьРеквизиты_Перемещение(СтруктураОбъекта, ПеремещениеОбъект, РООбъект, ЗаказНаПеремещениеОбъект);
		
		// -------------------------------------------- ПОСТ ОБРАБОТКА
		
		#Область Справочник_КСП_РезультатыИмпортаУПП
		СтруктураПараметры = Справочники.КСП_РезультатыИмпортаУПП.СтруктураПараметров();
	
		СтруктураПараметры.Вставить("ВидДокумента", "Документ.ПеремещениеТоваров");
		СтруктураПараметры.Вставить("Номер", деф.Number);
		СтруктураПараметры.Вставить("Дата", деф.Date);
		СтруктураПараметры.Вставить("ГУИД", id.ref);
		СтруктураПараметры.Вставить("Проведен", деф.IsPosted);
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ЗаказНаПеремещениеОбъект.Ссылка);
		МассивДокументов.Добавить(РООбъект.Ссылка);
		МассивДокументов.Добавить(ПеремещениеОбъект.Ссылка);
		
		СтруктураПараметры.Вставить("МассивДокументов", МассивДокументов);
		
		Справочники.КСП_РезультатыИмпортаУПП.ДобавитьЗапись(СтруктураПараметры);
		#КонецОбласти
		
		ЗафиксироватьТранзакцию();
		
		мЛоггер.инфо("Записан Документ: %1.
			|Записан Документ: %2.
			|Записан Документ: %3.
			|Исходный док. УПП: %4.", 
			ЗаказНаПеремещениеОбъект, РООбъект, ПеремещениеОбъект, ПредставлениеДокументаИзУПП);
		
		Результат.Вставить("ЗаказНаПеремещение", ЗаказНаПеремещениеОбъект.Ссылка);
		Результат.Вставить("РО", РООбъект.Ссылка);
		Результат.Вставить("Перемещение", ПеремещениеОбъект.Ссылка);
		
		Возврат Результат;
		
	Исключение
		
		ТекстОшибки = "Объект не загружен! Ошибка в процессе загрузки документа " + ПредставлениеДокументаИзУПП + ".
			|Подробности: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр(ТекстОшибки);
		
	КонецПопытки;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗаполнитьРеквизиты_ЗаказНаПеремещение(СтруктураОбъекта, ЗаказНаПеремещениеОбъект)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	//------------------------------------- Заполнение реквизитов
	
	//ЗаказНаПеремещениеОбъект.Номер = деф.Number;
	ЗаказНаПеремещениеОбъект.Дата = деф.Date;
	ЗаказНаПеремещениеОбъект.ПометкаУдаления = деф.DeletionMark;
	ЗаказНаПеремещениеОбъект.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ЗаказНаПеремещениеОбъект.СкладОтправитель = мСкладОтправитель;
	ЗаказНаПеремещениеОбъект.СкладПолучатель = мСкладПолучатель;
	ЗаказНаПеремещениеОбъект.ЖелаемаяДатаПоступления = ЗаказНаПеремещениеОбъект.Дата;
	ЗаказНаПеремещениеОбъект.ВариантПриемкиТоваров = перечисления.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных;
	ЗаказНаПеремещениеОбъект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний", Истина);
	ЗаказНаПеремещениеОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
	ЗаказНаПеремещениеОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ЗаказНаПеремещениеОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	
	ЗаказНаПеремещениеОбъект.Комментарий = СтрШаблон("схема В_Магазин_ч1: [УПП ПеремещениеТоваров № %1 от %2 ]
		|мСкладОтправитель: %3
		|мСкладПолучатель: %4
		|Оригинальный комментарий: %5",
		строка(деф.number),
		строка(деф.date),
		мСкладОтправитель,
		мСкладПолучатель,
		деф.Комментарий,);
	
	////------------------------------------------------------     ТЧ Товары
	
	ЗаказНаПеремещениеОбъект.Товары.Очистить();
	
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ЗаказНаПеремещениеОбъект.Товары.Добавить();
		
		//////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
		
		Если стрк.Номенклатура.Свойство("identification") Тогда
			// это полный объект номенклатуры.
			ТэгНоменклатуры = стрк.Номенклатура.identification;
		Иначе 
			ТэгНоменклатуры = стрк.Номенклатура;
		КонецЕсли;
		
		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
		
		Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
			НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
			
			НомГУИД = "";
			Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
				Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
					НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = _Номенклатура;
		
		///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)
		
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		СтрокаТЧ.НачалоОтгрузки = ЗаказНаПеремещениеОбъект.Дата;
		// пока не надо
		//СтрокаТЧ.Упаковка = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
		
		//	СтрокаТЧ.КодСтроки = стрк.КодСтроки;
			
	КонецЦикла;
	
	//------------------------------------------------------ ФИНАЛ	
	
	ЗаказНаПеремещениеОбъект.ОбменДанными.Загрузка = Ложь;
	ЗаказНаПеремещениеОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
	Если ЗаказНаПеремещениеОбъект.Проведен Тогда
		ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе 
		ЗаказНаПеремещениеОбъект.Записать();
	КонецЕсли;
	
	// Документ будет помещен в Отложенное проведение
	jsonText = "";
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ЗаказНаПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ЗаказНаПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ЗаказНаПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ЗаказНаПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ЗаказНаПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗаполнитьРеквизиты_РасходныйОрдер(СтруктураОбъекта, РООбъект, ЗаказНаПеремещениеОбъект)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	РООбъект.Дата = деф.Date;
	РООбъект.ПометкаУдаления = деф.DeletionMark;
	
	РООбъект.Склад = мСкладОтправитель;
	РООбъект.Получатель = мСкладПолучатель;
	
	РООбъект.СкладскаяОперация = перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
	РООбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	РООбъект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний", Истина);
	РООбъект.ДатаОтгрузки = деф.Date;
	
	РООбъект.Комментарий = СтрШаблон("схема В_Магазин_ч1: [УПП ПеремещениеТоваров № %1 от %2 ]
		|мСкладОтправитель: %3
		|мСкладПолучатель: %4
		|Оригинальный комментарий: %5",
		строка(деф.number),
		строка(деф.date),
		мСкладОтправитель,
		мСкладПолучатель,
		деф.Комментарий,);
	
	////------------------------------------------------------     ТЧ ТоварыПоРаспоряжениям
	
	РООбъект.ТоварыПоРаспоряжениям.Очистить();
	
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = РООбъект.ТоварыПоРаспоряжениям.Добавить();
		
		//////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
		
		Если стрк.Номенклатура.Свойство("identification") Тогда
			// это полный объект номенклатуры.
			ТэгНоменклатуры = стрк.Номенклатура.identification;
		Иначе 
			ТэгНоменклатуры = стрк.Номенклатура;
		КонецЕсли;
		
		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
		
		Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
			НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
			
			НомГУИД = "";
			Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
				Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
					НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = _Номенклатура;
		
		///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)
		
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.Распоряжение = ЗаказНаПеремещениеОбъект.Ссылка;
		
	КонецЦикла;
	
	////------------------------------------------------------     ТЧ ОтгружаемыеТовары
	
	РООбъект.ОтгружаемыеТовары.Очистить();
	
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = РООбъект.ОтгружаемыеТовары.Добавить();
		
		СтрокаТЧ.Номенклатура 		= ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		СтрокаТЧ.Характеристика 	= ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		СтрокаТЧ.Количество 		= стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		СтрокаТЧ.Действие 			= Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		
	КонецЦикла;
	
	//------------------------------------------------------ ФИНАЛ	
	
	РООбъект.ОбменДанными.Загрузка = Ложь;
	РООбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
	Если РООбъект.Проведен Тогда
		РООбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе 
		РООбъект.Записать();
	КонецЕсли;
	
	// Документ будет помещен в Отложенное проведение
	jsonText = "";
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(РООбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(РООбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(РООбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(РООбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(РООбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗаполнитьРеквизиты_Перемещение(СтруктураОбъекта, ПеремещениеОбъект, РООбъект, ЗаказНаПеремещениеОбъект)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	//ПеремещениеОбъект.Номер = деф.Number;
	ПеремещениеОбъект.Дата = деф.Date;
	ПеремещениеОбъект.ПометкаУдаления = деф.DeletionMark;
	
	ПеремещениеОбъект.ПеремещениеПоЗаказам = Истина;
	ПеремещениеОбъект.ЗаказНаПеремещение = ЗаказНаПеремещениеОбъект.Ссылка;
	
	ПеремещениеОбъект.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ПеремещениеОбъект.СкладОтправитель = мСкладОтправитель;
	ПеремещениеОбъект.СкладПолучатель = мСкладПолучатель;
	ПеремещениеОбъект.ПеремещениеПоЗаказам = Истина;
	ПеремещениеОбъект.Статус = Перечисления.СтатусыПеремещенийТоваров.Отгружено;
	ПеремещениеОбъект.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	
	ПеремещениеОбъект.Комментарий = СтрШаблон("схема В_Магазин_ч1: [УПП ПеремещениеТоваров № %1 от %2 ]
		|мСкладОтправитель: %3
		|мСкладПолучатель: %4
		|Оригинальный комментарий: %5",
		строка(деф.number),
		строка(деф.date),
		мСкладОтправитель,
		мСкладПолучатель,
		деф.Комментарий,);
	
	//------------------------------------------------------     ТЧ Товары

	ПеремещениеОбъект.Товары.Очистить();
	
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ПеремещениеОбъект.Товары.Добавить();
		
		//////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
		
		Если стрк.Номенклатура.Свойство("identification") Тогда
			// это полный объект номенклатуры.
			ТэгНоменклатуры = стрк.Номенклатура.identification;
		Иначе 
			ТэгНоменклатуры = стрк.Номенклатура;
		КонецЕсли;
		
		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
		
		Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
			НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
			
			НомГУИД = "";
			Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
				Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
					НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = _Номенклатура;
		
		///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)
		
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		СтрокаТЧ.ЗаказНаПеремещение = ЗаказНаПеремещениеОбъект.Ссылка;	
		
		// обязательно! иначе этот товар будет "сверх заказа"
		КодСтроки = КодСтрокиТовараВЗаказе(_Номенклатура, СтрокаТЧ.Характеристика, ЗаказНаПеремещениеОбъект);
		СтрокаТЧ.КодСтроки = КодСтроки;	
		
	КонецЦикла;
	
	//------------------------------------------------------ ФИНАЛ	
	
	ПеремещениеОбъект.ОбменДанными.Загрузка = Ложь;
	ПеремещениеОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
	Если ПеремещениеОбъект.Проведен Тогда
		ПеремещениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Иначе 
		ПеремещениеОбъект.Записать();
	КонецЕсли;
	
	// Документ будет помещен в Отложенное проведение
	jsonText = "";
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция КодСтрокиТовараВЗаказе(Номенклатура, Характеристика, ЗаказНаПеремещениеОбъект)
	
	МассивСтрок = ЗаказНаПеремещениеОбъект.Товары.НайтиСтроки(
	Новый Структура("Номенклатура,Характеристика", Номенклатура, Характеристика));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат МассивСтрок[0].КодСтроки;
	
КонецФункции

#КонецОбласти


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область Служебные

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПолучитьСсылкуДокументаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если Не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Документы[ВидОбъекта].ПустаяСсылка();;
	КонецЕсли;
	
	ГУИД = "";
	Если СтруктураID.Свойство("Ref", ГУИД) Тогда
		Если НЕ ЗначениеЗаполнено(ГУИД) ИЛИ ГУИД="00000000-0000-0000-0000-000000000000" Тогда
			Возврат Документы[ВидОбъекта].ПустаяСсылка();
		КонецЕсли;
		Возврат Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Иначе
		Возврат Документы[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Номенклатура");
	//мРеквизиты.Добавить("Характеристика");
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

// Используется в  ксп_ИмпортСлужебный.ПроверитьКачествоДанных()
//
// Параметры:
//  ДокументОбъект  - ДокументСсылка - <описание параметра>
//
// Возвращаемое значение:
//  ТЗ, Колонки:
//   * ИмяТЧ
//   * ИмяКолонки
//
Функция ТабличныеЧастиДляПроверки(ДокументСсылка = Неопределено) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяТЧ");
	ТЗ.Колонки.Добавить("ИмяКолонки");
	
	Если ДокументСсылка = Неопределено 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "Товары";
		НовСтр.ИмяКолонки = "Номенклатура";
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "Товары";
		НовСтр.ИмяКолонки = "Характеристика";
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "ТоварыПоРаспоряжениям";
		НовСтр.ИмяКолонки = "Номенклатура";
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "ТоварыПоРаспоряжениям";
		НовСтр.ИмяКолонки = "Характеристика";
		
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "ОтгружаемыеТовары";
		НовСтр.ИмяКолонки = "Номенклатура";
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "ОтгружаемыеТовары";
		НовСтр.ИмяКолонки = "Характеристика";
		
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

// Описание_метода
//
// Параметры:
//  Параметр1   - Тип1 -
//
Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти


мВнешняяСистема = "UPP";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
СобиратьНенайденнуюНоменклатуру = Истина;
НеНайденнаяНоменклатураМассив = Новый Массив;

НЕ_ЗАГРУЖАТЬ = 1;
СОЗДАТЬ = 2;
ОБНОВИТЬ = 3;
ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;
ПОМЕТИТЬ = 5;
