
Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
Перем ПОМЕТИТЬ;

Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем jsonText;
Перем СобиратьНенайденнуюНоменклатуру Экспорт;
Перем НеНайденнаяНоменклатураМассив;

Перем мЛоггер;
Перем мИдВызова;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.7");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СубПлагин_док_ПоступлениеТоваровУслуг");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СубПлагин_док_ПоступлениеТоваровУслуг");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
	"Открыть форму : СубПлагин_док_ПоступлениеТоваровУслуг",
	"Форма_СубПлагин_док_ПоступлениеТоваровУслуг",
	ТипКоманды, 
	Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти 	


#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "", СкладЕРП = Неопределено) Экспорт
	
	мЛоггер = Вычислить("мис_ЛоггерСервер.getLogger(мИдВызова, ""Импорт документов из УПП: ПоступлениеТоваровУслуг (УПП)"")");
	
	мЛоггер.инфо("Субплагин. Импорт док. УПП Оприходование товаров №"+СтруктураОбъекта.definition.Number);
	
	Попытка
		
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			Возврат Неопределено;
		КонецЕсли;
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.ПоступлениеТоваровУслуг") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
		
		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;
		
		Результат = Новый Структура;
		ПриобретениеТоваровУслуг = СоздатьОбновитьДокументПоступление(СтруктураОбъекта, СкладЕРП);
		Результат.Вставить("ПриобретениеТоваровУслуг", ПриобретениеТоваровУслуг);
		
		//Если ЗначениеЗаполнено(СкладЕРП) Тогда
		//	Если ЗначениеЗаполнено(СкладЕРП.ВерсияДанных) Тогда
		//		Если СкладЕРП.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
		//			
		//			ОрдерНаОтражениеИзлишковТоваров = СоздатьОбновитьДокументОрдерНаОтражениеИзлишковТоваров(СтруктураОбъекта, СкладЕРП);
		//			Результат.Вставить("ОрдерНаОтражениеИзлишковТоваров", ОрдерНаОтражениеИзлишковТоваров);
		//			
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
		
		//*************************** Экспорт ненайденной номенклатуры ****************
		Попытка
			ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовНоменклатуры(НеНайденнаяНоменклатураМассив);
			Сообщить("Выполнен экспорт ненайденной номенклатуры - " + Строка(НеНайденнаяНоменклатураМассив.Количество()) + " позиций");
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Сообщить("Ошибка экспорта ненайденной номенклатуры в УПП.");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение,,,
				"Ошибка экспорта ненайденной номенклатуры в УПП. Подробности: " + ТекстОшибки);
		КонецПопытки;
		//***************************
		
		Возврат Результат;
		
	Исключение
		
		мЛоггер.ерр("Плагин: Импорт Документ.ПриобретениеТоваровУслуг Подробности: "+ОписаниеОшибки());
		ВызватьИсключение;// для помещения в retry
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти


#Область Схема_1

&НаСервере
Функция СоздатьОбновитьДокументПоступление(СтруктураОбъекта, СкладЕРП)
	
	// ПриобретениеТоваровУслуг
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаУПП = "ПоступлениеТоваровУслуг (УПП) № " + строка(деф.number) + " от " + Строка(деф.date);
	
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы.ПриобретениеТоваровУслуг.ПолучитьСсылку(УИД);
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе
		ЭтоНовый = Истина;
	КонецЕсли;
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка блокировки цепочки документов для " + ПредставлениеДокументаУПП + ". Подробности: " + ТекстСообщения);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		
		Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();
			мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ПредставлениеДокументаУПП);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
        // добавлено 2024-07-03
        Если Действие = ПОМЕТИТЬ Тогда
            ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
            ОбъектДанных.УстановитьПометкуУдаления(Истина);
            РегистрыСведений.ксп_ОтложенноеПроведение.УдалитьОтложенноеПроведение(СуществующийДокСсылка);//добавлено 2024-07-03
            ЗафиксироватьТранзакцию();
			мЛоггер.дебаг("Действие = ПОМЕТИТЬ. Документ будет помечен на удаление: %1", ПредставлениеДокументаУПП);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ПредставлениеДокументаУПП);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ПредставлениеДокументаУПП);
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
			СсылкаНового = Документы.ПриобретениеТоваровУслуг.ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
			мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ПредставлениеДокументаУПП);
		Иначе 
			ОтменитьТранзакцию();
			ТекстСообщения = "Действие = Неизвестое действие: "+Строка(Действие)+". Документ: " + ПредставлениеДокументаУПП;
			мЛоггер.ерр(ТекстСообщения);
			
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
		//------------------------------------- Заполнение реквизитов -----------------------------------
		
		ОбъектДанных.Номер = деф.Number;
		ОбъектДанных.Дата = деф.Date;
		//ОбъектДанных.ПометкаУдаления = деф.DeletionMark;




		кодВалюты="";
		ЕстьАтрибут = деф.ВалютаДокумента.свойство("currencyCode",кодВалюты);
		Если ЕстьАтрибут Тогда
			ОбъектДанных.Валюта = ксп_ИмпортСлужебный.НайтиВалюту(кодВалюты);
			ОбъектДанных.ВалютаВзаиморасчетов = ОбъектДанных.Валюта;
		КонецЕсли;

		//_знч = "";
		//ЕстьЗначение = деф.ВариантПриемкиТоваров.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ОбъектДанных.ВариантПриемкиТоваров = деф.ВариантПриемкиТоваров.Значение;
		//Иначе
		//	ОбъектДанных.ВариантПриемкиТоваров = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		ОбъектДанных.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;


		ОбъектДанных.ДатаВходящегоДокумента = деф.ДатаВходящегоДокумента;

		ОбъектДанных.ДатаКурсаВалютыДокумента = деф.Date;

		ОбъектДанных.ДатаПоступления = деф.ДатаПрихода;

		Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
		УзелКонтрагента = Неопределено;
		ДоговорКонтрагента = ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента, УзелКонтрагента, Контрагент);
		
		ОбъектДанных.Договор = ДоговорКонтрагента;

		ОбъектДанных.ЕстьАлкогольнаяПродукция = Ложь;

		//ОбъектДанных.ЕстьКиЗГИСМ = деф.ЕстьКиЗГИСМ;

		//ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ = деф.ЕстьМаркируемаяПродукцияГИСМ;

		//гуид="";
		//ЕстьАтрибут = деф.ЗаказПоставщику.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ОбъектДанных.ЗаказПоставщику = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗаказПоставщику.Ref ) );
		//Иначе
		//	ОбъектДанных.ЗаказПоставщику = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ОбъектДанных.ЗаказПоставщику = ксп_ИмпортСлужебный.НайтиЗаказПоставщику(деф.ЗаказПоставщику);

		//_знч = "";
		//ЕстьЗначение = деф.ЗакупкаПодДеятельность.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ОбъектДанных.ЗакупкаПодДеятельность = деф.ЗакупкаПодДеятельность.Значение;
		//Иначе
		//	ОбъектДанных.ЗакупкаПодДеятельность = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		

		//ОбъектДанных.КоличествоДокументов = деф.КоличествоДокументов;

		//ОбъектДанных.КоличествоЛистов = деф.КоличествоЛистов;

		ОбъектДанных.Комментарий = СтрШаблон("[УПП ПоступлениеТоваровУслуг № %1 от %2 ]
		|Склад: %3
		|Оригинальный комментарий: %4",
		строка(деф.number),
		строка(деф.date),
		СкладЕРП,
		деф.Комментарий,);

		ОбъектДанных.Контрагент = Контрагент;

		//ОбъектДанных.КорректировкаОстатковРНПТ = деф.КорректировкаОстатковРНПТ;

		ОбъектДанных.КурсЧислитель = деф.КурсВзаиморасчетов;

		ОбъектДанных.КурсЗнаменатель = деф.КратностьВзаиморасчетов;

		//ОбъектДанных.НаименованиеВходящегоДокумента = деф.НаименованиеВходящегоДокумента;

		ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		ОбъектДанных.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		
		ОбъектДанных.НоваяМеханикаСозданияЗаявленийОВвозе = Истина;
		
		//ОбъектДанных.НомерВходящегоДокумента = деф.НомерВходящегоДокумента;

		//гуид="";
		//ЕстьАтрибут = деф.ОбъектРасчетовУпр.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ОбъектДанных.ОбъектРасчетовУпр = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ОбъектРасчетовУпр.Ref ) );
		//Иначе
		//	ОбъектДанных.ОбъектРасчетовУпр = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ОбъектДанных.ОбъектРасчетовУпр = ксп_ИмпортСлужебный.НайтиОбъектРасчетовУпр(деф.ОбъектРасчетовУпр);

		//ОбъектДанных.ОплатаВВалюте = деф.ОплатаВВалюте;

		ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

		//ОбъектДанных.ОсобыеУсловияПеревозки = деф.ОсобыеУсловияПеревозки;

		//ОбъектДанных.ОсобыеУсловияПеревозкиОписание = деф.ОсобыеУсловияПеревозкиОписание;

		ОбъектДанных.Партнер = ОбъектДанных.Контрагент.Партнер;

		//гуид="";
		//ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ОбъектДанных.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Подразделение.Ref ) );
		//Иначе
		//	ОбъектДанных.Подразделение = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ОбъектДанных.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(деф.Подразделение);

		//_знч = "";
		//ЕстьЗначение = деф.ПорядокРасчетов.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ОбъектДанных.ПорядокРасчетов = деф.ПорядокРасчетов.Значение;
		//Иначе
		//	ОбъектДанных.ПорядокРасчетов = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		ОбъектДанных.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;

		//ОбъектДанных.ПоступлениеПоЗаказам = деф.ПоступлениеПоЗаказам;

		//ОбъектДанных.РегистрироватьЦеныПоставщика = деф.РегистрироватьЦеныПоставщика;

		//гуид="";
		//ЕстьАтрибут = деф.Сделка.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ОбъектДанных.Сделка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Сделка.Ref ) );
		//Иначе
		//	ОбъектДанных.Сделка = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ОбъектДанных.Сделка = ксп_ИмпортСлужебный.НайтиСделка(деф.Сделка);

		ОбъектДанных.Склад = СкладЕРП;

		ОбъектДанных.Согласован = Истина;

		мСоглашение = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка(
			"СоглашениеСПоставщикамиУПП", мВнешняяСистема);
		Если НЕ ЗначениеЗаполнено(мСоглашение)
			ИЛИ ( НЕ ЗначениеЗаполнено(мСоглашение.ВерсияДанных) 
			И ТипЗнч(мСоглашение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") ) Тогда 
			// так проверяем на битую ссылку
			ОбъектДанных.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
			мЛоггер.ерр("Не заполнена настройка 
			|СоглашениеСКлиентамиДляРеализацияТоваровСхемаПростаяПродажа
			|в регистре ксп_ДополнительныеНастройкиИнтеграций
			|для %1. ", ПредставлениеДокументаУПП);
		Иначе
			ОбъектДанных.Соглашение = мСоглашение;
		КонецЕсли;


		ОбъектДанных.СпособДоставки = перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;

		//гуид="";
		//ЕстьАтрибут = деф.СтатьяДвиженияДенежныхСредств.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ОбъектДанных.СтатьяДвиженияДенежныхСредств = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.СтатьяДвиженияДенежныхСредств.Ref ) );
		//Иначе
		//	ОбъектДанных.СтатьяДвиженияДенежныхСредств = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ОбъектДанных.СтатьяДвиженияДенежныхСредств = ксп_ИмпортСлужебный.НайтиСтатьяДвиженияДенежныхСредств(деф.СтатьяДвиженияДенежныхСредств);

		ОбъектДанных.СуммаВзаиморасчетов = деф.СуммаДокумента;

		//ОбъектДанных.СуммаВзаиморасчетовПоЗаказу = деф.СуммаВзаиморасчетовПоЗаказу;

		//ОбъектДанных.СуммаВзаиморасчетовПоТаре = деф.СуммаВзаиморасчетовПоТаре;

		ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;

		//ОбъектДанных.ТребуетсяЗалогЗаТару = деф.ТребуетсяЗалогЗаТару;

		//_знч = "";
		//ЕстьЗначение = деф.ФормаОплаты.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ОбъектДанных.ФормаОплаты = деф.ФормаОплаты.Значение;
		//Иначе
		//	ОбъектДанных.ФормаОплаты = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ОбъектДанных.ФормаОплаты = ксп_ИмпортСлужебный.НайтиПеречисление_ФормаОплаты(деф.ФормаОплаты);

		ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;

		ОбъектДанных.ЦенаВключаетНДС = деф.СуммаВключаетНДС;




		////------------------------------------------------------     ТЧ Товары



		ОбъектДанных.Товары.Очистить();


		Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
			стрк = деф.ТЧТовары[счТовары];
			СтрокаТЧ = ОбъектДанных.Товары.Добавить();


		//	гуид="";
		//	ЕстьАтрибут = стрк.АналитикаРасходов.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.АналитикаРасходов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаРасходов.Ref ) );
		//	Иначе
		//		СтрокаТЧ.АналитикаРасходов = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.АналитикаРасходов = ксп_ИмпортСлужебный.НайтиАналитикаРасходов(стрк.АналитикаРасходов);

		//	гуид="";
		//	ЕстьАтрибут = стрк.АналитикаУчетаНоменклатуры.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНоменклатуры.Ref ) );
		//	Иначе
		//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);

		//	гуид="";
		//	ЕстьАтрибут = стрк.ВидЗапасов.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.ВидЗапасов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЗапасов.Ref ) );
		//	Иначе
		//		СтрокаТЧ.ВидЗапасов = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.ВидЗапасов = ксп_ИмпортСлужебный.НайтиВидЗапасов(стрк.ВидЗапасов);

		//	гуид="";
		//	ЕстьАтрибут = стрк.ВидЦеныПоставщика.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.ВидЦеныПоставщика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЦеныПоставщика.Ref ) );
		//	Иначе
		//		СтрокаТЧ.ВидЦеныПоставщика = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.ВидЦеныПоставщика = ксп_ИмпортСлужебный.НайтиВидЦеныПоставщика(стрк.ВидЦеныПоставщика);

		//	СтрокаТЧ.ДатаВходящегоДокумента = стрк.ДатаВходящегоДокумента;

		//	гуид="";
		//	ЕстьАтрибут = стрк.ЗаказПоставщику.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.ЗаказПоставщику = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЗаказПоставщику.Ref ) );
		//	Иначе
		//		СтрокаТЧ.ЗаказПоставщику = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.ЗаказПоставщику = ксп_ИмпортСлужебный.НайтиЗаказПоставщику(стрк.ЗаказПоставщику);

		//	СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;

		//	СтрокаТЧ.КодСтроки = стрк.КодСтроки;

			СтрокаТЧ.Количество = стрк.Количество;

		//	СтрокаТЧ.КоличествоПоРНПТ = стрк.КоличествоПоРНПТ;

			СтрокаТЧ.КоличествоУпаковок = стрк.Количество;

		//	гуид="";
		//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Назначение = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

		//	СтрокаТЧ.НаименованиеВходящегоДокумента = стрк.НаименованиеВходящегоДокумента;
  
		//	гуид="";
		//	ЕстьАтрибут = стрк.НоменклатураПартнера.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.НоменклатураПартнера = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураПартнера.Ref ) );
		//	Иначе
		//		СтрокаТЧ.НоменклатураПартнера = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.НоменклатураПартнера = ксп_ИмпортСлужебный.НайтиНоменклатураПартнера(стрк.НоменклатураПартнера);

		//	СтрокаТЧ.НомерВходящегоДокумента = стрк.НомерВходящегоДокумента;

		//	гуид="";
		//	ЕстьАтрибут = стрк.НомерГТД.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.НомерГТД = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НомерГТД.Ref ) );
		//	Иначе
		//		СтрокаТЧ.НомерГТД = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.НомерГТД = ксп_ИмпортСлужебный.НайтиНомерГТД(стрк.НомерГТД);

		//	СтрокаТЧ.НомерПаспорта = стрк.НомерПаспорта;

		//	гуид="";
		//	ЕстьАтрибут = стрк.ОбъектРасчетов.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.ОбъектРасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ОбъектРасчетов.Ref ) );
		//	Иначе
		//		СтрокаТЧ.ОбъектРасчетов = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.ОбъектРасчетов = ксп_ИмпортСлужебный.НайтиОбъектРасчетов(стрк.ОбъектРасчетов);

		//	гуид="";
		//	ЕстьАтрибут = стрк.Подразделение.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Подразделение.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Подразделение = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(стрк.Подразделение);

		//	СтрокаТЧ.ПроцентРучнойСкидки = стрк.ПроцентРучнойСкидки;

		//	гуид="";
		//	ЕстьАтрибут = стрк.Сделка.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Сделка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Сделка.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Сделка = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Сделка = ксп_ИмпортСлужебный.НайтиСделка(стрк.Сделка);

		//	гуид="";
		//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Серия = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

		//	СтрокаТЧ.Сертификат = стрк.Сертификат;

		//	гуид="";
		//	ЕстьАтрибут = стрк.Склад.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Склад = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Склад.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Склад = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Склад = ксп_ИмпортСлужебный.НайтиСклад(стрк.Склад);

		//	СтрокаТЧ.СписатьНаРасходы = стрк.СписатьНаРасходы;

		//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		//	гуид="";
		//	ЕстьАтрибут = стрк.СтатьяРасходов.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.СтатьяРасходов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СтатьяРасходов.Ref ) );
		//	Иначе
		//		СтрокаТЧ.СтатьяРасходов = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.СтатьяРасходов = ксп_ИмпортСлужебный.НайтиСтатьяРасходов(стрк.СтатьяРасходов);

		//	СтрокаТЧ.СуммаРучнойСкидки = стрк.СуммаРучнойСкидки;
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Упаковка = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);

				
		
			СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
			СтрокаТЧ.Количество = стрк.Количество;
			СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
			СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
			
			
			СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюУПП(стрк.СтавкаНДС);
			СтрокаТЧ.Цена = стрк.Цена;
			СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
			СтрокаТЧ.Сумма = стрк.Сумма;
			
			Если деф.СуммаВключаетНДС = Истина Тогда
				СтрокаТЧ.СуммаСНДС = стрк.Сумма;
			Иначе 
				СтрокаТЧ.СуммаСНДС = стрк.Сумма + стрк.СуммаНДС;
			КонецЕсли;
	
			СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.СуммаСНДС;

			СтрокаТЧ.СуммаИтог = СтрокаТЧ.СуммаСНДС;

        	СтрокаТЧ.СуммаНДСВзаиморасчетов = стрк.СуммаНДС;
		
		

		КонецЦикла;
		
		


		Для счТовары = 0 По деф.ТЧУслуги.Количество()-1 Цикл
			стрк = деф.ТЧУслуги[счТовары];
			СтрокаТЧ = ОбъектДанных.Товары.Добавить();

		
			СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
			СтрокаТЧ.Количество = стрк.Количество;
			СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
			СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаПродукции);
			
			
			СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюУПП(стрк.СтавкаНДС);
			СтрокаТЧ.Цена = стрк.Цена;
			СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
			СтрокаТЧ.Сумма = стрк.Сумма;
			
			Если деф.СуммаВключаетНДС = Истина Тогда
				СтрокаТЧ.СуммаСНДС = стрк.Сумма;
			Иначе 
				СтрокаТЧ.СуммаСНДС = стрк.Сумма + стрк.СуммаНДС;
			КонецЕсли;
	
			СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.СуммаСНДС;

			СтрокаТЧ.СуммаИтог = СтрокаТЧ.СуммаСНДС;

        	СтрокаТЧ.СуммаНДСВзаиморасчетов = стрк.СуммаНДС;
		
		

		КонецЦикла;
		
			
			
			
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
		ЗафиксироватьТранзакцию();
		
		мЛоггер.инфо("Записан Документ : %1. Исходный док. УПП: %2", ОбъектДанных, ПредставлениеДокументаУПП);
		
		Возврат ОбъектДанных.Ссылка;
		
	Исключение
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа " + ПредставлениеДокументаУПП + ". Подробности: " + СообщениеОбОшибке);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка загрузки документа (УПП): %1. Подробности: %2", ПредставлениеДокументаУПП, СообщениеОбОшибке);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти 	


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json, СкладЕРП) export
	
	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
		
		Для каждого эл Из СтруктураОбъекта Цикл
			ЗагрузитьОбъект(эл,,СкладЕРП);
		КонецЦикла;
		
	Иначе 
		Возврат ЗагрузитьОбъект(СтруктураОбъекта, , СкладЕРП);
	КонецЕсли;
	
	
КонецФункции

#КонецОбласти 	


#Область Служебные

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("Склад");
	Возврат мРеквизиты;
	
КонецФункции

// Используется в  ксп_ИмпортСлужебный.ПроверитьКачествоДанных()
//
// Параметры:
//  ДокументОбъект  - ДокументСсылка - <описание параметра>
//
// Возвращаемое значение:
//  ТЗ, Колонки:
//   * ИмяТЧ
//   * ИмяКолонки
//
Функция ТабличныеЧастиДляПроверки(ДокументСсылка = Неопределено) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяТЧ");
	ТЗ.Колонки.Добавить("ИмяКолонки");
	
	Если ДокументСсылка = Неопределено 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОрдерНаОтражениеИзлишковТоваров") Тогда
		
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "Товары";
		НовСтр.ИмяКолонки = "Номенклатура";
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "Товары";
		НовСтр.ИмяКолонки = "Характеристика";
		
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф) Экспорт
	
	
	Если НЕ ЭтоНовый Тогда	
		
		Если СуществующийДокСсылка.ПометкаУдаления Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;		
			
		ИначеЕсли НЕ СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		ИначеЕсли СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // новый документ
		
		Если деф.DeletionMark = Истина Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли НЕ деф.isPosted Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли деф.isPosted Тогда
			Возврат СОЗДАТЬ;
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат НЕ_ЗАГРУЖАТЬ;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: ДокументСсылка
//
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)
	
	СуществующийОбъект = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе 
		
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		
		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПолучитьСсылкуСправочника(ГУИД, ВидОбъекта)
	
	СуществующийОбъект = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		
		Возврат СуществующийОбъект;
		
	Иначе
		
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//	ВидОбъекта 	- строка - Наименование метеданных
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуСправочника(ГУИД, ВидОбъекта) Экспорт
	
	СуществующийОбъект = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе
		
		ОбъектДанных = Справочники[ВидОбъекта].СоздатьЭлемент();
		СсылкаНового = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		
		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//  Параметр1   - Тип1 -
//
Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти 	


мВнешняяСистема = "UPP";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
СобиратьНенайденнуюНоменклатуру = Истина;
НеНайденнаяНоменклатураМассив = Новый Массив;

НЕ_ЗАГРУЖАТЬ = 1;
СОЗДАТЬ = 2;
ОБНОВИТЬ = 3;
ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;
ПОМЕТИТЬ = 5;
