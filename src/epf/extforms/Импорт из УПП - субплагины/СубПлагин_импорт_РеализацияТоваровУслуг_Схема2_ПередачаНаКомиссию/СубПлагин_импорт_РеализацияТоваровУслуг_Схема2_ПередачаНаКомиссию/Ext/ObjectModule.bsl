
Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;

Перем мВнешняяСистема;
Перем мВнутренняяСистема;
Перем ИмяСобытияЖР;
Перем jsonText;

Перем СобиратьНенайденнуюНоменклатуру Экспорт; // дли интерактивного импорта
Перем НеНайденнаяНоменклатураМассив;

Перем мЛоггер;
Перем мИдВызова;

Перем мСкладОтправитель;
Перем мСкладПолучатель;
Перем мДоговор;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.3");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СубПлагин_импорт_РеализацияТоваровУслуг_Схема2_ПередачаНаКомиссию");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СубПлагин_импорт_РеализацияТоваровУслуг_Схема2_ПередачаНаКомиссию");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
	"Открыть форму : СубПлагин_импорт_РеализацияТоваровУслуг_Схема2_ПередачаНаКомиссию",
	"Форма_СубПлагин_импорт_РеализацияТоваровУслуг_Схема2_ПередачаНаКомиссию",
	ТипКоманды, 
	Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти


// Возвращает структуру. Поля различаются в зависимости от режима загрузки.
// Это нужно для отладки, а не для обычного режима работы.
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "", СкладЕРП = Неопределено) Экспорт
	
	мЛоггер = Вычислить("мис_ЛоггерСервер.getLogger(мИдВызова, ""Импорт документов из УПП: РеализацияТоваровУслуг"")");
	
	Попытка
		
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.РеализацияТоваровУслуг") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;
		
		ВидОперации = "";
		НайденноеЗначение = "";
		ЕстьЗначение = деф.ВидОперации.свойство("Значение", НайденноеЗначение);
		Если ЕстьЗначение Тогда
			ВидОперации = НайденноеЗначение;
		КонецЕсли;
		
		Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
		УзелКонтрагента = Неопределено;
		
		//ЕНС. 2024-01-16. Договор теперь хранится в РС "КСП_КомиссионерыДляРеализацийУПП" для каждого контрагента
		//ДоговорКонтрагента = ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента, УзелКонтрагента, Контрагент);
		ДоговорКонтрагента = Неопределено;
		мДоговор = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.Договор(мВнешняяСистема, Контрагент, деф.date);
		
		ЭтоКомиссионер = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.ЭтоКомиссионер(мВнешняяСистема, Контрагент, ДоговорКонтрагента, деф.date);
		
		мСкладОтправитель = СкладЕРП;
		мСкладПолучатель = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.СкладПолучатель(мВнешняяСистема, Контрагент, ДоговорКонтрагента, деф.date);
		
		Результат = Схема_2_ПередачаНаКомиссию(СтруктураОбъекта);
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		мЛоггер.ерр("Субплагин: Субплагин_RabbitMQ_импорт_из_УПП_Документ_РеализацияТоваровУслуг_Схема_2_ПередачаНаКомиссию.
		|Подробности: " + ТекстОшибки);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#Область Схемы_2_ПередачаНаКомиссию

Функция Схема_2_ПередачаНаКомиссию(СтруктураОбъекта) Экспорт
	
	//ЗаказКлиента
	//РО
	//Реализация (комиссия)
	//
	//Контрагент - из реализации УПП
	//Склад - по нашей настройке
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "РеализацияТоваровУслуг (УПП) № "+деф.Number+" от "+строка(деф.Date);
	
	СуществующийЗаказСсылка = СоздатьПолучитьСсылкуДокумента(id.Ref, "ЗаказКлиента");
	СуществующийРОСсылка 	= СоздатьПолучитьСсылкуДокумента(id.Ref, "РасходныйОрдерНаТовары");
	РеализацияТоваровУслугСсылка	= СоздатьПолучитьСсылкуДокумента(id.Ref, "РеализацияТоваровУслуг");
	//СуществующийПТХСсылка	= СоздатьПолучитьСсылкуДокумента(id.Ref, "ПередачаТоваровХранителю");
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СуществующийЗаказСсылка);
	МассивСсылок.Добавить(СуществующийРОСсылка);
	МассивСсылок.Добавить(РеализацияТоваровУслугСсылка);
	//МассивСсылок.Добавить(СуществующийПТХСсылка);
	
	// -------------------------------------------- БЛОКИРОВКА
	// не будем различать ситуации Новый/НеНовый
	Если ЗначениеЗаполнено(СуществующийЗаказСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе
		ЭтоНовый = Истина;
	КонецЕсли;
	//Если НЕ ЭтоНовый Тогда
	Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	//КонецЕсли;
	
	НачатьТранзакцию();
	
	//Если НЕ ЭтоНовый Тогда
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка блокировки цепочки документов для "+ПредставлениеДокументаИзУПП+".
			|Подробности: " + ТекстОшибки);
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	//КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	Действие = ДействиеСДокументом(ЭтоНовый, СуществующийЗаказСсылка, деф);
	
	Результат = Новый Структура;
	
	Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
		ОтменитьТранзакцию();
		мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ПредставлениеДокументаИзУПП);
		Результат.Вставить("ЗаказКлиента", СуществующийЗаказСсылка);
		Возврат Результат;
	КонецЕсли;
	
	Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
		ОбъектДанных = СуществующийЗаказСсылка.ПолучитьОбъект();
		ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ЗафиксироватьТранзакцию();
		мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ПредставлениеДокументаИзУПП);
		Результат.Вставить("ЗаказКлиента", СуществующийЗаказСсылка);
		Возврат Результат;
	КонецЕсли;
	
	Если Действие = ОБНОВИТЬ Тогда
		ОбъектДанных = СуществующийЗаказСсылка.ПолучитьОбъект();
		мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ПредставлениеДокументаИзУПП);
	ИначеЕсли Действие = СОЗДАТЬ Тогда
		ОбъектДанных = Документы.ЗаказКлиента.СоздатьДокумент();
		СсылкаНового = Документы.ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ПредставлениеДокументаИзУПП);
	Иначе
		ОтменитьТранзакцию();
		ТекстСообщения = "Действие = Неизвестое действие: "+Строка(Действие)+". Документ: " + ПредставлениеДокументаИзУПП;
		мЛоггер.ерр(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Попытка
		
		ЗаказКлиентаОбъект = СоздатьЗаказКлиента(СтруктураОбъекта, СуществующийЗаказСсылка, ОбъектДанных);
		РООбъект = СоздатьРасходныйОрдер_схема2(СтруктураОбъекта, СуществующийРОСсылка, ЗаказКлиентаОбъект);
		РеализацияОбъект = СоздатьРеализацию(СтруктураОбъекта, РеализацияТоваровУслугСсылка, РООбъект, ЗаказКлиентаОбъект);
		//ПТХОбъект = СоздатьПередачуТоваровХранителю(СтруктураОбъекта, СуществующийПТХСсылка, РООбъект, ЗаказКлиентаОбъект);
		
		Комментарий = "";
		РегистрыСведений.КСП_СвязьРеализацийУППиПередачиНаКомиссию.ДобавитьЗапись(
			мВнешняяСистема, id.Ref, ЗаказКлиентаОбъект.Ссылка, РООбъект.Ссылка,
			Неопределено, //ПТХОбъект.Ссылка
			РеализацияОбъект.Ссылка, ПредставлениеДокументаИзУПП, Комментарий);
			
		ЗафиксироватьТранзакцию();
		
		Результат.Вставить("ЗаказКлиента", ЗаказКлиентаОбъект.Ссылка);
		Результат.Вставить("РО", РООбъект.Ссылка);
		Результат.Вставить("РеализацияТоваровУслуг", РеализацияОбъект.Ссылка);
		//Результат.Вставить("ПередачаТоваровХранителю", ПТХОбъект.Ссылка);
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа "+ПредставлениеДокументаИзУПП+".
			|Подробности: " + ТекстОшибки);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьЗаказКлиента(СтруктураОбъекта, СуществующийЗаказСсылка, ОбъектДанных) Экспорт
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "ЗаказКлиента (УПП РеализацияТоваровУслуг) № " + деф.Number + " от " + строка(деф.Date);
	
	//------------------------------------- Заполнение реквизитов -----------------------------------
	
	//ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	
	ОбъектДанных.СкидкиРассчитаны = Истина;
	
	ОбъектДанных.Склад = мСкладОтправитель;
	
	ОбъектДанных.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	ОбъектДанных.Договор 	= мДоговор;//ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента);
	ОбъектДанных.Партнер 	= ОбъектДанных.Контрагент.Партнер;
	ОбъектДанных.Соглашение = РегистрыСведений.ксп_СоглашенияСПартнерамиДляИнтеграций.ПоМэппингу(
		мВнешняяСистема, ОбъектДанных.Контрагент, ОбъектДанных.Договор);
	
	ОбъектДанных.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	
	мПриоритет = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка(
		"ПриоритетДляРТУ_схема2_УПП", мВнешняяСистема);
	Если ЗначениеЗаполнено(мПриоритет) Тогда
		ОбъектДанных.Приоритет = мПриоритет;
	Иначе
		мЛоггер.ерр("Не заполнена настройка ПриоритетДляРТУ_схема2_УПП в регистре ксп_ДополнительныеНастройкиИнтеграций
		|для %1. ", ПредставлениеДокументаИзУПП);
	КонецЕсли;

	ОбъектДанных.НеОтгружатьЧастями = Истина;
	ОбъектДанных.ДатаСогласования = ОбъектДанных.Дата;
	ОбъектДанных.Согласован = Истина;
	ОбъектДанных.ДатаОтгрузки = ОбъектДанных.Дата;
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	ОбъектДанных.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	ОбъектДанных.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ОбъектДанных.ОбъектРасчетов = ОбъектДанных.Договор;
	ОбъектДанных.ЦенаВключаетНДС = деф.СуммаВключаетНДС;
	ОбъектДанных.ЭтоЗаказКакСчет = Ложь;
	
	ОбъектДанных.Комментарий = СтрШаблон("схема ПередачаНаКомиссию: [УПП РеализацияТоваровУслуг № %1 от %2 ]
		|СкладОтправитель: %3
		|СкладПолучатель: %4
		|Оригинальный комментарий: %5",
		строка(деф.number),
		строка(деф.date),
		мСкладОтправитель,
		мСкладПолучатель,
		деф.Комментарий,);
	
	//------------------------------------------------------     ТЧ Товары
	
	ОбъектДанных.Товары.Очистить();
	
	КодСтроки = 1;
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();
		
		СтрокаТЧ.ДатаОтгрузки = ОбъектДанных.Дата;
		
		//////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
		
		Если стрк.Номенклатура.Свойство("identification") Тогда
			// это полный объект номенклатуры.
			ТэгНоменклатуры = стрк.Номенклатура.identification;
		Иначе 
			ТэгНоменклатуры = стрк.Номенклатура;
		КонецЕсли;
		
		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
		
		Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
			НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
			
			НомГУИД = "";
			Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
				Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
					НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = _Номенклатура;
		
		///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)
		
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		
		СтрокаТЧ.КодСтроки = КодСтроки;
		КодСтроки = КодСтроки + 1;
		
		СтрокаТЧ.Склад = ОбъектДанных.Склад;
		СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		
		СтрокаТЧ.ИдентификаторСтроки = строка(Новый УникальныйИдентификатор());
		
		СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
		
		СтрокаТЧ.Цена = стрк.Цена;
		
		Если ОбъектДанных.ЦенаВключаетНДС Тогда
			СтрокаТЧ.Сумма = стрк.Сумма - стрк.СуммаНДС;
			СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
			СтрокаТЧ.СуммаСНДС = стрк.Сумма;
		Иначе 
			СтрокаТЧ.Сумма = стрк.Сумма;
			СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
			СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		
		//	СтрокаТЧ.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(стрк.ВидЦены);
		
	КонецЦикла;
	
	ОбъектДанных.МаксимальныйКодСтроки = ОбъектДанных.Товары.Количество() - 1;//todo уточнить заполнение по типовому коду
	
	////------------------------------------------------------     ТЧ ЭтапыГрафикаОплаты
	ОбъектДанных.ЭтапыГрафикаОплаты.Очистить();
	
	////------------------------------------------------------     ТЧ СкидкиНаценки
	ОбъектДанных.СкидкиНаценки.Очистить();
	
	////------------------------------------------------------     ТЧ НачислениеБонусныхБаллов
	ОбъектДанных.НачислениеБонусныхБаллов.Очистить();
	
	////------------------------------------------------------     ТЧ ДополнительныеРеквизиты
	ОбъектДанных.ДополнительныеРеквизиты.Очистить();
	
	//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
	//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ДополнительныеРеквизиты.Добавить();
	
	//	гуид="";
	//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Значение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);
	
	//	гуид="";
	//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Свойство = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);
	
	//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;
	
	//КонецЦикла;
	
	//------------------------------------------------------ ФИНАЛ
	
	Попытка
		
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		//------------------------------------------------------ РС.СостоянияЗаказовКлиентов
		
		НаборЗаписей = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(ОбъектДанных.Ссылка);
		НовСтр = НаборЗаписей.Добавить();
		НовСтр.Заказ = ОбъектДанных.Ссылка;
		НовСтр.Состояние = Перечисления.СостоянияЗаказовКлиентов.Закрыт;
		НовСтр.ДатаСобытия = ТекущаяДатаСеанса();
		НаборЗаписей.Записать();
		
		// Документ будет помещен в Отложенное проведение
		jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
	Исключение
		
		СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа "+ПредставлениеДокументаИзУПП+".
			|Подробности: " + СообщениеОбОшибке);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка загрузки документа (УПП): %1.
			|Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ОбъектДанных;
	
КонецФункции

Функция СоздатьРасходныйОрдер_схема2(СтруктураОбъекта, СуществующийРОСсылка, ЗаказКлиентаОбъект) Экспорт
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "РасходныйОрдерНаТовары (УПП РеализацияТоваровУслуг) № " + деф.Number + " от " + строка(деф.Date);
	
	//------------------------------------- Заполнение реквизитов -----------------------------------
	
	Если ЗначениеЗаполнено(СуществующийРОСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Действие = ДействиеСДокументом(ЭтоНовый, СуществующийРОСсылка, деф);
	
	Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
		мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ПредставлениеДокументаИзУПП);
		Возврат СуществующийРОСсылка;
	КонецЕсли;
	
	Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
		ОбъектДанных = СуществующийРОСсылка.ПолучитьОбъект();
		ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ЗафиксироватьТранзакцию();
		мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ПредставлениеДокументаИзУПП);
		Возврат СуществующийРОСсылка;
	КонецЕсли;
	
	Если Действие = ОБНОВИТЬ Тогда
		ОбъектДанных = СуществующийРОСсылка.ПолучитьОбъект();
		мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ПредставлениеДокументаИзУПП);
	ИначеЕсли Действие = СОЗДАТЬ Тогда
		ОбъектДанных = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		СсылкаНового = Документы.РасходныйОрдерНаТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ПредставлениеДокументаИзУПП);
	Иначе
		ТекстСообщения = "Действие = Неизвестое действие: "+Строка(Действие)+". Документ: " + ПредставлениеДокументаИзУПП;
		мЛоггер.ерр(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	
	//ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	ОбъектДанных.Склад = мСкладОтправитель;
	ОбъектДанных.Получатель = мСкладПолучатель;
	
	ОбъектДанных.СкладскаяОперация = перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
	ОбъектДанных.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	
	//ОбъектДанных.ВсегоМест = деф.ВсегоМест;
	
	ОбъектДанных.ДатаОтгрузки = деф.Date;
	
	мПриоритет = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка(
		"ПриоритетДляРТУ_схема2_УПП", мВнешняяСистема);
	Если ЗначениеЗаполнено(мПриоритет) Тогда
		ОбъектДанных.Приоритет = мПриоритет;
	Иначе
		мЛоггер.ерр("Не заполнена настройка ПриоритетДляРТУ_схема2_УПП в регистре ксп_ДополнительныеНастройкиИнтеграций
		|для %1. ", ПредставлениеДокументаИзУПП);
	КонецЕсли;
	
	ОбъектДанных.Комментарий = СтрШаблон("схема ПередачаНаКомиссию: [УПП РеализацияТоваровУслуг № %1 от %2 ]
		|СкладОтправитель: %3
		|СкладПолучатель: %4
		|Оригинальный комментарий: %5",
		строка(деф.number),
		строка(деф.date),
		мСкладОтправитель,
		мСкладПолучатель,
		деф.Комментарий,);
	
	//гуид="";
	//ЕстьАтрибут = деф.ЗаданиеНаПеревозку.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ЗаданиеНаПеревозку = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗаданиеНаПеревозку.Ref ) );
	//Иначе
	//	ОбъектДанных.ЗаданиеНаПеревозку = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ЗаданиеНаПеревозку = ксп_ИмпортСлужебный.НайтиЗаданиеНаПеревозку(деф.ЗаданиеНаПеревозку);
	
	//гуид="";
	//ЕстьАтрибут = деф.ЗонаОтгрузки.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ЗонаОтгрузки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗонаОтгрузки.Ref ) );
	//Иначе
	//	ОбъектДанных.ЗонаОтгрузки = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ЗонаОтгрузки = ксп_ИмпортСлужебный.НайтиЗонаОтгрузки(деф.ЗонаОтгрузки);
	
	//гуид="";
	//ЕстьАтрибут = деф.Контролер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Контролер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Контролер.Ref ) );
	//Иначе
	//	ОбъектДанных.Контролер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Контролер = ксп_ИмпортСлужебный.НайтиКонтролер(деф.Контролер);
	
	//гуид="";
	//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
	//Иначе
	//	ОбъектДанных.Ответственный = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);
	
	//ОбъектДанных.ОтгрузкаПоЗаданиюНаПеревозку = деф.ОтгрузкаПоЗаданиюНаПеревозку;
	
	//гуид="";
	//ЕстьАтрибут = деф.Получатель.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Получатель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Получатель.Ref ) );
	//Иначе
	//	ОбъектДанных.Получатель = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Получатель = ксп_ИмпортСлужебный.НайтиПолучатель(деф.Получатель);
	
	//гуид="";
	//ЕстьАтрибут = деф.Помещение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Помещение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Помещение.Ref ) );
	//Иначе
	//	ОбъектДанных.Помещение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Помещение = ксп_ИмпортСлужебный.НайтиПомещение(деф.Помещение);
	
	//ОбъектДанных.ПорядокДоставки = деф.ПорядокДоставки;
	
	
	//ОбъектДанных.РежимПросмотраПоТоварам = деф.РежимПросмотраПоТоварам;
	
	////------------------------------------------------------     ТЧ ТоварыПоРаспоряжениям
	
	ОбъектДанных.ТоварыПоРаспоряжениям.Очистить();
	
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.ТоварыПоРаспоряжениям.Добавить();
		
		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.Распоряжение = ЗаказКлиентаОбъект.Ссылка;
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Назначение = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Номенклатура = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Распоряжение.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Распоряжение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Распоряжение.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Распоряжение = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Серия = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);
		
		//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Характеристика = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	
		
	КонецЦикла;
	
	////------------------------------------------------------     ТЧ ОтгружаемыеТовары
	
	ОбъектДанных.ОтгружаемыеТовары.Очистить();
	
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.ОтгружаемыеТовары.Добавить();
		
		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		СтрокаТЧ.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		
		//	_знч = "";
		//	ЕстьЗначение = стрк.Действие.свойство("Значение",_знч);
		//	Если ЕстьЗначение Тогда
		//		СтрокаТЧ.Действие = стрк.Действие.Значение;
		//	Иначе
		//		СтрокаТЧ.Действие = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Действие = ксп_ИмпортСлужебный.НайтиПеречисление_Действие(стрк.Действие);
		
		//	СтрокаТЧ.Количество = стрк.Количество;
		
		//	СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Назначение = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Номенклатура = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Серия = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);
		
		//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Упаковка = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.УпаковочныйЛист.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.УпаковочныйЛист = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.УпаковочныйЛист.Ref ) );
		//	Иначе
		//		СтрокаТЧ.УпаковочныйЛист = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.УпаковочныйЛист = ксп_ИмпортСлужебный.НайтиУпаковочныйЛист(стрк.УпаковочныйЛист);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.УпаковочныйЛистРодитель.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.УпаковочныйЛистРодитель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.УпаковочныйЛистРодитель.Ref ) );
		//	Иначе
		//		СтрокаТЧ.УпаковочныйЛистРодитель = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.УпаковочныйЛистРодитель = ксп_ИмпортСлужебный.НайтиУпаковочныйЛистРодитель(стрк.УпаковочныйЛистРодитель);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Характеристика = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);
		
		//	СтрокаТЧ.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста = стрк.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста;
		
		//	СтрокаТЧ.ЭтоУпаковочныйЛист = стрк.ЭтоУпаковочныйЛист;
		
	КонецЦикла;
	
	////------------------------------------------------------     ТЧ ДополнительныеРеквизиты
	
	//ОбъектДанных.ДополнительныеРеквизиты.Очистить();
	
	//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
	//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ДополнительныеРеквизиты.Добавить();
	
	//	гуид="";
	//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Значение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);
	
	//	гуид="";
	//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Свойство = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);
	
	//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;
	
	//КонецЦикла;
	
	////------------------------------------------------------     ТЧ ШтрихкодыУпаковок
	
	//ОбъектДанных.ШтрихкодыУпаковок.Очистить();
	
	//Для счТовары = 0 По деф.ТЧШтрихкодыУпаковок.Количество()-1 Цикл
	//	стрк = деф.ТЧШтрихкодыУпаковок[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ШтрихкодыУпаковок.Добавить();
	
	//	гуид="";
	//	ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ШтрихкодУпаковки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ШтрихкодУпаковки.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ШтрихкодУпаковки = ксп_ИмпортСлужебный.НайтиШтрихкодУпаковки(стрк.ШтрихкодУпаковки);
	
	//КонецЦикла;
	
	//------------------------------------------------------ ФИНАЛ
	
	Попытка
		
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
	Исключение
		
		СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа "+ПредставлениеДокументаИзУПП+".
			|Подробности: " + СообщениеОбОшибке);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка загрузки документа (УПП): %1.
			|Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ОбъектДанных;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
//Функция СоздатьПеремещение(СтруктураОбъекта, СуществующийПеремещениеСсылка, РООбъект, ЗаказНаПеремещениеОбъект)
Функция СоздатьРеализацию(СтруктураОбъекта, РеализацияТоваровУслугСсылка, РООбъект, ЗаказКлиентаОбъект)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "РеализацияТоваровУслуг (УПП РеализацияТоваровУслуг) № " + деф.Number + " от " + строка(деф.Date);
	
	//------------------------------------- Заполнение реквизитов
	
	Если ЗначениеЗаполнено(РеализацияТоваровУслугСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Действие = ДействиеСДокументом(ЭтоНовый, РеализацияТоваровУслугСсылка, деф);
	
	Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
		мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ПредставлениеДокументаИзУПП);
		Возврат РеализацияТоваровУслугСсылка;
	КонецЕсли;
	
	Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
		ОбъектДанных = РеализацияТоваровУслугСсылка.ПолучитьОбъект();
		ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ЗафиксироватьТранзакцию();
		мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ПредставлениеДокументаИзУПП);
		Возврат РеализацияТоваровУслугСсылка;
	КонецЕсли;
	
	Если Действие = ОБНОВИТЬ Тогда
		ОбъектДанных = РеализацияТоваровУслугСсылка.ПолучитьОбъект();
		мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ПредставлениеДокументаИзУПП);
	ИначеЕсли Действие = СОЗДАТЬ Тогда
		ОбъектДанных = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		СсылкаНового = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ПредставлениеДокументаИзУПП);
	Иначе
		ТекстСообщения = "Действие = Неизвестое действие: "+Строка(Действие)+". Документ: " + ПредставлениеДокументаИзУПП;
		мЛоггер.ерр(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ОтветственныйПоУмолчанию = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию(); //?
	Если деф.Свойство("Автор") Тогда 
		ЕстьАтрибут = деф.Автор.свойство("Ref","");
		Если ЕстьАтрибут Тогда
			//ОбъектДанных.Автор = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Автор.Ref ) );
			Сообщить("Ищем автора по ГУИДу");
			ОбъектДанных.Автор    = Справочники.Пользователи.ПолучитьСсылку((Новый УникальныйИдентификатор(деф.Автор.Ref)));
			ОбъектДанных.Менеджер = Справочники.Пользователи.ПолучитьСсылку((Новый УникальныйИдентификатор(деф.Автор.Ref)));
		Иначе
			ОбъектДанных.Автор = ОтветственныйПоУмолчанию;
			ОбъектДанных.Менеджер = ОтветственныйПоУмолчанию;
		КонецЕсли;
	Иначе
		ОбъектДанных.Автор    = ОтветственныйПоУмолчанию;
		ОбъектДанных.Менеджер = ОтветственныйПоУмолчанию;
	КонецЕсли;
	// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Автор = ксп_ИмпортСлужебный.НайтиАвтор(деф.Автор);
	
	//ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	
	//	ОбъектДанных.ЗаказНаПеремещение = ЗаказНаПеремещениеОбъект.Ссылка;
	ОбъектДанных.ЗаказКлиента = ЗаказКлиентаОбъект.Ссылка;
	//ОбъектДанных.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);
	ОбъектДанных.Склад = мСкладОтправитель;
	
	ОбъектДанных.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ОбъектДанных.СкидкиРассчитаны = Истина;
	ОбъектДанных.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам;
	
	мБанковскийСчетОрганизации = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
		ОбъектДанных.Организация);
	ОбъектДанных.БанковскийСчетОрганизации = мБанковскийСчетОрганизации;
	
	ОбъектДанных.ДатаВозвратаМногооборотнойТары = деф.Date;
	ОбъектДанных.КурсЗнаменатель = 1;
	ОбъектДанных.КурсЧислитель = 1;
	
	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	ОбъектДанных.Партнер = Справочники.Партнеры.НайтиПоНаименованию(Строка(ОбъектДанных.Контрагент)); //Клиент
	
	//мДоговор = ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента);
	Если НЕ ЗначениеЗаполнено(мДоговор)
		ИЛИ ( НЕ ЗначениеЗаполнено(мДоговор.ВерсияДанных) 
		И ТипЗнч(мДоговор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") ) Тогда 
		// так проверяем на битую ссылку
		ОбъектДанных.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		мЛоггер.ерр("Не найден Договор 
		|для %1. ", ПредставлениеДокументаИзУПП);
	Иначе
		ОбъектДанных.Договор = мДоговор;
	КонецЕсли;
	
	мСоглашение = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка(
		"СоглашениеСКлиентамиДляРеализацияТоваровСхемаПередачаНаКомиссию", мВнешняяСистема);
	Если НЕ ЗначениеЗаполнено(мСоглашение)
		ИЛИ ( НЕ ЗначениеЗаполнено(мСоглашение.ВерсияДанных) 
		И ТипЗнч(мСоглашение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") ) Тогда 
		// так проверяем на битую ссылку
		ОбъектДанных.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		мЛоггер.ерр("Не заполнена настройка 
		|СоглашениеСКлиентамиДляРеализацияТоваровСхемаПередачаНаКомиссию 
		|в регистре ксп_ДополнительныеНастройкиИнтеграций
		|для %1. ", ПредставлениеДокументаИзУПП);
	Иначе
		ОбъектДанных.Соглашение = мСоглашение;
	КонецЕсли;
	
	//ОбъектДанных.Согласование = 
	//ОбъектДанных.Коллекция = 
	//ОбъектДанных.КаналСбыта = 
	//---
	ОбъектДанных.Валюта = ксп_ИмпортСлужебный.НайтиВалюту(деф.ВалютаДокумента.currencyCode);
	ОбъектДанных.ВалютаВзаиморасчетов = ксп_ИмпортСлужебный.НайтиВалюту(деф.ВалютаДокумента.currencyCode);
	ОбъектДанных.Комментарий = СтрШаблон("схема ПередачаНаКомиссию: [УПП РеализацияТоваровУслуг № %1 от %2 ]
		|СкладОтправитель: %3
		|СкладПолучатель: %4
		|Оригинальный комментарий: %5",
		строка(деф.number),
		строка(деф.date),
		мСкладОтправитель,
		мСкладПолучатель,
		деф.Комментарий,);
	
	Если деф.УчитыватьНДС Тогда
		ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	КонецЕсли;	
	ОбъектДанных.ЦенаВключаетНДС = деф.СуммаВключаетНДС;
	
	ОбъектДанных.РеализацияПоЗаказам = Истина; 
	
	ОбъектДанных.Основание = деф.ОснованиеТекст;   
	Если ЗначениеЗаполнено(деф.ОснованиеТекст) Тогда
		ОснованиеДатаНачало = СтрНайти(деф.ОснованиеТекст, " от ");
		ОснованиеТекст = Сред(деф.ОснованиеТекст,ОснованиеДатаНачало+4,10); 
		ОснованиеТекстДень = Лев(ОснованиеТекст,2);
		ОснованиеТекстМесяц = Сред(ОснованиеТекст,4,2);
		ОснованиеТекстГод = Сред(ОснованиеТекст,7,4);	
		ОснованиеДатаТекст = ОснованиеТекстГод + ОснованиеТекстМесяц + ОснованиеТекстДень + "00" + "00" + "01";
		Попытка 
			ОД = Дата(ОснованиеДатаТекст);
			Если ТипЗнч(ОД) = ТипЗнч("Дата") Тогда
				ОбъектДанных.ОснованиеДата = Дата(ОснованиеДатаТекст);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		ОснованиеНомерНачало = СтрНайти(деф.ОснованиеТекст, " ",,1,1);
		ОснованиеНомерКонец = СтрНайти(деф.ОснованиеТекст, " ",,1,2);
		ОбъектДанных.ОснованиеНомер = Сред(деф.ОснованиеТекст,ОснованиеНомерНачало,ОснованиеНомерКонец - ОснованиеНомерНачало);
	КонецЕсли;
	
	// ЕНС пока не заполняем. Нужно изучить поведение документов в режиме отладки
	//ОбъектДанных.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	
	//ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
	Если деф.ОтпускПроизвел.Свойство("Ref") Тогда
		ОбъектДанных.Отпустил = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.ОтпускПроизвел));
	КонецЕсли;
	//------------------------------------------------------     ТЧ Товары
	Если деф.ТЧТовары.Количество() > 1 Тогда //Сарычев
		ОбъектДанных.Товары.Очистить();
		
		Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
			стрк = деф.ТЧТовары[счТовары];
			СтрокаТЧ = ОбъектДанных.Товары.Добавить();
			
			СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
			СтрокаТЧ.Количество = стрк.Количество;
			СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
			СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
			СтрокаТЧ.ЗаказКлиента = ЗаказКлиентаОбъект.Ссылка;
			
			СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюУПП(стрк.СтавкаНДС);
			СтрокаТЧ.Цена = стрк.Цена;
			СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
			СтрокаТЧ.Сумма = стрк.Сумма;      
			СтрокаТЧ.СуммаСНДС = стрк.Сумма + стрк.СуммаНДС;
			
			//СтрокаТЧ.ДатаОтгрузки = ОбъектДанных.Дата;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//------------------------------------------------------     ТЧ Услуги
	Если деф.ТЧУслуги.Количество() > 0 Тогда //Сарычев
		
		Для счУслуги = 0 По деф.ТЧУслуги.Количество()-1 Цикл
			стрк = деф.ТЧУслуги[счУслуги];
			СтрокаТЧ = ОбъектДанных.Товары.Добавить();
			
			СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
			СтрокаТЧ.Количество = стрк.Количество;
			СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
			СтрокаТЧ.ЗаказКлиента = ЗаказКлиентаОбъект.Ссылка;
			
			СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюУПП(стрк.СтавкаНДС);
			СтрокаТЧ.Цена = стрк.Цена;
			СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
			СтрокаТЧ.Сумма = стрк.Сумма;      
			СтрокаТЧ.СуммаСНДС = стрк.Сумма + стрк.СуммаНДС;
			
			//СтрокаТЧ.ДатаОтгрузки = ОбъектДанных.Дата;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//------------------------------------------------------ ФИНАЛ
	
	Попытка
		
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
	Исключение
		
		СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа "+ПредставлениеДокументаИзУПП+".
			|Подробности: "+СообщениеОбОшибке);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка загрузки документа (УПП): %1.
			|Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ОбъектДанных;
	
КонецФункции

Функция СоздатьПередачуТоваровХранителю(СтруктураОбъекта, СуществующийПТХСсылка, РООбъект, ЗаказКлиентаОбъект) Экспорт
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "ПередачаТоваровХранителю (УПП РеализацияТоваровУслуг) № " + деф.Number + " от " + строка(деф.Date);
	
	//------------------------------------- Заполнение реквизитов
	
	Если ЗначениеЗаполнено(СуществующийПТХСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Действие = ДействиеСДокументом(ЭтоНовый, СуществующийПТХСсылка, деф);
	
	Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
		мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ПредставлениеДокументаИзУПП);
		Возврат СуществующийПТХСсылка;
	КонецЕсли;
	
	Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
		ОбъектДанных = СуществующийПТХСсылка.ПолучитьОбъект();
		ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ЗафиксироватьТранзакцию();
		мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ПредставлениеДокументаИзУПП);
		Возврат СуществующийПТХСсылка;
	КонецЕсли;
	
	Если Действие = ОБНОВИТЬ Тогда
		ОбъектДанных = СуществующийПТХСсылка.ПолучитьОбъект();
		мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ПредставлениеДокументаИзУПП);
	ИначеЕсли Действие = СОЗДАТЬ Тогда
		ОбъектДанных = Документы.ПередачаТоваровХранителю.СоздатьДокумент();
		СсылкаНового = Документы.ПередачаТоваровХранителю.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ПредставлениеДокументаИзУПП);
	Иначе
		ТекстСообщения = "Действие = Неизвестое действие: "+Строка(Действие)+". Документ: " + ПредставлениеДокументаИзУПП;
		мЛоггер.ерр(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	// так не получится, потому что основание должен быть проведенным, а у нас - не проводится при импорте
	//ОбъектДанных.Заполнить(ЗаказКлиентаОбъект.Ссылка);
	ЗаполнитьЗначенияСвойств(ОбъектДанных, ЗаказКлиентаОбъект.Ссылка,,"Номер");
	
	//ОбъектДанных.Номер = id.Number;
	
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	
	//ОбъектДанных.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	//
	//ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	//
	//ОбъектДанных.Склад = мСкладОтправитель;
	//
	//ОбъектДанных.Валюта = константы.ВалютаРегламентированногоУчета.Получить();
	//
	//ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	//ОбъектДанных.Договор 	= мДоговор;//ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента);
	//ОбъектДанных.Партнер 	= ОбъектДанных.Контрагент.Партнер;
	//ОбъектДанных.Соглашение = 
	//	РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("СоглашениеСКлиентамиДляРеализацяТоваровУслугИзРозница", мВнешняяСистема);
	
	ОбъектДанных.ЗаказКлиента = ЗаказКлиентаОбъект.ссылка;
	//ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	ОбъектДанных.ПередачаПоЗаказам = Истина;
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
	
	////------------------------------------------------------     ТЧ Товары
	
	ОбъектДанных.Товары.Очистить();
	Для каждого стрк Из ЗаказКлиентаОбъект.Товары Цикл
		НовСтр = ОбъектДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, стрк);
	КонецЦикла;
	
	//------------------------------------------------------ ФИНАЛ
	
	Попытка
		
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
	Исключение
		
		СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа " + ПредставлениеДокументаИзУПП+".
			|Подробности: " + СообщениеОбОшибке);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка загрузки документа (УПП): %1.
			|Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ОбъектДанных;
	
КонецФункции

#КонецОбласти


#Область Тестирование

// вызывается из формы
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(JsonText) export
	
	мЧтениеJSON = Новый ЧтениеJSON;
	
	
	мЧтениеJSON.УстановитьСтроку(JsonText);
	
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
		
		НеНайденнаяНоменклатураМассив = Новый Массив;
		
		Для Каждого эл из СтруктураОбъекта Цикл
			ЗагрузитьОбъект(эл);
		КонецЦикла;                       
		
		Рез = Новый Структура;
		Рез.Вставить("НеНайденнаяНоменклатураМассив", НеНайденнаяНоменклатураМассив);
		
		Возврат Рез;
		
	Иначе
		Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	КонецЕсли;
	
	
КонецФункции 

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)
	
	СуществующийОбъект 		= Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе 
		
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		
		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;	
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф) Экспорт
	
	Если Не ЭтоНовый Тогда
		
		Если СуществующийДокСсылка.ПометкаУдаления Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		ИначеЕсли НЕ СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		ИначеЕсли СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // новый документ
		
		Если деф.DeletionMark = Истина Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли НЕ деф.isPosted Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли деф.isPosted Тогда
			Возврат СОЗДАТЬ;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НЕ_ЗАГРУЖАТЬ;
	
КонецФункции

// Используется в  ксп_ИмпортСлужебный.ПроверитьКачествоДанных()
//
// Параметры:
//  ДокументОбъект  - ДокументСсылка - <описание параметра>
//
// Возвращаемое значение:
//  ТЗ, Колонки:
//   * ИмяТЧ
//   * ИмяКолонки
//
Функция ТабличныеЧастиДляПроверки(ДокументСсылка = Неопределено) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяТЧ");
	ТЗ.Колонки.Добавить("ИмяКолонки");
	
	Если ДокументСсылка = Неопределено 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказКлиента")
		//ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаТоваровХранителю")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "Товары";
		НовСтр.ИмяКолонки = "Номенклатура";
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "Товары";
		НовСтр.ИмяКолонки = "Характеристика";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "ТоварыПоРаспоряжениям";
		НовСтр.ИмяКолонки = "Номенклатура";
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "ТоварыПоРаспоряжениям";
		НовСтр.ИмяКолонки = "Характеристика";
		
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "ОтгружаемыеТовары";
		НовСтр.ИмяКолонки = "Номенклатура";
		НовСтр = ТЗ.Добавить();
		НовСтр.ИмяТЧ = "ОтгружаемыеТовары";
		НовСтр.ИмяКолонки = "Характеристика";
		
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции

мВнешняяСистема = "upp";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";

СобиратьНенайденнуюНоменклатуру = Истина;
НеНайденнаяНоменклатураМассив = Новый Массив;

НЕ_ЗАГРУЖАТЬ = 1;
СОЗДАТЬ = 2;
ОБНОВИТЬ = 3;
ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;

