Перем мВнешняяСистема;
Перем мЛоггер;
Перем мИдВызова; 

Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
  
Перем ИмяСобытияЖР;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.2");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_РасходИзКассы");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_РасходИзКассы");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
	"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_РасходИзКассы",
	"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_РасходныйКассовыйОрдер",
	ТипКоманды, 
	Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
	//           ** Использование - Строка - тип команды:
	//               "ВызовКлиентскогоМетода",
	//               "ВызовСерверногоМетода",
	//               "ЗаполнениеФормы",
	//               "ОткрытиеФормы" или
	//               "СценарийВБезопасномРежиме".
	//               Для получения типов команд рекомендуется использовать функции
	//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
	//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.
	
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	




Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.РасходИзКассы") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(мЛоггер) Тогда
	//	
	//	сетИдВызова(Строка(Новый УникальныйИдентификатор));
	//	
	//КонецЕсли;

	
	ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	ВидОбъекта = "расходныйкассовыйордер";
	
	ДокументДляОповещения = ВидОбъекта + " " + Деф.Номер;
	
	ПустойДокумент = Документы[ВидОбъекта].ПустаяСсылка();
		
		
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки цепочки документов для. Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез2 = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка			
		
		Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ДокументДляОповещения);
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
			СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
			мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ДокументДляОповещения);
		Иначе 
			ОтменитьТранзакцию();
			мЛоггер.инфо("Действие = Неизвестое действие: "+Строка(Действие)+". Документ: %1", ДокументДляОповещения);
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта);		

		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ",Истина);
		
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.ОбменДанными.Загрузка = Ложь;
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	
		
				
		ЗафиксироватьТранзакцию();          		
		
		мЛоггер.инфо("Записан Документ : %1. Исходный док. Розница: %2", ОбъектДанных, ДокументДляОповещения);
		
		Рез = Новый Структура;
		Рез.Вставить(ВидОбъекта, ОбъектДанных.Ссылка);
		
		
		
		Рез2 = ОбъектДанных.ССылка;
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ошибка = "Объект не загружен! Ошибка в процессе загрузки документа " + ДокументДляОповещения + ". Подробности: " + т;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,ошибка);
		мЛоггер.ерр(ошибка);
		Рез2 = Неопределено;
	КонецПопытки;	
		
	Возврат Рез;	
	
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер                                    = деф.Number;
	ОбъектДанных.Дата                                     = деф.Date;

	ОбъектДанных.ПометкаУдаления                          = деф.DeletionMark;


	ОбъектДанных.Организация                              = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация,мВнешняяСистема);
	//ОбъектДанных.ОрганизацияПолучатель                    = ксп_ИмпортСлужебный.НайтиОрганизацию(Деф.ОрганизацияПолучатель, мВнешняяСистема);
	ОбъектДанных.Касса                                    = ксп_ИмпортСлужебный.НайтиКассу(деф.Касса, мВнешняяСистема);
	ОбъектДанных.СуммаДокумента                           = Деф.СуммаДокумента;
	ОбъектДанных.ХозяйственнаяОперация                    = РегистрыСведений.ксп_МэппингХозяйственныеОперации.ПоМэппингу(ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"ХозяйственнаяОперация.Ref"), мВнешняяСистема );
	ОбъектДанных.Выдать                                   = Деф.Выдать;
	ОбъектДанных.Основание                                = Деф.Основание;
	ОбъектДанных.Приложение                               = Деф.Приложение;
	ОбъектДанных.ПоДокументу                              = Деф.ПоДокументу;
	//ОбъектДанных.КассаПолучатель                          = Неопределено;
	ОбъектДанных.Контрагент                               = ксп_ИмпортСлужебный.НайтиКонтрагента(Деф.Контрагент, мВнешняяСистема);
	ОбъектДанных.БанковскийСчет                           = ксп_ИмпортСлужебный.НайтиБанковскийСчет(ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"СчетОрганизации.НомерСчета"),
																									ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"СчетОрганизации.БИК"));
	//ОбъектДанных.ПодотчетноеЛицо                          = Неопределено;
	//ОбъектДанных.ЗаявкаНаРасходованиеДенежныхСредств      = Неопределено;
	//ОбъектДанных.РаспоряжениеНаПеремещениеДенежныхСредств = Неопределено;
	ОбъектДанных.Валюта                                   = Константы.ВалютаРегламентированногоУчета.Получить();
	//ОбъектДанных.Автор                                    = Неопределено;
	ОбъектДанных.КассаККМ                                 = ксп_ИмпортСлужебный.НайтиКассуККМ(Деф.КассаККМ);
	ОбъектДанных.Комментарий                              = Деф.Комментарий;
	//ОбъектДанных.НеКонтролироватьЗаполнениеЗаявки         = Неопределено;
	ОбъектДанных.СтатьяДвиженияДенежныхСредств            = РегистрыСведений.ксп_МэппингСправочникСтатьиДДС.ПоМэппингу(ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"Статья.Ref"), мВнешняяСистема);
	ОбъектДанных.ДокументОснование                        = ксп_ИмпортСлужебный.НайтиДокументПоСоответствию(Деф.ДокументОснование,ксп_ИмпортСлужебный.СтандартноеСоответствиеДокументов());
	//ОбъектДанных.ВалютаКонвертации                        = Неопределено;
	//ОбъектДанных.КурсКонвертации                          = Неопределено;
	//ОбъектДанных.СуммаКонвертации                         = Неопределено;
	//ОбъектДанных.Ведомость                                = Неопределено;
	//ОбъектДанных.Подразделение                            = Неопределено;
	//ОбъектДанных.Руководитель                             = Неопределено;
	//ОбъектДанных.ГлавныйБухгалтер                         = Неопределено;
	//ОбъектДанных.НомерВедомостиНаВыплатуЗарплаты          = Неопределено;
	//ОбъектДанных.ДатаВедомостиНаВыплатуЗарплаты           = Неопределено;
	//ОбъектДанных.ОплатаПоЗаявкам                          = Неопределено;
	//ОбъектДанных.ПроводкиПоРаботникам                     = Неопределено;
	//ОбъектДанных.ДатаАвансовогоОтчета                     = Неопределено;
	//ОбъектДанных.ГруппаФинансовогоУчета                   = Неопределено;
	//ОбъектДанных.НаправлениеДеятельности                  = Неопределено;
	//ОбъектДанных.Договор                                  = Неопределено;
	ОбъектДанных.Партнер                                  = ОбъектДанных.Контрагент.Партнер;
	//ОбъектДанных.КратностьКурсаКонвертации                = Неопределено;
	//ОбъектДанных.ОбъектРасчетов                           = Неопределено;
	//ОбъектДанных.ИдентификаторДокумента                   = Неопределено;
	//ОбъектДанных.Исправление                              = Неопределено;
	//ОбъектДанных.СторнируемыйДокумент                     = Неопределено;
	//ОбъектДанных.ИсправляемыйДокумент                     = Неопределено;
	//ОбъектДанных.Кассир                                   = Неопределено;
	ОбъектДанных.НалогообложениеНДС                       = ксп_ИмпортСлужебный.КонвертацияТиповНалогообложенияНДС(Деф.НалогообложениеНДС);
	//ОбъектДанных.ПериодРегистрации                        = Неопределено;
	
	
КонецФункции






#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export
	
	
	мЧтениеJSON = Новый ЧтениеJSON;
	
	
	мЧтениеJSON.УстановитьСтроку(Json);
	
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

 Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из Розница: расход из кассы");
    Возврат ЭтотОбъект;
     
КонецФункции



 мВнешняяСистема = "retail";    
 ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";
 
 
 НЕ_ЗАГРУЖАТЬ = 1;
 СОЗДАТЬ = 2;
 ОБНОВИТЬ = 3;
 ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;
