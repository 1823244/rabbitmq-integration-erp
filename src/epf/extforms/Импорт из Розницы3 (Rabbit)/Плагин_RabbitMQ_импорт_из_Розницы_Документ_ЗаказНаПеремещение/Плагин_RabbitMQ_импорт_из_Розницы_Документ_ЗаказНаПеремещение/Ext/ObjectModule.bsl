Перем мВнешняяСистема;
Перем мЛоггер;
Перем мИдВызова; 

Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
  
Перем ИмяСобытияЖР;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.10");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ЗаказНаПеремещение");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ЗаказНаПеремещение");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_ЗаказНаПеремещение",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_ПеремещениеТоваров",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	




// ///////////   ИМПОРТ  В ЗаказНаПеремещение ////////////

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.ЗаказНаПеремещение") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта = "ЗаказНаПеремещение"; 
	
	
	ДокументДляОповещения = ВидОбъекта + " " + Деф.Номер;
	
	ПустойДокумент = Документы[ВидОбъекта].ПустаяСсылка();
		
		
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки цепочки документов для. Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез2 = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка			
		
		Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ДокументДляОповещения);
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
			СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
			мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ДокументДляОповещения);
		Иначе 
			ОтменитьТранзакцию();
			мЛоггер.инфо("Действие = Неизвестое действие: "+Строка(Действие)+". Документ: %1", ДокументДляОповещения);
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта);		

		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ",Истина);
		
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.ОбменДанными.Загрузка = Ложь;
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	
		
				
		ЗафиксироватьТранзакцию();          		
		
		мЛоггер.инфо("Записан Документ : %1. Исходный док. Розница: %2", ОбъектДанных, ДокументДляОповещения);
		
		Рез = Новый Структура;
		Рез.Вставить(ВидОбъекта, ОбъектДанных.Ссылка);
		
		
		
		Рез2 = ОбъектДанных.ССылка;
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ошибка = "Объект не загружен! Ошибка в процессе загрузки документа " + ДокументДляОповещения + ". Подробности: " + т;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,ошибка);
		мЛоггер.ерр(ошибка);
		Рез2 = Неопределено;
	КонецПопытки;	
		
	Возврат Рез;
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
   // ОбъектДанных.ДлительностьПеремещения                 = Неопределено;
	ОбъектДанных.ЖелаемаяДатаПоступления                 = Деф.ДатаПеремещения;
	ОбъектДанных.Комментарий                             = Деф.Комментарий;
	//ОбъектДанных.МаксимальныйКодСтроки                   = Неопределено;
	ОбъектДанных.Организация                             = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация,мВнешняяСистема);
	ОбъектДанных.ОрганизацияПолучатель                   = ОбъектДанных.Организация;
	ОбъектДанных.Ответственный                           = Пользователи.ТекущийПользователь();
	//ОбъектДанных.Подразделение                           = Неопределено;
	//ОбъектДанных.Сделка                                  = Неопределено;
	ОбъектДанных.СкладОтправитель                        = ксп_ИмпортСлужебный.НайтиСклад(деф.СтруктурнаяЕдиницаРезерв, мВнешняяСистема);
	ОбъектДанных.СкладПолучатель                         = ксп_ИмпортСлужебный.НайтиСклад(деф.СтруктурнаяЕдиницаПолучатель, мВнешняяСистема);
	ОбъектДанных.Статус                                  = РегистрыСведений.ксп_МэппингСтатусЗаказовНаПеремещение.ПоМэппингу(
	                                                                                                            ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"СостояниеЗаказа.Ref"),
																												мВнешняяСистема
	 																														);
	ОбъектДанных.ХозяйственнаяОперация                   = РегистрыСведений.ксп_МэппингХозяйственныеОперации.ПоМэппингу(
	                                                                                                            ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"ХозяйственнаяОперация.Ref"),
																												мВнешняяСистема
	 																														);
	//ОбъектДанных.Назначение                              = Неопределено;
	ОбъектДанных.ДокументОснование                       = ксп_ИмпортСлужебный.НайтиДокументПоСоответствию(Деф.ДокументОснование, ксп_ИмпортСлужебный.СтандартноеСоответствиеДокументов()) ;
	//ОбъектДанных.СостояниеЗаполненияМногооборотнойТары   = Неопределено;
	//ОбъектДанных.СпособДоставки                          = Перечисления.СпособыДоставки.Самовывоз;
	//ОбъектДанных.ПеревозчикПартнер                       = Неопределено;
	//ОбъектДанных.ЗонаДоставки                            = Неопределено;
	//ОбъектДанных.ВремяДоставкиС                          = Неопределено;
	//ОбъектДанных.ВремяДоставкиПо                         = Неопределено;
	//ОбъектДанных.АдресДоставкиПеревозчика                = Неопределено;
	//ОбъектДанных.АдресДоставкиЗначенияПолей              = Неопределено;
	//ОбъектДанных.АдресДоставкиПеревозчикаЗначенияПолей   = Неопределено;
	//ОбъектДанных.ДополнительнаяИнформацияПоДоставке      = Неопределено;
	//ОбъектДанных.АдресДоставки                           = Неопределено;
	//ОбъектДанных.ОсобыеУсловияПеревозки                  = Неопределено;
	//ОбъектДанных.ОсобыеУсловияПеревозкиОписание          = Неопределено;
	//ОбъектДанных.НаправлениеДеятельности                 = Неопределено;
	//ОбъектДанных.ИспользоватьДлительностьПеремещения     = Неопределено;
	//ОбъектДанных.ПеремещениеПодДеятельность              = Неопределено;
	//ОбъектДанных.ОбосабливатьПоНазначениюЗаказа          = Неопределено;
	ОбъектДанных.ВариантПриемкиТоваров                   = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	ОбъектДанных.Приоритет                               = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	//ОбъектДанных.Автор                                   = Неопределено;
	//ОбъектДанных.АдресДоставкиЗначение                   = Неопределено;
	//ОбъектДанных.АдресДоставкиПеревозчикаЗначение        = Неопределено; 
	
	ОбъектДанных.Товары.Очистить();
	
	Для каждого стрк из Деф.ТЧЗапасы Цикл
		
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();
		
		СтрокаТЧ.НачалоОтгрузки                              = ПрочитатьДатуJSON(Деф.ДатаПеремещения, ФорматДатыJSON.ISO);
		//СтрокаТЧ.ОкончаниеПоступления                        = Деф.ДатаПеремещения;
		//СтрокаТЧ.Количество                                  = Неопределено;
		СтрокаТЧ.КоличествоУпаковок                          = стрк.Количество;
		СтрокаТЧ.Номенклатура                                = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);;
		СтрокаТЧ.Упаковка                                    = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.ЕдиницаИзмерения, стрк.Номенклатура);;
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(СтрокаТЧ,Новый Структура("ПересчитатьКоличествоЕдиниц"), КэшированныеЗначения); 
		
		СтрокаТЧ.Характеристика                              = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);
		//СтрокаТЧ.Отменено                                    = Неопределено;
		СтрокаТЧ.КодСтроки                                   = Деф.ТЧЗапасы.Найти(стрк);
		СтрокаТЧ.ВариантОбеспечения                          = Перечисления.ВариантыОбеспечения.Отгрузить;
		//СтрокаТЧ.Назначение                                  = Неопределено;
		//СтрокаТЧ.Серия                                       = Неопределено;
		//СтрокаТЧ.СтатусУказанияСерий                         = Неопределено;
		//СтрокаТЧ.Обособленно                                 = Неопределено;
		//СтрокаТЧ.ВариантОбеспеченияДоИзмененияОбновлениемИБ  = Неопределено;
		//СтрокаТЧ.НоменклатураНабора                          = Неопределено;
		//СтрокаТЧ.ХарактеристикаНабора		                 = Неопределено;
		
	КонецЦикла;
		
		
КонецФункции




//// ///////////   Перемещение товаров ////////////


//// Описание_метода
////
//// Параметры:
////	ЗаказНаПеремещение 	- ДокументСсылка.ЗаказыНаПеремещение - 
////
//// Возвращаемое значение:
////	Тип: Тип_значения
////
//Функция СоздатьПеремещениеТоваров(ЗаказНаПеремещение) Экспорт
//		
//	
//	ИскомыйДокумент = НайтиПодчиненныйПеремещение(ЗаказНаПеремещение);
//	
//	Если НЕ ЗначениеЗаполнено(ИскомыйДокумент) Тогда
//		ОбъектДанных = Документы.ПеремещениеТоваров.СоздатьДокумент();
//	Иначе 
//		ОбъектДанных = ИскомыйДокумент.ПолучитьОбъект();
//	КонецЕсли;
//	
//	Если ОбъектДанных.Проведен Тогда
//		ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
//	КонецЕсли;
//	
//	ЗаполнитьРеквизитыПеремещение(ОбъектДанных, ЗаказНаПеремещение);
//	
//	
//	Возврат ОбъектДанных.Ссылка;
//	
//КонецФункции

//// Описание_метода
////
//// Параметры:
////	Параметр1 	- Тип1 - 
////
//// Возвращаемое значение:
////	Тип: Тип_значения
////
//Функция НайтиПодчиненныйПеремещение(ЗаказНаПеремещение)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	Док_.Ссылка КАК Ссылка
//		|ИЗ
//		|	Документ.ПеремещениеТоваров КАК Док_
//		|ГДЕ
//		|	Док_.ЗаказНаПеремещение = &ЗаказНаПеремещение";
//	
//	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//		Возврат ВыборкаДетальныеЗаписи.Ссылка;
//	КонецЦикла;
//	
//	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

//	Возврат Неопределено;
//	
//КонецФункции

//Функция ЗаполнитьРеквизитыПеремещение(ОбъектДанных, ЗаказНаПеремещение) Экспорт

//	jsonText = "";
//	СтруктураОбъекта = Неопределено;
//	
//	ЗаполнитьЗначенияСвойств(ОбъектДанных, ЗаказНаПеремещение,,"Номер");
//	
//	ОбъектДанных.Дата 					= ЗаказНаПеремещение.Дата;
//	ОбъектДанных.СкладОтправитель 		= ЗаказНаПеремещение.СкладОтправитель;
//	ОбъектДанных.СкладПолучатель 		= ЗаказНаПеремещение.СкладПолучатель;
//	ОбъектДанных.ЗаказНаПеремещение		= ЗаказНаПеремещение;
//	ОбъектДанных.Статус 				= Перечисления.СтатусыПеремещенийТоваров.Принято;
//	ОбъектДанных.ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
//	ОбъектДанных.ПеремещениеПоЗаказам	= Истина;
//	ОбъектДанных.КСП_НеНуженВРознице 	= Истина;
//	
//	ОбъектДанных.Товары.Очистить();
//	Для каждого стрк Из ЗаказНаПеремещение.Товары Цикл
//		НовСтр = ОбъектДанных.Товары.Добавить();
//		ЗаполнитьЗначенияСвойств(НовСтр, стрк);
//		НовСтр.ЗаказНаПеремещение = ЗаказНаПеремещение;// ЕНС. а надо ли это?
//		НовСтр.КодСтроки = стрк.КодСтроки;
//	КонецЦикла;	
//	
//	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
//	ОбъектДанных.Записать();

//	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
//	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
//	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
//	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
//	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

//КонецФункции





#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Возврат XMLЗначение(Тип("Число"),Значение);
		Иначе 
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
	Если Значение = "false" Тогда 
		Возврат Ложь;
	КонецЕсли;
	Если Значение = "true" Тогда 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("СкладОтправитель");
	//мРеквизиты.Добавить("СкладПолучатель");
	//мРеквизиты.Добавить("Организация");
	////мРеквизиты.Добавить("ОрганизацияПолучатель");
	//мРеквизиты.Добавить("Ответственный");
	Возврат мРеквизиты;
	
КонецФункции


 Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из Розница: Заказ на перемещение");
    Возврат ЭтотОбъект;
     
КонецФункции

 мВнешняяСистема = "retail";    
 ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";
 
 
 НЕ_ЗАГРУЖАТЬ = 1;
 СОЗДАТЬ = 2;
 ОБНОВИТЬ = 3;
 ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;

