// версия 1.8. 2024-07-15. Елисеев
// В этой версии добавлено:
// 1 фильтр по складам с помощью регистра св. КСП_ОграниченияИмпортаДокументовУПП
// 2 перенос пометки удаления (новое действие в методе ксп_ИмпортСлужебный.ДействиеСДокументом())

Перем мВнешняяСистема;
Перем мЛоггер;
Перем мИдВызова; 

Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
Перем ПОМЕТИТЬ;
  
Перем ИмяСобытияЖР;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.8");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_РасходнаяНакладная");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_РасходнаяНакладная");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_РасходнаяНакладная",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_РеализацияТоваров",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.РасходнаяНакладная") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	// Если НЕ ЗначениеЗаполнено(мЛоггер) Тогда 
	//	 сетИдВызова(Строка(Новый УникальныйИдентификатор));
	//КонецЕсли;
	
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт из Розница 3 РасходнаяНакладная");
	
	

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта = "РеализацияТоваровУслуг";

	ДокументДляОповещения = ВидОбъекта + " " + Деф.Номер;
	
	ПустойДокумент = Документы[ВидОбъекта].ПустаяСсылка();
		
	 
	
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки цепочки документов для. Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез2 = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка			
		
		Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
        // добавлено 2024-07-03
        Если Действие = ПОМЕТИТЬ Тогда
            ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
            ОбъектДанных.УстановитьПометкуУдаления(Истина);
            //ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);// это не требуется, т.к. отмена проведения выполняется методом УстановитьПометкуУдаления()
            РегистрыСведений.ксп_ОтложенноеПроведение.УдалитьОтложенноеПроведение(СуществующийДокСсылка);//добавлено 2024-07-03
            ЗафиксироватьТранзакцию();
            Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ДокументДляОповещения);
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
			СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
			мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ДокументДляОповещения);
		Иначе 
			ОтменитьТранзакцию();
			мЛоггер.инфо("Действие = Неизвестое действие: "+Строка(Действие)+". Документ: %1", ДокументДляОповещения);
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта);
		
		//начало - Елисеев :: 15.07.2024
		НеЗагружать = Ложь;
		Если ЗначениеЗаполнено(ОбъектДанных.Склад) Тогда
			Попытка
				ВидДокументаУПП = Справочники.КСП_ВидыДокументовУПП.НайтиПоНаименованию("Документ.РеализацияТоваровУслуг", Истина);
				НеЗагружать = Вычислить("РегистрыСведений.КСП_ОграниченияИмпортаДокументовУПП.ЗапретитьИмпорт(ВидДокументаУПП, ОбъектДанных.Склад)");
			Исключение
			    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЕсли; 
		
		Если НеЗагружать = Истина Тогда
			мЛоггер.инфо("Пропущен Документ : %1. Исходный док. Розница: %2. Причина: в регистре КСП_ОграниченияИмпортаДокументовУПП включен фильтр по складу %3", 
				ОбъектДанных, ДокументДляОповещения, ОбъектДанных.Склад);
			Возврат СуществующийДокСсылка;//вернем хоть что-то, даже если это новый документ
		КонецЕсли;
		//конец - Елисеев :: 15.07.2024

		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ",Истина);
		
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.ОбменДанными.Загрузка = Ложь;
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	
		
				
		ЗафиксироватьТранзакцию();          		
		
		мЛоггер.инфо("Записан Документ : %1. Исходный док. Розница: %2", ОбъектДанных, ДокументДляОповещения);
		
		Рез = Новый Структура;
		Рез.Вставить(ВидОбъекта, ОбъектДанных.Ссылка);
		
		
		
		Рез2 = ОбъектДанных.ССылка;
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ошибка = "Объект не загружен! Ошибка в процессе загрузки документа " + ДокументДляОповещения + ". Подробности: " + т;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,ошибка);
		мЛоггер.ерр(ошибка);
		Рез2 = Неопределено;
	КонецПопытки;	
		
	Возврат Рез;	
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
    ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;

    ОбъектДанных.Валюта = ксп_ИмпортСлужебный.НайтиВалюту(Деф.ВалютаДокумента.currencyCode);
	
	ОбъектДанных.ВалютаВзаиморасчетов = ОбъектДанных.Валюта;
    
	ОбъектДанных.ПорядокРасчетов = 
		РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ПорядокРасчетовДляРеализацяТоваровУслугИзРозница", мВнешняяСистема);
	
	ОбъектДанных.Контрагент = Справочники.Контрагенты.РозничныйПокупатель; 
	
	ОбъектДанных.Партнер    = Справочники.Партнеры.РозничныйПокупатель;
	
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

	ОбъектДанных.СкидкиРассчитаны = Истина;
	
	ОбъектДанных.ЗаказКлиента = ксп_ИмпортСлужебный.НайтиДокументПоСоответствию(Деф.Заказ, ксп_ИмпортСлужебный.СтандартноеСоответствиеДокументов());
	
	Если ЗначениеЗаполнено(ОбъектДанных.ЗаказКлиента) Тогда
		
		ОбъектДанных.РеализацияПоЗаказам = Истина;
		
	КонецЕсли;


	ОбъектДанных.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.СтруктурнаяЕдиница, мВнешняяСистема);
	
	
	ОбъектДанных.Согласован = Истина;

	ОбъектДанных.Соглашение = 
		РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("СоглашениеСКлиентамиДляРеализацияТоваровУслугИзРозница", мВнешняяСистема);

	ОбъектДанных.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;

	ОбъектДанных.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;

	//ОбъектДанных.СуммаВзаиморасчетов = деф.СуммаДокумента;

	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;

	ОбъектДанных.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта;

	//ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	
	ОбъектДанных.ХозяйственнаяОперация = РегистрыСведений.ксп_МэппингХозяйственныеОперации.ПоМэппингу(ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"ХозяйственнаяОперация.Ref") ,мВнешняяСистема);

	ОбъектДанных.ЦенаВключаетНДС = деф.НДСВключатьВСтоимость;
	
	ОбъектДанных.ИдентификаторПлатежа = Деф.ИдентификаторПлатежа;
	
	ОбъектДанных.НалогообложениеНДС  = ксп_ИмпортСлужебный.КонвертацияТиповНалогообложенияНДС(Деф.НалогообложениеНДС);

	//ОбъектДанных.ЭтапГосконтрактаЕИС = деф.ЭтапГосконтрактаЕИС;

    ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(Деф.ВидЦен, мВнешняяСистема);


	////------------------------------------------------------     ТЧ Товары



	ОбъектДанных.Товары.Очистить();


	Для каждого стрк из Деф.ТЧЗапасы цикл

		
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();
		
		СтрокаТЧ.ВидЦены = ВидЦены;
    
		СтрокаТЧ.ЗаказКлиента = ОбъектДанных.ЗаказКлиента;

		СтрокаТЧ.ИдентификаторСтроки = строка(Новый УникальныйИдентификатор);

		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

		СтрокаТЧ.КодСтроки = стрк.КлючСвязи;



		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;

		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);


		СтрокаТЧ.ПроцентАвтоматическойСкидки = стрк.ПроцентАвтоматическойСкидки;

		СтрокаТЧ.ПроцентРучнойСкидки = стрк.ПроцентСкидкиНаценки;

		СтрокаТЧ.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.СтруктурнаяЕдиница, мВнешняяСистема);

		СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюРозницы(стрк.СтавкаНДС);

//		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ.СуммаАвтоматическойСкидки = стрк.СуммаАвтоматическойСкидки;

	//	СтрокаТЧ.СуммаБонусныхБалловКСписанию = стрк.СуммаБонусныхБалловКСписанию;

	//	СтрокаТЧ.СуммаБонусныхБалловКСписаниюВВалюте = стрк.СуммаБонусныхБалловКСписаниюВВалюте;

	//	СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

	//	СтрокаТЧ.СуммаНачисленныхБонусныхБалловВВалюте = стрк.СуммаНачисленныхБонусныхБалловВВалюте;

		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

		СтрокаТЧ.СуммаРучнойСкидки = стрк.СуммаСкидкиНаценки;

		СтрокаТЧ.СуммаСНДС = Число(стрк.Сумма)+Число(стрк.СуммаНДС);

		СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.ЕдиницаИзмерения, стрк.Номенклатура);

		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика); 
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(СтрокаТЧ,Новый Структура("ПересчитатьКоличествоЕдиниц"), КэшированныеЗначения);


		СтрокаТЧ.Цена = стрк.Цена;

		СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиСоздатьКлючАналитикиНом(СтрокаТЧ.Номенклатура, ОбъектДанных.Склад, СтрокаТЧ.Характеристика);
	
	КонецЦикла;

	
КонецФункции








#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции




// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиДоговорРеализации(Контрагент, Организация) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Контрагент = &Контрагент";
	
	
	ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
	
	Запрос.УстановитьПараметр("ТипДоговора", ТипДоговора);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Договор;
	КонецЦикла;
		
	Возврат Неопределено;
	
КонецФункции


Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("Склад");
	мРеквизиты.Добавить("Организация");  
	мРеквизиты.Добавить("ХозяйственнаяОперация");

	Возврат мРеквизиты;
	
КонецФункции   


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ТабличныеЧастиДляПроверки() Экспорт
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяТЧ");
	ТЗ.Колонки.Добавить("ИмяКолонки");
	
	//НовСтр = ТЗ.Добавить();
	//НовСтр.ИмяТЧ = "";
	//НовСтр.ИмяКолонки = "";
	
	НовСтр = ТЗ.Добавить();
	НовСтр.ИмяТЧ = "Товары";
	НовСтр.ИмяКолонки = "Номенклатура"; 
	
	НовСтр = ТЗ.Добавить();
	НовСтр.ИмяТЧ = "Товары";
	НовСтр.ИмяКолонки = "Склад";

	//НовСтр = ТЗ.Добавить();
	//НовСтр.ИмяТЧ = "Товары2_5";
	//НовСтр.ИмяКолонки = "ВидЦены";

	//НовСтр = ТЗ.Добавить();
	//НовСтр.ИмяТЧ = "ВидыЦен";
	//НовСтр.ИмяКолонки = "ВидЦены";

	Возврат ТЗ;
	
КонецФункции
Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
	//мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из Розница: Реализация товаров");
    Возврат ЭтотОбъект;
     
КонецФункции


 мВнешняяСистема = "retail";    
 ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";
 
 
 НЕ_ЗАГРУЖАТЬ = 1;
 СОЗДАТЬ = 2;
 ОБНОВИТЬ = 3;
 ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;
 ПОМЕТИТЬ = 5;
 