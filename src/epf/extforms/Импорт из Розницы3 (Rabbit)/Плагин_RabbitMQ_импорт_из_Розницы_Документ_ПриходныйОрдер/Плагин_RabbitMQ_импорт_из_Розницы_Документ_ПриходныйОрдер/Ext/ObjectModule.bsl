Перем мВнешняяСистема;
Перем мЛоггер;
Перем мИдВызова; 

Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
  
Перем ИмяСобытияЖР; 

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.7");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ПриходныйОрдер");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ПриходныйОрдер");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_ПриходныйОрдер",
		"Форма_Плагин_Плагин_RabbitMQ_импорт_из_Розницы_Документ_ПриходныйОрдерНаТовары",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.ПриходныйОрдер") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из Розница: Приходный ордер на товары");
	
	ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	
	
    ВидОбъекта = "ПриходныйОрдерНаТовары";
	
	Если деф.ОтражениеРасхождений Тогда 
	    ВидОбъекта = "ОрдерНаОтражениеИзлишковТоваров";	
	КонецЕсли;

	ДокументДляОповещения = ВидОбъекта + " " + Деф.Номер;
	
	ПустойДокумент = Документы[ВидОбъекта].ПустаяСсылка();
		
		
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки цепочки документов для. Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез2 = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка			
		
		Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ДокументДляОповещения);
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
			СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
			мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ДокументДляОповещения);
		Иначе 
			ОтменитьТранзакцию();
			мЛоггер.инфо("Действие = Неизвестое действие: "+Строка(Действие)+". Документ: %1", ДокументДляОповещения);
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта);		

		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ",Истина);
		
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.ОбменДанными.Загрузка = Ложь;
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	
		
				
		ЗафиксироватьТранзакцию();          		
		
		мЛоггер.инфо("Записан Документ : %1. Исходный док. Розница: %2", ОбъектДанных, ДокументДляОповещения);
		
		Рез = Новый Структура;
		Рез.Вставить(ВидОбъекта, ОбъектДанных.Ссылка);
		
		
		
		Рез2 = ОбъектДанных.ССылка;
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ошибка = "Объект не загружен! Ошибка в процессе загрузки документа " + ДокументДляОповещения + ". Подробности: " + т;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,ошибка);
		мЛоггер.ерр(ошибка);
		Рез2 = Неопределено;
	КонецПопытки;	
		
	Возврат Рез;	
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт
	
	Если ТипЗнч(ОбъектДанных) = Тип("ДокументОбъект.ОрдерНаОтражениеИзлишковТоваров") Тогда
		ЗаполнитьОрдерНаОтражениеИзлишков(ОбъектДанных, СтруктураОбъекта);
		Возврат Неопределено;
	КонецЕСли;
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	


	//-------------------- ЗАПОЛНЕНИЕ РЕКВИЗИТОВ

	//															ЕРП
	ОбъектДанных.ВсегоМест						= 0;
	ОбъектДанных.ДатаВходящегоДокумента			= Деф.ДатаВходящегоДокумента;
	//ОбъектДанных.ЗонаПриемки	= Неопределено;
	//ОбъектДанных.Исполнитель					= ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию();
	ОбъектДанных.Комментарий					= деф.Комментарий;
	ОбъектДанных.НомерВходящегоДокумента		= Деф.НомерВходящегоДокумента;
	//ОбъектДанных.Ответственный					= ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию();
	
	ОбъектДанных.Распоряжение					= ксп_ИмпортСлужебный.НайтиДокументПоСоответствию(Деф.ДокументОснование, ксп_ИмпортСлужебный.СтандартноеСоответствиеДокументов());
		
	//начало - Елисеев :: 16.07.2024
	Если ЗначениеЗаполнено(ОбъектДанных.Распоряжение) Тогда
		ОбъектДанных.Отправитель					= ОбъектДанных.Распоряжение.СкладОтправитель;
	КонецЕсли;
	//конец - Елисеев :: 16.07.2024
	
	//ОбъектДанных.Помещение	= Неопределено;
	
	ОбъектДанных.РаспоряжениеНаНесколькоСкладов	= Ложь;
	ОбъектДанных.РежимПросмотраПоТоварам	    = 0;	
	ОбъектДанных.Склад	                        = ксп_ИмпортСлужебный.НайтиСклад(деф.СтруктурнаяЕдиница, мВнешняяСистема);
	
	Основание = ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"ДокументОснование.type");
	
	Если Основание = "Документ.ЗаказНаПеремещение"
		ИЛИ Основание = "Документ.ПеремещениеЗапасов" Тогда 
		
		ОбъектДанных.СкладскаяОперация			= Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
		
		
	Иначе 
		
		// ЕНС. пока безусловно сделаем приемку
		ОбъектДанных.СкладскаяОперация			= Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
	
	КонецЕсли;
	
	//ОбъектДанных.СостояниеЗаполненияМногооборотнойТары	= Неопределено;
	ОбъектДанных.Статус							= Перечисления.СтатусыПриходныхОрдеров.Принят;                       
	ОбъектДанных.ХозяйственнаяОперация			= РегистрыСведений.ксп_МэппингХозяйственныеОперации.ПоМэппингу(
	                                                                                                            ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"ХозяйственнаяОперация.Ref"),
																												мВнешняяСистема
	 																														);


	//------------------------------------------------------     ТЧ Товары



	ОбъектДанных.Товары.Очистить();
	
	Для сч = 0 По деф.ТЧЗапасы.Количество()-1 Цикл

		стрк = деф.ТЧЗапасы[сч];

		СтрокаТЧ = ОбъектДанных.Товары.Добавить();
		
		//СтрокаТЧ.ДокументОтгрузки =  Неопределено;
		//СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		//СтрокаТЧ.Комментарий	= Неопределено;
		//СтрокаТЧ.Назначение	 = Неопределено;
		СтрокаТЧ.Номенклатура	= ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		//СтрокаТЧ.Серия	= Неопределено;
		//СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
		СтрокаТЧ.Упаковка	= ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.ЕдиницаИзмерения, стрк.Номенклатура);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(СтрокаТЧ,Новый Структура("ПересчитатьКоличествоЕдиниц"), КэшированныеЗначения);
		
		//СтрокаТЧ.УпаковочныйЛист	= Неопределено;
		//СтрокаТЧ.УпаковочныйЛистРодитель = Неопределено;
		СтрокаТЧ.Характеристика	= ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);
		//СтрокаТЧ.Штрихкод	= "";
		//СтрокаТЧ.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста	= 0;
		СтрокаТЧ.ЭтоУпаковочныйЛист	= Ложь;


	КонецЦикла;

				
	

		
КонецФункции

Процедура ЗаполнитьОрдерНаОтражениеИзлишков(ОбъектДанных, СтруктураОбъекта)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;

	ОбъектДанных.Комментарий   = Деф.Комментарий;
	ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию();
	ОбъектДанных.Склад         = ксп_ИмпортСлужебный.НайтиСклад(деф.СтруктурнаяЕдиница, мВнешняяСистема); 
	
	ОбъектДанных.Товары.Очистить();
	
	Для сч = 0 По деф.ТЧЗапасы.Количество()-1 Цикл

		стрк = деф.ТЧЗапасы[сч];

		СтрокаТЧ = ОбъектДанных.Товары.Добавить();
	
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		
		СтрокаТЧ.Номенклатура	= ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
				СтрокаТЧ.Упаковка	= ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.ЕдиницаИзмерения, стрк.Номенклатура);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(СтрокаТЧ,Новый Структура("ПересчитатьКоличествоЕдиниц"), КэшированныеЗначения);
		
	
		СтрокаТЧ.Характеристика	= ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);
				

	КонецЦикла;

	
	
КонецПроцедуры

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПеремещение(ЗаказНаПеремещение) Экспорт
	
	ИскомыйДокумент = НайтиПеремещениеТоваров(ЗаказНаПеремещение);
	Если ЗначениеЗаполнено(ИскомыйДокумент) Тогда
		ОбъектДанных = ИскомыйДокумент.ПолучитьОбъект();
	Иначе 
		ОбъектДанных = Документы.ПеремещениеТоваров.СоздатьДокумент();
		
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(ОбъектДанных, ЗаказНаПеремещение,,"Номер");
	
	ОбъектДанных.ЗаказНаПеремещение = ЗаказНаПеремещение;
	ОбъектДанных.ПеремещениеПоЗаказам = Истина;
	
	ОбъектДанных.КСП_НеНуженВРознице = Истина;
	
	ОбъектДанных.Товары.Очистить();
	
	Для каждого стрк Из ЗаказНаПеремещение.Товары Цикл
		НовСтр = ОбъектДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, стрк);
	КонецЦикла;   
	
	
	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();
	
	СтруктураОбъекта = Неопределено;
	jsonText = "";
	
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

	Возврат ОбъектДанных.Ссылка;
	
КонецФункции



#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиЗаказНаПеремещение(УзелДокументОснование)
	Если ТипЗнч(УзелДокументОснование) = Тип("Структура") Тогда 
		гуид="";
		ЕстьАтрибут = УзелДокументОснование.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			ДокументОснование = Документы.ЗаказНаПеремещение.ПолучитьСсылку(
			Новый УникальныйИдентификатор(гуид));
			Возврат ДокументОснование;
		Иначе
			Возврат Неопределено;
		КонецЕсли; 
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НайтиПеремещениеТоваров(ЗаказНаПеремещение)
	
    	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.ЗаказНаПеремещение = &ЗаказНаПеремещение";
	
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;

	
КонецФункции

 Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
	
    Возврат ЭтотОбъект;
     
КонецФункции



 мВнешняяСистема = "retail";    
 ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";
 
 
 НЕ_ЗАГРУЖАТЬ = 1;
 СОЗДАТЬ = 2;
 ОБНОВИТЬ = 3;
 ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;
 
 