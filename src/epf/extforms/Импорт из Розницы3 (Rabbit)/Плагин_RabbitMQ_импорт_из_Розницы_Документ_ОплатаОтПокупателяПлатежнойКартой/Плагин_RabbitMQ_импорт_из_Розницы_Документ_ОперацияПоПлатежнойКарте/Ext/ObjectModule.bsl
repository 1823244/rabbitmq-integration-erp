Перем мВнешняяСистема;
Перем мЛоггер;
Перем мИдВызова; 

Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
  
Перем ИмяСобытияЖР;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.2");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОперацияПоПлатежнойКарте");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОперацияПоПлатежнойКарте");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОперацияПоПлатежнойКарте",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОплатаОтПокупателяПлатежнойКартой",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.ОперацияПоПлатежнымКартам") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мЛоггер) Тогда 
		 сетИдВызова(Строка(Новый УникальныйИдентификатор));
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта = "ОперацияПоПлатежнойКарте";

	ДокументДляОповещения = ВидОбъекта + " " + Деф.Номер;
	
	ПустойДокумент = Документы[ВидОбъекта].ПустаяСсылка();
		
		
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки цепочки документов для. Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез2 = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка			
		
		Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ДокументДляОповещения);
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
			СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
			мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ДокументДляОповещения);
		Иначе 
			ОтменитьТранзакцию();
			мЛоггер.инфо("Действие = Неизвестое действие: "+Строка(Действие)+". Документ: %1", ДокументДляОповещения);
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта);		

		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ",Истина);
		
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.ОбменДанными.Загрузка = Ложь;
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	
		
				
		ЗафиксироватьТранзакцию();          		
		
		мЛоггер.инфо("Записан Документ : %1. Исходный док. Розница: %2", ОбъектДанных, ДокументДляОповещения);
		
		Рез = Новый Структура;
		Рез.Вставить(ВидОбъекта, ОбъектДанных.Ссылка);
		
		
		
		Рез2 = ОбъектДанных.ССылка;
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ошибка = "Объект не загружен! Ошибка в процессе загрузки документа " + ДокументДляОповещения + ". Подробности: " + т;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,ошибка);
		мЛоггер.ерр(ошибка);
		Рез2 = Неопределено;
	КонецПопытки;	
		
	Возврат Рез;
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
		
	ОбъектДанных.Валюта = константы.ВалютаРегламентированногоУчета.Получить();

	ОбъектДанных.Исправление = ложь;

	ОбъектДанных.Комментарий = деф.Комментарий;

	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	
	ОбъектДанных.НалогообложениеНДС = ксп_ИмпортСлужебный.КонвертацияТиповНалогообложенияНДС(деф.НалогообложениеНДС);
			
	ОбъектДанных.НеКонтролироватьЗаполнениеЗаявки = Истина;
	
	ОбъектДанных.НомерПлатежнойКарты = деф.НомерПлатежнойКарты;
	
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

	Если деф.СуммаКомиссииПоДоговору <> 0 Тогда
		ОбъектДанных.ОтражатьКомиссию = Истина;
	Иначе 
		ОбъектДанных.ОтражатьКомиссию = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДанных.контрагент) Тогда
		ОбъектДанных.Партнер = ОбъектДанных.Контрагент.Партнер;
	КонецЕсли;
	
	ОбъектДанных.РазрешеныПлатежиБезУказанияЗаявок = Истина;

	ОбъектДанных.СтатьяДвиженияДенежныхСредств = РегистрыСведений.ксп_МэппингСправочникСтатьиДДС.ПоМэппингу(ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"Статья.Ref"), мВнешняяСистема);
	
	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;

	ОбъектДанных.СуммаКомиссии = деф.СуммаКомиссииПоДоговору;

	ОбъектДанных.ХозяйственнаяОперация = РегистрыСведений.ксп_МэппингХозяйственныеОперации.ПоМэппингу(ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"ХозяйственнаяОперация.Ref"), мВнешняяСистема);

	ОбъектДанных.ЭквайринговыйТерминал = ксп_ИмпортСлужебный.НайтиЭквайринговыйТерминал(деф.ЭквайринговыйТерминал, мВнешняяСистема);
	
    ОбъектДанных.ДоговорЭквайринга = ксп_ИмпортСлужебный.ПолучитьСвойство(ОбъектДанных,"ЭквайринговыйТерминал.Владелец");
	


	////------------------------------------------------------     ТЧ РасшифровкаПлатежа



	ОбъектДанных.РасшифровкаПлатежа.Очистить();
	
	Для сч = 0 По деф.ТЧРасшифровкаПлатежа.Количество()-1 Цикл
		
		стрк = деф.ТЧРасшифровкаПлатежа[сч];
		
		СтрокаТЧ = ОбъектДанных.РасшифровкаПлатежа.Добавить();
		
		СтрокаТЧ.ВалютаВзаиморасчетов =  константы.ВалютаРегламентированногоУчета.Получить();
		//СтрокаТЧ.ИдентификаторСтроки =  Неопределено;
		СтрокаТЧ.КурсЗнаменательВзаиморасчетов =  1;
		СтрокаТЧ.КурсЧислительВзаиморасчетов =  1;
		
		ЗаказКлиента = ксп_ИмпортСлужебный.НайтиДокументПоСоответствию(Стрк.Заказ,ксп_ИмпортСлужебный.СтандартноеСоответствиеДокументов());
		
		Если ЗначениеЗаполнено(ксп_ИмпортСлужебный.ПолучитьСвойство(ЗаказКлиента,"ВерсияДанных")) Тогда	
			
			СтрокаТЧ.ОбъектРасчетов =  ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ЗаказКлиента);
			
		КонецЕсли;   
	
		СтрокаТЧ.ОснованиеПлатежа 				=  ксп_ИмпортСлужебный.НайтиДокументПоСоответствию(Стрк.Документ,ксп_ИмпортСлужебный.СтандартноеСоответствиеДокументов());
		СтрокаТЧ.Партнер					    =  ксп_ИмпортСлужебный.ПолучитьСвойство(ОбъектДанных.Контрагент,"Партнер");
		СтрокаТЧ.СтавкаНДС 						=  ксп_ИмпортСлужебный.ОпределитьПеречислениеСтакаНДСПоПеречислениюРозницы(Стрк.СтавкаНДС);
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств  =  РегистрыСведений.ксп_МэппингСправочникСтатьиДДС.ПоМэппингу(ксп_ИмпортСлужебный.ПолучитьСвойство(Деф,"Статья.Ref"),мВнешняяСистема);
		СтрокаТЧ.Сумма 							=  стрк.СуммаПлатежа;
		СтрокаТЧ.СуммаВзаиморасчетов 			=  стрк.СуммаРасчетов;
		СтрокаТЧ.СуммаНДС 						=  стрк.суммаНДС;
	
	
	КонецЦикла;

КонецФункции




#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиЗаказНаПеремещение(УзелДокументОснование)
	
	гуид="";
	ЕстьАтрибут = УзелДокументОснование.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ДокументОснование = Документы.ЗаказНаПеремещение.ПолучитьСсылку(
			Новый УникальныйИдентификатор(гуид));
		Возврат ДокументОснование;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

 Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из Розница: Операция по платежной карте");
    Возврат ЭтотОбъект;
     
КонецФункции

 мВнешняяСистема = "retail";    
 ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";
 
 
 НЕ_ЗАГРУЖАТЬ = 1;
 СОЗДАТЬ = 2;
 ОБНОВИТЬ = 3;
 ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;
 
 
 