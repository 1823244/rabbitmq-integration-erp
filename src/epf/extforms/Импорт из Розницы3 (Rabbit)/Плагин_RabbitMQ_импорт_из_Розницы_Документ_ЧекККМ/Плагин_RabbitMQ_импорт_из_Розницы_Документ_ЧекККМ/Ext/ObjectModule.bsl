Перем мЛоггер;
Перем мИдВызова; 

Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;

Перем мВнешняяСистема;   
Перем ИмяСобытияЖР;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.13");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ЧекККМ");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ЧекККМ");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_ЧекККМ",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_ЧекККМ",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	





Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт 
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.ЧекККМ") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Если НЕ ЗначениеЗаполнено(мЛоггер) Тогда 
	//	 сетИдВызова(Строка(Новый УникальныйИдентификатор));
	//КонецЕсли;
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ВидОбъекта = "ЧекККМ";

	ДокументДляОповещения = ВидОбъекта + " " + Деф.Номер;
	
	ПустойДокумент = Документы[ВидОбъекта].ПустаяСсылка();
		
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition; 
	
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки цепочки документов для. Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез2 = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка			
		
		Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ДокументДляОповещения);
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
			СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
			мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ДокументДляОповещения);
		Иначе 
			ОтменитьТранзакцию();
			мЛоггер.инфо("Действие = Неизвестое действие: "+Строка(Действие)+". Документ: %1", ДокументДляОповещения);
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		
		 
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта);
		
		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ",Истина);
		
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.ОбменДанными.Загрузка = Ложь;
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	
		
				
		ЗафиксироватьТранзакцию();          		
		
		мЛоггер.инфо("Записан Документ : %1. Исходный док. Розница: %2", ОбъектДанных, ДокументДляОповещения);
		
		Рез = Новый Структура;
		Рез.Вставить(ВидОбъекта, ОбъектДанных.Ссылка);
		
		
		
		Рез2 = ОбъектДанных.ССылка;
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ошибка = "Объект не загружен! Ошибка в процессе загрузки документа " + ДокументДляОповещения + ". Подробности: " + т;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,ошибка);
		мЛоггер.ерр(ошибка);
		Рез2 = Неопределено;
	КонецПопытки;	
		
	Возврат Рез;

КонецФункции

// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;

	ОбъектДанных.Архивный = Ложь;

	ОбъектДанных.Валюта = константы.ВалютаРегламентированногоУчета.Получить();

	ОбъектДанных.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(Деф.ВидЦен,мВнешняяСистема);

	ОбъектДанных.ИспользоватьОплатуБонуснымиБаллами = Истина;

	ОбъектДанных.КассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ);

	ОбъектДанных.КассоваяСмена =  ксп_ИмпортСлужебный.ПолучитьСсылкуДокументаСПроверкой(Деф.ПолнаяКассоваяСмена, "КассоваяСмена");
	
	ОбъектДанных.Комментарий = деф.Комментарий;

	ОбъектДанных.Контрагент = Справочники.Контрагенты.РозничныйПокупатель;
	
	ОбъектДанных.НалогообложениеНДС = ксп_ИмпортСлужебный.КонвертацияТиповНалогообложенияНДС(Деф.НалогообложениеНДС);
	
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация,мВнешняяСистема);
	
	ОбъектДанных.ПолученоНаличными = Число(деф.ПолученоНаличными);

	ОбъектДанных.СкидкиРассчитаны = деф.СкидкиРассчитаны;
	
	ОбъектДанных.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.СтруктурнаяЕдиница, мВнешняяСистема);
	
	ОбъектДанных.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	
	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	
    ОбъектДанных.ФормаОплаты  =  ксп_ИмпортСлужебный.НайтиФормуОплаты(деф.ФормаОплаты,мВнешняяСистема);

	ОбъектДанных.ЦенаВключаетНДС = деф.НДСВключатьВСтоимость;

    ОбъектДанных.Партнер = СПравочники.Партнеры.РозничныйПокупатель;
	
	ОбъектДанных.Контрагент = Справочники.Контрагенты.РозничныйПокупатель;
	
	ОбъектДанных.КартаЛояльности = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ПрограммаЛояльностиДляБонусныхБаллов",мВнешняяСистема);



//	//------------------------------------------------------     ТЧ Товары
    СуммаКВычету = 0;

	ОбъектДанных.Товары.Очистить();
	
	СуммаПотраченныхББ = 0; 
	
	ЕстьПакеты = Ложь;

	Для счТовары = 0 По деф.ТЧЗапасы.Количество()-1 Цикл
		стрк = деф.ТЧЗапасы[счТовары];
		
		Если Стрк.Номенклатура.Свойство("Номинал") Тогда 
			
			СуммаКВычету = СуммаКВычету + Стрк.Сумма;
			Продолжить;
			
		КонецЕСли;
		
		Если Число(Стрк.Сумма) <= 0 Тогда
			
			ЕстьПакеты = Истина;
			
			Продолжить;
			
		КонецЕсли;

		СтрокаТЧ = ОбъектДанных.Товары.Добавить();
		

		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;
		
		СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.ЕдиницаИзмерения, стрк.Номенклатура); 
		
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		
		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(СтрокаТЧ,Новый Структура("ПересчитатьКоличествоЕдиниц"), КэшированныеЗначения); 
		
		СтрокаТЧ.Продавец = Пользователи.ТекущийПользователь();
	
		СтрокаТЧ.ПроцентАвтоматическойСкидки = стрк.ПроцентАвтоматическойСкидки;
		
		СтрокаТЧ.ПроцентРучнойСкидки = стрк.ПроцентСкидкиНаценки;

        СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСериюНоменклатуры(стрк.СерииНоменклатуры, Стрк.Номенклатура);

		СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюРозницы(стрк.СтавкаНДС); 
		
		СтрокаТЧ.Сумма = стрк.Сумма; 
		
		СтрокаТЧ.СуммаАвтоматическойСкидки = стрк.СуммаАвтоматическойСкидки;

		СтрокаТЧ.СуммаБонусныхБалловКСписанию = стрк.СуммаСкидкиОплатыБонусом;
		
		СтрокаТЧ.СуммаБонусныхБалловКСписаниюВВалюте = стрк.СуммаСкидкиОплатыБонусом;
		
		СуммаПотраченныхББ = СуммаПотраченныхББ +  стрк.СуммаСкидкиОплатыБонусом;

		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС; 
		
		СтрокаТЧ.СуммаРучнойСкидки = стрк.СуммаСкидкиНаценки;

		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);

		СтрокаТЧ.Цена = стрк.Цена; 
		
		СтрокаТЧ.Штрихкод = стрк.Штрихкод;
		
	КонецЦикла;  
	
	//ОбъектДанных.БонусныеБаллы.Очистить();
	//
	//Если СуммаПотраченныхББ >0 Тогда 
	//	
	//	НоваяСТрока = ОбъектДанных.БонусныеБаллы.Добавить();
	//	
	//	НоваяСТрока.БонуснаяПрограммаЛояльности = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ПрограммаЛояльностиДляБонусныхБаллов",мВнешняяСистема);
	//	
	//	НоваяСТрока.СуммаБонусныхБаллов = СуммаПотраченныхББ;
	//	
	//	
	//КонецЕСли;


	//------------------------------------------------------     ТЧ ОплатаПлатежнымиКартами

    ОбъектДанных.ОплатаПлатежнымиКартами.Очистить();
	ОбъектДанных.ПодарочныеСертификаты.Очистить();

	Для счТовары = 0 По деф.ТЧБезналичнаяОплата.Количество()-1 Цикл
		
		стрк = деф.ТЧБезналичнаяОплата[счТовары];
		
		ВидОплаты = ксп_ИмпортСлужебный.НайтиВидОплатыПоПеречислению(стрк.ВидОплаты); 
		
		Если ВидОплаты = "ПодарочныйСертификат" Тогда  
			
			
			НомерКарты = ксп_ИмпортСлужебный.ПолучитьСвойство(стрк, "НомерСертификата.СерияНомер");
			
			Если Не ЗначениеЗаполнено(НомерКарты) Тогда
				
				ВызватьИсключение "Не указан номер подарочного сертификата";
				
			КонецЕсли; 
			
			НайденныеСертификаты = ПодарочныеСертификатыСервер.НайтиПодарочныеСертификаты(СокрЛП(НомерКарты),Перечисления.ТипыКодовКарт.Штрихкод); 
			
			СтруктураСертификата = ПроверитьВернутьСертификат(НайденныеСертификаты);
			
			Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда 
				
				ВызватьИсключение "Не удалось найти подарочный сертификат";
				
			КонецЕсли;
				
			СтрокаТЧ = ОбъектДанных.ПодарочныеСертификаты.Добавить();
			
			СтрокаТЧ.ПодарочныйСертификат    = СтруктураСертификата.ССылка;
			СтрокаТЧ.Сумма                   = стрк.Сумма;
			СтрокаТЧ.СуммаВВалютеСертификата = стрк.Сумма;
			//СтрокаТЧ.ИдентификаторСтроки     =
			//СтрокаТЧ.ОбъектРасчетов          =
			СтрокаТЧ.СуммаВзаиморасчетов     = стрк.Сумма;  
			
		ИначеЕсли ВидОплаты = "Бонусы" Тогда
			
			Продолжить;
			
		Иначе
			
			СтрокаТЧ = ОбъектДанных.ОплатаПлатежнымиКартами.Добавить();    
			
			СтрокаТЧ.ВидОплаты = ВидОплаты;
			
			Если Не ЗначениеЗаполнено(ВидОплаты) Тогда
				
				ВызватьИсключение "Не удалось распознать способ оплаты";
				
			КонецЕсли;
			
			СТрокаТЧ.НомерПлатежнойКарты = стрк.НомерПлатежнойКарты;
			
			СтрокаТЧ.Сумма	= стрк.сумма;
			
			Если СтрокаТЧ.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.Подели Тогда 
				
				СтрокаТЧ.ДоговорПодключения = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ДоговорПодключенияПодели",мВнешняяСистема);
				
			Иначе
				СтрокаТЧ.ЭквайринговыйТерминал = ксп_ИмпортСлужебный.НайтиЭквайринговыйТерминал(стрк.ЭквайринговыйТерминал, мВнешняяСистема);
			КОнецЕсли;
			
		    КонецЕсли;
		
	КонецЦикла;

	
		
	Если ОбъектДанных.ОплатаПлатежнымиКартами.Количество() Тогда 
		
		Строка = ОбъектДанных.ОплатаПлатежнымиКартами[0];
		Строка.Сумма = Строка.Сумма - СуммаКВычету;
		
	Иначе
		
		ОбъектДанных.ПолученоНаличными = ОбъектДанных.ПолученоНаличными - СуммаКВычету;
		
	КонецЕсли;
	
	СоздатьРеализациюПодарочныхСертификатов(СтруктураОбъекта,СуммаКВычету ); 
	
	Если ЕстьПакеты Тогда 
		СоздатьВнутренееПотребление(СтруктураОбъекта); 
	КонецЕсли;

КонецФункции  

Процедура СоздатьВнутренееПотребление(СтруктураОбъекта) 
	
	
	ДокументПотребления = ПолучитьОбъектПотребления(СтруктураОбъекта);
	
	Деф = СтруктураОбъекта.definition;
	
	ДокументПотребления.Номер = деф.Number;
	ДокументПотребления.Дата = деф.Date; 
	ДокументПотребления.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация,мВнешняяСистема);
	ДокументПотребления.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.СтруктурнаяЕдиница, мВнешняяСистема);
	ДокументПотребления.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(Деф.ВидЦен,мВнешняяСистема);
    ДокументПотребления.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	ДокументПотребления.Статус = Перечисления.СтатусыВнутреннихПотреблений.Отгружено;
	
	ДокументПотребления.КассоваяСмена = ксп_ИмпортСлужебный.ПолучитьСсылкуДокументаСПроверкой(Деф.ПолнаяКассоваяСмена, "КассоваяСмена");

	
	СегментПакетов = Справочники.СегментыНоменклатуры.НайтиПоНаименованию("Пакеты");
	
	СписокПакетов = СегментыВызовСервера.СписокЗначений(СегментПакетов);
	
	ДокументПотребления.Товары.Очистить();
	
	Для каждого Строка из Деф.ТЧЗапасы Цикл
		
		Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(Строка.Номенклатура);
		
		Если СписокПакетов.НайтиПоЗначению(Номенклатура) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		НоваяСТрока = ДокументПотребления.Товары.Добавить();
		
		НоваяСТрока.Номенклатура  = Номенклатура;
		НоваяСТрока.Характеристика  = ксп_ИмпортСлужебный.НайтиХарактеристику(Строка.Характеристика);
		НоваяСТрока.Упаковка  =  ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(Строка.ЕдиницаИзмерения, Строка.Номенклатура);
		НоваяСТрока.КоличествоУпаковок = Строка.Количество;
		НоваяСТрока.СтатьяРасходов = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("СтатьяРасходовДляСписанияТоваров", мВнешняяСистема);

		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(НоваяСТрока,Новый Структура("ПересчитатьКоличествоЕдиниц"), КэшированныеЗначения); 
	
	КонецЦикла;
	
	ДокументПотребления.ОбменДанными.Загрузка = Истина;
	
	ДокументПотребления.Записать();
	
	ксп_ИмпортСлужебный.ДобавитьОтложенноеПроведение(ДокументПотребления.Ссылка);
	
КонецПРоцедуры 


Функция ПолучитьОбъектПотребления(СтруктураОбъекта) 
	
	id = СтруктураОбъекта.identification;
	
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы.ВнутреннееПотребление.ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	ДокументДляОповещения = "Внутреннее Потребление";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка блокировки цепочки документов для. Подробности: " + т);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	
	
	Если НЕ ЭтоНовый Тогда
		ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
		мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ДокументДляОповещения);
	Иначе 
		ОбъектДанных = Документы.ВнутреннееПотребление.СоздатьДокумент();
		СсылкаНового = Документы.ВнутреннееПотребление.ПолучитьСсылку(УИД);
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ДокументДляОповещения);
	КонецЕсли;
	
	Возврат ОбъектДанных;	
	
КонецФункции

Процедура СоздатьРеализациюПодарочныхСертификатов(СтруктураОбъекта,СуммаКВычету)
	
	Если СуммаКВычету = 0 Тогда 
		
		Возврат; 
		
	КонецЕсли; 
	
	Деф = СтруктураОбъекта.definition;
	
	
	
	ДокументРеализации = ПолучитьОбъектРеализации(СтруктураОбъекта);
	
	ДокументРеализации.Номер = деф.Number;
	ДокументРеализации.Дата = деф.Date; 
	ДокументРеализации.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация,мВнешняяСистема);
	ДокументРеализации.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументРеализации.СуммаДокумента = СуммаКВычету;
	ДокументРеализации.Кассир = Пользователи.ТекущийПользователь();
	ДокументРеализации.Комментарий = "Документ сформирован по ЧекККМ от "+ Строка(деф.Date) +" № " + Строка(деф.Number); 
	ДокументРеализации.КассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ);
	//ДокументРеализации.ПолученоНаличными = Число(деф.ПолученоНаличными);
	ДокументРеализации.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	ДокументРеализации.КассоваяСмена = ксп_ИмпортСлужебный.ПолучитьСсылкуДокументаСПроверкой(Деф.ПолнаяКассоваяСмена, "КассоваяСмена");
	ДокументРеализации.Контрагент = Справочники.Контрагенты.РозничныйПокупатель;
	//ДокументРеализации.Партнер =
	ДокументРеализации.НалогообложениеНДС = ксп_ИмпортСлужебный.КонвертацияТиповНалогообложенияНДС(Деф.НалогообложениеНДС);
	//ДокументРеализации.ИдентификаторДокумента =
	//ДокументРеализации.ГруппаФинансовогоУчета =
	//ДокументРеализации.НаправлениеДеятельности =
	//ДокументРеализации.Подразделение = 
	
	ДокументРеализации.ПодарочныеСертификаты.Очистить();
	
	Для каждого Строка Из Деф.ТЧЗапасы Цикл
		
		Если НЕ Строка.Номенклатура.Свойство("Номинал") Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		НомерКарты = ксп_ИмпортСлужебный.ПолучитьСвойство(Строка, "СерииНоменклатуры");
		
		Если Не ЗначениеЗаполнено(НомерКарты) Тогда
			
			ВызватьИсключение "Не указан номер подарочного сертификата";
			
		КонецЕсли; 
		
		НайденныеСертификаты = ПодарочныеСертификатыСервер.НайтиПодарочныеСертификаты(СокрЛП(НомерКарты),Перечисления.ТипыКодовКарт.Штрихкод); 
		
		СтруктураСертификата = ПроверитьВернутьСертификат(НайденныеСертификаты);
		
		Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда 
			
			ВызватьИсключение "Не удалось найти подарочный сертификат";
			
		КонецЕсли;
		
		
		
		НовСтрока = ДокументРеализации.ПодарочныеСертификаты.Добавить();
		                                                                                                                      
		НовСтрока.ПодарочныйСертификат = СтруктураСертификата.Ссылка;
		НовСтрока.Сумма = СтруктураСертификата.Номинал;
		НовСтрока.ОбъектРасчетов = СтруктураСертификата.ОбъектРасчетов;
		
		
	КонецЦИкла; 
	
	ДокументРеализации.ОплатаПлатежнымиКартами.Очистить();
	
	Для сч = 0 По деф.ТЧБезналичнаяОплата.Количество()-1 Цикл
		
		стрк = деф.ТЧБезналичнаяОплата[сч];
		
		ВидОплаты = ксп_ИмпортСлужебный.НайтиВидОплатыПоПеречислению(стрк.ВидОплаты);
		     
		
		СтрокаТЧ = ДокументРеализации.ОплатаПлатежнымиКартами.Добавить(); 
		
		СтрокаТЧ.ВидОплаты = ВидОплаты;
		
		СтрокаТЧ.НомерПлатежнойКарты = стрк.НомерПлатежнойКарты;
		
		СтрокаТЧ.НомерЧекаЭТ = стрк.НомерЧекаЭТ;
		
		СтрокаТЧ.СсылочныйНомер = стрк.СсылочныйНомер;
		
		СтрокаТЧ.СтатусОплатыСБП = Неопределено;
		
		СтрокаТЧ.Сумма = стрк.Сумма;
		
		
		СтрокаТЧ.ЭквайринговыйТерминал = ксп_ИмпортСлужебный.
		НайтиЭквайринговыйТерминал(стрк.ЭквайринговыйТерминал, мВнешняяСистема);
		
		
	КонецЦикла;
	
	Если ДокументРеализации.ОплатаПлатежнымиКартами.Количество() Тогда 
		
		Строка = ДокументРеализации.ОплатаПлатежнымиКартами[0];
		Строка.Сумма =  СуммаКВычету;
		
	Иначе
		
		ДокументРеализации.ПолученоНаличными = СуммаКВычету;
		
	КонецЕсли;

	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ДокументРеализации, "ПодарочныеСертификаты,ОплатаПлатежнымиКартами");
	
	ДокументРеализации.ОбменДанными.Загрузка = Истина;
	
	ДокументРеализации.Записать();
	
	ксп_ИмпортСлужебный.ДобавитьОтложенноеПроведение(ДокументРеализации.Ссылка);
	
	
КонецПроцедуры 

Функция ПолучитьОбъектРеализации(СтруктураОбъекта)
	
	id = СтруктураОбъекта.identification;
	
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы.РеализацияПодарочныхСертификатов.ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	ДокументДляОповещения = "Реализация сертификатов";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка блокировки цепочки документов для. Подробности: " + т);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	
	
	Если НЕ ЭтоНовый Тогда
		ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
		мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ДокументДляОповещения);
	Иначе 
		ОбъектДанных = Документы.РеализацияПодарочныхСертификатов.СоздатьДокумент();
		СсылкаНового = Документы.РеализацияПодарочныхСертификатов.ПолучитьСсылку(УИД);
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ДокументДляОповещения);
	КонецЕсли;
	
	Возврат ОбъектДанных;
	
КонецФункции

Функция  ПроверитьВернутьСертификат(СтруктураСертификатов) 
	
	ПодарочныеСертификаты = Неопределено;
	
	НужныйСертификат = Неопределено;
	
	Если НЕ СтруктураСертификатов.Свойство("ЗарегистрированныеПодарочныеСертификаты",ПодарочныеСертификаты ) Тогда 
		
		Возврат НужныйСертификат;
		
	КонецЕсли;
	
	Если Не ПодарочныеСертификаты.Количество() = 1 Тогда 
		
		Возврат НужныйСертификат;
		
	Иначе
		
		НужныйСертификат = ПодарочныеСертификаты[0];
		Возврат НужныйСертификат;
		
	КонецЕСли;
	 
	
	
КонецФункции


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
	Если Значение = "true" Тогда
		
		 Возврат Истина;
		
	 КонецЕСли; 
	 
	Если Значение = "false" Тогда
		 Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("Склад");
	мРеквизиты.Добавить("Организация");  
	мРеквизиты.Добавить("КассаККМ");
	мРеквизиты.Добавить("КассоваяСмена");
	Возврат мРеквизиты;
	
КонецФункции   


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ТабличныеЧастиДляПроверки() Экспорт
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяТЧ");
	ТЗ.Колонки.Добавить("ИмяКолонки");
	
	//НовСтр = ТЗ.Добавить();
	//НовСтр.ИмяТЧ = "";
	//НовСтр.ИмяКолонки = "";
	
	НовСтр = ТЗ.Добавить();
	НовСтр.ИмяТЧ = "Товары";
	НовСтр.ИмяКолонки = "Номенклатура";

	//НовСтр = ТЗ.Добавить();
	//НовСтр.ИмяТЧ = "Товары2_5";
	//НовСтр.ИмяКолонки = "ВидЦены";

	//НовСтр = ТЗ.Добавить();
	//НовСтр.ИмяТЧ = "ВидыЦен";
	//НовСтр.ИмяКолонки = "ВидЦены";

	Возврат ТЗ;
	
КонецФункции


Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из Розница: ЧекККМ");
    Возврат ЭтотОбъект;
     
КонецФункции



мВнешняяСистема = "retail";     
ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";


НЕ_ЗАГРУЖАТЬ = 1;
СОЗДАТЬ = 2;
ОБНОВИТЬ = 3;
ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;

 
 