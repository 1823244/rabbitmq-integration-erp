Перем мВнешняяСистема;
Перем мЛоггер;
Перем мИдВызова; 

Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
  
Перем ИмяСобытияЖР;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.6");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОтчетОРозничныхПродажах");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОтчетОРозничныхПродажах");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОтчетОРозничныхПродажах",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОтчетОРозничныхПродажах",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	





Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.отчеторозничныхпродажах") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(мЛоггер) Тогда
	//	
	//	сетИдВызова(Строка(Новый УникальныйИдентификатор));
	//	
	//КонецЕсли;


	ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта = "ОтчетОРозничныхПродажах";

	ДокументДляОповещения = ВидОбъекта + " " + Деф.Номер;
	
	ПустойДокумент = Документы[ВидОбъекта].ПустаяСсылка();
		
		
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки цепочки документов для. Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез2 = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка			
		
		Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ДокументДляОповещения);
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ДокументДляОповещения);
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
			СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
			мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ДокументДляОповещения);
		Иначе 
			ОтменитьТранзакцию();
			мЛоггер.инфо("Действие = Неизвестое действие: "+Строка(Действие)+". Документ: %1", ДокументДляОповещения);
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта);		

		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ",Истина);
		
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.ОбменДанными.Загрузка = Ложь;
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	
		
				
		ЗафиксироватьТранзакцию();          		
		
		мЛоггер.инфо("Записан Документ : %1. Исходный док. Розница: %2", ОбъектДанных, ДокументДляОповещения);
		
		Рез = Новый Структура;
		Рез.Вставить(ВидОбъекта, ОбъектДанных.Ссылка);
		
		
		
		Рез2 = ОбъектДанных.ССылка;
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ошибка = "Объект не загружен! Ошибка в процессе загрузки документа " + ДокументДляОповещения + ". Подробности: " + т;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,ошибка);
		мЛоггер.ерр(ошибка);
		Рез2 = Неопределено;
	КонецПопытки;	
		
	Возврат Рез;	
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	
	ТаблицыДокументов = ПодготовитьТаблицыДокументов(деф);
	
	Если ТаблицыДокументов.ТаблицаОтчетОРозничныхПродажах.Количество() Тогда 
		
		ЗаполнитьОтчетОРозничныхПродажах(ОбъектДанных, СтруктураОбъекта, ТаблицыДокументов);
		
	КонецЕсли;
	
	Если ТаблицыДокументов.ТаблицаВнутреннееПотребление.Количество() Тогда 
		
		 СоздатьЗаполнитьВнутренннееПотребление(СтруктураОбъекта, ТаблицыДокументов);
		
	КонецЕсли;
	
	Если ТаблицыДокументов.ТаблицаРеализацияПодарочныхСертификатов.Количество() Тогда 
		
		СоздатьЗаполнитьРеализацияПодарочныхСертификатов(СтруктураОбъекта, ТаблицыДокументов);

		
	КонецЕсли;
	
	Если ТаблицыДокументов.ТаблицаОтчетОрозничныхВозвратах.Количество() Тогда 
		
		СоздатьЗаполнитьОтчетОРозничныхВозвратах(СтруктураОбъекта, ТаблицыДокументов);

		
	КонецЕсли;
	
	
	Если ТаблицыДокументов.ТаблицаВозвратПодарочныхСертификатов.Количество() Тогда 
		
		 СоздатьЗаполнитьВозвратПодарочныхСертификатов(СтруктураОбъекта, ТаблицыДокументов);


	КонецЕсли;
		
    	

КонецФункции 

Процедура СоздатьЗаполнитьВозвратПодарочныхСертификатов(СтруктураОбъекта, Таблицы)
	
	Деф = СтруктураОбъекта.definition;
	
	
	
	ДокументРеализацииВозврат = ПолучитьСвязанныйОбъект(СтруктураОбъекта, "ВозвратПодарочныхСертификатов");
	
	ДокументРеализацииВозврат.Номер = деф.Number;
	ДокументРеализацииВозврат.Дата = деф.Date; 
	ДокументРеализацииВозврат.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация,мВнешняяСистема);
	ДокументРеализацииВозврат.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументРеализацииВозврат.СуммаДокумента = Таблицы.СуммаВычетаСертификатовВозврат;
	//ДокументРеализации.Кассир = Пользователи.ТекущийПользователь();
	//ДокументРеализации.Комментарий = "Документ сформирован по ЧекККМ от "+ Строка(деф.Date) +" № " + Строка(деф.Number); 
	ДокументРеализацииВозврат.КассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ);
	//ДокументРеализации.ПолученоНаличными = Число(деф.ПолученоНаличными);
	ДокументРеализацииВозврат.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	ДокументРеализацииВозврат.КассоваяСмена = ксп_ИмпортСлужебный.ПолучитьСсылкуДокументаСПроверкой(Деф.КассоваяСмена, "КассоваяСмена");
	ДокументРеализацииВозврат.Контрагент = Справочники.Контрагенты.РозничныйПокупатель;
	//ДокументРеализации.Партнер =
	ДокументРеализацииВозврат.НалогообложениеНДС = ксп_ИмпортСлужебный.КонвертацияТиповНалогообложенияНДС(Деф.НалогообложениеНДС);
	//ДокументРеализации.ИдентификаторДокумента =
	//ДокументРеализации.ГруппаФинансовогоУчета =
	//ДокументРеализации.НаправлениеДеятельности =
	//ДокументРеализации.Подразделение = 
	
	ДокументРеализацииВозврат.ПодарочныеСертификаты.Очистить();
	
	ДокументРеализацииВозврат.ПодарочныеСертификаты.Загрузить(Таблицы.ТаблицаВозвратПодарочныхСертификатов); 
	
	ДокументРеализацииВозврат.ОплатаПлатежнымиКартами.Очистить();
	
	Для каждого Строка из Таблицы.ТаблицаОплаты Цикл
		
		НоваяСтрока =  ДокументРеализацииВозврат.ОплатаПлатежнымиКартами.Добавить();
		
		НоваяСтрока.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;
		НоваяСтрока.НомерПлатежнойКарты   = Строка.НомерПлатежнойКарты;
		НоваяСтрока.Сумма                 = Строка.Сумма;
		НоваяСтрока.ВидОплаты             = Строка.ВидОплаты;
		НоваяСтрока.ДоговорПодключения    = Строка.ДоговорПодключения;
		
	КонецЦикла;  
	
	ДокументРеализацииВозврат.ВыданоНаличными = Таблицы.СуммаВычетаСертификатовВозврат - ДокументРеализацииВозврат.ОплатаПлатежнымиКартами.Итог("Сумма"); 
	
	
	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ДокументРеализацииВозврат, "ПодарочныеСертификаты,ОплатаПлатежнымиКартами");
	
	ДокументРеализацииВозврат.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ",Истина);
	
	ДокументРеализацииВозврат.ОбменДанными.Загрузка = Истина;
	
	ДокументРеализацииВозврат.Записать();
	
	ксп_ИмпортСлужебный.ДобавитьОтложенноеПроведение(ДокументРеализацииВозврат.Ссылка);

	
	
КонецПроцедуры 

Процедура СоздатьЗаполнитьОтчетОРозничныхВозвратах(СтруктураОбъекта, Таблицы)  

	ОтчетОРозничныхВозвратах = ПолучитьСвязанныйОбъект(СтруктураОбъекта, "ОтчетОРозничныхВозвратах"); 
	
	Деф = СтруктураОбъекта.definition;
	
	ОтчетОРозничныхВозвратах.Номер = деф.Number;
	ОтчетОРозничныхВозвратах.Дата = деф.Date;
	
	ОтчетОРозничныхВозвратах.ПометкаУдаления = деф.DeletionMark;
	
	ОтчетОРозничныхВозвратах.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ОтчетОРозничныхВозвратах.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(Деф.ВидЦен,мВнешняяСистема);
	
	ОтчетОРозничныхВозвратах.КассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ); 
	
	
	ОтчетОРозничныхВозвратах.КассоваяСмена = ксп_ИмпортСлужебный.НайтиКассовуюСмену(деф.КассоваяСмена, мВнешняяСистема);  		
	
	
	ОтчетОРозничныхВозвратах.Комментарий = деф.Комментарий;
	 
	
	ОтчетОРозничныхВозвратах.НалогообложениеНДС = ксп_ИмпортСлужебный.КонвертацияТиповНалогообложенияНДС(Деф.НалогообложениеНДС);	

	ОтчетОРозничныхВозвратах.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	
	ОтчетОРозничныхВозвратах.Ответственный = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию();
	
	//ОтчетОРозничныхВозвратах.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	
	ОтчетОРозничныхВозвратах.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.СтруктурнаяЕдиница, мВнешняяСистема);
			    
	ОтчетОРозничныхВозвратах.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
		
	ОтчетОРозничныхВозвратах.Комментарий = деф.Комментарий;
	
	
	
	ОтчетОРозничныхВозвратах.СуммаДокумента = деф.СуммаДокумента - Таблицы.СуммаВычетаСертификатовВозврат;
	
	//ОбъектДанных.УчитыватьНДС = ксп_ИмпортСлужебный.УчитыватьНДС(деф.НалогообложениеНДС);
	
	ОтчетОРозничныхВозвратах.ЦенаВключаетНДС = деф.НДСВключатьВСтоимость;	
	

	
	//---------------------------------------------ТЧ ТОВАРЫ
	
	
	
	ОтчетОРозничныхВозвратах.Товары.Очистить();
	ОтчетОРозничныхВозвратах.Товары.Загрузить(Таблицы.ТаблицаОтчетОрозничныхВозвратах);

		
	////---------------------------------------------ТЧ ОплатаПлатежнымиКартами	
	
	ОтчетОРозничныхВозвратах.ОплатаПлатежнымиКартами.Очистить();
	ОтчетОРозничныхВозвратах.ОплатаБонуснымиБаллами.Очистить();
	
	
	Для каждого Строка из Таблицы.ТаблицаОплатыВозвраты Цикл
		ВидОплаты = Строка.ВидОплаты;
		
		Если ВидОплаты = "Бонусы" Тогда 
			
			НоваяСтрока = ОтчетОРозничныхВозвратах.ОплатаБонуснымиБаллами.Добавить();
			
			НоваяСтрока.Партнер = Справочники.Партнеры.РозничныйПокупатель;
			НоваяСтрока.БонуснаяПрограммаЛояльности = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ПрограммаЛояльностиДляБонусныхБаллов",мВнешняяСистема);
			НоваяСтрока.ДатаОплаты = деф.Date; 
			НоваяСтрока.СуммаБонусныхБаллов = Строка.СуммаБонусов;
			
		ИначеЕсли ВидОплаты = "Подели" Тогда 
			
			 СтрокаТЧ = ОтчетОРозничныхВозвратах.ОплатаПлатежнымиКартами.Добавить();    
			 
			 СтрокаТЧ.ВидОплаты =  Перечисления.ТипыПлатежнойСистемыККТ.Подели;
			 			 
			 СтрокаТЧ.Сумма	= Строка.сумма;
			 
			 СтрокаТЧ.ДоговорПодключения = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ДоговорПодключенияПодели",мВнешняяСистема);
			 				
			
		ИначеЕсли ВидОплаты = "БанковскаяКарта" Тогда 
			
			СтрокаТЧ = ОтчетОРозничныхВозвратах.ОплатаПлатежнымиКартами.Добавить();    
			
			СтрокаТЧ.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.ПлатежнаяКарта;
					
			СТрокаТЧ.НомерПлатежнойКарты = Строка.НомерПлатежнойКарты;
			
			СтрокаТЧ.Сумма	= Строка.сумма;
			
			СтрокаТЧ.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;			
			
		ИначеЕсли ВидОплаты = "СБП" Тогда
			
			СтрокаТЧ = ОтчетОРозничныхВозвратах.ОплатаПлатежнымиКартами.Добавить();    
			
			СтрокаТЧ.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей;
					
			СТрокаТЧ.НомерПлатежнойКарты = Строка.НомерПлатежнойКарты;
			
			СтрокаТЧ.Сумма	= Строка.сумма;
			
			СтрокаТЧ.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;
				
		//ИначеЕсли ВидОплаты = "ПодарочныйСертификат" Тогда 
		//	
		//	НомерКарты = ксп_ИмпортСлужебный.ПолучитьСвойство(Строка, "НомерСертификата.СерияНомер");
		//	
		//	НайденныеСертификаты = ПодарочныеСертификатыСервер.НайтиПодарочныеСертификаты(СокрЛП(НомерКарты),Перечисления.ТипыКодовКарт.Штрихкод); 
		//	
		//	СтруктураСертификата = ПроверитьВернутьСертификат(НайденныеСертификаты);
		//					
		//	СтрокаТЧ = ОтчетОРозничныхВозвратах.ПодарочныеСертификаты.Добавить();
		//	
		//	СтрокаТЧ.ПодарочныйСертификат    = СтруктураСертификата.ССылка;
		//	СтрокаТЧ.Сумма                   = Строка.Сумма;
		//	СтрокаТЧ.СуммаВВалютеСертификата = Строка.Сумма;
		//	СтрокаТЧ.СуммаВзаиморасчетов     = Строка.Сумма;
			
			
		КонецЕсли;
		
		
		
	КонецЦикла; 
	
	//Для каждого Строка из Таблицы.ТаблицаОтчетОРозничныхПродажах Цикл
	//	
	//	Если Строка.БонуснымиБаллами = 0 Тогда 
	//		
	//		Продолжить;
	//		
	//	КонецЕСли;
	//	
	//	НоваяСтрока = ОтчетОРозничныхВозвратах.ОплатаБонуснымиБаллами.Добавить();
	//	
	//	НоваяСтрока.Партнер = Справочники.Партнеры.РозничныйПокупатель;
	//	НоваяСтрока.БонуснаяПрограммаЛояльности = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ПрограммаЛояльностиДляБонусныхБаллов",мВнешняяСистема);
	//	НоваяСтрока.ДатаОплаты = деф.Date; 
	//	НоваяСтрока.СуммаБонусныхБаллов = Строка.БонуснымиБаллами;
	//	
	//КонецЦикла; 
	
	Таблицы.ТаблицаОплатыВозвраты.Очистить();
	
	НеобходимоСписать = Таблицы.СуммаВычетаСертификатовВозврат;
	
	НаУдаление = Новый Массив;
	
	Для каждого Строка Из ОтчетОРозничныхВозвратах.ОплатаПлатежнымиКартами Цикл
		
		Если  НеобходимоСписать = 0 Тогда 
			
			Прервать;
			
		КонецЕсли;
		
		Если Строка.Сумма < НеобходимоСписать Тогда
			
			СуммаКСписанию =  Строка.Сумма;
			НеобходимоСписать = НеобходимоСписать - СуммаКСписанию;
			
			Строка.Сумма = 0;
			
			НоваяСтрока = Таблицы.ТаблицаОплатыВозвраты.Добавить();
			
			НоваяСтрока.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;
			НоваяСтрока.НомерПлатежнойКарты   = Строка.НомерПлатежнойКарты;
			НоваяСтрока.Сумма                 = СуммаКСписанию;
			НоваяСтрока.ВидОплаты             = Строка.ВидОплаты;
			НоваяСтрока.ДоговорПодключения    = Строка.ДоговорПодключения; 
			
			НаУдаление.Добавить(Строка);
			
		ИначеЕсли СТрока.Сумма = НеобходимоСписать Тогда 
			
			Строка.Сумма = 0;
			
			НоваяСтрока = Таблицы.ТаблицаОплатыВозвраты.Добавить();
			
			НоваяСтрока.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;
			НоваяСтрока.НомерПлатежнойКарты   = Строка.НомерПлатежнойКарты;
			НоваяСтрока.Сумма                 = НеобходимоСписать;
			НоваяСтрока.ВидОплаты             = Строка.ВидОплаты;
			НоваяСтрока.ДоговорПодключения    = Строка.ДоговорПодключения;
			
			НеобходимоСписать = 0;
			
			НаУдаление.Добавить(Строка);
			
			Прервать;
			
		Иначе 
			
			Строка.Сумма = Строка.Сумма - НеобходимоСписать;
			
			НоваяСтрока = Таблицы.ТаблицаОплатыВозвраты.Добавить();
			
			НоваяСтрока.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;
			НоваяСтрока.НомерПлатежнойКарты   = Строка.НомерПлатежнойКарты;
			НоваяСтрока.Сумма                 = НеобходимоСписать;
			НоваяСтрока.ВидОплаты             = Строка.ВидОплаты;
			НоваяСтрока.ДоговорПодключения    = Строка.ДоговорПодключения;
			
			НеобходимоСписать = 0;  
			
			Прервать;
				
		КонецЕсли;
		
		
	КонецЦикла; 
	
	Для каждого Строка из НаУдаление Цикл
		
		ОтчетОРозничныхВозвратах.ОплатаПлатежнымиКартами.Удалить(Строка);
		
	КонецЦикла; 
	
	ОтчетОРозничныхВозвратах.ОбменДанными.Загрузка = Истина;
	
	ОтчетОРозничныхВозвратах.Записать();
	
	ксп_ИмпортСлужебный.ДобавитьОтложенноеПроведение(ОтчетОРозничныхВозвратах.Ссылка);

	
КонецПроцедуры 


Процедура СоздатьЗаполнитьРеализацияПодарочныхСертификатов(СтруктураОбъекта, Таблицы)
 
	
	Деф = СтруктураОбъекта.definition;
	
	
	
	ДокументРеализации = ПолучитьСвязанныйОбъект(СтруктураОбъекта, "РеализацияПодарочныхСертификатов");
	
	ДокументРеализации.Номер = деф.Number;
	ДокументРеализации.Дата = деф.Date; 
	ДокументРеализации.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация,мВнешняяСистема);
	ДокументРеализации.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументРеализации.СуммаДокумента = Таблицы.СуммаВычетаСертификатовПродажи;
	//ДокументРеализации.Кассир = Пользователи.ТекущийПользователь();
	//ДокументРеализации.Комментарий = "Документ сформирован по ЧекККМ от "+ Строка(деф.Date) +" № " + Строка(деф.Number); 
	ДокументРеализации.КассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ);
	//ДокументРеализации.ПолученоНаличными = Число(деф.ПолученоНаличными);
	ДокументРеализации.Статус = Перечисления.СтатусыЧековККМ.Пробит;
	ДокументРеализации.КассоваяСмена = ксп_ИмпортСлужебный.ПолучитьСсылкуДокументаСПроверкой(Деф.КассоваяСмена, "КассоваяСмена");
	ДокументРеализации.Контрагент = Справочники.Контрагенты.РозничныйПокупатель;
	//ДокументРеализации.Партнер =
	ДокументРеализации.НалогообложениеНДС = ксп_ИмпортСлужебный.КонвертацияТиповНалогообложенияНДС(Деф.НалогообложениеНДС);
	//ДокументРеализации.ИдентификаторДокумента =
	//ДокументРеализации.ГруппаФинансовогоУчета =
	//ДокументРеализации.НаправлениеДеятельности =
	//ДокументРеализации.Подразделение = 
	
	ДокументРеализации.ПодарочныеСертификаты.Очистить();
	
	ДокументРеализации.ПодарочныеСертификаты.Загрузить(Таблицы.ТаблицаРеализацияПодарочныхСертификатов); 
	
	ДокументРеализации.ОплатаПлатежнымиКартами.Очистить();
	
	Для каждого Строка из Таблицы.ТаблицаОплаты Цикл
		
		НоваяСтрока =  ДокументРеализации.ОплатаПлатежнымиКартами.Добавить();
		
		НоваяСтрока.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;
		НоваяСтрока.НомерПлатежнойКарты   = Строка.НомерПлатежнойКарты;
		НоваяСтрока.Сумма                 = Строка.Сумма;
		НоваяСтрока.ВидОплаты             = Строка.ВидОплаты;
		НоваяСтрока.ДоговорПодключения    = Строка.ДоговорПодключения;
		
	КонецЦикла;  
	
	ДокументРеализации.ПолученоНаличными = Таблицы.СуммаВычетаСертификатовПродажи - ДокументРеализации.ОплатаПлатежнымиКартами.Итог("Сумма"); 
	
	
	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ДокументРеализации, "ПодарочныеСертификаты,ОплатаПлатежнымиКартами");
	
	ДокументРеализации.ОбменДанными.Загрузка = Истина;
	
	ДокументРеализации.Записать();
	
	ксп_ИмпортСлужебный.ДобавитьОтложенноеПроведение(ДокументРеализации.Ссылка);

	
КонецПроцедуры

Процедура СоздатьЗаполнитьВнутренннееПотребление(СтруктураОбъекта, Таблицы) 
	
	ВнутреннееПотребление = ПолучитьСвязанныйОбъект(СтруктураОбъекта, "ВнутреннееПотребление");
	
	Деф = СтруктураОбъекта.definition;
	
	ВнутреннееПотребление.Номер = деф.Number;
	ВнутреннееПотребление.Дата = деф.Date; 
	ВнутреннееПотребление.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация,мВнешняяСистема);
	ВнутреннееПотребление.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.СтруктурнаяЕдиница, мВнешняяСистема);
	ВнутреннееПотребление.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(Деф.ВидЦен,мВнешняяСистема);
    ВнутреннееПотребление.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	ВнутреннееПотребление.Статус = Перечисления.СтатусыВнутреннихПотреблений.Отгружено;
	
	ВнутреннееПотребление.КассоваяСмена = ксп_ИмпортСлужебный.ПолучитьСсылкуДокументаСПроверкой(Деф.КассоваяСмена, "КассоваяСмена");

	
		
	ВнутреннееПотребление.Товары.Очистить(); 
	ВнутреннееПотребление.Товары.Загрузить(Таблицы.ТаблицаВнутреннееПотребление);
	
	ВнутреннееПотребление.ОбменДанными.Загрузка = Истина;
	
	ВнутреннееПотребление.Записать();
	
	ксп_ИмпортСлужебный.ДобавитьОтложенноеПроведение(ВнутреннееПотребление.Ссылка);	
	
КонецПроцедуры

Процедура ЗаполнитьОтчетОРОзничныхПродажах(ОбъектДанных, СтруктураОбъекта, Таблицы)
	
	
	Деф = СтруктураОбъекта.definition; 
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	ОбъектДанных.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ОбъектДанных.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(Деф.ВидЦен,мВнешняяСистема);
	
	ОбъектДанных.КассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ); 
	
	
	ОбъектДанных.КассоваяСмена = ксп_ИмпортСлужебный.НайтиКассовуюСмену(деф.КассоваяСмена, мВнешняяСистема);  		
	
	
	ОбъектДанных.Комментарий = деф.Комментарий;
	 
	
	ОбъектДанных.НалогообложениеНДС = ксп_ИмпортСлужебный.КонвертацияТиповНалогообложенияНДС(Деф.НалогообложениеНДС);	

	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	
	ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию();
	
	ОбъектДанных.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	
	ОбъектДанных.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.СтруктурнаяЕдиница, мВнешняяСистема);
			    
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
		
	ОбъектДанных.Комментарий = деф.Комментарий;
	
	
	
	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	
	//ОбъектДанных.УчитыватьНДС = ксп_ИмпортСлужебный.УчитыватьНДС(деф.НалогообложениеНДС);
	
	ОбъектДанных.ЦенаВключаетНДС = деф.НДСВключатьВСтоимость;	
	

	
	//---------------------------------------------ТЧ ТОВАРЫ
	
	
	
	ОбъектДанных.Товары.Очистить();
	Объектданных.Товары.Загрузить(Таблицы.ТаблицаОтчетОРозничныхПродажах);

		
	////---------------------------------------------ТЧ ОплатаПлатежнымиКартами	
	
	ОбъектДанных.ОплатаПлатежнымиКартами.Очистить();
	ОбъектДанных.ПодарочныеСертификаты.Очистить();
	ОбъектДанных.ОплатаБонуснымиБаллами.Очистить();
	
	
	Для каждого Строка из Таблицы.ТаблицаОплаты Цикл
		ВидОплаты = Строка.ВидОплаты;
		
		Если ВидОплаты = "Бонусы" Тогда 
			
			НоваяСтрока = ОбъектДанных.ОплатаБонуснымиБаллами.Добавить();
			
			НоваяСтрока.Партнер = Справочники.Партнеры.РозничныйПокупатель;
			НоваяСтрока.БонуснаяПрограммаЛояльности = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ПрограммаЛояльностиДляБонусныхБаллов",мВнешняяСистема);
			НоваяСтрока.ДатаОплаты = деф.Date; 
			НоваяСтрока.СуммаБонусныхБаллов = Строка.СуммаБонусов;
			
		ИначеЕсли ВидОплаты = "Подели" Тогда 
			
			 СтрокаТЧ = ОбъектДанных.ОплатаПлатежнымиКартами.Добавить();    
			 
			 СтрокаТЧ.ВидОплаты =  Перечисления.ТипыПлатежнойСистемыККТ.Подели;
			 			 
			 СтрокаТЧ.Сумма	= Строка.сумма;
			 
			 СтрокаТЧ.ДоговорПодключения = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ДоговорПодключенияПодели",мВнешняяСистема);
			 				
			
		ИначеЕсли ВидОплаты = "БанковскаяКарта" Тогда 
			
			СтрокаТЧ = ОбъектДанных.ОплатаПлатежнымиКартами.Добавить();    
			
			СтрокаТЧ.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.ПлатежнаяКарта;
					
			СТрокаТЧ.НомерПлатежнойКарты = Строка.НомерПлатежнойКарты;
			
			СтрокаТЧ.Сумма	= Строка.сумма;
			
			СтрокаТЧ.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;			
			
		ИначеЕсли ВидОплаты = "СБП" Тогда
			
			СтрокаТЧ = ОбъектДанных.ОплатаПлатежнымиКартами.Добавить();    
			
			СтрокаТЧ.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей;
					
			СТрокаТЧ.НомерПлатежнойКарты = Строка.НомерПлатежнойКарты;
			
			СтрокаТЧ.Сумма	= Строка.сумма;
			
			СтрокаТЧ.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;
				
		ИначеЕсли ВидОплаты = "ПодарочныйСертификат" Тогда 
			
			НомерКарты = ксп_ИмпортСлужебный.ПолучитьСвойство(Строка, "НомерСертификата.СерияНомер");
			
			НайденныеСертификаты = ПодарочныеСертификатыСервер.НайтиПодарочныеСертификаты(СокрЛП(НомерКарты),Перечисления.ТипыКодовКарт.Штрихкод); 
			
			СтруктураСертификата = ПроверитьВернутьСертификат(НайденныеСертификаты);
							
			СтрокаТЧ = ОбъектДанных.ПодарочныеСертификаты.Добавить();
			
			СтрокаТЧ.ПодарочныйСертификат    = СтруктураСертификата.ССылка;
			СтрокаТЧ.Сумма                   = Строка.Сумма;
			СтрокаТЧ.СуммаВВалютеСертификата = Строка.Сумма;
			СтрокаТЧ.СуммаВзаиморасчетов     = Строка.Сумма;
			
			
		КонецЕсли;
		
		
		
	КонецЦикла; 
	
	//Для каждого Строка из Таблицы.ТаблицаОтчетОРозничныхПродажах Цикл
	//	
	//	Если Строка.БонуснымиБаллами = 0 Тогда 
	//		
	//		Продолжить;
	//		
	//	КонецЕСли;
	//	
	//	НоваяСтрока = ОбъектДанных.ОплатаБонуснымиБаллами.Добавить();
	//	
	//	НоваяСтрока.Партнер = Справочники.Партнеры.РозничныйПокупатель;
	//	НоваяСтрока.БонуснаяПрограммаЛояльности = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ПрограммаЛояльностиДляБонусныхБаллов",мВнешняяСистема);
	//	НоваяСтрока.ДатаОплаты = деф.Date; 
	//	НоваяСтрока.СуммаБонусныхБаллов = Строка.БонуснымиБаллами;
	//	
	//КонецЦикла; 
	
	Таблицы.ТаблицаОплаты.Очистить();
	
	НеобходимоСписать = Таблицы.СуммаВычетаСертификатовПродажи;
	
	НаУдаление = Новый Массив;
	
	Для каждого Строка Из ОбъектДанных.ОплатаПлатежнымиКартами Цикл
		
		Если  НеобходимоСписать = 0 Тогда 
			
			Прервать;
			
		КонецЕсли;
		
		Если Строка.Сумма < НеобходимоСписать Тогда
			
			СуммаКСписанию =  Строка.Сумма;  
			
			НеобходимоСписать = НеобходимоСписать - СуммаКСписанию;
			
			Строка.Сумма = 0;
			
			НоваяСтрока = Таблицы.ТаблицаОплаты.Добавить();
			
			НоваяСтрока.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;
			НоваяСтрока.НомерПлатежнойКарты   = Строка.НомерПлатежнойКарты;
			НоваяСтрока.Сумма                 = СуммаКСписанию;
			НоваяСтрока.ВидОплаты             = Строка.ВидОплаты;
			НоваяСтрока.ДоговорПодключения    = Строка.ДоговорПодключения; 
			
			НаУдаление.Добавить(Строка);
			
		ИначеЕсли СТрока.Сумма = НеобходимоСписать Тогда 
			
			Строка.Сумма = 0;
			
			НоваяСтрока = Таблицы.ТаблицаОплаты.Добавить();
			
			НоваяСтрока.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;
			НоваяСтрока.НомерПлатежнойКарты   = Строка.НомерПлатежнойКарты;
			НоваяСтрока.Сумма                 = НеобходимоСписать;
			НоваяСтрока.ВидОплаты             = Строка.ВидОплаты;
			НоваяСтрока.ДоговорПодключения    = Строка.ДоговорПодключения;
			
			НеобходимоСписать = 0;
			
			НаУдаление.Добавить(Строка);
			
			Прервать;
			
		Иначе 
			
			Строка.Сумма = Строка.Сумма - НеобходимоСписать;
			
			НоваяСтрока = Таблицы.ТаблицаОплаты.Добавить();
			
			НоваяСтрока.ЭквайринговыйТерминал = Строка.ЭквайринговыйТерминал;
			НоваяСтрока.НомерПлатежнойКарты   = Строка.НомерПлатежнойКарты;
			НоваяСтрока.Сумма                 = НеобходимоСписать;
			НоваяСтрока.ВидОплаты             = Строка.ВидОплаты;
			НоваяСтрока.ДоговорПодключения    = Строка.ДоговорПодключения;
			
			НеобходимоСписать = 0;  
			
			Прервать;
				
		КонецЕсли;
		
		
	КонецЦикла; 
	
	Для каждого Строка из НаУдаление Цикл
		
		ОбъектДанных.ОплатаПлатежнымиКартами.Удалить(Строка);
		
	КонецЦикла;

	
	
	
КонецПроцедуры


Функция ПодготовитьТаблицыДокументов(деф)
	
	Таблицы = Новый Структура("ТаблицаОтчетОРозничныхПродажах, ТаблицаВнутреннееПотребление, ТаблицаРеализацияПодарочныхСертификатов, ТаблицаОтчетОрозничныхВОзвратах, ТаблицаВозвратПодарочныхСертификатов,
	|ТаблицаОплаты,таблицаОплатыВозвраты,СуммаВычетаСертификатовПродажи,СуммаВычетаСертификатовВозврат");
	
	Таблицы.ТаблицаОтчетОРозничныхПродажах 			= ПустаяТаблицаОтчетОРОзничныхПродажах();
	Таблицы.ТаблицаВнутреннееПотребление   			= ПустаяТаблицаВнутреннееПотребление();
	Таблицы.ТаблицаРеализацияПодарочныхСертификатов = ПустаяТаблицаРеализацияПодарочныхСертификатов();
	Таблицы.ТаблицаОтчетОрозничныхВозвратах 		= ПустаяТаблицаОтчетОрозничныхВозвратах();
	Таблицы.ТаблицаВозвратПодарочныхСертификатов	= ПустаяТаблицаВозвратПодарочныхСертификатов();
	Таблицы.ТаблицаОплаты    						= ПустаяТаблицаОплаты();
	Таблицы.ТаблицаОплатыВозвраты    				= ПустаяТаблицаОплаты(); 
	
	СегментПакетов = Справочники.СегментыНоменклатуры.НайтиПоНаименованию("Пакеты");
	
	СписокПакетов = СегментыВызовСервера.СписокЗначений(СегментПакетов);

	Таблицы.СуммаВычетаСертификатовВозврат = 0;
	Таблицы.СуммаВычетаСертификатовПродажи = 0;
	
	Для Каждого Строка из Деф.ТЧЗапасы Цикл
		
			
		Если Число(Строка.Возврат) > 0 Тогда 
			
			Если Строка.Номенклатура.Свойство("Номинал") Тогда 
								
				НомерКарты = ксп_ИмпортСлужебный.ПолучитьСвойство(Строка, "СерииНоменклатуры");
				
				Если Не ЗначениеЗаполнено(НомерКарты) Тогда
					
					ВызватьИсключение "Не указан номер подарочного сертификата";
					
				КонецЕсли; 
				
				НайденныеСертификаты = ПодарочныеСертификатыСервер.НайтиПодарочныеСертификаты(СокрЛП(НомерКарты),Перечисления.ТипыКодовКарт.Штрихкод); 
				
				СтруктураСертификата = ПроверитьВернутьСертификат(НайденныеСертификаты);
				
				Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда 
					
					ВызватьИсключение "Не удалось найти подарочный сертификат";
					
				КонецЕсли;
					
				НоваяСтрока	= Таблицы.ТаблицаВозвратПодарочныхСертификатов.Добавить();
				
				НоваяСтрока.ПодарочныйСертификат = СтруктураСертификата.Ссылка;
				НоваяСтрока.Сумма = СтруктураСертификата.Номинал;
				НоваяСтрока.ОбъектРасчетов = СтруктураСертификата.ОбъектРасчетов;
				
				Таблицы.СуммаВычетаСертификатовВозврат = Таблицы.СуммаВычетаСертификатовВозврат + СтруктураСертификата.Номинал;
				
			Иначе 
				
				НоваяСтрока = Таблицы.ТаблицаОтчетОрозничныхВозвратах.Добавить();
				
				НоваяСтрока.Номенклатура    			= ксп_ИмпортСлужебный.НайтиНоменклатуру(Строка.Номенклатура);
				НоваяСтрока.Характеристика              = ксп_ИмпортСлужебный.НайтиХарактеристику(Строка.Характеристика);
				НоваяСтрока.Упаковка				    = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(Строка.ЕдиницаИзмерения, Строка.Номенклатура);
				НоваяСтрока.КоличествоУпаковок          = -Число(Строка.Количество);
				//НоваяСтрока.Количество                  =
				НоваяСтрока.Цена                        = Строка.Цена;
				НоваяСтрока.Сумма                       = -Число(Строка.Сумма);
				НоваяСтрока.СтавкаНДС                   = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюРозницы(Строка.СтавкаНДС);
				НоваяСтрока.СуммаНДС                    = -Число(Строка.СуммаНДС);
				НоваяСтрока.ПроцентРучнойСкидки         = Строка.ПроцентСкидкиНаценки;
				НоваяСтрока.СуммаРучнойСкидки           = Строка.СуммаСкидкиНаценки;
				НоваяСтрока.КоличествоУпаковокФакт      = -Число(Строка.Количество);
				НоваяСтрока.КоличествоУпаковокУчет      = -Число(Строка.Количество);
				НоваяСтрока.БонуснымиБаллами            = Строка.СуммаСкидкиОплатыБонусом;
				НоваяСтрока.АналитикаУчетаНоменклатуры  = ксп_ИмпортСлужебный.НайтиСоздатьКлючАналитикиНом(НоваяСтрока.Номенклатура, ксп_ИмпортСлужебный.НайтиСклад(Деф.СтруктурнаяЕдиница,мВнешняяСистема), НоваяСтрока.Характеристика);
			
			    КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

		        ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(НоваяСтрока,Новый Структура("ПересчитатьКоличествоЕдиниц"), КэшированныеЗначения);
				
				
				
			КонецЕсли;
			
			
			
		Иначе
			
			Если Строка.Номенклатура.Свойство("Номинал") Тогда
				
				НомерКарты = ксп_ИмпортСлужебный.ПолучитьСвойство(Строка, "СерииНоменклатуры");
				
				Если Не ЗначениеЗаполнено(НомерКарты) Тогда
					
					ВызватьИсключение "Не указан номер подарочного сертификата";
					
				КонецЕсли; 
				
				НайденныеСертификаты = ПодарочныеСертификатыСервер.НайтиПодарочныеСертификаты(СокрЛП(НомерКарты),Перечисления.ТипыКодовКарт.Штрихкод); 
				
				СтруктураСертификата = ПроверитьВернутьСертификат(НайденныеСертификаты);
				
				Если НЕ ЗначениеЗаполнено(СтруктураСертификата) Тогда 
					
					ВызватьИсключение "Не удалось найти подарочный сертификат";
					
				КонецЕсли;
					
				НоваяСтрока	= Таблицы.ТаблицаРеализацияПодарочныхСертификатов.Добавить();
				
				НоваяСтрока.ПодарочныйСертификат = СтруктураСертификата.Ссылка;
				НоваяСтрока.Сумма = СтруктураСертификата.Номинал;
				НоваяСтрока.ОбъектРасчетов = СтруктураСертификата.ОбъектРасчетов; 
				
				Таблицы.СуммаВычетаСертификатовПродажи = Таблицы.СуммаВычетаСертификатовПродажи + СтруктураСертификата.Номинал;
				
	
			ИначеЕсли Строка.Сумма = 0 Тогда
				
				Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(Строка.Номенклатура);
				
				Если СписокПакетов.НайтиПоЗначению(Номенклатура) = Неопределено Тогда 
					
					Продолжить;
					
				КонецЕсли;
				
				НоваяСтрока	= Таблицы.ТаблицаВнутреннееПотребление.Добавить();
				
				
				НоваяСтрока.Номенклатура               = Номенклатура;
				НоваяСтрока.Характеристика             = ксп_ИмпортСлужебный.НайтиХарактеристику(Строка.Характеристика);
				НоваяСтрока.Упаковка                   = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(Строка.ЕдиницаИзмерения, Строка.Номенклатура);
				НоваяСтрока.КоличествоУпаковок         = Строка.Количество;
				//НоваяСтрока.Количество                 =
				НоваяСтрока.СтатьяРасходов             = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("СтатьяРасходовДляСписанияТоваров", мВнешняяСистема);
				НоваяСтрока.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиСоздатьКлючАналитикиНом(
			       								НоваяСтрока.Номенклатура, ксп_ИмпортСлужебный.НайтиСклад(Деф.СтруктурнаяЕдиница,мВнешняяСистема), НоваяСтрока.Характеристика);
												
				КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

		        ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(НоваяСтрока,Новый Структура("ПересчитатьКоличествоЕдиниц"), КэшированныеЗначения);
				
				

				
				
			Иначе
				
				НоваяСтрока	= Таблицы.ТаблицаОтчетОРозничныхПродажах.Добавить();
				
				НоваяСтрока.Номенклатура    			= ксп_ИмпортСлужебный.НайтиНоменклатуру(Строка.Номенклатура);
				НоваяСтрока.Характеристика              = ксп_ИмпортСлужебный.НайтиХарактеристику(Строка.Характеристика);
				НоваяСтрока.Упаковка				    = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(Строка.ЕдиницаИзмерения, Строка.Номенклатура);
				НоваяСтрока.КоличествоУпаковок          = Строка.Количество;
				//НоваяСтрока.Количество                  =
				НоваяСтрока.Цена                        = Строка.Цена;
				НоваяСтрока.Сумма                       = Строка.Сумма;
				НоваяСтрока.СтавкаНДС                   = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюРозницы(Строка.СтавкаНДС);
				НоваяСтрока.СуммаНДС                    = Строка.СуммаНДС;
				НоваяСтрока.ПроцентРучнойСкидки         = Строка.ПроцентСкидкиНаценки;
				НоваяСтрока.СуммаРучнойСкидки           = Строка.СуммаСкидкиНаценки;
				НоваяСтрока.КоличествоУпаковокФакт      = Строка.Количество;
				НоваяСтрока.КоличествоУпаковокУчет      = Строка.Количество;
				НоваяСтрока.БонуснымиБаллами            = Строка.СуммаСкидкиОплатыБонусом;
				НоваяСтрока.АналитикаУчетаНоменклатуры  = ксп_ИмпортСлужебный.НайтиСоздатьКлючАналитикиНом(НоваяСтрока.Номенклатура, ксп_ИмпортСлужебный.НайтиСклад(Деф.СтруктурнаяЕдиница,мВнешняяСистема), НоваяСтрока.Характеристика);
			
			    КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

		        ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(НоваяСтрока,Новый Структура("ПересчитатьКоличествоЕдиниц"), КэшированныеЗначения); 

				
				
			КонецЕсли;
			
			
			
		КонецЕсли;
		
			
	КонецЦикла;
	
	
	Для каждого Строка из Деф.ТЧБезналичнаяОплата Цикл
		
		ВидОплаты = Строка.ВидОплаты.Значение;
		
		Если Строка.ЭтоОтмена Тогда 
			
			НоваяСтрока = Таблицы.ТаблицаОплатыВозвраты.Добавить(); 
			
			НоваяСтрока.ЭквайринговыйТерминал = ксп_ИмпортСлужебный.НайтиЭквайринговыйТерминал(Строка.ЭквайринговыйТерминал, мВнешняяСистема);
			НоваяСтрока.НомерПлатежнойКарты   = Строка.НомерПлатежнойКарты;
			НоваяСтрока.Сумма                 = -Число(Строка.Сумма);
			НоваяСтрока.НомерСертификата	  = Строка.НомерСертификата;
			НоваяСтрока.ВидОплаты             = ВидОплаты;
			НоваяСтрока.СуммаБонусов            = Строка.СуммаБонусов;
			
		Иначе
			
			НоваяСтрока = Таблицы.ТаблицаОплаты.Добавить();
			
			НоваяСтрока.ЭквайринговыйТерминал = ксп_ИмпортСлужебный.НайтиЭквайринговыйТерминал(Строка.ЭквайринговыйТерминал, мВнешняяСистема);
			НоваяСтрока.НомерПлатежнойКарты   = Строка.НомерПлатежнойКарты;
			НоваяСтрока.Сумма                 = Строка.Сумма;
			НоваяСтрока.НомерСертификата	  = Строка.НомерСертификата;
			НоваяСтрока.ВидОплаты             = ВидОплаты;
			НоваяСтрока.СуммаБонусов             = Строка.СуммаБонусов;
			
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	Возврат Таблицы;
	
	
КонецФункции 

Функция ПолучитьСвязанныйОбъект(СтруктураОбъекта, Имя) 
	
	id = СтруктураОбъекта.identification;
	
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы[Имя].ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	ДокументДляОповещения = Имя;
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка блокировки цепочки документов для. Подробности: " + т);
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	
	
	Если НЕ ЭтоНовый Тогда
		ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
		мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ДокументДляОповещения);
	Иначе 
		ОбъектДанных = Документы[Имя].СоздатьДокумент();
		СсылкаНового = Документы[Имя].ПолучитьСсылку(УИД);
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ДокументДляОповещения);
	КонецЕсли;
	
	Возврат ОбъектДанных;	
	
КонецФункции

Функция ПустаяТаблицаОплаты()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ЭквайринговыйТерминал");
	Таблица.Колонки.Добавить("НомерПлатежнойКарты");
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("СуммаБонусов");
	Таблица.Колонки.Добавить("НомерСертификата");
	Таблица.Колонки.Добавить("ВидОплаты");
	Таблица.Колонки.Добавить("ДоговорПодключения");

	
	
	Возврат Таблица;
	
	
	
	
КонецФункции

Функция ПустаяТаблицаВозвратПодарочныхСертификатов()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ПодарочныйСертификат");
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("ОбъектРасчетов");
	
	Возврат Таблица;
	
	
КонецФункции


Функция ПустаяТаблицаОтчетОрозничныхВозвратах()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура");
	Таблица.Колонки.Добавить("Характеристика");
	Таблица.Колонки.Добавить("Упаковка");
	Таблица.Колонки.Добавить("КоличествоУпаковок");
	Таблица.Колонки.Добавить("Количество");
	Таблица.Колонки.Добавить("Цена");
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("СтавкаНДС");
	Таблица.Колонки.Добавить("СуммаНДС");
	Таблица.Колонки.Добавить("ПроцентРучнойСкидки");
	Таблица.Колонки.Добавить("СуммаРучнойСкидки");
	Таблица.Колонки.Добавить("КоличествоУпаковокФакт");
	Таблица.Колонки.Добавить("КоличествоУпаковокУчет");
	Таблица.Колонки.Добавить("БонуснымиБаллами");
	Таблица.Колонки.Добавить("АналитикаУчетаНоменклатуры");
	
    Возврат Таблица;
	
	
КонецФункции


Функция ПустаяТаблицаРеализацияПодарочныхСертификатов()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ПодарочныйСертификат");
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("ОбъектРасчетов");
	
	Возврат Таблица;
	
КонецФункции


Функция ПустаяТаблицаВнутреннееПотребление()

	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура");
	Таблица.Колонки.Добавить("Характеристика");
	Таблица.Колонки.Добавить("Упаковка");
	Таблица.Колонки.Добавить("КоличествоУпаковок");
	Таблица.Колонки.Добавить("Количество");
	Таблица.Колонки.Добавить("СтатьяРасходов");
	Таблица.Колонки.Добавить("АналитикаУчетаНоменклатуры");

		
    Возврат Таблица; 
	
	
КонецФункции



Функция ПустаяТаблицаОтчетОРозничныхПродажах()
	
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура");
	Таблица.Колонки.Добавить("Характеристика");
	Таблица.Колонки.Добавить("Упаковка");
	Таблица.Колонки.Добавить("КоличествоУпаковок");
	Таблица.Колонки.Добавить("Количество");
	Таблица.Колонки.Добавить("Цена");
	Таблица.Колонки.Добавить("Сумма");
	Таблица.Колонки.Добавить("СтавкаНДС");
	Таблица.Колонки.Добавить("СуммаНДС");
	Таблица.Колонки.Добавить("ПроцентРучнойСкидки");
	Таблица.Колонки.Добавить("СуммаРучнойСкидки");
	Таблица.Колонки.Добавить("КоличествоУпаковокФакт");
	Таблица.Колонки.Добавить("КоличествоУпаковокУчет");
	Таблица.Колонки.Добавить("БонуснымиБаллами");
	Таблица.Колонки.Добавить("АналитикаУчетаНоменклатуры");

	
    Возврат Таблица; 
	
	
	
КонецФункции  

Функция  ПроверитьВернутьСертификат(СтруктураСертификатов) 
	
	ПодарочныеСертификаты = Неопределено;
	
	НужныйСертификат = Неопределено;
	
	Если НЕ СтруктураСертификатов.Свойство("ЗарегистрированныеПодарочныеСертификаты",ПодарочныеСертификаты ) Тогда 
		
		Возврат НужныйСертификат;
		
	КонецЕсли;
	
	Если Не ПодарочныеСертификаты.Количество() = 1 Тогда 
		
		Возврат НужныйСертификат;
		
	Иначе
		
		НужныйСертификат = ПодарочныеСертификаты[0];
		Возврат НужныйСертификат;
		
	КонецЕСли;
	 
	
	
КонецФункции




#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


 Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из Розница: Отчет о розничных продажах");
    Возврат ЭтотОбъект;
     
КонецФункции

 мВнешняяСистема = "retail";    
 ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";
 
 
 НЕ_ЗАГРУЖАТЬ = 1;
 СОЗДАТЬ = 2;
 ОБНОВИТЬ = 3;
 ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;
 
 