Перем мЛоггер;
Перем мИдВызова;

Перем мВнешняяСистема;
Перем ИмяСобытияЖР;

Перем СобиратьНенайденныхКонтрагентов Экспорт;
Перем НеНайденныеКонтрагентыМассив;   


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.5");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Документ_РеализацияТоваровУслуг",
		"Форма_Плагин_RabbitMQ_импорт_из_УПП_Документ_РеализацияТоваровУслуг",
		ТипКоманды, 
		Ложь);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти


#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из УПП: РеализацияТоваровУслуг");
	
	Попытка
		
		ТипДокумента = СтруктураОбъекта.type;
		Если НЕ НРег(ТипДокумента) = НРег("Документ.РеализацияТоваровУслуг") Тогда
			мЛоггер.ерр("Неверный тип входящего объекта. сообщение пропущено.");
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;
		
		ПредставлениеДокументаУПП = "РеализацияТоваровУслуг №"+деф.Number+" от "+строка(деф.Date);
		
		СкладУПП = ПолучитьСсылкуСправочникаПоДаннымID(деф.Склад, "КСП_СкладыУПП");
		
		Если НЕ ЗначениеЗаполнено(СкладУПП)
			ИЛИ ( НЕ ЗначениеЗаполнено(СкладУПП.ВерсияДанных) 
			И ТипЗнч(СкладУПП) = Тип("СправочникСсылка.КСП_СкладыУПП") ) Тогда 
			// так проверяем на битую ссылку
			
			ВидДокумента 		= ТипДокумента;
			Склад 				= СкладУПП;
			СкладОтправитель 	= Неопределено;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Не найден склад УПП!";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
				деф.Number,деф.date,Ложь,id.ref);
			
			мЛоггер.ерр("Документ не загружен! Не найден склад УПП
				|для : %1", 
				ПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		СкладХраненияУПП = ПолучитьСсылкуСправочникаПоДаннымID(деф.СкладХранения, "КСП_СкладыХраненияУПП");
		
		//Если СкладХраненияУПП = Неопределено Тогда
		//	СкладХраненияУПП = Справочники.КСП_СкладыХраненияУПП.ПустаяСсылка();
		//ИначеЕсли 
		//	НЕ ЗначениеЗаполнено(СкладХраненияУПП)
		//	ИЛИ ( НЕ ЗначениеЗаполнено(СкладХраненияУПП.ВерсияДанных) 
		//	И ТипЗнч(СкладХраненияУПП) = Тип("СправочникСсылка.ксп_СкладыХраненияУПП") ) Тогда 
		//	
		//	ВидДокумента 		= ТипДокумента;
		//	Склад 				= СкладУПП;
		//	СкладОтправитель 	= Неопределено;
		//	СкладПолучатель 	= Неопределено;
		//	ТекстСообщения 		= "Не найден склад хранения УПП или это битая ссылка!";
		//	ЛогикаСклад			= Неопределено;
		//	ЛогикаПеремещения 	= Неопределено;
		//	Обработчик 			= Неопределено;
		//	РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
		//		ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
		//		деф.Number,
		//		деф.date,
		//		Ложь,
		//		Id.ref);
		//	
		//	мЛоггер.ерр("Документ не загружен! Не найден склад ХРАНЕНИЯ УПП для : %1", 
		//		ПредставлениеДокументаУПП);
		//	
		//	Возврат Неопределено;
		//	
		//КонецЕсли;
		
		// ищем элемент спр Виды операций. Там может быть несколько строк со складом хранения в ТЧ Получатели
		//МассивВидОперацииПоСкладу = Найти_в_спр_КСП_ВидыОперацийПоСкладамУПП_Получатели(СкладУПП, СкладХраненияУПП);
		СпрКСП_ВидыОперацийПоСкладамУПП = Справочники.КСП_ВидыОперацийПоСкладамУПП.НайтиПоРеквизиту("СкладУПП", СкладУПП);
		Если НЕ ЗначениеЗаполнено(СпрКСП_ВидыОперацийПоСкладамУПП) Тогда
			
			ВидДокумента 		= ТипДокумента;
			Склад 				= СкладУПП;
			СкладОтправитель 	= Неопределено;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Не найден Вид операции УПП!
				|Склад: " + Строка(СкладУПП) + "
				|СкладХраненияУПП: " + Строка(СкладХраненияУПП);
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
			ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь,
			Id.ref);
			мЛоггер.ерр("Документ не загружен! Не найден Вид операции УПП.
				|Склад: %1
				|СкладХраненияУПП: %2
				|Док. УПП : %3", 
				Строка(СкладУПП), Строка(СкладХраненияУПП), ПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если СпрКСП_ВидыОперацийПоСкладамУПП.Активность Тогда 
			// всё ок, продолжаем
		Иначе
			
			ВидДокумента 		= ТипДокумента;
			Склад 				= СкладУПП;
			СкладОтправитель 	= Неопределено;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Для ВидыОперацийПоСкладамУПП: " + СпрКСП_ВидыОперацийПоСкладамУПП + " не установлена Активность!";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
				деф.Number,деф.date,Ложь,id.ref);
			
			мЛоггер.ерр(ТекстСообщения + Символы.ПС + "для : %1", ПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ВидДокументаУППСсылка = НайтиВидДокументаУПП(ТипДокумента);
		
		Если НЕ ЗначениеЗаполнено(ВидДокументаУППСсылка) Тогда
			ВидДокумента 		= ТипДокумента;
			Склад 				= СкладУПП;
			СкладОтправитель 	= Неопределено;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Не найден вид документа УПП! (в спр. ВидыДокументовУПП)";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
			ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь,
			Id.ref);
			
			мЛоггер.ерр("Документ не загружен! Не найден Вид документа УПП Списание
				|для : %1", 
			ПредставлениеДокументаУПП);
			
			Возврат Неопределено;
		КонецЕсли;
		
		ИмпортЗапрещен = Истина;
		Попытка
			Если Вычислить("РегистрыСведений.КСП_ОграниченияИмпортаДокументовУПП.РазрешитьИмпорт(ВидДокументаУППСсылка, СкладУПП, Неопределено)") = ЛОЖЬ Тогда
				
			Иначе 
				
				ИмпортЗапрещен = Ложь;
				
			КонецЕсли;
		Исключение
		    // загружаем, т.к. регистра сведений нет в метаданных (пока)
		КонецПопытки;

		Если ИмпортЗапрещен Тогда
			
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= СкладУПП;
			СкладОтправитель 	= Неопределено;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Импорт документа запрещен в регистре КСП_ОграниченияИмпортаДокументовУПП. Документ : "+ ПредставлениеДокументаУПП;
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Ложь,
				Id.ref);   
				
			мЛоггер.инфо("Импорт документа запрещен в регистре %1. Документ : %2", "КСП_ОграниченияИмпортаДокументовУПП", ПредставлениеДокументаУПП);
			
			Возврат Неопределено;			
		КонецЕсли;

		
		
		СкладЕРП = СпрКСП_ВидыОперацийПоСкладамУПП.СкладЕРП;
		Если НЕ ЗНачениезаполнено(СкладЕРП) Тогда
			
			ВидДокумента 		= ТипДокумента;
			Склад 				= СкладУПП;
			СкладОтправитель 	= Неопределено;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Для ВидОперацииПоСкладу: " + Строка(СпрКСП_ВидыОперацийПоСкладамУПП) + " не заполнен СкладЕРП!";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
			ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
			деф.Number,деф.date,Ложь,id.ref);
			
			мЛоггер.ерр("Документ не загружен!
				|Для ВидОперацииПоСкладу: %1 не заполнен СкладЕРП!
				|Для %2", 
				Строка(СпрКСП_ВидыОперацийПоСкладамУПП),
				ПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ТэгКонтрагента = деф.Контрагент;
		КонтрагентСсылка = ксп_ИмпортСлужебный.НайтиКонтрагента(ТэгКонтрагента, мВнешняяСистема);
		
		Если НЕ ЗначениеЗаполнено(КонтрагентСсылка)
			ИЛИ ( НЕ ЗначениеЗаполнено(КонтрагентСсылка.ВерсияДанных) 
			И ТипЗнч(КонтрагентСсылка) = Тип("СправочникСсылка.Контрагенты") ) Тогда 
			
			ВидДокумента 		= ТипДокумента;
			Склад 				= складУПП;
			СкладОтправитель 	= Неопределено;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Не найден Контрагент УПП: " + ТэгКонтрагента.Description + ".";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Ложь,
				Id.ref);
			
			мЛоггер.ерр("Документ не загружен! Не найден Контрагент УПП: " + ТэгКонтрагента.Description + "
				|для : %1", 
				ПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если СобиратьНенайденныхКонтрагентов и ТэгКонтрагента.Свойство("ref") Тогда
			Если ТипЗнч(КонтрагентСсылка) = Тип("СправочникСсылка.Контрагенты") И НЕ ЗначениеЗаполнено(КонтрагентСсылка.ВерсияДанных) Тогда
				Если НеНайденныеКонтрагентыМассив.Найти(ТэгКонтрагента.ref) = Неопределено Тогда
					НеНайденныеКонтрагентыМассив.Добавить(ТэгКонтрагента.Ref);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НеНайденныеКонтрагентыМассив.Количество() > 0 Тогда
			Попытка
				ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовКонтрагентов(НеНайденныеКонтрагентыМассив);
				Сообщить("Выполнен экспорт ненайденных контрагентов - " + Строка(НеНайденныеКонтрагентыМассив.Количество()) + " позиций");
			Исключение
				ТекстОшибки = "Ошибка экспорта ненайденных контрагентов в УПП. Подробности: "+ОписаниеОшибки();
				Сообщить(ТекстОшибки);
				ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
				мЛоггер.ерр(ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
		
		Схема = СхемаКонвертации(КонтрагентСсылка, деф.date);
		
		Если Схема = Неопределено Тогда
			
			СсылкаОбработчика = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(
				"СубПлагин_импорт_РеализацияТоваровУслуг_ПростаяПродажа", Истина);
			
		ИначеЕсли Схема = Перечисления.ксп_СхемыЦепочекДокументовРеализацияУПП.ПеремещениеНаОтвХранение Тогда
			
			СсылкаОбработчика = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(
				"СубПлагин_импорт_РеализацияТоваровУслуг_Схема1_ПередачаНаОтветХранение", Истина);
			
		ИначеЕсли Схема = Перечисления.ксп_СхемыЦепочекДокументовРеализацияУПП.ПередачаНаКомиссию Тогда
			
			СсылкаОбработчика = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(
				"СубПлагин_импорт_РеализацияТоваровУслуг_Схема2_ПередачаНаКомиссию", Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СсылкаОбработчика) Тогда
			
			ВидДокумента 		= ТипДокумента;
			Склад 				= СкладУПП;
			СкладОтправитель 	= Неопределено;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Не найден субплагин РеализацияТоваровУслуг в Справочнике доп обработок по схеме: <"+строка(Схема)+">!";
			ЛогикаПеремещения 	= Неопределено;
			ЛогикаСклад 		= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
			ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);
			
			мЛоггер.ерр("Документ не загружен! " + ТекстСообщения + "
				|Для : %1", 
				ПредставлениеДокументаУПП);
			
			ВызватьИсключение ТекстСообщения; 
			
		КонецЕсли;
		
		// создание объекта из эл спр "Доп отчеты и обработки"
		ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(СсылкаОбработчика);
		ОбъектОбработчика = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(СсылкаОбработчика);
		
		Если ОбъектОбработчика = Неопределено Тогда
			//ВызватьИсключение "Не удалось подключить внешнюю обработку!";			
			ВидДокумента 		= ТипДокумента;
			Склад 				= СкладУПП;
			СкладОтправитель 	= Неопределено;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Не удалось подключить субплагин! Имя: "+строка(СсылкаОбработчика);
			ЛогикаПеремещения 	= Неопределено;
			ЛогикаСклад 		= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
			ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);
			
			мЛоггер.ерр("Документ не загружен! " + ТекстСообщения + "
				|Для : %1", 
				ПредставлениеДокументаУПП);
				
			Возврат Неопределено;
			
		КонецЕсли;
		
		// запуск импорта
		
		Попытка
			
			СсылкаНаДокумент = ОбъектОбработчика.ЗагрузитьОбъект(СтруктураОбъекта, "", СкладЕРП);
			
			Если Схема = Неопределено Тогда
				
				мЛоггер.инфо("Выбрана схема: РеализацияТоваровУслуг_ПростаяПродажа");
				
				//СсылкаНаДокумент.ЗаказКлиента
				//СсылкаНаДокумент.РО
				//СсылкаНаДокумент.РеализацияТоваровУслуг
				Если ТипЗнч(СсылкаНаДокумент) = Тип("Структура") Тогда
					
					ДокСсылка = "";
					Если СсылкаНаДокумент.Свойство("ЗаказКлиента", ДокСсылка) Тогда
						мЛоггер.инфо("Загружен документ "+Строка(ДокСсылка));
					КонецЕсли;
					
					Если СсылкаНаДокумент.Свойство("РО", ДокСсылка) Тогда
						мЛоггер.инфо("Загружен документ "+Строка(ДокСсылка));
					КонецЕсли;
					
					Если СсылкаНаДокумент.Свойство("РеализацияТоваровУслуг", ДокСсылка) Тогда
						мЛоггер.инфо("Загружен документ "+Строка(ДокСсылка));
						СсылкаНаДокумент = ДокСсылка;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Схема = Перечисления.ксп_СхемыЦепочекДокументовРеализацияУПП.ПеремещениеНаОтвХранение Тогда
				
				мЛоггер.инфо("Выбрана схема: РеализацияТоваровУслуг_Схема1_ПередачаНаОтветХранение");
				
				//СсылкаНаДокумент.ЗаказНаПеремещение
				//СсылкаНаДокумент.РО
				//СсылкаНаДокумент.Перемещение
				Если ТипЗнч(СсылкаНаДокумент) = Тип("Структура") Тогда
					
					ДокСсылка = "";
					Если СсылкаНаДокумент.Свойство("ЗаказНаПеремещение", ДокСсылка) Тогда
						мЛоггер.инфо("Загружен документ "+Строка(ДокСсылка));
					КонецЕсли;
					
					Если СсылкаНаДокумент.Свойство("РО", ДокСсылка) Тогда
						мЛоггер.инфо("Загружен документ "+Строка(ДокСсылка));
					КонецЕсли;
					
					Если СсылкаНаДокумент.Свойство("Перемещение", ДокСсылка) Тогда
						мЛоггер.инфо("Загружен документ "+Строка(ДокСсылка));
						СсылкаНаДокумент = ДокСсылка;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Схема = Перечисления.ксп_СхемыЦепочекДокументовРеализацияУПП.ПередачаНаКомиссию Тогда
				
				мЛоггер.инфо("Выбрана схема: РеализацияТоваровУслуг_Схема2_ПередачаНаКомиссию");
				
				//СсылкаНаДокумент.ЗаказКлиента
				//СсылкаНаДокумент.РО
				//СсылкаНаДокумент.РеализацияТоваровУслуг
				//СсылкаНаДокумент.ПередачаТоваровХранителю
				Если ТипЗнч(СсылкаНаДокумент) = Тип("Структура") Тогда
					
					ДокСсылка = "";
					Если СсылкаНаДокумент.Свойство("ЗаказКлиента", ДокСсылка) Тогда
						мЛоггер.инфо("Загружен документ "+Строка(ДокСсылка));
					КонецЕсли;
					
					Если СсылкаНаДокумент.Свойство("РО", ДокСсылка) Тогда
						мЛоггер.инфо("Загружен документ "+Строка(ДокСсылка));
					КонецЕсли;
					
					Если СсылкаНаДокумент.Свойство("РеализацияТоваровУслуг", ДокСсылка) Тогда
						мЛоггер.инфо("Загружен документ "+Строка(ДокСсылка));
						СсылкаНаДокумент = ДокСсылка;
					КонецЕсли;
					
					//Если СсылкаНаДокумент.Свойство("ПередачаТоваровХранителю", ДокСсылка) Тогда
					//	мЛоггер.инфо("Загружен документ "+Строка(ДокСсылка));
					//	СсылкаНаДокумент = ДокСсылка;
					//КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			мЛоггер.инфо("Для документа УПП: " + ПредставлениеДокументаУПП);
			
			ВидДокумента 		= ТипДокумента;
			Склад 				= СкладУПП;
			СкладОтправитель 	= Неопределено;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Успешно загружен";
			ЛогикаПеремещения 	= Неопределено;
			ЛогикаСклад 		= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
			ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Истина, // ошибки исправлены
			Id.ref);
			
		Исключение
			
			ВидДокумента 		= ТипДокумента;
			Склад 				= СкладУПП;
			СкладОтправитель 	= Неопределено;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Ошибка импорта: "+ОписаниеОшибки();
			ЛогикаПеремещения 	= Неопределено;
			ЛогикаСклад 		= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
			ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);
			
			мЛоггер.ерр("Ошибка загрузки документа "+Строка(деф.Number));
			
			ВызватьИсключение;
			
		КонецПопытки;
		
		Возврат СсылкаНаДокумент; //здесь не всегда ссылка. может быть структура
		
	Исключение
		
		мЛоггер.ерр("Ошибка. Плагин_RabbitMQ_импорт_из_УПП_Документ_РеализацияТоваровУслуг.
			|Подробности: "+ОписаниеОшибки());
		// это - чтобы уйти в retry-очередь
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти


#Область СлужебныеЗаполненияИПолученияСсылок

Функция ПолучитьСсылкаНаДопОбработку(id,деф,СтруктураОбъекта,jsonText)
	Ответ = Новый Структура;
	СкладОтправительУПП = ПолучитьСсылкуСправочникаПоДаннымID(деф.СкладОтправитель, "КСП_СкладыУПП");
	СкладПолучательУПП = ПолучитьСсылкуСправочникаПоДаннымID(деф.СкладПолучатель, "КСП_СкладыУПП");
	Если ЗначениеЗаполнено(СкладОтправительУПП) и ЗначениеЗаполнено(СкладПолучательУПП) Тогда
		ЛогикаОбработкиСкладОтправительУПП = ПолучитьЛогикуСклада(СкладОтправительУПП);
		ЛогикаОбработкиСкладПолучательУПП = ПолучитьЛогикуСклада(СкладПолучательУПП);
		Если ЗначениеЗаполнено(ЛогикаОбработкиСкладОтправительУПП) и ЗначениеЗаполнено(ЛогикаОбработкиСкладПолучательУПП) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ЛогикаСкладПолучатель", ЛогикаОбработкиСкладПолучательУПП);
			Запрос.УстановитьПараметр("ЛогикаСкладОтправитель", ЛогикаОбработкиСкладОтправительУПП);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	КСП_ЛогикаОбработкиПеремещений.СсылкаНаДопОбработку КАК СсылкаНаДопОбработку
			|ИЗ
			|	Справочник.КСП_ЛогикаОбработкиПеремещений КАК КСП_ЛогикаОбработкиПеремещений
			|ГДЕ
			|	КСП_ЛогикаОбработкиПеремещений.ЛогикаСкладОтправитель = &ЛогикаСкладОтправитель
			|	И КСП_ЛогикаОбработкиПеремещений.ЛогикаСкладПолучатель = &ЛогикаСкладПолучатель";
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				Возврат Неопределено;
			КонецЕсли;
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.СсылкаНаДопОбработку;
		Иначе
			Возврат Неопределено;	
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Функция ПолучитьСкладERP(СкладУПП) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СкладУПП", СкладУПП);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП КАК СкладУПП,
	|	КСП_ВидыОперацийПоСкладамУПП.СкладЕРП КАК СкладЕРП,
	|	КСП_ВидыОперацийПоСкладамУПП.Ссылка КАК Ссылка,
	|	КСП_ВидыОперацийПоСкладамУПП.ЛогикаОбработкиВШапке КАК ЛогикаОбработки
	|ИЗ
	|	Справочник.КСП_ВидыОперацийПоСкладамУПП КАК КСП_ВидыОперацийПоСкладамУПП
	|ГДЕ
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП = &СкладУПП";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СкладУПП;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СкладЕРП;
	
КонецФункции

Функция ПолучитьЛогикуСклада(СкладУПП) 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СкладУПП", СкладУПП);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	КСП_ВидыОперацийПоСкладамУПП.ЛогикаОбработкиВШапке КАК ЛогикаОбработки
	|ИЗ
	|	Справочник.КСП_ВидыОперацийПоСкладамУПП КАК КСП_ВидыОперацийПоСкладамУПП
	|ГДЕ
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП = &СкладУПП";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ЛогикаОбработки;
	
КонецФункции

Функция ЗаполненаСсылка(СтруктураID) 
	Если не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	Попытка
		Ref = СтруктураID.Ref;	
		Если ЗначениеЗаполнено(Ref) Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ПолучитьСсылкуДокументаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если Не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Документы[ВидОбъекта].ПустаяСсылка();;
	КонецЕсли;
	
	ГУИД = "";
	Если СтруктураID.Свойство("Ref", ГУИД) Тогда
		Если НЕ ЗначениеЗаполнено(ГУИД) ИЛИ ГУИД="00000000-0000-0000-0000-000000000000" Тогда
			Возврат Документы[ВидОбъекта].ПустаяСсылка();
		КонецЕсли;
		Возврат Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Иначе
		Возврат Документы[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуСправочникаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если Не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();;
	КонецЕсли;
	
	ГУИД = "";
	Если СтруктураID.Свойство("Ref", ГУИД) Тогда
		Если НЕ ЗначениеЗаполнено(ГУИД) ИЛИ ГУИД="00000000-0000-0000-0000-000000000000" Тогда
			Возврат Справочники[ВидОбъекта].ПустаяСсылка();
		КонецЕсли;
		Возврат Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Иначе
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Ищет Вид операции по складу по
//- складу УПП в шапке
//- складу хранения в ТЧ Получатели
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: спр Виды операций по складам УПП
//
Функция Найти_в_спр_КСП_ВидыОперацийПоСкладамУПП(СкладУПП)
	
	МассивОперацийПоСкладу = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СкладУПП", СкладУПП);
	//Запрос.УстановитьПараметр("СкладХраненияУПП", СкладХраненияУПП);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТЧ.Ссылка как ВидОперацииПоСкладу
	|
	|ИЗ 
	|	Справочник.КСП_ВидыОперацийПоСкладамУПП.Получатели КАК ТЧ
	|	left join Справочник.КСП_ВидыОперацийПоСкладамУПП КАК шапка
	|	ПО шапка.ссылка = ТЧ.ссылка
	|ГДЕ 
	|	1=1
	|	И шапка.СкладУПП = &СкладУПП
	|	И Шапка.Отключено = ЛОЖЬ";
	
	// 1=1 - ТЧ.СкладХраненияУПП = &СкладХраненияУПП
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат МассивОперацийПоСкладу;
	КонецЕсли;
	
	Рез = Неопределено;
	сч = 0;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Рез = Выборка.ВидОперацииПоСкладу;
		МассивОперацийПоСкладу.Добавить(Рез);
		сч = сч + 1;
	КонецЦикла;
	
	Если сч > 1 Тогда
		
		т = "";
		Для сч = 0 По МассивОперацийПоСкладу.Количество() - 1 Цикл
			
			т = т + строка(МассивОперацийПоСкладу[сч])+" код "+МассивОперацийПоСкладу[сч].Код+", ";
			
		КонецЦикла;
		//ВызватьИсключение "Найдено более одного вида операции по складу! Список операций: "+т;
	КонецЕсли;
	
	Возврат МассивОперацийПоСкладу;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиВидДокументаУПП(ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТТ.Ссылка КАК ВидДок
	|ИЗ
	|	Справочник.КСП_ВидыДокументовУПП КАК ТТ
	|ГДЕ
	|	
	|	ТТ.Наименование = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Не найден вид документа УПП в спр. видов документов: "+Строка(ВидДокумента);
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВидДок = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВидДок = ВыборкаДетальныеЗаписи.ВидДок;
	КонецЦикла;
	
	Возврат ВидДок;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиЛогикуПоВидуДокумента(ВидОперации, СкладХраненияУПП, ВидДокументаУППСсылка)
	
	ЛогикаОбработки = Неопределено;
	
	Для каждого стрк Из ВидОперации.ПОлучатели Цикл
		
		Если НЕ стрк.СкладХраненияУПП = СкладХраненияУПП Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяЛогика = стрк.ЛогикаОбработкиВТЧ;
		
		Для каждого стркОбработчик Из ТекущаяЛогика.ОбработчикиТиповДокументов Цикл
			
			Если стркОбработчик.ВидДокументаУПП = ВидДокументаУППСсылка Тогда
				
				Возврат ТекущаяЛогика;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиСубПлагинВЛогикеПоВидуДокумента(ЛогикаОбработки, ВидДокументаУППСсылка)
	
	Для каждого стркОбработчик Из ЛогикаОбработки.ОбработчикиТиповДокументов Цикл
		
		Если стркОбработчик.ВидДокументаУПП = ВидДокументаУППСсылка Тогда
			
			Возврат стркОбработчик.СсылкаНаДопОбработку;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции 

// ЕНС. todo. Перенести в общий модуль ксп_ИмпортСлужебный
Функция ПолучитьСсылкаНаЛогикуПеремещения(ЛогикаОбработкиСкладОтправительУПП,
	ЛогикаОбработкиСкладПолучательУПП)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЛогикаСкладПолучатель", ЛогикаОбработкиСкладПолучательУПП);
	Запрос.УстановитьПараметр("ЛогикаСкладОтправитель", ЛогикаОбработкиСкладОтправительУПП);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КСП_ЛогикаОбработкиПеремещений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КСП_ЛогикаОбработкиПеремещений КАК КСП_ЛогикаОбработкиПеремещений
	|ГДЕ
	|	КСП_ЛогикаОбработкиПеремещений.ЛогикаСкладОтправитель = &ЛогикаСкладОтправитель
	|	И КСП_ЛогикаОбработкиПеремещений.ЛогикаСкладПолучатель = &ЛогикаСкладПолучатель";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции

#КонецОбласти


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) Экспорт
	
	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти


#Область Служебные

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("СкладОтправитель");
	мРеквизиты.Добавить("СкладПолучатель");
	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

Функция СхемаКонвертации(КонтрагентСсылка, ДатаДок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КСП_КомиссионерыДляРеализацийУПП.ДатаНачала КАК ДатаНачала,
	|	КСП_КомиссионерыДляРеализацийУПП.ДатаОкончания КАК ДатаОкончания,
	|	КСП_КомиссионерыДляРеализацийУПП.Схема КАК Схема
	|ИЗ
	|	РегистрСведений.КСП_КомиссионерыДляРеализацийУПП КАК КСП_КомиссионерыДляРеализацийУПП
	|ГДЕ
	|	КСП_КомиссионерыДляРеализацийУПП.ВнешняяСистема = &ВнешняяСистема
	|	И КСП_КомиссионерыДляРеализацийУПП.Контрагент = &Контрагент";
	
	
	Запрос.УстановитьПараметр("ВнешняяСистема", мВнешняяСистема);
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Рез = Неопределено;
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Рез;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДатаНачала) Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
				Рез = Выборка.Схема;
			Иначе 
				Если ( ДатаДок >= Выборка.ДатаНачала И ДатаДок <= Выборка.ДатаОкончания ) Тогда
					Рез = Выборка.Схема;
				КонецЕсли;
			КонецЕсли; 
			Прервать;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
				Если ДатаДок <= Выборка.ДатаОкончания Тогда
					Рез = Выборка.Схема;
				КонецЕсли;
			КонецЕсли;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

// Описание_метода
//
// Параметры:
//  Параметр1   - Тип1 -
//
Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти


мВнешняяСистема = "UPP";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";

СобиратьНенайденныхКонтрагентов = Истина;
НеНайденныеКонтрагентыМассив = Новый Массив;
