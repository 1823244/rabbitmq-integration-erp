
Перем мВнешняяСистема;
Перем ИмяСобытияЖР;

Перем мЛоггер;
Перем мИдВызова;
Перем jsonText;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.7");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Справочник_ТипыЦенНоменклатуры");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Справочник_ТипыЦенНоменклатуры");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Справочник_ТипыЦенНоменклатуры",
		"Плагин_RabbitMQ_импорт_из_УПП_Справочник_ТипыЦенНоменклатуры",
		ТипКоманды, 
		Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти


Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	мЛоггер = Вычислить("мис_ЛоггерСервер.getLogger(мИдВызова, ""Импорт из УПП: справочник ТипыЦенНоменклатуры"")");
	
	ЧислоЭлементов = 0;
	ЧислоНовыхЭлементов = 0;
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
		
		мЛоггер.инфо("Загрузка из Массива");
		
		Для каждого Эл Из СтруктураОбъекта Цикл
			
			Рез = Загрузить_Справочник_ТипыЦенНоменклатуры(Эл);
			
			Если Рез <> Неопределено Тогда 
				
				ЧислоЭлементов = ЧислоЭлементов + 1;
				Если Рез = 2 Тогда
					ЧислоНовыхЭлементов = ЧислоНовыхЭлементов + 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		мЛоггер.инфо("Загрузка из Структуры");
		Рез = Загрузить_Справочник_ТипыЦенНоменклатуры(СтруктураОбъекта);
		Возврат Рез;
		
	КонецЕсли;
	
КонецФункции


#Область ЗагрузкаВСправочник

Функция Загрузить_Справочник_ТипыЦенНоменклатуры(СтруктураОбъекта, jsonText = "") Экспорт
	
	Попытка
		
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("Справочник.ТипыЦенНоменклатуры") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		def = СтруктураОбъекта.definition;
		
		Если def.isFolder = Истина Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Результат = Новый Структура();
		
		//------------------------------------- работа с мэппингом
		// Если нашли по мэппингу - выходим.
		// Если такого ГУИДа в регистре еще нет - добавляем
		
		НаименованиеДляМэппинга = id.Description + ?(ЗначениеЗаполнено(def.code),", Код: " + def.code,"");
		Результат.Вставить("НаименованиеДляМэппинга", НаименованиеДляМэппинга);
		
		ВидРегистраМэппинга = "ксп_МэппингСправочникВидыЦен";
		СпрВидыЦенСсылка = Справочники.ВидыЦен.ПустаяСсылка();
		Если РегистрыСведений[ВидРегистраМэппинга].ЕстьГУИД(id.Ref, мВнешняяСистема) Тогда
			// поиск имеющегося ВидаЦены
			СпрВидыЦенСсылка = РегистрыСведений[ВидРегистраМэппинга].ПоМэппингу(id.Ref, мВнешняяСистема);
			
			мЛоггер.инфо("Найден ВидЦены " + Строка(СпрВидыЦенСсылка) + " из Регистра: " + ВидРегистраМэппинга);
			
		КонецЕсли;
		
		//------------------------------------- работа с GUID	
		
		Если НЕ ЗначениеЗаполнено(СпрВидыЦенСсылка) Тогда
			
			СуществующийОбъект = ПолучитьСсылкуСправочникаПоДаннымID(id, "ВидыЦен");
			
			ЭтоНовый = Ложь;
			Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
				ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
				мЛоггер.инфо("Найден ВидЦены: " + Строка(СуществующийОбъект));
			Иначе 
				ОбъектДанных = Справочники.ВидыЦен.СоздатьЭлемент();
				СсылкаНового = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
				ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
				ЭтоНовый = Истина;
				мЛоггер.инфо("Будет создан ВидЦены: " + Строка(СпрВидыЦенСсылка));
			КонецЕсли;
			
			// -------------------------------------------- БЛОКИРОВКА
			
			Если НЕ ЭтоНовый Тогда
				Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(СуществующийОбъект);
			КонецЕсли;
			
			НачатьТранзакцию();
			
			Если НЕ ЭтоНовый Тогда
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ТекстСообщения = "Объект не загружен! Ошибка блокировки объекта <" + Строка(СуществующийОбъект) + ">.
						|Подробности: " + ТекстОшибки;
					ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
						ТекстСообщения);
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
					
					мЛоггер.ерр(ТекстСообщения);
					
					ВызватьИсключение;
				КонецПопытки;
			КонецЕсли;
			
			ОбъектДанных = ЗаполнитьРеквизитыЭлемента(ОбъектДанных, СтруктураОбъекта, jsonText);
			СпрВидыЦенСсылка = ОбъектДанных.Ссылка;
			
			// Созданный элемент добавляем в регистр мэппингов (если есть), т.к. это выглядит логичным для пользователя
			РегистрыСведений[ВидРегистраМэппинга].ДобавитьЗапись(id.Ref, НаименованиеДляМэппинга, мВнешняяСистема, СпрВидыЦенСсылка);
			
			мЛоггер.инфо("В Регистр: " + ВидРегистраМэппинга + " добавлен ВидЦены: " + Строка(СпрВидыЦенСсылка));
			
		КонецЕсли;
		
		Результат.Вставить("СпрВидыЦенСсылка", СпрВидыЦенСсылка);
		Возврат Результат;
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		мЛоггер.ерр("Плагин_RabbitMQ_импорт_из_УПП_Справочник_ТипыЦенНоменклатуры.
			|Подробности: " + ТекстОшибки);
		
		//    ОБЯЗАТЕЛЬНО!!! Потому что в оркестраторе вызов плагина в попытке. и если была ошибка, надо сделать BasicReject()
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецФункции

// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизитыЭлемента(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	НаименованиеДляМэппинга = id.Description + ?(ЗначениеЗаполнено(деф.code),", Код: " + деф.code,"");
	
	ОбъектДанных.Наименование = id.Description;
	ОбъектДанных.БазовыйВидЦены = Неопределено;
	//ОбъектДанных.ВалютаЦены = Справочники.Валюты.НайтиПоКоду(деф.ВалютаЦены);
	ОбъектДанных.ВалютаЦены = Справочники.Валюты.НайтиПоКоду(деф.ВалютаЦены.currencyCode); 
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	ОбъектДанных.Идентификатор = строка(Новый УникальныйИдентификатор);
	
	ОбъектДанных.ВариантОкругления = Перечисления.ВариантыОкругления.ПоАрифметическимПравилам;
	ОбъектДанных.Статус = Перечисления.СтатусыДействияВидовЦен.Действует;
	ОбъектДанных.ТочностьОкругления = 0.01;
	//ОбъектДанных.ПорядокОкругления = деф.ОкруглятьВБольшуюСторону;
	ОбъектДанных.Округлять = деф.ОкруглятьВБольшуюСторону;
	ОбъектДанных.ОкруглятьВБольшуюСторону = деф.ОкруглятьВБольшуюСторону;
	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;
	ОбъектДанных.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную;

	//ОбъектДанных.ОкруглятьСкидкиКак_49_99 = деф.ОкруглятьСкидкиКак_49_99; 
	//ОбъектДанных.ПроцентСкидкиНаценки = деф.ПроцентСкидкиНаценки;
	//ОбъектДанных.ВспомогательнаяЦена = деф.ВспомогательнаяЦена;
	//ОбъектДанных.ЗапретитьРедактированиеЦеныЗаПределамиОтбора = деф.ЗапретитьРедактированиеЦеныЗаПределамиОтбора;
	//ОбъектДанных.ИспользоватьПриВыпускеПродукции = деф.ИспользоватьПриВыпускеПродукции;	
	//ОбъектДанных.ИспользоватьПриОптовойПродаже = деф.ИспользоватьПриПродаже;
	//ОбъектДанных.ИспользоватьПриПередачеМеждуОрганизациями = деф.ИспользоватьПриПередачеМеждуОрганизациями;	
	//ОбъектДанных.ИспользоватьПриПередачеПродукцииДавальцу = деф.ИспользоватьПриПередачеПродукцииДавальцу;
	//ОбъектДанных.ИспользоватьПриПродаже = деф.ИспользоватьПриПродаже;
	//ОбъектДанных.ИспользоватьПриРозничнойПродаже = деф.ИспользоватьПриПродаже;	
	//ОбъектДанных.Наценка = деф.Наценка;
	//ОбъектДанных.ОграничиватьОтборНоменклатуры = деф.ОграничиватьОтборНоменклатуры;	
	//ОбъектДанных.ПорогСрабатывания = деф.ПорогСрабатывания;
	//ОбъектДанных.РеквизитДопУпорядочивания = деф.РеквизитДопУпорядочивания;	
	//ОбъектДанных.ПорогСрабатыванияПриУменьшении = деф.ПорогСрабатыванияПриУменьшении;
	//ОбъектДанных.СхемаКомпоновкиДанных = деф.СхемаКомпоновкиДанных;
	//ОбъектДанных.УстанавливатьЦенуПриВводеНаОсновании = деф.УстанавливатьЦенуПриВводеНаОсновании;
	//ОбъектДанных.Формула = деф.Формула;

	//_знч = "";
	//ЕстьЗначение = деф.СпособЗаданияЦены.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	Если _знч = "ЗадаватьВручную" Тогда
	//		ОбъектДанных.СпособЗаданияЦены = перечисления.СпособыЗаданияЦен.Вручную;
	//	ИначеЕсли _знч = "ЗаполнятьПоДаннымИБ" Тогда
	//		ОбъектДанных.СпособЗаданияЦены = перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ;
	//	ИначеЕсли _знч = "ЗаполнятьПоДаннымИБПриПоступлении" Тогда
	//		ОбъектДанных.СпособЗаданияЦены = перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении;
	//	ИначеЕсли _знч = "РассчитыватьПоДругимВидамЦен" Тогда
	//		ОбъектДанных.СпособЗаданияЦены = перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен;
	//	КонецЕсли;
	//Иначе
	//	ОбъектДанных.СпособЗаданияЦены = Неопределено;
	//КонецЕсли;
	
	// todo Доделать табличные части
	
	//------------------------------------------------------ ФИНАЛ	
	
	Попытка
		
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
		ОбъектДанных.Записать();
		
		// Справочник будет помещен в Отложенное проведение
		jsonText = "";
		ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
	Исключение
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка, , ,
			"Объект не загружен! Ошибка в процессе создания элемента справочника "+НаименованиеДляМэппинга+".
			|Подробности: " + СообщениеОбОшибке);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка создания элемента справочника (УПП): %1.
			|Подробности: %2", НаименованиеДляМэппинга, СообщениеОбОшибке);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ОбъектДанных;
	
КонецФункции

Функция ЗаполнитьРеквизитыГруппы(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	НаименованиеДляМэппинга = id.Description + ?(ЗначениеЗаполнено(деф.code),", Код: " + деф.code,"");
	
	//ОбъектДанных.Наименование = деф.Description;
	ОбъектДанных.Наименование = деф.группа;
	
	Попытка
		
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		ОбъектДанных.ДополнительныеСвойства.Вставить("НеРегистрироватьКОбменуRabbitMQ", Истина);
		ОбъектДанных.Записать();
		
		// Справочник будет помещен в Отложенное проведение
		jsonText = "";
		ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
	Исключение
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка, , ,
			"Объект не загружен! Ошибка в процессе создания группы справочника "+НаименованиеДляМэппинга+".
			|Подробности: " + СообщениеОбОшибке);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка создания группы справочника (УПП): %1.
			|Подробности: %2", НаименованиеДляМэппинга, СообщениеОбОшибке);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ОбъектДанных;
	
КонецФункции

#КонецОбласти


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	Рез = ЗагрузитьОбъект(СтруктураОбъекта, json);
	Возврат Рез;
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ПолучитьСсылкуСправочникаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если Не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();;
	КонецЕсли;
	
	ГУИД = "";
	Если СтруктураID.Свойство("Ref", ГУИД) Тогда
		Если НЕ ЗначениеЗаполнено(ГУИД) ИЛИ ГУИД="00000000-0000-0000-0000-000000000000" Тогда
			Возврат Справочники[ВидОбъекта].ПустаяСсылка();
		КонецЕсли;
		Возврат Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Иначе
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции

//мВнешняяСистема = "retail";
//ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница"; 

мВнешняяСистема = "upp";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП в р-р МэппингВидыЦен и справочник.ТипыЦенНоменклатуры";

