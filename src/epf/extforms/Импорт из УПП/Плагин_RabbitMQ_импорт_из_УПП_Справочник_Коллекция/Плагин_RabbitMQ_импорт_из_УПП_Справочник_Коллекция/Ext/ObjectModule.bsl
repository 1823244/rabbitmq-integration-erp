Перем КэшТНВЭД;

Перем мЛоггер;
Перем мИдВызова;
Перем мОбновлять;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.5");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Справочник_Коллекция");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Справочник_Коллекция");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Справочник_Коллекция",
		"Форма_Плагин_RabbitMQ_импорт_из_УПП_Справочник_Коллекция",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	

// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, ВидНоменклатуры = Неопределено) Экспорт 
	
	мЛоггер = Вычислить("мис_ЛоггерСервер.getLogger(мИдВызова, ""Импорт Справочник.Коллекция из УПП"")");
     
    Попытка
         
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			млоггер.варн("Пропущено! Нет свойства type в сообщении");
			Возврат Неопределено;
		КонецЕсли;

		Если НЕ НРег(СтруктураОбъекта.type) = "справочник.коллекция" Тогда  
			млоггер.варн("Пропущено! В type не Справочник.коллекция");
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		def = СтруктураОбъекта.definition; 
		
		Для каждого эл Из def.Уровень1 Цикл
			
			ЭлементУровень1 = НайтиЭлементУровня1(эл);
			Если ЭлементУровень1 = Неопределено Тогда
				ЭлементУровень1 = СоздатьЭлементУровня1(эл);
			Иначе 
				ЭлементУровень1 = ОбновитьЭлементУровня1(эл, ЭлементУровень1);
			КонецЕсли;
			
			
			Для каждого эл2 Из def.Уровень2 Цикл
				
				Если НЕ эл2.Родитель = ЭлементУровень1.Наименование Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементУровень2 = НайтиЭлементУровня2(эл2, ЭлементУровень1);
				Если ЭлементУровень2 = Неопределено Тогда
					ЭлементУровень2 = СоздатьЭлементУровня2(эл2, ЭлементУровень1);
				Иначе
					ЭлементУровень2 = ОбновитьЭлементУровня2(эл2, ЭлементУровень1, ЭлементУровень2);
				КонецЕсли;

				Для каждого эл3 Из def.Уровень3 Цикл
					Если НЕ эл3.Родитель = ЭлементУровень2.Наименование Тогда
						Продолжить;
					КонецЕсли;
						
					ЭлементУровень3 = НайтиЭлементУровня3(эл3, ЭлементУровень2);
					Если ЭлементУровень3 = Неопределено Тогда
						ЭлементУровень3 = СоздатьЭлементУровня3(эл3, ЭлементУровень2);
					Иначе 
						ЭлементУровень3 = ОбновитьЭлементУровня3(эл3, ЭлементУровень2, ЭлементУровень3);
					КонецЕсли;      
						
					Для каждого эл4 Из def.Уровень4 Цикл
						Если НЕ эл4.Родитель = ЭлементУровень3.Наименование Тогда
							Продолжить;
						КонецЕсли;
							
						ЭлементУровень4 = НайтиЭлементУровня4(эл4, ЭлементУровень3);
						Если ЭлементУровень4 = Неопределено Тогда
							ЭлементУровень4 = СоздатьЭлементУровня4(эл4, ЭлементУровень3);
						Иначе 
							ЭлементУровень4 = ОбновитьЭлементУровня4(эл4, ЭлементУровень3, ЭлементУровень4);
						КонецЕсли;
						
					КонецЦикла;
					
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		
    Исключение
          т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
          мЛоггер.ерр("Плагин импорта коллекций УПП. Подробности: " + т);
           
          //    ОБЯЗАТЕЛЬНО!!! Потому что в оркестраторе вызов плагина в попытке. и если была ошибка, надо сделать BasicReject()
          ВызватьИсключение т;
 
    КонецПопытки;
	
	
КонецФункции


	
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиЭлементУровня1(СтруктураПолей)
	
	Запрос = Новый Запрос("Выбрать Ссылка Из СПравочник.КоллекцииНоменклатуры Где Наименование = &Наименование и Родитель = &Родитель");
	Родитель = СПравочники.КоллекцииНоменклатуры.ПустаяСсылка();
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Наименование", СтруктураПолей.Наименование);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе 
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
	КонецЕсли;              
	
	Возврат Неопределено;
	
КонецФункции  


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьЭлементУровня1(СтруктураПолей)
	
	обк = Справочники.КоллекцииНоменклатуры.СоздатьЭлемент();
	ЗаполнитьРеквизитыУровень1(СтруктураПолей, обк);
	обк.Записать();
	
	Возврат обк.ссылка;
	
КонецФункции  

Функция ОбновитьЭлементУровня1(СтруктураПолей, Ссылка)
	
	ОбъектДанных = Ссылка.ПолучитьОбъект();
	ЗаполнитьРеквизитыУровень1(СтруктураПолей, ОбъектДанных);
	ОбъектДанных.Записать();
	
	Возврат ОбъектДанных.ссылка;
	
КонецФункции 


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ЗаполнитьРеквизитыУровень1(СтруктураПолей, ОбъектДанных)
	ОбъектДанных.Наименование = СтруктураПолей.Наименование;
	Попытка
		ОбъектДанных.КСП_Уровень = Перечисления["ксп_УровениКоллекций"]["Год"];
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
КонецПроцедуры



Функция НайтиЭлементУровня2(СтруктураПолей, Родитель)
	
	Запрос = Новый Запрос("Выбрать Ссылка Из СПравочник.КоллекцииНоменклатуры Где Наименование = &Наименование и Родитель = &Родитель");
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Наименование", СтруктураПолей.Наименование);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе 
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
	КонецЕсли;              
	
	Возврат Неопределено;
	
КонецФункции  


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьЭлементУровня2(СтруктураПолей, Родитель)
	
	обк = Справочники.КоллекцииНоменклатуры.СоздатьЭлемент();
	ЗаполнитьРеквизитыУровня2(СтруктураПолей, Родитель, обк);	
	обк.Записать();
	
	Возврат обк.ссылка;
	
КонецФункции

Функция ОбновитьЭлементУровня2(СтруктураПолей, Родитель, Ссылка)
	
	обк = Ссылка.ПолучитьОбъект();
	ЗаполнитьРеквизитыУровня2(СтруктураПолей, Родитель, обк);	
	обк.Записать();
	
	Возврат обк.ссылка;
	
КонецФункции

Функция ЗаполнитьРеквизитыУровня2(СтруктураПолей, Родитель, обк)
	
	обк.Наименование = СтруктураПолей.Наименование;
	обк.Родитель = Родитель;
	Попытка
		обк.КСП_Уровень = Перечисления["ксп_УровениКоллекций"]["Сезон"];
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецФункции

///////////////// 3

Функция НайтиЭлементУровня3(СтруктураПолей, Родитель)
	
	Запрос = Новый Запрос("Выбрать Ссылка Из СПравочник.КоллекцииНоменклатуры Где Наименование = &Наименование и Родитель = &Родитель");
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Наименование", СтруктураПолей.Наименование);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе 
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
	КонецЕсли;              
	
	Возврат Неопределено;
	
КонецФункции  


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьЭлементУровня3(СтруктураПолей, Родитель)
	
	обк = Справочники.КоллекцииНоменклатуры.СоздатьЭлемент();
	ЗаполнитьРеквизитыУровня3(СтруктураПолей, Родитель, обк);
	обк.Записать();
	
	Возврат обк.ссылка;
	
КонецФункции

Функция ОбновитьЭлементУровня3(СтруктураПолей, Родитель, Ссылка)
	
	обк = Ссылка.ПолучитьОбъект();
	ЗаполнитьРеквизитыУровня3(СтруктураПолей, Родитель, обк);
	обк.Записать();
	
	Возврат обк.ссылка;
	
КонецФункции

Функция ЗаполнитьРеквизитыУровня3(СтруктураПолей, Родитель, обк)
	
	обк.Наименование = СтруктураПолей.Наименование;
	обк.Родитель = Родитель;
	Попытка
		обк.КСП_Уровень = Перечисления["ксп_УровениКоллекций"]["Проект"];
		обк.КСП_ДатаПредоплаты_1 = XMLЗначение(тип("Дата"),СтруктураПолей.ДатаВнесенияПредоплаты1);
		обк.КСП_ДатаПредоплаты_2 = XMLЗначение(тип("Дата"),СтруктураПолей.ДатаВнесенияПредоплаты2);
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецФункции

//////////////////// 4

Функция НайтиЭлементУровня4(СтруктураПолей, Родитель)
	
	Запрос = Новый Запрос("Выбрать Ссылка Из СПравочник.КоллекцииНоменклатуры Где Наименование = &Наименование и Родитель = &Родитель");
	
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("Наименование", СтруктураПолей.Наименование);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе 
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
	КонецЕсли;              
	
	Возврат Неопределено;
	
КонецФункции  


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьЭлементУровня4(СтруктураПолей, Родитель)
	
	обк = Справочники.КоллекцииНоменклатуры.СоздатьЭлемент();
	ЗаполнитьРеквизитыУровня4(СтруктураПолей, Родитель, обк);
	обк.Записать();
	
	Возврат обк.ссылка;
	
КонецФункции

Функция ОбновитьЭлементУровня4(СтруктураПолей, Родитель, Ссылка)
	
	обк = Ссылка.ПолучитьОбъект();
	ЗаполнитьРеквизитыУровня4(СтруктураПолей, Родитель, обк);
	обк.Записать();
	
	Возврат обк.ссылка;
	
КонецФункции

Функция ЗаполнитьРеквизитыУровня4(СтруктураПолей, Родитель, обк)
	
	обк.Наименование = СтруктураПолей.Наименование;
	обк.Родитель = Родитель;
	Попытка
		обк.КСП_Уровень = Перечисления["ксп_УровениКоллекций"]["Коллекция"];
		обк.КСП_Цвет = Справочники["ксп_Цвета"].НАйтиПоНаименованию(СтруктураПолей.ЦветФирменногоСтиля);
	Исключение
	    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецФункции

/////////////////////// конец

#Область Тестирование



Функция ЗагрузитьИзJsonНаСервере(Json, ВидНоменклатуры = Неопределено) export
	
	Если не ЗначениеЗаполнено(json) Тогда
		ВызватьИсключение "Пустой json";
	КонецЕсли;

	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
		Для Каждого эл из СтруктураОбъекта Цикл
			ЗагрузитьОбъект(эл, ВидНоменклатуры);
		КонецЦикла;
	Иначе
	    Возврат ЗагрузитьОбъект(СтруктураОбъекта, ВидНоменклатуры);
	КонецЕсли;
	
КонецФункции


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Попытка
			Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		Исключение
		    Возврат '00010101';
		КонецПопытки;
		
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции




// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервереИзФайла(Адрес, ВидНоменклатуры, Обновлять = Истина) ЭКспорт
	
	мОбновлять = Обновлять;
	
	ДвоичныеДанные  = ПолучитьИзВременногоХранилища(Адрес);
	Если 1=0 Тогда
		ДвоичныеДанные = новый ДвоичныеДанные("");
	КонецЕсли;                                
	
	ИмяФайла = ПолучитьИмяВременногоФайла("json");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.ОткрытьФайл(ИмяФайла);
	
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
		Для Каждого эл из СтруктураОбъекта Цикл
			ЗагрузитьОбъект(эл, ВидНоменклатуры);
		КонецЦикла;
	Иначе
	    Возврат ЗагрузитьОбъект(СтруктураОбъекта, ВидНоменклатуры);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции   

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервереИзМассиваАдресов(МассивАдресов, ВидНоменклатуры, Обновлять = Истина) Экспорт
	
	мОбновлять = Обновлять;
	млоггер = мис_логгерСервер.getLogger(мИдВызова);
	
	млоггер.инфо("НАЧАЛИ пакет из "+строка(МассивАдресов.Количество())+" файлов");

	сч_обраотано = 0;       
	сч_ошибок = 0;
	
	Для каждого Адрес Из МассивАдресов Цикл

		
		ДвоичныеДанные  = ПолучитьИзВременногоХранилища(Адрес);
		Если 1=0 Тогда
			ДвоичныеДанные = новый ДвоичныеДанные("");
		КонецЕсли;                                
		
		ИмяФайла = ПолучитьИмяВременногоФайла("json");
		ДвоичныеДанные.Записать(ИмяФайла);
		
		мЧтениеJSON = Новый ЧтениеJSON;
		мЧтениеJSON.ОткрытьФайл(ИмяФайла);
		
		СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
		
		Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
			Для Каждого эл из СтруктураОбъекта Цикл
				
				Попытка
					ЗагрузитьОбъект(эл, ВидНоменклатуры);
					сч_обраотано = сч_обраотано +1;
				Исключение
				    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
					сч_ошибок = сч_ошибок + 1;
				КонецПопытки;
				
			КонецЦикла;
		Иначе 
			
			Попытка
				ЗагрузитьОбъект(СтруктураОбъекта, ВидНоменклатуры);
				сч_обраотано = сч_обраотано +1;
			Исключение
			    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				сч_ошибок = сч_ошибок + 1;
			КонецПопытки;
		    
			
		КонецЕсли;

	КонецЦикла;
	
	млоггер.инфо("ЗАВЕРШИЛИ пакет из "+строка(МассивАдресов.Количество())+" файлов. УСпешно обработано = "+строка(сч_обраотано)
	+", ошибок = "+Строка(сч_ошибок));
	
	Возврат Неопределено;
	
КонецФункции



#КонецОбласти 	

Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
    Возврат ЭтотОбъект;
     
КонецФункции


мОбновлять = ИСтина;

	КэшТНВЭД = Новый ТаблицаЗначений;
	КэшТНВЭД.Колонки.Добавить("КОД");
	КэшТНВЭД.Колонки.Добавить("Ссылка");
	КэшТНВЭД.Индексы.Добавить("КОД");


	
	