Перем мЗапросПоискаХарактеристики;
Перем мВнешняяСистема;
Перем СкладУПП;
Перем мНеНайденныхТоваров;
Перем мЛоггер;
Перем мИдВызова;
Перем ИмяСобытияЖР;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Документ_КорректировкаЗаписейРегистров_Инструменты");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Документ_КорректировкаЗаписейРегистров_Инструменты");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Документ_КорректировкаЗаписейРегистров_Инструменты",
		"Форма_Документ_КорректировкаЗаписейРегистров_Инструменты",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 

#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	Перем Результат;
	
	Если НЕ ЗначениеЗаполнено(мИдВызова) Тогда
		мИдВызова = мис_ЛоггерСервер.СоздатьИдВызова(Неопределено, 
		"ДОЗАГРУЗКА Корректировок записей регистров из УПП в ВводОстатковТоваров",ТекущаяДатаСеанса(), , , );
	КонецЕсли;
	
  	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "ДОЗАГРУЗКА документов из УПП: Корректировка записей регистров");
	
	РезультатСтруктура =    Новый СТруктура("ВводОстатков,ЗаказНаВнутрПотр" );
	
    Попытка
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.КорректировкаЗаписейРегистров") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;

	
		ДанныеСсылка = Документы["ВводОстатковТоваров"].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		
		ЭтоНовый = Ложь;
		Если (НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных)) и ЗначениеЗаполнено(ДанныеСсылка.Номер) = Ложь и ЗначениеЗаполнено(ДанныеСсылка.Дата) = Ложь Тогда
			Возврат Неопределено;
		Иначе 
			
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
			ПредставлениеОбъекта = Строка(ДанныеСсылка);
			
		КонецЕсли; 
		
		Коллекция = деф.РегистрНакопления_ТоварыНаСкладах;
		Для каждого строка из Коллекция Цикл
			уид = Новый УникальныйИдентификатор(строка.Склад.Ref);
			СкладУПП = Справочники.ксп_СкладыУПП.ПолучитьСсылку(уид);
			ОбъектДанных.Комментарий = "Склад УПП: "+строка(СкладУПП)+", создан "+строка(ТекущаяДатаСеанса());
			
			НЗ=РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
			НЗ.Отбор.Ссылка.Установить(ОбъектДанных.Ссылка);
			НЗ.Прочитать();
			Для каждого стрк Из НЗ Цикл
				стрк.Комментарий = ОбъектДанных.Комментарий;
			КонецЦикла;
			НЗ.Записать();
			
			Прервать;
		КонецЦикла; 
		
		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.Записать();
		
		мЛоггер.инфо("Документ записан: %1", ОбъектДанных.ссылка);
			
		
		Возврат РезультатСтруктура
			       
    Исключение
        мЛоггер.ерр("Плагин: ДОЗАГРУЗКА . Подробности: "+ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки;
	

КонецФункции




	
#КонецОбласти 	

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Попытка
			Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		Исключение
			Возврат Значение;
		КонецПопытки;
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
    Возврат ЭтотОбъект;
     
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции



Функция ЗагрузитьИзJsonНаСервереИзФайла(Адрес) export

	
	
	ДвоичныеДанные  = ПолучитьИзВременногоХранилища(Адрес);
	Если 1=0 Тогда
		ДвоичныеДанные = новый ДвоичныеДанные("");
	КонецЕсли;                                
	
	ИмяФайла = ПолучитьИмяВременногоФайла("json");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.ОткрытьФайл(ИмяФайла);
	
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
		Для Каждого эл из СтруктураОбъекта Цикл
			ЗагрузитьОбъект(эл);
		КонецЦикла;
	Иначе
	    Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	КонецЕсли;
	
	Возврат Неопределено;
	
	
	
КонецФункции





мВнешняяСистема = "UPP";
СкладУПП = Неопределено;
мНеНайденныхТоваров = Новый Массив;
ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";

мЗапросПоискаХарактеристики = Новый Запрос;
мЗапросПоискаХарактеристики.Текст = 
	"ВЫБРАТЬ
	|	х.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК х
	|ГДЕ
	|	х.Наименование = ""Неопределена""
	|	И х.Владелец = &Владелец";


стэк = Новый Массив;

