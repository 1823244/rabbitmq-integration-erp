// этот плагин - для интерактивного импорта! (Ввод остатков)
Перем мВнешняяСистема;
Перем мНеНайденнаяНоменклатураМассив;
Перем мНеНайденныеКонтрагентыМассив;
Перем мИмяСобытия;
Перем мИдВызова;
Перем мЛоггер ;
#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.24");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_РегистрНакопления_ТоварыПереданные");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_РегистрНакопления_ТоварыПереданные");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_РегистрНакопления_ТоварыПереданные",
		"Форма_Плагин_RabbitMQ_импорт_из_УПП_РегистрНакопления_ТоварыПереданные",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	

 
 
Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("РегистрНакопления.ТоварыПереданные") Тогда
		Возврат Неопределено;
	КонецЕсли;       
	
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт регистров из УПП: ТоварыПереданные");
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;

	// этот массив нужен в процессе разработки - для поиска номенклатуры, которой еще нет в ЕРП
	мНеНайденнаяНоменклатураМассив = Новый Массив;
	мНеНайденныеКонтрагентыМассив = Новый Массив;

	ОбъектДанных = Документы.ВводОстатковТоваров.СоздатьДокумент();
	
	Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	
	Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ 
		(ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") и не ЗначениеЗаполнено(Контрагент.ВерсияДанных))
		Тогда
		
		Гуид = "";
		Если деф.Контрагент.Свойство("Ref", ГУИД) Тогда
			мНеНайденныеКонтрагентыМассив.Добавить(деф.Контрагент.Ref);
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(мИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,"Не найден контрагент! Ввод остатков не загружен! ГУИД "+строка(ГУИД));
		Возврат Неопределено
		
	КонецЕсли;

	//начало - Елисеев :: 19.07.2024
	
	//ЭтоКомиссионер = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.ЭтоКомиссионер(мВнешняяСистема, Контрагент, Неопределено, деф.ДатаОстатков);
	//
	//Если ЭтоКомиссионер = Истина Тогда
	//	//PFS. Раньше это был комиссионер, а в ЕРП учитывается на складе ответ хранения
	//	ЗаполнитьРеквизиты_ВводОстатковТоварыСобственные(СтруктураОбъекта, ОбъектДанных, jsonText );
	//Иначе 
	//	
	//	ЗаполнитьРеквизиты_ВводОстатковТоварыПереданныеНаКомиссию(СтруктураОбъекта, ОбъектДанных, jsonText );
	//КонецЕсли;
	
	// стало
		Схема = СхемаКонвертации(Контрагент, СтруктураОбъекта.logmoment);
		
		Если Схема = Неопределено Тогда
			
		ИначеЕсли Схема = Перечисления.ксп_СхемыЦепочекДокументовРеализацияУПП.ПеремещениеНаОтвХранение Тогда
			
			// это ПФС
			ЗаполнитьРеквизиты_ВводОстатковТоварыСобственные(СтруктураОбъекта, ОбъектДанных, jsonText );
			
		ИначеЕсли Схема = Перечисления.ксп_СхемыЦепочекДокументовРеализацияУПП.ПередачаНаКомиссию Тогда
			
			// это маркеплейсы
			ЗаполнитьРеквизиты_ВводОстатковТоварыПереданныеНаКомиссию(СтруктураОбъекта, ОбъектДанных, jsonText );			
			
		КонецЕсли;
	//конец - Елисеев :: 19.07.2024

	
	//------------------------------------------------------ ФИНАЛ


	//ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;//иначе документ не видно в журнале ввода остатков.
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	
	
	ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовНоменклатуры( мНеНайденнаяНоменклатураМассив );	
	//ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовКонтрагентов( мНеНайденныеКонтрагентыМассив );	
	
	
	Возврат ОбъектДанных.Ссылка;
	
КонецФункции

Функция ЗаполнитьРеквизиты_ВводОстатковТоварыСобственные(СтруктураОбъекта, ОбъектДанных, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;

	
	
	
	//------------------------------------- Заполнение реквизитов
	
	ОбъектДанных.Дата = ТекущаяДатаСеанса();
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Комментарий = деф.ДатаОстатков;	
	ОбъектДанных.Валюта = ксп_ИмпортСлужебный.НайтиВалюту("RUB");
	ОбъектДанных.ВидДеятельностиНДС = перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
    ОбъектДанных.ОтражатьВОперативномУчете = Истина;
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковСобственныхТоваров;
	ОбъектДанных.ЦенаВключаетНДС = Истина;
	
	
	ОбъектДанных.Склад = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("СкладДляВводаОстатковТоваровПереданныхУПП", мВнешняяСистема);
	
	
	

	//------------------------------------------------------     ТЧ Товары
 	ЗаполнитьТовары(ОбъектДанных, деф);

 	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ЗаполнитьТовары(ОбъектДанных, деф)
	

	ОбъектДанных.Товары.Очистить();

    НомерОШибкиНДс = 1;
	
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		
		
		Если стрк.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();

		СтрокаТЧ.ВидЗапасов = ксп_ИмпортСлужебный.НайтиВидЗапасовСобственныйТовар(ОбъектДанных.Организация);
		СтрокаТЧ.ИдентификаторСтроки = строка(Новый УникальныйИдентификатор);
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		
		Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И 
			НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) 
			И стрк.Номенклатура.Свойство("Ref") Тогда
			
			
			мЛоггер.инфо("НЕ найдена номенклатура : %1", стрк.Номенклатура.Ref);
			
			Если мНеНайденнаяНоменклатураМассив.Найти(стрк.Номенклатура.Ref) = Неопределено Тогда
				мНеНайденнаяНоменклатураМассив.Добавить(стрк.Номенклатура.Ref);
			КонецЕсли;
			
			
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = _Номенклатура;
		
		_Характеристика  = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);

		Если ТипЗнч(_Характеристика ) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") И 
			НЕ ЗначениеЗаполнено(_Характеристика.ВерсияДанных) 
			И стрк.Номенклатура.Свойство("Ref") Тогда      // здесь нужна именно номенклатура, т.к. она выгружается из УПП вместе с характеристикой
			
			
			мЛоггер.инфо("НЕ найдена характеристика в номенклатуре : %1", СтрокаТЧ.Номенклатура);
			
			Если мНеНайденнаяНоменклатураМассив.Найти(стрк.Номенклатура.Ref) = Неопределено Тогда
				мНеНайденнаяНоменклатураМассив.Добавить(стрк.Номенклатура.Ref);
			КонецЕсли;
			
			
		КонецЕсли;
		
		СтрокаТЧ.Характеристика = _Характеристика ;
		
		Если не ЗначениеЗаполнено(СтрокаТЧ.Характеристика) Тогда
			
			Если НЕ стрк.ХарактеристикаНоменклатуры.Свойство("Ref") Тогда
				мЛоггер.инфо("НЕ удалось заполнить колонку Характеристика по номенклатуре : %1. Характеристики нет в УПП!", 
					СтрокаТЧ.Номенклатура);
			Иначе
				мЛоггер.инфо("НЕ удалось заполнить колонку Характеристика по номенклатуре : %1. Характеристика найдена: <%2>", 
					СтрокаТЧ.Номенклатура, _Характеристика);
			КонецЕсли;
			
		КонецЕсли;
				
		СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
		Если не ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
			
			мЛоггер.инфо("НЕ заполнена ставка НДС в номенклатуре : %1", СтрокаТЧ.Номенклатура);
			
			СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("ПеречислениеСтавкаНДС", Перечисления.СтавкиНДС.НДС20);
		КонецЕсли;
		
		СуммаВключаетНДС = ОбъектДанных.ЦенаВключаетНДС;

		Если НЕ ЗначениеЗаполнено(стрк.СуммаВзаиморасчетов) Тогда
			_СуммаВзаиморасчетов = 0;             
		Иначе 
			_СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов; 
		КонецЕсли;

		
		Попытка
			_СтавкаНДС = УчетНДСПереопределяемый.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС.ПеречислениеСтавкаНДС);
			СтрокаТЧ.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(_СуммаВзаиморасчетов, СуммаВключаетНДС, _СтавкаНДС);
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		    млоггер.ерр("Номер ошибки НДС %3. Ошибка расчета суммы НДС по ноенклатуре %1. Подробности: %2", СтрокаТЧ.Номенклатура, т, НомерОШибкиНДС);
			мЛоггер.ерр("Ставка НДС = %1", _СтавкаНДС);
			НомерОШибкиНДС = НомерОШибкиНДС + 1;
		КонецПопытки;
		
		
		СтрокаТЧ.СуммаСНДС = _СуммаВзаиморасчетов;
		
		СтрокаТЧ.Сумма = СтрокаТЧ.СуммаСНДС - СтрокаТЧ.СуммаНДС;
		Если СтрокаТЧ.Количество = 0 Тогда
			СтрокаТЧ.Цена = 0;
		Иначе
			СтрокаТЧ.Цена = СтрокаТЧ.СуммаСНДС / СтрокаТЧ.Количество;
		КонецЕсли;
		//СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.СоздатьКлючАналитикиНом(
		//	СтрокаТЧ.Номенклатура, ОбъектДанных.Склад, СтрокаТЧ.Характеристика);
			
	КонецЦикла;
	
		
КонецПроцедуры


Функция ЗаполнитьРеквизиты_ВводОстатковТоварыПереданныеНаКомиссию(СтруктураОбъекта, ОбъектДанных, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;

	// этот массив нужен в процессе разработки - для поиска номенклатуры, которой еще нет в ЕРП
	
	
	//------------------------------------- Заполнение реквизитов
	
	ОбъектДанных.Дата = ТекущаяДатаСеанса();
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Комментарий = деф.ДатаОстатков;	
	ОбъектДанных.Валюта = ксп_ИмпортСлужебный.НайтиВалюту("RUB");
	ОбъектДанных.ВидДеятельностиНДС = перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
    ОбъектДанных.ОтражатьВОперативномУчете = Истина;
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПереданныхНаКомиссию;
	ОбъектДанных.ЦенаВключаетНДС = Истина;
	
	//ОбъектДанных.Склад = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
	//	.Настройка("СкладДляВводаОстатковТоваровПереданныхУПП", мВнешняяСистема);


	//------------------------------------------------------     ТЧ Товары
 	ЗаполнитьТовары(ОбъектДанных, деф);
            		
КонецФункции



#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	
	Документ_ = ЗагрузитьОбъект(СтруктураОбъекта);
	
	
	Возврат Новый Структура("Документ_, НеНайденнаяНоменклатураМассив",
		Документ_, мНеНайденнаяНоменклатураМассив);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции   


 Функция СхемаКонвертации(КонтрагентСсылка, ДатаДок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КСП_КомиссионерыДляРеализацийУПП.ДатаНачала КАК ДатаНачала,
	|	КСП_КомиссионерыДляРеализацийУПП.ДатаОкончания КАК ДатаОкончания,
	|	КСП_КомиссионерыДляРеализацийУПП.Схема КАК Схема
	|ИЗ
	|	РегистрСведений.КСП_КомиссионерыДляРеализацийУПП КАК КСП_КомиссионерыДляРеализацийУПП
	|ГДЕ
	|	КСП_КомиссионерыДляРеализацийУПП.ВнешняяСистема = &ВнешняяСистема
	|	И КСП_КомиссионерыДляРеализацийУПП.Контрагент = &Контрагент";
	
	
	Запрос.УстановитьПараметр("ВнешняяСистема", мВнешняяСистема);
	Запрос.УстановитьПараметр("Контрагент", КонтрагентСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Рез = Неопределено;
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Рез;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ДатаНачала) Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
				Рез = Выборка.Схема;
			Иначе 
				Если ( ДатаДок >= Выборка.ДатаНачала И ДатаДок <= Выборка.ДатаОкончания ) Тогда
					Рез = Выборка.Схема;
				КонецЕсли;
			КонецЕсли; 
			Прервать;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.ДатаОкончания) Тогда
				Если ДатаДок <= Выборка.ДатаОкончания Тогда
					Рез = Выборка.Схема;
				КонецЕсли;
			КонецЕсли;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

 Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции


 мВнешняяСистема = "upp";
 
 мИмяСобытия = "ИмпортИзРэббит_ТоварыПереданные";
 
 
 