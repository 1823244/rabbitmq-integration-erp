
Перем мЛоггер;
Перем мИдВызова;
Перем мОбновлять;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.7.Асинх.Поток");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Справочник_СотрудникиОрганизаций");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Справочник_СотрудникиОрганизаций");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Справочник_СотрудникиОрганизаций",
		"Форма_Плагин_RabbitMQ_импорт_из_УПП_Справочник_СотрудникиОрганизаций",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	

// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, ВидНоменклатуры = Неопределено) Экспорт 
	
	мЛоггер = Вычислить("мис_ЛоггерСервер.getLogger(мИдВызова, ""Импорт из УПП: Справочник.Сотрудники"")");
     
	НачатьТранзакцию();
		
    Попытка
         
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			ОтменитьТранзакцию();
			млоггер.варн("Пропущено! Нет свойства type в сообщении");
			
			Возврат Неопределено;
		КонецЕсли;

		Если НЕ НРег(СтруктураОбъекта.type) = НРег("справочник.СотрудникиОрганизаций") Тогда  
			ОтменитьТранзакцию();
			млоггер.варн("Пропущено! В type не Справочник.СотрудникиОрганизаций");
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		def = СтруктураОбъекта.definition; 
		
		
		СуществующийОбъект = Справочники.Сотрудники.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			
		Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
			Если def.isFolder = true Тогда
				ОбъектДанных = Справочники.Сотрудники.СоздатьГруппу();
			Иначе	
				ОбъектДанных = Справочники.Сотрудники.СоздатьЭлемент();
			КонецЕсли; 
			ОбъектДанных.УстановитьНовыйКод();
			СсылкаНового = Справочники.Сотрудники.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		Иначе
			
			Если НЕ мОбновлять = Истина Тогда  
				млоггер.варн("Пропущено! Флаг Обновлять не включен! "+строка(СуществующийОбъект));
				Возврат СуществующийОбъект;
			КонецЕсли;
			
			ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
			СсылкаНового = СуществующийОбъект;
		КонецЕсли;   
		
		
		// физ лицо
		
		
		Физлицо = "";
		ФизлицоСсылка=Неопределено;
		Если def.Физлицо.Свойство("Ref", Физлицо) Тогда
			уид = Новый УникальныйИдентификатор(ФизЛицо);
			ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(уид);
			Если ТипЗнч(ФизическоеЛицо) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.ВерсияДанных) Тогда
					ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
					СсылкаНовогоФЛ = Справочники.ФизическиеЛица.ПолучитьСсылку(уид);
					ФизЛицо.УстановитьСсылкуНового(СсылкаНовогоФЛ);
					ФизЛицо.Наименование = сокрлп(def.description);
					ФизЛицо.ФИО = сокрлп(def.description);
					ФизЛицо.Записать();
					ФизлицоСсылка=ФизЛицо.Ссылка;
				Иначе 
					Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.ФИО) Тогда
						ФизЛицо = ФизическоеЛицо.ПолучитьОбъект();
						ФизЛицо.Наименование = сокрлп(def.description);
						ФизЛицо.ФИО = сокрлп(def.description);
						ФизЛицо.Записать();
						ФизлицоСсылка=ФизЛицо.Ссылка;
					Иначе 
						ФизлицоСсылка = ФизическоеЛицо;
					КонецЕсли;
				КонецЕсли;
			Иначе 
				ВызватьИсключение "Тип объекта ФизическоеЛицо отличается от Справочник.ФизическиеЛица!";
			КонецЕсли;
		КонецЕсли;
		
		
		// сотрудник
		
		
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, СсылкаНового, ФизлицоСсылка);
			
		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		
		ОбъектДанных.Записать(); 
		
		//--------------------------
		ОтключитьБизнесЛогику = Ложь;
		РегистрыСведений.ДанныеДляПодбораСотрудников.ДобавитьДанныеНовогоСотрудника(ОбъектДанных, ОтключитьБизнесЛогику);
		
		//--------------------------
		ОбъектыМетаданных = Неопределено; 
		ЭлементДляОбновленияКлюча = ОбъектДанных.ФизическоеЛицо;
		Справочники.КлючиРеестраДокументов.СоздатьОбновитьКлючиРеестра(ОбъектыМетаданных , ЭлементДляОбновленияКлюча );
		
		//--------------------------
		//--------------------------
		//--------------------------
		//--------------------------
		//--------------------------
		
		
		ЗафиксироватьТранзакцию();
		

		млоггер.варн("Записан объект: "+строка(ОбъектДанных)+", ЭтоГруппа = "+Строка(ОбъектДанных.ЭтоГруппа));
		
		Возврат ОбъектДанных.Ссылка;
		
	Исключение 
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
          т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
          мЛоггер.ерр("Плагин импорта физ. лиц УПП. Подробности: " + т);
           
          //    ОБЯЗАТЕЛЬНО!!! Потому что в оркестраторе вызов плагина в попытке. и если была ошибка, надо сделать BasicReject()
          ВызватьИсключение т;
 
    КонецПопытки;
	
	
КонецФункции

Функция ЗаполнитьРеквизиты(объектДанных, СтруктураОбъекта, СсылкаНового, ФизлицоСсылка) Экспорт 
		
	id = СтруктураОбъекта.identification;
	def = СтруктураОбъекта.definition; 	
		
	ОбъектДанных.Код = def.code;
	ОбъектДанных.Наименование = сокрлп(def.description);
	ОбъектДанных.ПометкаУдаления = def.DeletionMark; 	
	
	Если def.isFolder = true Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизлицоСсылка) Тогда
		ОбъектДанных.ФизическоеЛицо = ФизлицоСсылка;
	Иначе 
		Физлицо = "";
		Если def.Физлицо.Свойство("Ref", Физлицо) Тогда
			уид = Новый УникальныйИдентификатор(ФизЛицо);
			ОбъектДанных.ФизическоеЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(уид);
		КонецЕсли;
	КонецЕсли;
	
	ОбъектДанных.ГоловнаяОрганизация = ксп_ИмпортСлужебный.НайтиОрганизацию(def.Организация, "upp");
	//ОбъектДанных.ТекущийПроцентСевернойНадбавки = Неопределено;
	//ОбъектДанных.ВАрхиве = Неопределено;
	//ОбъектДанных.УточнениеНаименования = Неопределено;
	ОбъектДанных.ГоловнойСотрудник = СсылкаНового;
	//ОбъектДанных.СтудентРаботающийВСтудотряде = Неопределено;
	
КонецФункции





// ТОЧКА ВХОДА для ИНТЕРАКТИВНОГО ИМПОРТА
Функция ЗагрузитьИзJsonНаСервере(Json, ВидНоменклатуры = Неопределено) export
	
	Если не ЗначениеЗаполнено(json) Тогда
		ВызватьИсключение "Пустой json";
	КонецЕсли;

	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
		Для Каждого эл из СтруктураОбъекта Цикл
			ЗагрузитьОбъект(эл, ВидНоменклатуры);
		КонецЦикла;
	Иначе
	    Возврат ЗагрузитьОбъект(СтруктураОбъекта, ВидНоменклатуры);
	КонецЕсли;
	
КонецФункции


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Попытка
			Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		Исключение
		    Возврат '00010101';
		КонецПопытки;
		
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции




// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервереИзФайла(Адрес, ВидНоменклатуры, Обновлять = Истина) ЭКспорт
	
	мОбновлять = Обновлять;
	
	ДвоичныеДанные  = ПолучитьИзВременногоХранилища(Адрес);
	Если 1=0 Тогда
		ДвоичныеДанные = новый ДвоичныеДанные("");
	КонецЕсли;                                
	
	ИмяФайла = ПолучитьИмяВременногоФайла("json");
	ДвоичныеДанные.Записать(ИмяФайла);
	
	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.ОткрытьФайл(ИмяФайла);
	
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
		Для Каждого эл из СтруктураОбъекта Цикл
			ЗагрузитьОбъект(эл, ВидНоменклатуры);
		КонецЦикла;
	Иначе
	    Возврат ЗагрузитьОбъект(СтруктураОбъекта, ВидНоменклатуры);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции   

// ТОЧКА ВХОДА для ИНТЕРАКТИВНОГО ИМПОРТА - по массиву файлов
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервереИзМассиваАдресов(МассивАдресов, ВидНоменклатуры, Обновлять = Истина) Экспорт
	
	Возврат ЗагрузитьИзJsonНаСервереИзМассиваАдресовЧерезПоток(МассивАдресов, ВидНоменклатуры, Обновлять);
КонецФункции


Функция ЗагрузитьИзJsonНаСервереИзМассиваАдресовЧерезПоток(МассивАдресов, ВидНоменклатуры, Обновлять = Истина) Экспорт
	
	мОбновлять = Обновлять;
	млоггер = мис_логгерСервер.getLogger(мИдВызова);
	
	млоггер.инфо("НАЧАЛИ пакет из "+строка(МассивАдресов.Количество())+" файлов");

	сч_обработано = 0;       
	сч_ошибок = 0;
	
	мЧтениеJSON = Новый ЧтениеJSON;
	
	Для каждого Адрес Из МассивАдресов Цикл

		
		ДвоичныеДанные  = ПолучитьИзВременногоХранилища(Адрес);
		Если 1=0 Тогда
			ДвоичныеДанные = новый ДвоичныеДанные("");
		КонецЕсли;                                
		
		
		// было так:
		//ИмяФайла = ПолучитьИмяВременногоФайла("json");
		//ДвоичныеДанные.Записать(ИмяФайла);
		//мЧтениеJSON.ОткрытьФайл(ИмяФайла);
		// стало так:
		мЧтениеJSON.ОткрытьПоток(ДвоичныеДанные.ОткрытьПотокДляЧтения());		
		
		СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
		
		Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
			Для Каждого эл из СтруктураОбъекта Цикл
				
				Попытка
					ЗагрузитьОбъект(эл, ВидНоменклатуры);
					сч_обработано = сч_обработано +1;
				Исключение
				    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
					сч_ошибок = сч_ошибок + 1;
				КонецПопытки;
				
			КонецЦикла;
		Иначе 
			// один элемент (а не массив)
			Попытка
				ЗагрузитьОбъект(СтруктураОбъекта, ВидНоменклатуры);
				сч_обработано = сч_обработано +1;
			Исключение
			    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
				сч_ошибок = сч_ошибок + 1;
			КонецПопытки;
		    			
		КонецЕсли;

	КонецЦикла;
	
	млоггер.инфо("ЗАВЕРШИЛИ пакет из "+строка(МассивАдресов.Количество())+" файлов. УСпешно обработано = "+строка(сч_обработано)
	+", ошибок = "+Строка(сч_ошибок));
	
	Возврат Неопределено;
	
КонецФункции


	

Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
    Возврат ЭтотОбъект;
     
КонецФункции


мОбновлять = ИСтина;

	
	