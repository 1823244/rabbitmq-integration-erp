Перем ДатаРедакции Экспорт;
Перем Версия Экспорт;
Перем РелизКонф Экспорт;
Перем РелизПлафт Экспорт;


//начало - Елисеев :: 26.11.2023 КЭШИ

Перем мЗапросСостоянияЗаказов;
Перем мЗапросПоискаЗаказов;   
Перем мЗапросПоискаРеализаций1;

Перем мСвойствоЗаказов_ИД; // доп сведение

Перем мСвойствоЗаказовМагазин;

//конец - Елисеев :: 26.11.2023


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.7");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Обмен с RetailCRM");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Обмен с RetailCRM");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.7.306"); // ОБЯЗАТЕЛЬНО!!! //(https://forum.infostart.ru/forum9/topic179193/)
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, "Открыть форму : Обмен с RetailCRM","ОбменRetailCRMИнтерактивно",ТипКоманды, Ложь) ;
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, "Выполнить импорт заказов из RetailCRM","ЗагрузитьЗаказыИзRetailCRM",ТипКоманды, Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "ЗагрузитьЗаказыИзRetailCRM" Тогда
		Мод_ЗагрузитьЗаказы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 	

//начало - Елисеев :: 26.11.2023

#Область КОНСТРУКТОР

	
// Пока не используется. Должен вызываться из всех точек входа
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция Конструктор() Экспорт
	
	Возврат ЭтотОбъект;
	
КонецФункции     


//ЕНС
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьЗапросСостоянияЗаказов() Экспорт
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияЗаказовКлиентов.Состояние КАК Состояние
			|ИЗ
			|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
			|ГДЕ
			|	СостоянияЗаказовКлиентов.Заказ = &Заказ";
	
	Возврат Запрос;
	
КонецФункции

//ЕНС
Функция СоздатьЗапросПоискаЗаказов() Экспорт
	
	Запрос = Новый Запрос;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ДополнительныеСведения.Объект КАК Объект
	//|ИЗ
	//|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	//|ГДЕ
	//|	ДополнительныеСведения.Значение = &Значение
	//|	И ДополнительныеСведения.Свойство = &Свойство";

	//Запрос.УстановитьПараметр("Свойство", мСвойствоЗаказов_ИД);	

	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	Док.Ссылка КАК Объект
	//|ИЗ
	//|	Документ.ЗаказКлиента КАК Док
	//|ГДЕ
	//|	Док.НомерПоДаннымКлиента = &Значение";

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РС.ЗаказКлиента КАК Объект
	|ИЗ
	|	РегистрСведений.ксп_ИсходныеДанныеЗаказов КАК РС
	|ГДЕ
	|	РС.id = &id
	|	и РС.site = &site";
	
	
	Возврат Запрос;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьЗапросПоискаРеализаций1() Экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Проведен КАК Проведен
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента
		|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления";
	Возврат Запрос;
	
КонецФункции
	
#КонецОбласти

//конец - Елисеев :: 26.11.2023

#Область РаботаСКонстантами

Процедура Мод_СохранитьКонстанты() Экспорт
	
	кнст = Новый ТаблицаЗначений();
	кнст.Колонки.Добавить("Название");
	кнст.Колонки.Добавить("Значение");
	кнст.Колонки.Добавить("Тип");
	
	Для каждого стр из ТабКонстанты Цикл
		НовСтр = кнст.Добавить();
		НовСтр.Название = стр.Название; 
		НовСтр.Тип		= стр.Тип; 
		НовСтр.Значение = стр.Значение;
	КонецЦикла;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ВыгружатьЗаказы"; 
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ВыгружатьЗаказы;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ВыгружатьОстатки"; 
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ВыгружатьОстатки;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ЗагружатьЗаказы"; 
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ЗагружатьЗаказы;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ВыгружатьТипыЦен";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ВыгружатьТипыЦен;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "НесколькоОрганизаций";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = НесколькоОрганизаций;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ИспользованиеТиповЦен";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ИспользованиеТиповЦен;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "СозданиеОплат";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = СозданиеОплат;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ВыгрузкаОплатВCRM";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ВыгрузкаОплатВCRM;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ВыгрузкаВозвратовОплатыВCRM";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ВыгрузкаВозвратовОплатыВCRM;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "СозданиеРеализаций";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = СозданиеРеализаций;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ВыгрузкаРеализаций";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ВыгрузкаРеализаций;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ВыгрузкаВозвратов";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ВыгрузкаВозвратов;

	НовСтр = кнст.Добавить();
	НовСтр.Название = "ИдентификаторТовара";
	НовСтр.Тип 		= "Строка"; 
	Если ИдентификаторТовара = "" Тогда 
		ИдентификаторТовара = "Код";
	КонецЕсли;
	НовСтр.Значение = ИдентификаторТовара;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "offers_id";
	НовСтр.Тип 		= "Строка"; 
	Если offers_id = "" Тогда
		offers_id = "xmlId";
	КонецЕсли; 
    НовСтр.Значение = offers_id;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ИерархияНоменклатуры";
	НовСтр.Тип 		= "Строка"; 
	Если ИерархияНоменклатуры = "" Тогда 
		ИерархияНоменклатуры = "Группы номенклатуры";
	КонецЕсли;
	НовСтр.Значение = ИерархияНоменклатуры;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "КорпоративныеКлиенты";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = КорпоративныеКлиенты;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ПутьКФайлу";
	НовСтр.Тип 		= "Строка"; 
	НовСтр.Значение = ПутьКФайлу;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ПутьКНастройкам";
	НовСтр.Тип 		= "Строка"; 
	НовСтр.Значение = ПутьКНастройкам;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ИспользованиеЗаказов";
	НовСтр.Тип 		= "Строка"; 
	Если ИспользованиеЗаказов = "" Тогда 
		ИспользованиеЗаказов = "ЗаказСоСкладаИПодЗаказ";
	КонецЕсли;
	НовСтр.Значение = ИспользованиеЗаказов;
	
	//++ Работа с характеристиками
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ИспользованиеХарактеристик";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ИспользованиеХарактеристик; 
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "GUIDОрганизации";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = GUIDОрганизации;
	//-- Работа с характеристиками

	//Эталонка 
	НовСтр = кнст.Добавить();
	НовСтр.Название = "Эталонная";
	НовСтр.Тип 		= "Булево";
	НовСтр.Значение = Эталонная;
	//Эталонка

	НовСтр = кнст.Добавить();
	НовСтр.Название = "СозданиеВозвратов";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = СозданиеВозвратов;   
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ЗагрузкаБроней";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ЗагрузкаБроней; 
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "packs_sinceId"; 
	НовСтр.Тип 		= "Число"; 
	НовСтр.Значение = packs_sinceId;
	
	//Программа лояльности
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ИспользованиеПЛ";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ИспользованиеПЛ;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "НазваниеПЛ";
	НовСтр.Тип 		= "Строка"; 
	НовСтр.Значение = НазваниеПЛ;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "idПЛ";
	НовСтр.Тип 		= "Строка"; 
	НовСтр.Значение = idПЛ; 
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ПЛАктивна";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ПЛАктивна;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ПЛЗаблокирована";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ПЛЗаблокирована;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ПодтверждатьСМС";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ПодтверждатьСМС;
	//Программа лояльности
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "СкладскаяСистема";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = СкладскаяСистема;

	//Розница
	НовСтр = кнст.Добавить();
	НовСтр.Название = "РаботаСРозницей";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = РаботаСРозницей;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ВыгружатьЧек";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ВыгружатьЧек;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ВыгружатьЧекРП";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ВыгружатьЧекРП;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "ВыгружатьЧекВозврат";
	НовСтр.Тип 		= "Булево"; 
	НовСтр.Значение = ВыгружатьЧекВозврат;
	
	НовСтр = кнст.Добавить();
	НовСтр.Название = "СвязьМагазина";
	НовСтр.Тип 		= "Строка"; 
	НовСтр.Значение = СвязьМагазина;
	//Розница
	
	Если ТабСтатусы.Количество() Тогда
		списокСтатусов = Новый ТаблицаЗначений;
		списокСтатусов.Колонки.Добавить("Название");
		списокСтатусов.Колонки.Добавить("КодCRM");
		списокСтатусов.Колонки.Добавить("Статус1С");
		списокСтатусов.Колонки.Добавить("ВариантОбеспечения");
		списокСтатусов.Колонки.Добавить("СостояниеЗаказа");
	    списокСтатусов.Колонки.Добавить("Реализация");
	    списокСтатусов.Колонки.Добавить("Отмена");
		списокСтатусов.Колонки.Добавить("Возврат");
		списокСтатусов.Колонки.Добавить("Примечание");
		Для Каждого Статус из ТабСтатусы Цикл
			НовСтр = списокСтатусов.Добавить();
			НовСтр.Название 	= Статус.Название;
			НовСтр.КодCRM 		= Статус.КодCRM;
			НовСтр.Статус1С 	= Статус.Статус1С;
			НовСтр.ВариантОбеспечения = Статус.ВариантОбеспечения;
			НовСтр.СостояниеЗаказа = Статус.СостояниеЗаказа;
			НовСтр.Реализация	= Статус.Реализация;
			НовСтр.Отмена			= Статус.Отмена;
			НовСтр.Возврат = Статус.Возврат;
			НовСтр.Примечание = Статус.Примечание;
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "ТабСтатусов"; 
		НовСтр.Тип 		= "ТаблицаЗначений"; 
		НовСтр.Значение = списокСтатусов;
	КонецЕсли; 
	
	Если СтатусыСостояния.Количество() Тогда
		списокСт = Новый ТаблицаЗначений;
		списокСт.Колонки.Добавить("Название");
		списокСт.Колонки.Добавить("Состояние");
		списокСт.Колонки.Добавить("СтатусCRM");
		Для Каждого Стат из СтатусыСостояния Цикл
			НовСтр = списокСт.Добавить();
			НовСтр.Название = Стат.Название; 
			НовСтр.Состояние= Стат.Состояние;
			НовСтр.СтатусCRM	= Стат.СтатусCRM;
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "ТабСостояний"; 
		НовСтр.Тип 		= "ТаблицаЗначений"; 
		НовСтр.Значение = списокСт;
	КонецЕсли;
	
	Если ТипыЦенДляОбмена.Количество() Тогда
		СписокЦен = Новый ТаблицаЗначений;
		СписокЦен.Колонки.Добавить("ТипЦены");
		СписокЦен.Колонки.Добавить("КодCRM");
		СписокЦен.Колонки.Добавить("ТипЦеныCRM");
		Для Каждого Цена из ТипыЦенДляОбмена Цикл
			НовСтр = СписокЦен.Добавить();
			НовСтр.ТипЦены  = Цена.ТипЦены; 
			НовСтр.КодCRM 	= Цена.КодCRM;
			НовСтр.ТипЦеныCRM  = Цена.ТипЦеныCRM;
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "ТипыЦенCRM"; 
		НовСтр.Тип 		= "ТаблицаЗначений"; 
		НовСтр.Значение = СписокЦен;
	КонецЕсли;
	
	Если СкладыДляОбмена.Количество() Тогда
		СписокСкладов = Новый ТаблицаЗначений;
		СписокСкладов.Колонки.Добавить("Склад");
		СписокСкладов.Колонки.Добавить("КодCRM");
		СписокСкладов.Колонки.Добавить("СкладCRM");
		Для Каждого Склад из СкладыДляОбмена Цикл
			НовСтр = СписокСкладов.Добавить();
			НовСтр.Склад  = Склад.Склад; 
			НовСтр.КодCRM = Склад.КодCRM;
			НовСтр.СкладCRM = Склад.СкладCRM;
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "Склады"; 
		НовСтр.Тип 		= "ТаблицаЗначений"; 
		НовСтр.Значение = СписокСкладов;
	КонецЕсли;
	
	Если ТабКаталог.Количество() Тогда
		СписокНоменклатуры = Новый СписокЗначений;
		Для Каждого Номенклатура из ТабКаталог Цикл
			СписокНоменклатуры.Добавить(Номенклатура.Номенклатура);
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "Каталог"; 
		НовСтр.Тип 		= "СписокЗначений"; 
		НовСтр.Значение = СписокНоменклатуры;
	КонецЕсли;
	
	Если ТабКаталогПоВидам.Количество() Тогда
		СписокНоменклатуры = Новый СписокЗначений;
		Для Каждого Номенклатура из ТабКаталогПоВидам Цикл
			СписокНоменклатуры.Добавить(Номенклатура.Номенклатура);
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "КаталогПоВидам"; 
		НовСтр.Тип 		= "СписокЗначений"; 
		НовСтр.Значение = СписокНоменклатуры;
	КонецЕсли;
	
	Если СоответствиеМенеджеров.Количество() Тогда
		СписокМенеджеров = Новый ТаблицаЗначений;
		СписокМенеджеров.Колонки.Добавить("Менеджер");
		СписокМенеджеров.Колонки.Добавить("ИД");
		СписокМенеджеров.Колонки.Добавить("МенеджерCRM");
		Для Каждого Менеджер из СоответствиеМенеджеров Цикл
			НовСтр = СписокМенеджеров.Добавить();
			НовСтр.Менеджер = Менеджер.Менеджер; 
			НовСтр.ИД 		= Менеджер.ИД;
			НовСтр.МенеджерCRM = Менеджер.МенеджерCRM;
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "СоответствиеМенеджеров"; 
		НовСтр.Тип 		= "ТаблицаЗначений"; 
		НовСтр.Значение = СписокМенеджеров;
	КонецЕсли;
	
	Если МагазинОрганизация.Количество() Тогда
		СписокОрганизаций = Новый ТаблицаЗначений;
		СписокОрганизаций.Колонки.Добавить("Организация");
		СписокОрганизаций.Колонки.Добавить("КодМагазина");
		СписокОрганизаций.Колонки.Добавить("МагазинCRM");
		Для Каждого Организация из МагазинОрганизация Цикл
			НовСтр = СписокОрганизаций.Добавить();
			НовСтр.Организация 	= Организация.Организация; 
			НовСтр.КодМагазина	= Организация.КодМагазина;
			НовСтр.МагазинCRM	= Организация.МагазинCRM;
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "МагазинОрганизация"; 
		НовСтр.Тип 		= "ТаблицаЗначений"; 
		НовСтр.Значение = СписокОрганизаций;
	КонецЕсли;

	Если МагазинСклад.Количество() Тогда
		СписокМагазинов = Новый ТаблицаЗначений;
		СписокМагазинов.Колонки.Добавить("Склад");
		СписокМагазинов.Колонки.Добавить("КодМагазина");
		СписокМагазинов.Колонки.Добавить("МагазинCRM");
		Для Каждого Магаз из МагазинСклад Цикл
			НовСтр = СписокМагазинов.Добавить();
			НовСтр.Склад 		= Магаз.Склад; 
			НовСтр.КодМагазина	= Магаз.КодМагазина;
			НовСтр.МагазинCRM	= Магаз.МагазинCRM;
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "МагазинСклад"; 
		НовСтр.Тип 		= "ТаблицаЗначений"; 
		НовСтр.Значение = СписокМагазинов;
	КонецЕсли;
	
	Если СоответствиеТиповОплат.Количество() Тогда
		СписокОплат = Новый ТаблицаЗначений;
		СписокОплат.Колонки.Добавить("КодCRM");
		СписокОплат.Колонки.Добавить("Документ");
		СписокОплат.Колонки.Добавить("Терминал");
		СписокОплат.Колонки.Добавить("ТипОплатыCRM");
		Для Каждого Оплата из СоответствиеТиповОплат Цикл
			НовСтр 			= СписокОплат.Добавить();
			НовСтр.КодCRM 	= Оплата.КодCRM; 
			НовСтр.Документ = Оплата.Документ;
			НовСтр.Терминал = Оплата.Терминал;
			НовСтр.ТипОплатыCRM = Оплата.ТипОплатыCRM;
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "СоответствиеТиповОплат"; 
		НовСтр.Тип 		= "ТаблицаЗначений"; 
		НовСтр.Значение = СписокОплат;
	КонецЕсли; 
	
	Если СоответствиеТиповОплатИз1С.Количество() Тогда
		СписокОплат = Новый ТаблицаЗначений;
		СписокОплат.Колонки.Добавить("КодCRM");
		СписокОплат.Колонки.Добавить("Документ");
		СписокОплат.Колонки.Добавить("Терминал");
		СписокОплат.Колонки.Добавить("ТипОплатыCRM");
		Для Каждого ОплатаИз1С из СоответствиеТиповОплатИз1С Цикл
			НовСтр 			= СписокОплат.Добавить();
			НовСтр.КодCRM 	= ОплатаИз1С.КодCRM; 
			НовСтр.Документ = ОплатаИз1С.Документ;
			НовСтр.Терминал = ОплатаИз1С.Терминал;
			НовСтр.ТипОплатыCRM = ОплатаИз1С.ТипОплатыCRM;
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "СоответствиеТиповОплатИз1С"; 
		НовСтр.Тип 		= "ТаблицаЗначений"; 
		НовСтр.Значение = СписокОплат;
	КонецЕсли;

	Если СоответствиеФормОплаты.Количество() Тогда
		СписокФормОплат = Новый ТаблицаЗначений;
		СписокФормОплат.Колонки.Добавить("КодCRM");
		СписокФормОплат.Колонки.Добавить("ФормаОплаты");
		СписокФормОплат.Колонки.Добавить("ТипОплатыCRM");
		Для Каждого ОплатаФорма из СоответствиеФормОплаты Цикл
			НовСтр 			= СписокФормОплат.Добавить();
			НовСтр.КодCRM 	= ОплатаФорма.КодCRM; 
			НовСтр.ФормаОплаты = ОплатаФорма.ФормаОплаты;
			НовСтр.ТипОплатыCRM = ОплатаФорма.ТипОплатыCRM;
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "СоответствиеФормОплаты"; 
		НовСтр.Тип 		= "ТаблицаЗначений"; 
		НовСтр.Значение = СписокФормОплат;
	КонецЕсли;
	
	Если СоответствиеДоставок.Количество() Тогда
		СписокДоставок = Новый ТаблицаЗначений;
		СписокДоставок.Колонки.Добавить("КодCRM");
		СписокДоставок.Колонки.Добавить("СпособДоставки");
		СписокДоставок.Колонки.Добавить("Перевозчик");
		СписокДоставок.Колонки.Добавить("ТипДоставкиCRM");
		Для Каждого ТипДоставки из СоответствиеДоставок Цикл
			НовСтр 			= СписокДоставок.Добавить();
			НовСтр.КодCRM 	= ТипДоставки.КодCRM; 
			НовСтр.СпособДоставки = ТипДоставки.СпособДоставки;
			НовСтр.Перевозчик = ТипДоставки.Перевозчик;
			НовСтр.ТипДоставкиCRM = ТипДоставки.ТипДоставкиCRM;
		КонецЦикла;
		НовСтр = кнст.Добавить();
		НовСтр.Название = "СоответствиеДоставок"; 
		НовСтр.Тип 		= "ТаблицаЗначений"; 
		НовСтр.Значение = СписокДоставок;
	КонецЕсли;

	НовСтр = кнст.Добавить();
	НовСтр.Название = "since_Id"; 
	НовСтр.Тип 		= "Число"; 
	НовСтр.Значение = ИДПоследнихИзменений;
	
	crm_RetailCRMОбщий.УстановитьКонстанты(кнст);
	Мод_ОбновитьСписокКонстант(ЭтотОбъект);
	
КонецПроцедуры

Процедура Мод_ОбновитьСписокКонстант(Объект) Экспорт
	
	кнст = crm_RetailCRMОбщий.ПолучитьКонстанты();	
	
	Объект.табКонстанты.Очистить();
	
	Если ТипЗнч(кнст) = Тип("Структура") Тогда
		
		ТаблицаКонстант = кнст.Константы;
		
		Для каждого стр из ТаблицаКонстант Цикл
			Попытка
				Если стр.Название = "Статусы" Тогда 
					Объект.табСтатусы.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 = Объект.табСтатусы.Добавить();
						новСтр2.Название = стр2.Значение+"";
					КонецЦикла;
					Продолжить;
					
				ИначеЕсли стр.Название = "ТабСтатусов" Тогда 
					
					Объект.табСтатусы.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 			= Объект.табСтатусы.Добавить();
						новСтр2.Название 	= стр2.Название;
						новСтр2.КодCRM 		= стр2.КодCRM;
						новСтр2.Статус1С 	= стр2.Статус1С;
						новСтр2.ВариантОбеспечения = стр2.ВариантОбеспечения;
						новСтр2.СостояниеЗаказа = стр2.СостояниеЗаказа;
						новСтр2.Реализация 	= стр2.Реализация;
						новСтр2.Отмена 		= стр2.Отмена;
						новСтр2.Возврат 	= стр2.Возврат;
						новСтр2.Примечание 	= стр2.Примечание;
					КонецЦикла;
					
				ИначеЕсли стр.Название = "ТабСостояний" Тогда 
					
					Объект.СтатусыСостояния.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 		= Объект.СтатусыСостояния.Добавить();
						новСтр2.Название = стр2.Название;
						новСтр2.Состояние = стр2.Состояние;
						//начало - Елисеев :: 20.11.2023
						Если стр.Значение.колонки.найти("СтатусCRM")<> Неопределено Тогда
							новСтр2.СтатусCRM = стр2.СтатусCRM;
						КонецЕсли;
						//конец - Елисеев :: 20.11.2023	
						
					КонецЦикла;
						
				ИначеЕсли стр.Название = "ТипыЦенCRM" Тогда 
					
					Объект.ТипыЦенДляОбмена.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 		= Объект.ТипыЦенДляОбмена.Добавить();
						новСтр2.ТипЦены 	= стр2.ТипЦены;
						новСтр2.КодCRM 		= стр2.КодCRM;
						новСтр2.ТипЦеныCRM 	= стр2.ТипЦеныCRM;
					КонецЦикла;
					
				ИначеЕсли стр.Название = "СоответствиеМенеджеров" Тогда 
					
					Объект.СоответствиеМенеджеров.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 		= Объект.СоответствиеМенеджеров.Добавить();
						новСтр2.Менеджер 	= стр2.Менеджер;
						новСтр2.ИД 			= стр2.ИД;
						новСтр2.МенеджерCRM	= стр2.МенеджерCRM;
					КонецЦикла;
					
				ИначеЕсли стр.Название = "Склады" Тогда 
					
					Объект.СкладыДляОбмена.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 		= Объект.СкладыДляОбмена.Добавить();
						новСтр2.Склад 	= стр2.Склад;
						новСтр2.КодCRM 	= стр2.КодCRM;
						новСтр2.СкладCRM = стр2.СкладCRM;
					КонецЦикла;
					
				ИначеЕсли стр.Название = "МагазинОрганизация" Тогда 
					
					Объект.МагазинОрганизация.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 				= Объект.МагазинОрганизация.Добавить();
						новСтр2.Организация 	= стр2.Организация;
						новСтр2.КодМагазина 	= стр2.КодМагазина;
						новСтр2.МагазинCRM 		= стр2.МагазинCRM;
					КонецЦикла;
					
				ИначеЕсли стр.Название = "МагазинСклад" Тогда 
					
					Объект.МагазинСклад.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 				= Объект.МагазинСклад.Добавить();
						новСтр2.Склад 			= стр2.Склад;
						новСтр2.КодМагазина 	= стр2.КодМагазина;
						новСтр2.МагазинCRM 		= стр2.МагазинCRM;
					КонецЦикла;
					
				ИначеЕсли стр.Название = "СоответствиеТиповОплат" Тогда 
					
					Объект.СоответствиеТиповОплат.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 			= Объект.СоответствиеТиповОплат.Добавить();
						новСтр2.КодCRM 		= стр2.КодCRM;
						новСтр2.Документ 	= стр2.Документ;
						новСтр2.Терминал	= стр2.Терминал;
						новСтр2.ТипОплатыCRM = стр2.ТипОплатыCRM;
					КонецЦикла;
					
				ИначеЕсли стр.Название = "СоответствиеТиповОплатИз1С" Тогда 
					
					Объект.СоответствиеТиповОплатИз1С.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 			= Объект.СоответствиеТиповОплатИз1С.Добавить();
						новСтр2.КодCRM 		= стр2.КодCRM;
						новСтр2.Документ 	= стр2.Документ;
						новСтр2.Терминал	= стр2.Терминал;
						новСтр2.ТипОплатыCRM 		= стр2.ТипОплатыCRM;
					КонецЦикла;
					
				ИначеЕсли стр.Название = "СоответствиеФормОплаты" Тогда 
					
					Объект.СоответствиеФормОплаты.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 			= Объект.СоответствиеФормОплаты.Добавить();
						новСтр2.КодCRM 		= стр2.КодCRM;
						новСтр2.ФормаОплаты	= стр2.ФормаОплаты;
						новСтр2.ТипОплатыCRM 		= стр2.ТипОплатыCRM
					КонецЦикла;
					
				ИначеЕсли стр.Название = "СоответствиеДоставок" Тогда 
					
					Объект.СоответствиеДоставок.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 			= Объект.СоответствиеДоставок.Добавить();
						новСтр2.КодCRM 		= стр2.КодCRM;
						новСтр2.СпособДоставки 	= стр2.СпособДоставки;
						новСтр2.Перевозчик	= стр2.Перевозчик; 
						//начало - Елисеев :: 20.11.2023
						Если стр.Значение.колонки.найти("ТипДоставкиCRM")<> Неопределено Тогда
							новСтр2.ТипДоставкиCRM	= стр2.ТипДоставкиCRM;
						КонецЕсли;
						
						//конец - Елисеев :: 20.11.2023
						
					КонецЦикла;
					
				ИначеЕсли стр.Название = "Каталог" Тогда 
					
					Объект.ТабКаталог.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 				= Объект.ТабКаталог.Добавить();
						новСтр2.Номенклатура 	= стр2.Значение;
					КонецЦикла; 
					
				ИначеЕсли стр.Название = "КаталогПоВидам" Тогда 
					
					Объект.ТабКаталогПоВидам.Очистить();
					Для каждого стр2 из стр.Значение Цикл
						новСтр2 				= Объект.ТабКаталогПоВидам.Добавить();
						новСтр2.Номенклатура 	= стр2.Значение;
					КонецЦикла;
					
				ИначеЕсли стр.Название = "ВыгружатьЗаказы" Тогда 
					
					Объект.ВыгружатьЗаказы = стр.Значение;
					
				ИначеЕсли стр.Название = "since_Id" Тогда 
					
					Объект.ИДПоследнихИзменений = стр.Значение;	
					
				ИначеЕсли стр.Название = "ВыгружатьОстатки" Тогда 
					
					Объект.ВыгружатьОстатки = стр.Значение;
					
				ИначеЕсли стр.Название = "ЗагружатьЗаказы" Тогда 
					
					Объект.ЗагружатьЗаказы = стр.Значение;
					
				ИначеЕсли стр.Название = "ВыгружатьТипыЦен" Тогда 
					
					Объект.ВыгружатьТипыЦен = стр.Значение;	
					
				ИначеЕсли стр.Название = "НесколькоОрганизаций" Тогда 
					
					Объект.НесколькоОрганизаций = стр.Значение;	
					
				ИначеЕсли стр.Название = "ИспользованиеТиповЦен" Тогда 
					
					Объект.ИспользованиеТиповЦен = стр.Значение;	
					
				ИначеЕсли стр.Название = "СозданиеОплат" Тогда 
					
					Объект.СозданиеОплат = стр.Значение;
					
				ИначеЕсли стр.Название = "ВыгрузкаОплатВCRM" Тогда 
					
					Объект.ВыгрузкаОплатВCRM = стр.Значение;
					
				ИначеЕсли стр.Название = "ВыгрузкаВозвратовОплатыВCRM" Тогда 
					
					Объект.ВыгрузкаВозвратовОплатыВCRM = стр.Значение;
					
				ИначеЕсли стр.Название = "СозданиеРеализаций" Тогда 
					
					Объект.СозданиеРеализаций = стр.Значение;
					
				ИначеЕсли стр.Название = "ВыгрузкаРеализаций" Тогда 
					
					Объект.ВыгрузкаРеализаций = стр.Значение;
					
				ИначеЕсли стр.Название = "ИдентификаторТовара" Тогда 
					
					Объект.ИдентификаторТовара = стр.Значение;
					
				ИначеЕсли стр.Название = "ИерархияНоменклатуры" Тогда 
					
					Объект.ИерархияНоменклатуры = стр.Значение;
					
				ИначеЕсли стр.Название = "offers_id" Тогда 
				
					Объект.offers_id = стр.Значение;
					
				ИначеЕсли стр.Название = "КорпоративныеКлиенты" Тогда 
					
					Объект.КорпоративныеКлиенты = стр.Значение;
					
				ИначеЕсли стр.Название = "ЗаказКакСчет" Тогда 
					
					Объект.ЗаказКакСчет = стр.Значение;
					
				ИначеЕсли стр.Название = "ПутьКФайлу" Тогда 
					
					Объект.ПутьКФайлу = стр.Значение;
					
				ИначеЕсли стр.Название = "ПутьКНастройкам" Тогда 
					
					Объект.ПутьКНастройкам = стр.Значение;
					
				ИначеЕсли стр.Название = "ИспользованиеЗаказов" Тогда 
					
					Объект.ИспользованиеЗаказов = стр.Значение;
					
					//++ Работа с характеристиками
				ИначеЕсли стр.Название = "ИспользованиеХарактеристик" Тогда 
					
					Объект.ИспользованиеХарактеристик = стр.Значение;
					
				ИначеЕсли стр.Название = "GUIDОрганизации" Тогда 
					
					Объект.GUIDОрганизации = стр.Значение;	
					//-- Работа с характеристиками
					
				ИначеЕсли стр.Название = "Эталонная" Тогда 
					
					Объект.Эталонная = стр.Значение;	
					
				ИначеЕсли стр.Название = "СозданиеВозвратов" Тогда 
					
					Объект.СозданиеВозвратов = стр.Значение;
					
				ИначеЕсли стр.Название = "ВыгрузкаВозвратов" Тогда 
					
					Объект.ВыгрузкаВозвратов = стр.Значение;
					
				ИначеЕсли стр.Название = "ЗагрузкаБроней" Тогда 
					
					Объект.ЗагрузкаБроней = стр.Значение;
					
				ИначеЕсли стр.Название = "packs_sinceId" Тогда 
					
					Объект.packs_sinceId = стр.Значение;
					
				ИначеЕсли стр.Название = "ИспользованиеПЛ" Тогда 
					
					Объект.ИспользованиеПЛ = стр.Значение;
					
				ИначеЕсли стр.Название = "НазваниеПЛ" Тогда 
					
					Объект.НазваниеПЛ = стр.Значение;
					
                ИначеЕсли стр.Название = "idПЛ" Тогда 
					
					Объект.idПЛ = стр.Значение;
					
				ИначеЕсли стр.Название = "ПЛАктивна" Тогда 
					
					Объект.ПЛАктивна = стр.Значение; 
					
 				ИначеЕсли стр.Название = "ПЛЗаблокирована" Тогда       
					
					Объект.ПЛЗаблокирована = стр.Значение;
					
				ИначеЕсли стр.Название = "ПодтверждатьСМС" Тогда       
					
					Объект.ПодтверждатьСМС = стр.Значение; 
					
				ИначеЕсли стр.Название = "СкладскаяСистема" Тогда       
					
					Объект.СкладскаяСистема = стр.Значение;
					
				ИначеЕсли стр.Название = "РаботаСРозницей" Тогда       
					
					Объект.РаботаСРозницей = стр.Значение;
					
				ИначеЕсли стр.Название = "ВыгружатьЧек" Тогда       
					
					Объект.ВыгружатьЧек = стр.Значение;

				ИначеЕсли стр.Название = "ВыгружатьЧекРП" Тогда       
					
					Объект.ВыгружатьЧекРП = стр.Значение;

				ИначеЕсли стр.Название = "ВыгружатьЧекВозврат" Тогда       
					
					Объект.ВыгружатьЧекВозврат = стр.Значение;
					
				ИначеЕсли стр.Название = "СвязьМагазина" Тогда       
					
					Объект.СвязьМагазина = стр.Значение;
					
				Иначе 
										
					НовСтр 			= Объект.табКонстанты.Добавить(); 
					Попытка
						ОписаниеТипа 	= Новый ОписаниеТипов(стр.Тип); 
						НовСтр.Значение = ОписаниеТипа.ПривестиЗначение(); 
						Если ЗначениеЗаполнено(стр.Значение) Тогда
							НовСтр.Значение = ОписаниеТипа.ПривестиЗначение(стр.Значение); //ЕНС. ДОбавил  ПривестиЗначение()
						КонецЕсли;
					Исключение
						Если ЗначениеЗаполнено(стр.Значение) Тогда
							НовСтр.Тип	= ТипЗнч(Стр.Значение);
						Иначе
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = "Не определен тип значения константы " + Стр.Название;
							Сообщение.Сообщить(); 
						КонецЕсли;	
					КонецПопытки;	
						
					НовСтр.Название = стр.Название;
					новСтр.Тип = стр.Тип;
					
				КонецЕсли;
				
			Исключение
				Сообщить(ОписаниеОшибки());	
			КонецПопытки;
		КонецЦикла;
		
	Иначе 
		СоздатьКонстанты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКонстанты() Экспорт
	
	кнст = Новый ТаблицаЗначений();
	кнст.Колонки.Добавить("Название");
	кнст.Колонки.Добавить("Значение");
	кнст.Колонки.Добавить("Тип");
	
	// ОБЩИЕ КОНСТАНТЫ +++	
	стр = кнст.Добавить();стр.Название = "ИмяСервера"; 				стр.Тип = "Строка"; 							стр.Значение = "";
	стр = кнст.Добавить();стр.Название = "КлючCRM";					стр.Тип = "Строка"; 							стр.Значение = "";
	стр = кнст.Добавить();стр.Название = "КодМагазина"; 			стр.Тип = "Строка"; 							стр.Значение = "";
	
	новТаб = Новый ТаблицаЗначений;
	ТабСостояний = Новый ТаблицаЗначений;
	ЗаполнитьСоответствиеСтатусов(новТаб, ТабСостояний);
	
	стр = кнст.Добавить();стр.Название = "ТабСтатусов"; 			стр.Тип = "ТаблицаЗначений"; 					стр.Значение = новТаб;
	стр = кнст.Добавить();стр.Название = "ТабСостояний"; 			стр.Тип = "ТаблицаЗначений"; 					стр.Значение = ТабСостояний;
	стр = кнст.Добавить();стр.Название = "Склад"; 					стр.Тип = "СправочникСсылка.Склады"; 			стр.Значение = "";
	стр = кнст.Добавить();стр.Название = "Доставка"; 				стр.Тип = "СправочникСсылка.Номенклатура"; 		стр.Значение = "";
	стр = кнст.Добавить();стр.Название = "ЗакупочнаяЦена"; 			стр.Тип = "СправочникСсылка.ВидыЦен"; 			стр.Значение = "";
	стр = кнст.Добавить();стр.Название = "ЦенаПродажи"; 			стр.Тип = "СправочникСсылка.ВидыЦен"; 			стр.Значение = "";
	стр = кнст.Добавить();стр.Название = "Организация";				стр.Тип = "СправочникСсылка.Организации";		стр.Значение = "";
	стр = кнст.Добавить();стр.Название = "БанковскийСчет";			стр.Тип = "СправочникСсылка.БанковскиеСчетаОрганизаций";	стр.Значение = "";
	стр = кнст.Добавить();стр.Название = "ОсновнаяКасса";			стр.Тип = "СправочникСсылка.Кассы";				стр.Значение = "";
	стр = кнст.Добавить();стр.Название = "Валюта";					стр.Тип = "СправочникСсылка.Валюты";			стр.Значение = "";		
	стр = кнст.Добавить();стр.Название = "Налогообложение";			стр.Тип = "ПеречислениеСсылка.ТипыНалогообложенияНДС";стр.Значение = "";
	стр = кнст.Добавить();стр.Название = "ЦенаВключаетНДС";			стр.Тип = "Булево";								стр.Значение = Ложь;
	стр = кнст.Добавить();стр.Название = "Приоритет"; 				стр.Тип = "СправочникСсылка.Приоритеты"; 			стр.Значение = "";	
	стр = кнст.Добавить();стр.Название = "ТиповоеСоглашение"; 		стр.Тип = "СправочникСсылка.СоглашенияСКлиентами"; 	стр.Значение = "";	
	стр = кнст.Добавить();стр.Название = "ИдентификаторТовара"; 	стр.Тип = "Строка"; 								стр.Значение = "Код";		
	стр = кнст.Добавить();стр.Название = "ГруппаДоступаПартнеров";	стр.Тип = "СправочникСсылка.ГруппыДоступаПартнеров"; стр.Значение = "";
	стр = кнст.Добавить();стр.Название = "ОтсрочкаДней";			стр.Тип = "Число"; 									стр.Значение = 5;
	
	//ЕНС. Обобщенный покупатель
	стр = кнст.Добавить();стр.Название = "РозничныйПокупатель";		стр.Тип = "СправочникСсылка.Контрагенты";		стр.Значение = Неопределено;
	
	// ОБЩИЕ КОНСТАНТЫ (сервисные) +++	
	стр = кнст.Добавить();
	стр.Название = "since_Id"; 
	стр.Тип = "Число"; 
	стр.Значение = "";   // id последних изменений
	// ОБЩИЕ КОНСТАНТЫ (сервисные) ---	
	
	crm_RetailCRMОбщий.УстановитьКонстанты(кнст);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеСтатусов(новТаб, ТабСостояний)
	
    новТаб.Колонки.Добавить("Название");
	новТаб.Колонки.Добавить("КодCRM");
	новТаб.Колонки.Добавить("Статус1С");
	новТаб.Колонки.Добавить("ВариантОбеспечения");
	новТаб.Колонки.Добавить("СостояниеЗаказа");
    новТаб.Колонки.Добавить("Реализация");
    новТаб.Колонки.Добавить("Отмена");
	новТаб.Колонки.Добавить("Возврат");
	новТаб.Колонки.Добавить("Примечание");
	
	// ГРУППА НОВЫЙ
	СтрТаб = новТаб.Добавить();
    СтрТаб.Название 			= "Новый"; 
	СтрТаб.КодCRM 				= "new";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяСогласование;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Ложь;
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Заказ не создает записи в регистрах, используется для регистрации неподтвержденного/несогласованного желания клиента.
						|В статусе На согласовании можно зарезервировать товар на складе, т.е. указать действие для строк Резервировать на складе, либо Отгрузить.
						|При этом фактически отгрузить товар можно будет только после перевода документа в статус К выполнению";
	
	// ГРУППА СОГЛАСОВАНИЕ
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Наличие подтверждено";
    СтрТаб.КодCRM 				= "availability-confirmed";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.СоСклада;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Ложь;
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Предоплата получена, заказ ждет выставления действия Отгрузить/Отгрузить обособленно во всех строках";
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Предложить замену";
    СтрТаб.КодCRM 				= "offer-analog";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Ложь;
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Доступно управлять отгрузкой, а также резервировать товар по каждой позиции в документе.
						|Заказы принимаются не только на товар, имеющийся в наличии, но и на товар, требующий обеспечения.";
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Готов ждать";
    СтрТаб.КодCRM 				= "ready-to-wait";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.КОбеспечению;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Ложь;
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Предоплата получена, заказ ждет выставления действия Отгрузить/Отгрузить обособленно во всех строках";
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Согласовано с клиентом";
    СтрТаб.КодCRM 				= "client-confirmed";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.СоСклада;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Ложь;
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Предоплата получена, заказ ждет выставления действия Отгрузить/Отгрузить обособленно во всех строках.";
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Предоплата поступила";
    СтрТаб.КодCRM 				= "prepayed";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.СоСклада;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Ложь;
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Предоплата получена, заказ ждет выставления действия Отгрузить/Отгрузить обособленно во всех строках.";
	
	// ГРУППА КОМПЛЕКТАЦИЯ 
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Передано в комплектацию";
    СтрТаб.КодCRM 				= "send-to-assembling";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Ложь;
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Означает, что получена предоплата и во  всех  строках  установлено  действие 
					|Отгрузить или Отгрузить обособленно, но складские ордера или реализации оформлены не на весь заказанный товар. По отчетам товар уже отгружается, 
					|но реализации еще нет";

	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Комплектуется";
    СтрТаб.КодCRM 				= "assembling";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Ложь;
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Означает, что получена предоплата и во  всех  строках  установлено  действие 
					|Отгрузить или Отгрузить обособленно, но складские ордера или реализации оформлены не на весь заказанный товар. По отчетам товар уже отгружается, 
					|но реализации еще нет";

   	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Укомплектован";
    СтрТаб.КодCRM 				= "assembling-complete";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию;
    СтрТаб.Реализация 			= Истина;
    СтрТаб.Отмена 				= Ложь;
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Если оплаты по заказу еще нет, то состояние заказа ""Ожидается оплата"". Заказы, по которым на все позиции, указанные в заказе, оформлены документы Реализация товаров и услуг и/или Акт выполненных работ.";

	// ГРУППА ВЫПОЛНЕН
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Выполнен";
    СтрТаб.КодCRM 				= "complete";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.Закрыт;
    СтрТаб.Реализация 			= Истина;
    СтрТаб.Отмена 				= Ложь;
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Исполнены все обязательства по заказу – как по отгрузке, так и по оплате";
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Выполнен частично";
    СтрТаб.КодCRM 				= "partially-completed";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.Закрыт;
    СтрТаб.Реализация 			= Истина;
    СтрТаб.Отмена 				= Ложь;
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Исполнены все обязательства по заказу – как по отгрузке, так и по оплате";
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Частичный возврат";
    СтрТаб.КодCRM 				= "partially-returned";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.Закрыт;
    СтрТаб.Реализация 			= Истина;
    СтрТаб.Отмена 				= Ложь; 
	СтрТаб.Возврат 				= Истина;
	СтрТаб.Примечание 			= "Исполнены все обязательства по заказу – как по отгрузке, так и по оплате. На часть товара создан документ возврата.";
	
	// ГРУППА ОТМЕНЕН
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Недозвон";
    СтрТаб.КодCRM 				= "no-call";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.Закрыт;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Истина; 
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Заказ закрыт с отменой строк. Резервы сняты, товар возвращен на склад";
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Нет в наличии";
    СтрТаб.КодCRM 				= "no-product";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.Закрыт;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Истина; 
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Заказ закрыт с отменой строк. Резервы сняты, товар возвращен на склад";
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Купил в другом месте";
    СтрТаб.КодCRM 				= "already-buyed";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.Закрыт;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Истина; 
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Заказ закрыт с отменой строк. Резервы сняты, товар возвращен на склад";
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Не устроила доставка";
    СтрТаб.КодCRM 				= "delyvery-did-not-suit";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.Закрыт;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Истина; 
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Заказ закрыт с отменой строк. Резервы сняты, товар возвращен на склад";
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Не устроила цена";
    СтрТаб.КодCRM 				= "prices-did-not-suit";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.Закрыт;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Истина; 
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Заказ закрыт с отменой строк. Резервы сняты, товар возвращен на склад";
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Отменен";
    СтрТаб.КодCRM 				= "cancel-other";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.Закрыт;
    СтрТаб.Реализация 			= Ложь;
    СтрТаб.Отмена 				= Истина; 
	СтрТаб.Возврат 				= Ложь;
	СтрТаб.Примечание 			= "Заказ закрыт с отменой строк. Резервы сняты, товар возвращен на склад"; 
	
	СтрТаб = новТаб.Добавить();
	СтрТаб.Название 			= "Возврат";
    СтрТаб.КодCRM 				= "return";
	СтрТаб.Статус1С 			= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	СтрТаб.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
	СтрТаб.СостояниеЗаказа 		= Перечисления.СостоянияЗаказовКлиентов.Закрыт;
    СтрТаб.Реализация 			= Истина;
    СтрТаб.Отмена 				= Ложь; 
	СтрТаб.Возврат 				= Истина;
	СтрТаб.Примечание 			= "Заказ закрыт. На основании реализаци создан документ возврата, весь товар возвращен на склад";
	
    ТабСостояний.Колонки.Добавить("Название");
    ТабСостояний.Колонки.Добавить("Состояние");
	ТабСостояний.Колонки.Добавить("СтатусCRM");

	ТабС = ТабСостояний.Добавить();
    ТабС.Название = "new"; // Новый заказ
    ТабС.Состояние = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяСогласование; 
	ТабС.СтатусCRM = "Новый";
	 
	ТабС = ТабСостояний.Добавить();
    ТабС.Название = "client-confirmed"; // согласован
    ТабС.Состояние = Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению; 
	
	ТабС = ТабСостояний.Добавить();
    ТабС.Название = "client-confirmed"; // согласован
    ТабС.Состояние = Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке;
	
	ТабС = ТабСостояний.Добавить();
    ТабС.Название = "send-to-assembling"; // Передано в комплектацию
    ТабС.Состояние = Перечисления.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки; 
	
	ТабС = ТабСостояний.Добавить();
    ТабС.Название = "assembling-complete"; // укомплектован
    ТабС.Состояние = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки;
	
	ТабС = ТабСостояний.Добавить();
    ТабС.Название = "send-to-delivery"; // передано в доставку
    ТабС.Состояние = Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию;
	
	ТабС = ТабСостояний.Добавить();
    ТабС.Название = "complete"; // Закрыт
    ТабС.Состояние = Перечисления.СостоянияЗаказовКлиентов.Закрыт;

КонецПроцедуры

Процедура УстановитьЗначениеКонстанты(имяКонстанты,ЗначениеКонстанты) Экспорт
	
	таб = ПолучитьКонстанты()["константы"];
	искСтр = таб.Найти(имяКонстанты,"Название");
	
	Если искСтр <> Неопределено Тогда
		искСтр.Значение = ЗначениеКонстанты;
		Если имяКонстанты = "last_date_changes" или имяКонстанты = "since_Id" или имяКонстанты = "packs_sinceId" Тогда 
			crm_RetailCRMОбщий.УстановитьКонстанты(таб);
		Иначе 
			Мод_СохранитьКонстанты();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКонстанты() Экспорт
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("retailCRM_константы", "КонстантыОбмена");
	
	Если Не Настройки = Неопределено И ТипЗнч(Настройки) = Тип("Структура") Тогда
	Иначе
		Сообщить("Настройки RetailCRM восстановить не удалось");
	КонецЕсли;
	
	Возврат  Настройки;
	
КонецФункции

#КонецОбласти



// Точка входа - создание заказов
// Параметры
// 	НастройкиПодключенияКСП - ПВХ КСП_НастройкиRetailCRM - группа
&НаСервере
Процедура Мод_ЗагрузитьЗаказы(ИспДатыАктуальности = Неопределено, 
	ДатаИзменений = Неопределено, 
	Знач ИДИзменений = Неопределено,
	НастройкиПодключенияКСП = Неопределено) Экспорт

	Обк = Обработки.КСП_RetailCRM_РаботаСЗаказами.Создать();
	
	
	Если Не ЗначениеЗаполнено(НастройкиПодключенияКСП) Тогда
		НастройкиПодключенияКСП = Неопределено;
	КонецЕсли;	                                     
	
	Обк.Мод_ЗагрузитьЗаказы(ИспДатыАктуальности , 
							ДатаИзменений , 
							ИДИзменений,
							НастройкиПодключенияКСП); 
	
		
КонецПроцедуры

&НаСервере
Процедура Мод_ЗагрузитьЗаказПоИД(ИДЗаказа) Экспорт
	
	
	МассивИД = Новый Массив;
	МассивИД.Добавить(Формат(ИДЗаказа, "ЧГ=0"));
	Ответ = Мод_ПолучитьЗаказПоИД(Формат(ИДЗаказа, "ЧГ=0"));
	
	//
	ТЗБрони = Новый ТаблицаЗначений;
 
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗагрузкаБроней") Тогда
		Мод_ЗагрузитьБрониПоЗаказу(Формат(ИДЗаказа, "ЧГ=0"), ТЗБрони);	
	КонецЕсли;
	// 

	Мод_СозданиеЗаказов(ответ, ТЗБрони);
	
КонецПроцедуры





&НаСервере
Функция СопоставитьСтатус(Статус,НаборСтатусов)	

	НайдСтрока = НаборСтатусов.Найти(Статус, "КодCRM"); 
	Если НайдСтрока = Неопределено Тогда
		возврат Ложь;
	Иначе
		возврат Истина;		
	КонецЕсли;

КонецФункции


// Возвращает соответствие, потому что невозможно прочитать json в структуру -
// там есть свойства, имена которых состоят только из цифр, например в тэге 
// "payments"
&НаСервере
Функция ЗапросCRM(АдресСкрипта, ИмяСервера)
	
	Если ИмяСервера = Неопределено Тогда 
		ВызватьИсключение "ЗапросCRM() :: Не указано имя сервера!";
	КонецЕсли;
		
	Сообщить("Запрос к RetailCRM ... Запрос: "+Строка(АдресСкрипта));	
	
	Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);		
	
	ОтветРезультат = crm_RetailCRMОбщий.UnJSONТест(Ответ);
	Возврат ОтветРезультат;
	
КонецФункции

//ЕНС.реф
&НаСервере
Функция ПолучитьИсториюИзменений(Фильтр="", ИспДатыАктуальности = Ложь) 
	
	ИмяСервера = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	Если Фильтр <> "" Тогда 
		Если ИспДатыАктуальности = Истина Тогда 
			АдресСкрипта = "/api/v5/orders/history?filter[startDate]="+ crm_RetailCRMОбщий.ДатаВремяДляCRM(Фильтр) +"&apiKey=" + КлючCRM;
		Иначе 
			АдресСкрипта = "/api/v5/orders/history?filter[sinceId]="+ Формат(Фильтр,"ЧГ=0") +"&apiKey=" + КлючCRM;
		КонецЕсли;
	КонецЕсли;
	
	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
	
	ТЗЗаказы = Новый ТаблицаЗначений;
	ТЗЗаказы.Колонки.Добавить("НомерЗаказа");
	//начало - Елисеев :: 23.11.2023
	ТЗЗаказы.Индексы.Добавить("НомерЗаказа");
	//конец - Елисеев :: 23.11.2023
	
	Для каждого стр из Ответ["history"] Цикл
		ПоследнееИзменение = стр["id"];
		Если стр["source"] = "api" Тогда 
			Если стр["apiKey"] <> Неопределено Тогда 
				Если стр["apiKey"]["current"] = Истина Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрТЗ = ТЗЗаказы.Добавить();
		СтрТЗ.НомерЗаказа = стр["order"]["id"];
		//ПоследнееИзменение = стр["id"]; 
	КонецЦикла;
	
	//постраничая разбивка истории
	//вместо постраничной разбивки теперь используется смещение sinceId
	Если ответ["pagination"] <> Неопределено Тогда
		
		всегоСтраниц = ответ["pagination"]["totalPageCount"];
		Счетчик = 2;
		
		Пока всегоСтраниц > 1 Цикл 
			
			АдресСкрипта = "/api/v5/orders/history?filter[sinceId]="+ Формат(ПоследнееИзменение,"ЧГ=0") +"&apiKey=" + КлючCRM;
			
			процент = Окр(Счетчик * 100 / всегоСтраниц,2);
			Сообщить("Запрос к RetailCRM " + Счетчик + "; " + строка(процент) + "% ...");
			
			ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
			
			Для каждого стр из Ответ["history"] Цикл
				ПоследнееИзменение = стр["id"];
				Если стр["source"] = "api" Тогда 
					Если стр["apiKey"] <> Неопределено Тогда 
						Если стр["apiKey"]["current"] = Истина Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				//начало - Елисеев :: 23.11.2023
				//добавил предварительный поиск
				_ид = стр["order"]["id"];
				Если ТЗЗаказы.Найти(_ид,"НомерЗаказа") = Неопределено Тогда
					СтрТЗ = ТЗЗаказы.Добавить();
					СтрТЗ.НомерЗаказа = _ид;
				КонецЕсли;
				//конец - Елисеев :: 23.11.2023
			КонецЦикла;
			всегоСтраниц = ответ["pagination"]["totalPageCount"];
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЕсли;
	//

	Если ПоследнееИзменение <> Неопределено  Тогда 
		УстановитьЗначениеКонстанты("since_Id", ПоследнееИзменение);
		ЭтотОбъект.ИДПоследнихИзменений = ПоследнееИзменение;
	КонецЕсли;
	
	ТЗЗаказы.Свернуть("НомерЗаказа");
	
	возврат ТЗЗаказы;
	
КонецФункции



//ЕНС. Забрал в КСП
//ЕНС. Вызывается из Мод_ЗагрузитьЗаказы()
&НаСервере
Процедура ЗагрузкаЗаказов(МассивИД, ТЗброни = Неопределено, НастройкиПодключенияКСП = Неопределено)
	
	НастройкиПодключения = crm_RetailCRMОбщий.ПолучитьНастройки(НастройкиПодключенияКСП);
	
	//Загружаем заказы пачками чтобы избавиться от переполнения строки запроса и памяти на сервере на одну операцию
	ИмяСервера  = НастройкиПодключения.ИмяСервера;
	ApiKey 		= НастройкиПодключения.КлючCRM;
	
	КоличествоЗаказов = 0;
	
	МассивИДЗаказов = Новый Массив;
	
	фильтрИд = "";	
	
	Для Инд = 1 по МассивИД.Количество() Цикл
		
		КоличествоЗаказов = КоличествоЗаказов  + 1;
		
		МассивИДЗаказов.Добавить(МассивИД[Инд -1]);
		
		фильтрИд = фильтрИд + "filter[ids][]=" + Формат(МассивИД[Инд -1].НомерЗаказа,"ЧГ=") + "&";
		
		Если  КоличествоЗаказов = 50 тогда 
			
			АдресСкрипта = "/api/v5/orders?" + фильтрИд + "&limit=100&apiKey=" + ApiKey;	  		
			
			Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера); 
			//ЕНС. Это похоже баг вендора - не указана ТЗБрони :)
			Мод_СозданиеЗаказов(Ответ["orders"], , НастройкиПодключенияКСП);
			
			КоличествоЗаказов =0;
			МассивИДЗаказов = Новый Массив; 
			фильтрИд = "";	
			
		КонецЕсли;
		
	КонецЦикла;
	
	// ЕНС. Может так получиться, что выйдем из цикла загрузив все заказы. Поэтому проверим сначала.
	Если НЕ фильтрИд = "" Тогда
		
		АдресСкрипта = "/api/v5/orders?" + фильтрИд + "&limit=100&apiKey=" + ApiKey;
		
		Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера); 
		
		Мод_СозданиеЗаказов(Ответ["orders"], ТЗброни, НастройкиПодключенияКСП);
		
	КонецЕсли;
	
	Сообщить("Загрузка заказов завершена");
	
КонецПроцедуры



// Параметры: МассивИД - массив ИД заказов
// Возвращает массив со структурами заказов
&НаСервере
Функция Мод_ПолучитьЗаказыПоИД(МассивИД) Экспорт
	
	Если МассивИД.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	МассивЗаказов = Новый Массив;
	
	СтрокаИД = "";
	Для Каждого ИД из МассивИД Цикл
		СтрокаИД = СтрокаИД + "filter[ids][]=" + ИД + "&";
	КонецЦикла;
	
	СтрокаИД = ?(Прав(СтрокаИД, 1) = "&", Лев(СтрокаИД, СтрДлина(СтрокаИД) - 1), СтрокаИД);
	
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"); 
	ApiKey 		 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	АдресСкрипта = "/api/v5/orders?" + СтрокаИД  + "&limit=100&apiKey=" + ApiKey;
	
	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
	
	Для Каждого Заказ из Ответ["orders"] Цикл
		МассивЗаказов.Добавить(Заказ);
	КонецЦикла;
	
	всегоСтраниц = ответ["pagination"]["totalPageCount"];
	Для ин = 2 по всегоСтраниц Цикл
		процент = Окр(ин * 100 / всегоСтраниц,2);
		Сообщить("Запрос к retailCRM " + ин + " " + строка(процент) + "% ...");
		
		АдресСкрипта = "/api/v5/orders?page=" + ин + "&" + СтрокаИД  + "&limit=100&apiKey="+ApiKey;
		
		Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
		
		Для Каждого Заказ из Ответ["orders"] Цикл
			МассивЗаказов.Добавить(Заказ);
		КонецЦикла;
		
	КонецЦикла;
	
	возврат МассивЗаказов;
	
КонецФункции

&НаСервере
Процедура Мод_ВыполнитьОбмен() Экспорт
	
	
	ОбменОстатками 		= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгружатьОстатки");
	ЗагружатьЗаказы 	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗагружатьЗаказы");
	ВыгружатьТипыЦен 	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгружатьТипыЦен");
	
	Если ЗагружатьЗаказы <> Неопределено Тогда 
		Если ЗагружатьЗаказы Тогда
			Мод_ЗагрузитьЗаказы();
		КонецЕсли;
	КонецЕсли;
	
	Если ОбменОстатками <> Неопределено Тогда 
		Если ОбменОстатками Тогда
			Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
				Мод_ОстаткиИЦеныВCRMХарактеристики();
			Иначе 
				Мод_ОстаткиИЦеныВCRM();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыгружатьТипыЦен <> Неопределено Тогда 
		Если ВыгружатьТипыЦен Тогда
			Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
				Мод_ВыгрузкаТиповЦенВCRMХарактеристики();
			Иначе 
				Мод_ВыгрузкаТиповЦенВCRM();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФормированиеСтруктурыЗаказа(стр)  
	
	Комментарий = ""; // +++ Ситько 
	
	стрДанных = Новый Структура();
	стрДанных.Вставить("id",				Формат(стр["id"],"ЧГ="));
	ДатаСоздания = стр["createdAt"];
	Если ДатаСоздания <> Неопределено Тогда 
		ДатаСоздания =  ПреобразоватьДатуCRM(ДатаСоздания);
	Иначе
		ДатаСоздания =  '00010101000000';
	КонецЕсли;
	
	стрДанных.Вставить("ДатаСоздания",		ДатаСоздания);			// Дата и время заказа
	стрДанных.Вставить("КодМагазина",		стр["site"]);				
	стрДанных.Вставить("site",				стр["site"]);
	стрДанных.Вставить("КодМенеджера",		стр["managerId"]);
	стрДанных.Вставить("НомерЗаказа",		стр["number"]);
	
	дст = стр["delivery"]["address"];
	АдресДоставки = "";
	ДопИнформация = "";
	Если дст <> Неопределено Тогда // Ситько, комментарий: обсудить, нужно ли в общую систему передавать личные данные покупателей
		АдресДоставки = СокрЛП(Строка(дст["index"])+" "+дст["city"]+" "+дст["metro"]+" "+дст["text"]);
		ДопИнформация = СокрЛП(стр["delivery"]["address"]["notes"]);
	КонецЕсли;
	стрДанных.Вставить("СпособДоставки",	стр["delivery"]["code"]);
	стрДанных.Вставить("ДопИнформацияПоДоставке", ДопИнформация);
	
	ДатаДоставки = стр["delivery"]["date"];
	Если ДатаДоставки <> Неопределено Тогда 
		ДатаДоставки =  ПреобразоватьДатуCRM(ДатаДоставки);
	Иначе
		ДатаДоставки =  '00010101000000';
	КонецЕсли;
	//начало - Елисеев :: 24.11.2023
	Если стр["delivery"]["time"] = Неопределено Тогда
		ТочноеВремя = "00:00:00"; 
		ВремяДоставкиC = ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+ТочноеВремя), Дата(1,1,1));
		ВремяДоставкиПо= ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+ТочноеВремя), Дата(1,1,1));
	Иначе
		Если (стр["delivery"]["time"]["from"] = Неопределено
			ИЛИ стр["delivery"]["time"]["to"] = Неопределено)
			И НЕ стр["delivery"]["time"]["custom"] = Неопределено Тогда
			ТочноеВремя = стр["delivery"]["time"]["custom"]; 
			ВремяДоставкиC = ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+ТочноеВремя), Дата(1,1,1));
			ВремяДоставкиПо= ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+ТочноеВремя), Дата(1,1,1));
		Иначе 
			Если стр["delivery"]["time"]["from"] <> Неопределено Тогда
				ВремяДоставкиC = ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+стр["delivery"]["time"]["from"] + ":00"), Дата(1,1,1));
			КонецЕсли;
			Если стр["delivery"]["time"]["to"] = Неопределено Тогда
				ВремяДоставкиПо= ?(стр["delivery"]["time"]<>Неопределено, ("0001-01-01 "+стр["delivery"]["time"]["to"] + ":00"), Дата(1,1,1));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//конец - Елисеев :: 24.11.2023
	
	ВремяДоставкиC = ПреобразоватьДатуCRM(ВремяДоставкиC);
	ВремяДоставкиПо= ПреобразоватьДатуCRM(ВремяДоставкиПо);
	
	стрДанных.Вставить("ДатаДоставки",		ДатаДоставки);     	
	стрДанных.Вставить("ВремяДоставкиC",	ВремяДоставкиC);
	стрДанных.Вставить("ВремяДоставкиПо",	ВремяДоставкиПо);
	стрДанных.Вставить("АдресДоставки",		АдресДоставки);
	стрДанных.Вставить("СтоимостьДоставки",	стр["delivery"]["cost"]);
	
	ФИО = СокрЛП(Строка(стр["lastName"]) + " " + стр["firstName"] + " " + стр["patronymic"]);
	
	стрДанных.Вставить("ФИО",				ФИО); 
	
	// +++ Ситько 12.03.2024 	
	Если ЗначениеЗаполнено(ФИО) Тогда 
		Комментарий = Комментарий + "Покупатель :" + ФИО;
	КонецЕсли; 
	город = стр["delivery"]["address"]["text"]; // адрес передается строкой - город выделить сложно
	Если ЗначениеЗаполнено(город) Тогда 
		Комментарий = Комментарий + ", " + город;
	КонецЕсли;	
	// --- Ситько
	
	//корпоративные клиенты
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КорпоративныеКлиенты") = Истина Тогда 
		
		ДанныеКорпКлиента = стр["customer"];
		
		СтруктураДанныхКорпКлиента = Новый Структура;
		СтруктураДанныхКорпКлиента.Вставить("Тип", 				ДанныеКорпКлиента["type"]);         
		СтруктураДанныхКорпКлиента.Вставить("ID", 				Формат(ДанныеКорпКлиента["id"],"ЧГ="));
		СтруктураДанныхКорпКлиента.Вставить("НаименованиеКорп", ДанныеКорпКлиента["nickName"]);
		СтруктураДанныхКорпКлиента.Вставить("ОсновнойАдрес", 	ДанныеКорпКлиента["mainAddress"]);
		СтруктураДанныхКорпКлиента.Вставить("КонтактноеЛицо", 	ДанныеКорпКлиента["mainCustomerContact"]);
		СтруктураДанныхКорпКлиента.Вставить("Компания", 		ДанныеКорпКлиента["mainCompany"]);
		
		стрДанных.Вставить("ДанныеКорпКлиента", СтруктураДанныхКорпКлиента);
		
		ДанныеКонтактногоЛица = стр["contact"];
		
		ФИО = СокрЛП(Строка(ДанныеКонтактногоЛица["lastName"]) + " " + ДанныеКонтактногоЛица["firstName"] + " " + ДанныеКонтактногоЛица["patronymic"]);
		
		СтруктураДанныхКонтЛица = Новый Структура;
		СтруктураДанныхКонтЛица.Вставить("Тип", 			ДанныеКонтактногоЛица["type"]);         
		СтруктураДанныхКонтЛица.Вставить("ID", 				Формат(ДанныеКонтактногоЛица["id"],"ЧГ="));
		СтруктураДанныхКонтЛица.Вставить("КонтактноеЛицо", 	ДанныеКонтактногоЛица["isContact"]);
		СтруктураДанныхКонтЛица.Вставить("ФИО", 			ФИО);
		СтруктураДанныхКонтЛица.Вставить("Почта", 			ДанныеКонтактногоЛица["email"]);
		стрДанных.Вставить("ДанныеКонтактногоЛица", 		СтруктураДанныхКонтЛица);
		
		// +++ Ситько 12.03.2024 	 
		Комментарий = Комментарий + "Корпоративный клиент." + ДанныеКорпКлиента["nickName"];
		// --- Ситько

		
		СтруктураДанныхКонтрагента = Новый Структура;
		
		Если стр["company"] <> Неопределено Тогда              //значит компания не заполнена и данные для контрагента нужно взять из данных контактного лица
			//id контрагента в этом случае не прописывать, т.к по факту такой сущности в crm нет
			ДанныеКонтрагента = стр["company"]["contragent"];
			
			Если ДанныеКонтрагента["contragentType"] = "legal-entity" Тогда 
				ТипКонтрагента = "ЮрЛицо";
			ИначеЕсли ДанныеКонтрагента["contragentType"] = "enterpreneur" Тогда 
				ТипКонтрагента = "ИндивидуальныйПредприниматель";
			КонецЕсли;
			
			СтруктураДанныхКонтрагента.Вставить("НазваниеКомпании", 	стр["company"]["name"]);
			СтруктураДанныхКонтрагента.Вставить("ТипКонтрагента", 		ТипКонтрагента);
			СтруктураДанныхКонтрагента.Вставить("ПолноеНаименование", 	ДанныеКонтрагента["legalName"]);
			СтруктураДанныхКонтрагента.Вставить("АдресРегистрации", 	ДанныеКонтрагента["legalAddress"]);
			СтруктураДанныхКонтрагента.Вставить("ID", 					Формат(стр["company"]["id"],"ЧГ="));
			
			БанковскийСчет 	= ""; БИК = ""; КоррСчет = ""; ИНН = ""; КПП = ""; ОКПО = ""; ОГРН = "";
			
			ИНН				= ?(ДанныеКонтрагента["INN"] 			<> Неопределено, 	ДанныеКонтрагента["INN"] , 			"");
			КПП				= ?(ДанныеКонтрагента["KPP"] 			<> Неопределено, 	ДанныеКонтрагента["KPP"] , 			"");
			ОКПО			= ?(ДанныеКонтрагента["OKPO"] 			<> Неопределено, 	ДанныеКонтрагента["OKPO"] , 			"");
			ОГРН			= ?(ДанныеКонтрагента["OGRN"] 			<> Неопределено, 	ДанныеКонтрагента["OGRN"] , 			"");
			БИК				= ?(ДанныеКонтрагента["BIK"] 			<> Неопределено, 	ДанныеКонтрагента["BIK"] , 			"");
			БанковскийСчет 	= ?(ДанныеКонтрагента["bankAccount"] 	<> Неопределено, 	ДанныеКонтрагента["bankAccount"] , 	"");
			КоррСчет		= ?(ДанныеКонтрагента["corrAccount"] 	<> Неопределено, 	ДанныеКонтрагента["corrAccount"] , 	"");
		Иначе 
			
			СтруктураДанныхКонтрагента.Вставить("НазваниеКомпании", 	ФИО);
			СтруктураДанныхКонтрагента.Вставить("ТипКонтрагента", 		"ФизЛицо");
			СтруктураДанныхКонтрагента.Вставить("ПолноеНаименование", 	ФИО);
			СтруктураДанныхКонтрагента.Вставить("АдресРегистрации", 	АдресДоставки);
			СтруктураДанныхКонтрагента.Вставить("ID", 					"");
			
			БанковскийСчет 	= ""; БИК = ""; КоррСчет = ""; ИНН = ""; КПП = ""; ОКПО = ""; ОГРН = "";;
			
		КонецЕсли;
		
		СтруктураДанныхКонтрагента.Вставить("ИНН", 				ИНН);
		СтруктураДанныхКонтрагента.Вставить("КПП", 				КПП);
		СтруктураДанныхКонтрагента.Вставить("ОКПО", 			ОКПО);
		СтруктураДанныхКонтрагента.Вставить("ОГРН", 			ОГРН);
		СтруктураДанныхКонтрагента.Вставить("БИК", 				БИК);
		СтруктураДанныхКонтрагента.Вставить("БанковскийСчет", 	БанковскийСчет);
		СтруктураДанныхКонтрагента.Вставить("КоррСчёт", 		КоррСчет);
		стрДанных.Вставить("ДанныеКонтрагента", СтруктураДанныхКонтрагента);
		
		//корпоративные клиенты
	Иначе	
		
		ДанныеКонтрагента = стр["contragent"];
		СтруктураДанныхКонтрагента = Новый Структура;
		СтруктураДанныхКонтрагента.Вставить("Тип", 		"");
		НаименованиеЮрЛицаКонтрагента = "";
		idКлиента = Формат(стр["customer"]["id"],"ЧГ=");
		
		Если ДанныеКонтрагента <> Неопределено Тогда
			
			НаименованиеЮрЛицаКонтрагента = ДанныеКонтрагента["legalName"];
			
			Если ДанныеКонтрагента["contragentType"] = "individual" Тогда 
				ТипКонтрагента = "ФизЛицо";
			ИначеЕсли ДанныеКонтрагента["contragentType"] = "legal-entity" Тогда 
				ТипКонтрагента = "ЮрЛицо";
			ИначеЕсли ДанныеКонтрагента["contragentType"] = "enterpreneur" Тогда 
				ТипКонтрагента = "ИндивидуальныйПредприниматель";
			КонецЕсли;
			СтруктураДанныхКонтрагента.Вставить("Тип", 		ТипКонтрагента);
			АдресРегистрацииКонтрагента = ДанныеКонтрагента["legalAddress"];
			СтруктураДанныхКонтрагента.Вставить("НаименованиеЮрЛица", 	НаименованиеЮрЛицаКонтрагента);
			СтруктураДанныхКонтрагента.Вставить("АдресРегистрации", 	АдресРегистрацииКонтрагента);
			
			БанковскийСчет 	= ""; БИК = ""; КоррСчет = ""; ИНН = ""; КПП = "";
			
			Если ТипКонтрагента = "ЮрЛицо" или ТипКонтрагента = "ИндивидуальныйПредприниматель" Тогда // Юр. лицо   enterpreneur - ИП
				БанковскийСчет 	= ?(ДанныеКонтрагента["bankAccount"] 	<> Неопределено, 	ДанныеКонтрагента["bankAccount"] , 	"");
				БИК				= ?(ДанныеКонтрагента["BIK"] 			<> Неопределено, 	ДанныеКонтрагента["BIK"] , 			"");
				КоррСчет		= ?(ДанныеКонтрагента["corrAccount"] 	<> Неопределено, 	ДанныеКонтрагента["corrAccount"] , 	"");
				ИНН				= ?(ДанныеКонтрагента["INN"] 			<> Неопределено, 	ДанныеКонтрагента["INN"] , 			"");
				КПП				= ?(ДанныеКонтрагента["KPP"] 			<> Неопределено, 	ДанныеКонтрагента["KPP"] , 			"");
				
				СтруктураДанныхКонтрагента.Вставить("БанковскийСчет", 	БанковскийСчет);
				СтруктураДанныхКонтрагента.Вставить("БИК", 				БИК);
				СтруктураДанныхКонтрагента.Вставить("КоррСчет", 		КоррСчет);
				СтруктураДанныхКонтрагента.Вставить("ИНН", 				ИНН);                         
				СтруктураДанныхКонтрагента.Вставить("КПП", 				КПП);
				СтруктураДанныхКонтрагента.Вставить("ОКПО",				"");
			КонецЕсли;
			
		КонецЕсли;
		
		стрДанных.Вставить("ДанныеКонтрагента", СтруктураДанныхКонтрагента);
		стрДанных.Вставить("idКлиента",			idКлиента);
		
	КонецЕсли;
	
	стрДанных.Вставить("Телефон",			ПриведениеТелНомераСтандарт(стр["phone"]));
	стрДанных.Вставить("Почта",				стр["email"]);
	стрДанных.Вставить("СтоимостьЗаказа",	стр["summ"]);  	
	стрДанных.Вставить("СтоимостьЗаказаСоСкидкамиИДоставкой",	стр["totalSumm"]);	
	ДатаОтгрузкиПлан = стр["shipmentDate"];
	Если ДатаОтгрузкиПлан <> Неопределено Тогда 
		ДатаОтгрузкиПлан =  ПреобразоватьДатуCRM(ДатаОтгрузкиПлан);
	Иначе
		ДатаОтгрузкиПлан =  '00010101000000';
	КонецЕсли;
	стрДанных.Вставить("ДатаОтгрузкиПлан",	ДатаОтгрузкиПлан);
	стрДанных.Вставить("СкладОтгрузки",		стр["shipmentStore"]);
	
	стрДанных.Вставить("СтатусЗаказа",			стр["status"]);
	стрДанных.Вставить("КомментарийКлиента",	СокрЛП(стр["customerComment"]));
	стрДанных.Вставить("КомментарийМенеджера",	СокрЛП(стр["managerComment"]));
	
	ПользовательскиеПоля = Новый Соответствие;
	ПользовательскиеПоляЗаказа = стр["customFields"];
	Если ПользовательскиеПоляЗаказа <> Неопределено Тогда
		Для каждого Поле Из ПользовательскиеПоляЗаказа Цикл
			ПользовательскиеПоля.Вставить(Поле.Ключ, Поле.Значение);
		КонецЦикла; 
	КонецЕсли;
	
	//оплата
	масОплат = Новый Массив();
	Для Каждого стрОпл из стр["payments"] Цикл 
		стрОплата = Новый Соответствие();
		стрОплата.Вставить("ИДОплаты", 		Формат(стрОпл.Значение["id"],"ЧГ=0"));
		стрОплата.Вставить("СтатусОплаты",	стрОпл.Значение["status"]);
		стрОплата.Вставить("ТипОплаты",		стрОпл.Значение["type"]);
		стрОплата.Вставить("СуммаПлатежа",	стрОпл.Значение["amount"]);
		стрОплата.Вставить("ДатаОплаты",	?(стрОпл.Значение["paidAt"] <> Неопределено, ПреобразоватьДатуCRM(стрОпл.Значение["paidAt"]), ""));
		стрОплата.Вставить("Комментарий",	стрОпл.Значение["comment"]);
		масОплат.Добавить(стрОплата);
	КонецЦикла;
	стрДанных.Вставить("Оплаты",			масОплат);
	//
	
	//состав заказа
	масТоваров = Новый Массив();
	ТЗТоваров	= Новый ТаблицаЗначений();
	ТЗТоваров.Колонки.Добавить("Наименование");
    ТЗТоваров.Колонки.Добавить("ИДСтроки");
    ТЗТоваров.Колонки.Добавить("xmlId");
	ТЗТоваров.Колонки.Добавить("externalId");
    ТЗТоваров.Колонки.Добавить("СтатусТовара");
    ТЗТоваров.Колонки.Добавить("СтавкаНДС");
	ТЗТоваров.Колонки.Добавить("ОбщаяСкидка");
    ТЗТоваров.Колонки.Добавить("Количество");
    ТЗТоваров.Колонки.Добавить("Цена");
	ТЗТоваров.Колонки.Добавить("ТипЦены");
    ТЗТоваров.Колонки.Добавить("Удален");
    ТЗТоваров.Колонки.Добавить("Скидки");
	ТЗТоваров.Колонки.Добавить("НачисленоБонусов");
    ТЗТоваров.Колонки.Добавить("ИдентификаторСтроки1С");
	
	Для каждого суб_стр из стр["items"] Цикл
		стрТовар = Новый Соответствие();
		СтрокаТз = ТЗТоваров.Добавить();		
		стрТовар.Вставить("Наименование",	суб_стр["offer"]["name"]);
		стрТовар.Вставить("ИДСтроки",		Формат(суб_стр["id"], "ЧГ=0"));
		стрТовар.Вставить("xmlId",			суб_стр["offer"]["xmlId"]);
		стрТовар.Вставить("externalId",		суб_стр["offer"]["externalId"]);
		стрТовар.Вставить("СтатусТовара",	суб_стр["status"]);
		стрТовар.Вставить("СтавкаНДС", 		суб_стр["vatRate"]);
		стрТовар.Вставить("ОбщаяСкидка",	суб_стр["discountTotal"]);
		стрТовар.Вставить("Количество",		суб_стр["quantity"]);
		стрТовар.Вставить("Цена",			суб_стр["initialPrice"]);
		стрТовар.Вставить("ТипЦены", 		?(суб_стр["priceType"] <> Неопределено, суб_стр["priceType"]["code"], ""));
		стрТовар.Вставить("Удален",			суб_стр["isCanceled"]);
		стрТовар.Вставить("Скидки", 		суб_стр["discounts"]);
		стрТовар.Вставить("НачисленоБонусов", 		суб_стр["bonusesCreditTotal"]);
		
		СвойстваТовара = Новый Соответствие(); 
		Для Каждого КлючИЗначение из суб_стр["properties"] Цикл
			СвойстваТовара.Вставить(СокрЛП(КлючИЗначение.Ключ), КлючИЗначение.Значение["value"]);
		КонецЦикла;
		стрТовар.Вставить("Свойства", 		СвойстваТовара); 
		
		//
		Если суб_стр["externalIds"] <> Неопределено Тогда
			Идентификаторы = Новый Соответствие();
			Для Каждого идентиф из суб_стр["externalIds"] Цикл 
				Если идентиф["code"] = "1C" Тогда 
					Идентификаторы.Вставить("код",	идентиф["code"]);
					Идентификаторы.Вставить("ИдентифСтроки",	идентиф["value"]);
					стрТовар.Вставить("ИдентификаторСтроки1С", 	идентиф["value"]);
					
					СтрокаТз.ИдентификаторСтроки1С 	= идентиф["value"];

				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		стрТовар.Вставить("Идентификаторы", 		Идентификаторы);
		
		
        СтрокаТз.Наименование 	= суб_стр["offer"]["name"];
		СтрокаТз.ИДСтроки 		= Формат(суб_стр["id"], "ЧГ=0");
		СтрокаТз.xmlId 			= суб_стр["offer"]["xmlId"];
		СтрокаТз.externalId 	= суб_стр["offer"]["externalId"];
		СтрокаТз.СтатусТовара 	= суб_стр["status"];
		СтрокаТз.СтавкаНДС 		= суб_стр["vatRate"];
		СтрокаТз.ОбщаяСкидка 	= суб_стр["discountTotal"];
		СтрокаТз.Количество 	= суб_стр["quantity"];
		СтрокаТз.Цена 			= суб_стр["initialPrice"];
		СтрокаТз.ТипЦены 		= ?(суб_стр["priceType"] <> Неопределено, суб_стр["priceType"]["code"], "");
		СтрокаТз.Удален 		= суб_стр["isCanceled"];
		СтрокаТз.Скидки 		= суб_стр["discounts"];
		СтрокаТз.НачисленоБонусов 		= суб_стр["bonusesCreditTotal"];
		//
		масТоваров.Добавить(стрТовар);
	КонецЦикла;
	//
	
	стрДанных.Вставить("Товары", масТоваров);
	стрДанных.Вставить("ТЗТовары", ТЗТоваров);
	
	СтрДанных.Вставить("Комментарий", Комментарий); // Ситько
	
	возврат стрДанных;
	
КонецФункции

// ЕНС. реф
//МасивЗаказов - массив - элементы массива - структуры или соответствия?
//
Процедура Мод_СозданиеЗаказов(МасивЗаказов, ТЗброни = Неопределено, НастройкиПодключенияКСП = Неопределено) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")  = Ложь Или 
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")  = Неопределено Тогда
		Сообщить("В программе отключено использование заказов. " + 
		Символы.ПС +  "Для включение опции перейдите в Администрирование - Настройка НСИ и разделов - Продажи - Оптовые продажи." +		
		Символы.ПС + " Установите галочку Заказы клиентов в одноименном разделе");
		Возврат;
	КонецЕсли;
	
	
	НастройкиПодключения = crm_RetailCRMОбщий.ПолучитьНастройки(НастройкиПодключенияКСП);
	
	НаборСтатусов 	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТабСтатусов");
	
	Для каждого стр из МасивЗаказов Цикл
		
		Если стр["orderMethod"] = "offline" или стр["orderType"] = "offline" Тогда
			Продолжить;
		КонецЕсли;
		
		Если стр["items"].Количество() = 0 Тогда
			Сообщить("Заказ № " + стр["number"] + " не был загружен в 1С, т.к в нем отсутствуют товары!");
			Продолжить;
		КонецЕсли;
		
		// Загружаемые статусы
		Если НаборСтатусов <> Неопределено Тогда
			Если НаборСтатусов.Количество() > 0 Тогда
				Если Не СопоставитьСтатус(стр["status"], НаборСтатусов) Тогда 
					Сообщить("Заказы в статусе " + стр["status"] + " не загружаются в 1С. Чтобы это исправить, перейдите на вкладку ""Статусы"" и добавьте этот статус в список.");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Сообщить("Таблица соответствия статусов пустая, заказы не будут загружены в 1С. Чтобы это исправить, перейдите на вкладку ""Статусы"" и добавьте статусы в таблицу.");
			Возврат;
		КонецЕсли;
		
		стрЗаказа = ФормированиеСтруктурыЗаказа(стр); // В этой структуре собраны данные заказа		
		
		//искДок = УТ11_ВернутьДокументЗаказ(Строка(стрЗаказа["id"])); //ЕНС. оптимизировано
		искДок = УТ11_ВернутьДокументЗаказ_РС(стрЗаказа["id"], стрЗаказа["site"]);
		
		СоздаватьВозвраты = НастройкиПодключения.СозданиеВозвратов;
		
		Если ЗначениеЗаполнено(искДок) Тогда  
			//если статус возврат, получаем заказ, проверяем возврат по нему 
			СоздВозврат = Ложь;
			СоответствиеСтатусов = НаборСтатусов.Найти(стр["status"], "КодCRM"); 
			Если СоответствиеСтатусов <> Неопределено Тогда
				СоздВозврат = СоответствиеСтатусов.Возврат;
			КонецЕсли;
			Если стр["status"] = "partially-returned" или стр["status"] = "return" или СоздВозврат = Истина Тогда
				Если не СоздаватьВозвраты Тогда 
					Продолжить;
				КонецЕсли;
				
				// todo Перенести код согласно логике:
				
				//проверяем наличие реализации 
				ДокРеализация = УТ11_ВернутьРеализацию(искДок.Ссылка);  //ЕНС. Возвращает ТОЛЬКО ПРОВЕДЕННУЮ реализацию!!!!!!!!!
				Если ЗначениеЗаполнено(ДокРеализация) Тогда 
					//делаем возврат на основании реализации, предварительно проверяем был ли уже возврат по реализации
					ДокВозврат = УТ11_ВернутьВозврат(ДокРеализация);
					
					Попытка
						УТ11_СоздатьВозврат(ДокВозврат, ДокРеализация, стрЗаказа.Товары);
					Исключение
					    ЗаписьЖурналаРегистрации("Мод_СозданиеЗаказов_УТ11_СоздатьЗаказ", УровеньЖурналаРегистрации.Ошибка,,искДок,"Не удалось создать/обновить ВОЗВРАТ. ID заказа "+стр["id"]+". Подробности: " + ОписаниеОшибки());
					КонецПопытки;
					
				Иначе 
					Сообщить("По заказу не было реализации, возврат товаров не будет сделан!");
				КонецЕсли;
			Иначе 
				
				Попытка
					УТ11_СоздатьЗаказ(стрЗаказа, стр, искДок, ТЗброни);            //редактируем заказ 
				Исключение
				    ЗаписьЖурналаРегистрации("Мод_СозданиеЗаказов_УТ11_СоздатьЗаказ", УровеньЖурналаРегистрации.Ошибка,,искДок,"Не удалось обновить заказ. ID "+стр["id"]+". Подробности: " + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		Иначе
			Попытка
				УТ11_СоздатьЗаказ(стрЗаказа, стр, , ТЗброни);                  //создаем заказ
			Исключение
			    ЗаписьЖурналаРегистрации("Мод_СозданиеЗаказов_УТ11_СоздатьЗаказ", УровеньЖурналаРегистрации.Ошибка,,,"Не удалось создать заказ. ID "+стр["id"]+". Подробности: "+ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры



Функция ПриведениеТелНомераСтандарт(тНомер)
	
	резНомер = "";
	Для ин=1 по стрДлина(тНомер) Цикл
		Символ = Сред(тНомер,ин,1);	
		Если (КодСимвола(Символ) >= 48) и (КодСимвола(Символ)<=57) Тогда
			резНомер = резНомер + Символ;
		КонецЕсли;
	КонецЦикла;
	Если КодСимвола(Лев(резНомер,1))=57 и стрДлина(резНомер)=10 Тогда // Номер начинается с 9-ки
		резНомер = "8" + резНомер;
	КонецЕсли;	
	Если стрДлина(резНомер)=10 Тогда // Номер содержит 10 цифр
		резНомер = "8" + резНомер;
	КонецЕсли;	
	Если КодСимвола(Лев(резНомер,1))=55 Тогда // Номер начинается с 7-ки
		резНомер = "8" + Прав(резНомер,стрДлина(резНомер)-1);
	КонецЕсли;
	Если стрДлина(резНомер)<>11 Тогда
		возврат "";
	КонецЕсли;
	
	возврат резНомер;
	
КонецФункции





// ЕНС. Запрос закэширован
Функция УТ11_ВернутьДокументЗаказ(ИД) Экспорт
	
	мЗапросПоискаЗаказов.УстановитьПараметр("Значение", ИД);
	
	Результат = мЗапросПоискаЗаказов.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
			Возврат Выборка.Объект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документы.ЗаказКлиента.ПустаяСсылка();
	
КонецФункции

// ЕНС
Функция УТ11_ВернутьДокументЗаказ_РС(id, site) Экспорт
	
	мЗапросПоискаЗаказов.УстановитьПараметр("id", id);
	мЗапросПоискаЗаказов.УстановитьПараметр("site", site);
	
	Результат = мЗапросПоискаЗаказов.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
			Возврат Выборка.Объект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документы.ЗаказКлиента.ПустаяСсылка();
	
КонецФункции

Функция УТ11_ВернутьДокументОплаты (ИД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение,
	|	ДополнительныеСведения.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Значение = &Значение
	|	И ДополнительныеСведения.Свойство В(&Свойство)";
	
	СвойствоОплат = Новый Массив();
	СвойствоОплат.Добавить(crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПоступлениеБезналичныхДенежныхСредств));
	СвойствоОплат.Добавить(crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПриходныйКассовыйОрдер));
	СвойствоОплат.Добавить(crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте));
	
	Запрос.УстановитьПараметр("Значение", ИД);
	Запрос.УстановитьПараметр("Свойство", СвойствоОплат);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	искДок = Документы.ЗаказКлиента.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		искДок = Выборка.Объект;
	КонецЕсли;
	
	Возврат искДок;
	
КонецФункции

// Возвращает ТОЛЬКО ПРОВЕДЕННУЮ реализацию
//
Функция УТ11_ВернутьРеализацию (Заказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента
	|	И РеализацияТоваровУслуг.Проведен";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", Заказ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	искРеализация = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		искРеализация = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат искРеализация;
	
КонецФункции

Функция УТ11_ОпределениеКонтрагента(стр,организация)
	
	КорпоративныеКлиенты =  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КорпоративныеКлиенты");

	РаздельноВестиПартнеров = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	
	искКонт 		= Неопределено;
	искПарт 		= Неопределено;
	искКонтЛицо 	= Неопределено;
	типКлиента 		= Неопределено;
	АдресДоставки  	= стр["АдресДоставки"]; 
	тНомер 			= стр["Телефон"];	
	ДанныеКонтрагента = стр["ДанныеКонтрагента"];
	
	Если КорпоративныеКлиенты = Истина Тогда
		Почта					= стр["ДанныеКонтактногоЛица"]["Почта"];
		ИмяКлиента 				= "";           //партнер
		НаименованиеКомпании 	= "";           //контрагент
		ПолноеНаименование		= "";
		
		ДанныеКорпКлиента		= стр["ДанныеКорпКлиента"];
		ДанныеКонтактногоЛица 	= стр["ДанныеКонтактногоЛица"];
		типКлиента 	 			= ДанныеКорпКлиента["Тип"];
		
		Если типКлиента = "customer_corporate" Тогда       				 //корпоративный клиент
			типКонтрагента 		= ДанныеКонтрагента["типКонтрагента"]; //какой тип если выбран не корп клиент, а просто клиент
			имяКлиента 		 	= ДанныеКорпКлиента["НаименованиеКорп"];
			ЮридическийАдрес 	= ДанныеКонтрагента["АдресРегистрации"];
			ФИОКонтактногоЛица 	= ДанныеКонтактногоЛица["ФИО"];
			НаименованиеКомпании= ДанныеКонтрагента["НазваниеКомпании"];
			ПолноеНаименование	=  ДанныеКонтрагента["ПолноеНаименование"];
			idКонтрагента		=  ДанныеКонтрагента["ID"];
			idПартнера			=  ДанныеКорпКлиента["ID"];
			ИНН 				= СокрЛП(ДанныеКонтрагента["ИНН"]);
			КПП					= СокрЛП(ДанныеКонтрагента["КПП"]);
		ИначеЕсли  типКлиента = "customer" Тогда                   		//клиент
			//на основании этих данных создаем партнера без контактного лица
			имяКлиента 		 	= стр["ФИО"];
			idКонтрагента		= ДанныеКонтактногоЛица["ID"];
			idПартнера			= ДанныеКонтактногоЛица["ID"];
		КонецЕсли;
		
	Иначе
		Почта					= стр["Почта"];
		имяКлиента 				= стр["ФИО"];
		типКонтрагента 	  		= ДанныеКонтрагента["Тип"];
		idКонтрагента			= стр["idКлиента"];
		idПартнера				= стр["idКлиента"];
		Если ЗначениеЗаполнено(ДанныеКонтрагента["НаименованиеЮрЛица"]) Тогда 
			Наименование = ДанныеКонтрагента["НаименованиеЮрЛица"];
			НаименованиеПолное = ДанныеКонтрагента["НаименованиеЮрЛица"];
		Иначе 
			Наименование = имяКлиента;
			НаименованиеПолное = имяКлиента;
		КонецЕсли;
		Если типКонтрагента = "ЮрЛицо"  Тогда
			ИНН 					= СокрЛП(ДанныеКонтрагента["ИНН"]);
			КПП						= СокрЛП(ДанныеКонтрагента["КПП"]);
		ИначеЕсли типКонтрагента = "ИндивидуальныйПредприниматель" Тогда
			ИНН 					= СокрЛП(ДанныеКонтрагента["ИНН"]);
		КонецЕсли;	
	КонецЕсли;	
	
	Если не ЗначениеЗаполнено(idКонтрагента) Тогда 
		Сообщить("ВНИМАНИЕ!!! Не удалось определить idКонтрагента!");
	КонецЕсли;
	
	искКонт = УТ11_ВернутьКонтрагентаПоID(idКонтрагента, типКлиента); 
	
	//если нашли по id, получаем партнера
	//поменяла корп клиента на клиента, значит и партнера нужно искать заново?
	Если ЗначениеЗаполнено(искКонт) Тогда 
		//искПарт = искКонт.Партнер;
		искПарт = УТ11_ВернутьПартнераПоID(idПартнера, типКлиента);
		Если Не ЗначениеЗаполнено(искПарт) Тогда 
			искПарт = искКонт.Партнер;	
		КонецЕсли;
	Иначе 
		//если по id не нашли, ищем по ИНН и КПП (для корпов)
		Если (КорпоративныеКлиенты и типКлиента = "customer_corporate") 
			или (Не КорпоративныеКлиенты и типКонтрагента = "ЮрЛицо") 
			или (Не КорпоративныеКлиенты и типКонтрагента = "ИндивидуальныйПредприниматель") Тогда        //корпоративный клиент
			
			искКонт = УТ11_ВернутьКонтрагентаПоИНН_КПП(ДанныеКонтрагента["ИНН"],ДанныеКонтрагента["КПП"]);
			
			//если по id не нашли, ищем по почте и телефону 
		Иначе 	
			искКонт = УТ11_ВернутьКонтрагентаПоТелефону_Почте(Почта, тНомер);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(искКонт) Тогда 
			искПарт = искКонт.Партнер;
		КонецЕсли;
	КонецЕсли;
	
	//редактируем информацию по клиентам в 1С
	
	//партнер
	Если НЕ значениеЗаполнено(искПарт) или Не ЗначениеЗаполнено(искПарт.ВерсияДанных) Тогда
		искПарт = Справочники.Партнеры.СоздатьЭлемент();
	Иначе 
		искПарт = искПарт.ПолучитьОбъект();
	КонецЕсли;

	Если РаздельноВестиПартнеров = Истина или (типКлиента = "customer" или типКонтрагента = "ФизЛицо") Тогда 
		искПарт.Наименование = имяКлиента;
		искПарт.НаименованиеПолное = имяКлиента;
	Иначе 
		искПарт.Наименование = НаименованиеКомпании;
		искПарт.НаименованиеПолное = ПолноеНаименование;
	КонецЕсли;
	
	искПарт.Клиент = Истина;
	Если типКлиента = "customer" или типКонтрагента = "ФизЛицо" Тогда    //как определить тип корп клиента
		искПарт.ЮрФизЛицо = перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Иначе
		искПарт.ЮрФизЛицо = перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;
	искПарт.ГруппаДоступа = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ГруппаДоступаПартнеров");
	искПарт.Комментарий = "#";
	
	//контрагент
	Если НЕ значениеЗаполнено(искКонт) Тогда
		искКонт = Справочники.Контрагенты.СоздатьЭлемент();
	Иначе 
		искКонт = искКонт.ПолучитьОбъект();
	КонецЕсли;
	Если КорпоративныеКлиенты Тогда 
		Если  типКлиента = "customer_corporate" Тогда 
			искКонт.Наименование = НаименованиеКомпании;
			искКонт.НаименованиеПолное = ПолноеНаименование;
			Если типКонтрагента = "ЮрЛицо" Тогда 
				искКонт.ЮрФизЛицо = перечисления.ЮрФизЛицо.ЮрЛицо;
				искКонт.ИНН = ИНН;
				искКонт.КПП = КПП;
				искКонт.КодПоОКПО = СокрЛП(ДанныеКонтрагента["ОКПО"]); 
			ИначеЕсли типКонтрагента = "ИндивидуальныйПредприниматель" Тогда
				искКонт.ЮрФизЛицо = перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
				искКонт.ИНН = ИНН;
				искКонт.КодПоОКПО = СокрЛП(ДанныеКонтрагента["ОКПО"]);
			ИначеЕсли типКонтрагента = "ФизЛицо" Тогда 
				искКонт.ЮрФизЛицо = перечисления.ЮрФизЛицо.ФизЛицо;
			КонецЕсли;
		ИначеЕсли типКлиента = "customer" Тогда
			искКонт.Наименование = стр["ФИО"];
			искКонт.ЮрФизЛицо = перечисления.ЮрФизЛицо.ФизЛицо;
		КонецЕсли;
	Иначе 
		Если типКонтрагента = "ФизЛицо" Тогда 
			искКонт.ЮрФизЛицо = перечисления.ЮрФизЛицо.ФизЛицо;
		ИначеЕсли типКонтрагента = "ЮрЛицо" Тогда 
			искКонт.ЮрФизЛицо = перечисления.ЮрФизЛицо.ЮрЛицо;
			искКонт.ИНН = ИНН;
			искКонт.КПП = КПП; 
			Если ЗначениеЗаполнено(СокрЛП(ДанныеКонтрагента["ОКПО"])) Тогда 
				искКонт.КодПоОКПО = СокрЛП(ДанныеКонтрагента["ОКПО"]);	
			КонецЕсли;
		ИначеЕсли типКонтрагента = "ИндивидуальныйПредприниматель" Тогда
			искКонт.ЮрФизЛицо = перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
			искКонт.ИНН = ИНН;
			Если ЗначениеЗаполнено(СокрЛП(ДанныеКонтрагента["ОКПО"])) Тогда 
				искКонт.КодПоОКПО = СокрЛП(ДанныеКонтрагента["ОКПО"]);	
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеКонтрагента["НаименованиеЮрЛица"]) Тогда 
			искКонт.Наименование = ДанныеКонтрагента["НаименованиеЮрЛица"];
			искКонт.НаименованиеПолное = ДанныеКонтрагента["НаименованиеЮрЛица"];
		Иначе 
			искКонт.Наименование = имяКлиента;
			искКонт.НаименованиеПолное = имяКлиента;
		КонецЕсли;
	КонецЕсли;
	искКонт.ДополнительнаяИнформация = "#";
	искКонт.ДополнительнаяИнформация = ?(типКонтрагента <> "ФизЛицо", НаименованиеКомпании, "");
	искКонт.Записать();
	
	//запись id контрагента
	СвойствоКонтрагентов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(искКонт.Ссылка, СвойствоКонтрагентов, idКонтрагента);  
	//
	
	// Телефон
	Если тНомер<>"" Тогда
		КонтИнф = искКонт.КонтактнаяИнформация;
		СтрТелефон = КонтИнф.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,"Вид");
		Если СтрТелефон <> Неопределено Тогда 
			СтрТелефон.Представление = тНомер;
			СтрТелефон.НомерТелефона = тНомер;
		Иначе
			НовыйТелефон = искКонт.КонтактнаяИнформация.Добавить();
			НовыйТелефон.Тип =  Перечисления.ТипыКонтактнойИнформации.Телефон;
			НовыйТелефон.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			НовыйТелефон.НомерТелефона = тНомер;   					
			НовыйТелефон.Представление = тНомер;
		КонецЕсли;
		
		КонтИнф = искПарт.КонтактнаяИнформация;
		СтрТелефон = КонтИнф.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,"Вид");
		Если СтрТелефон <> Неопределено Тогда 
			СтрТелефон.Представление = тНомер;
			СтрТелефон.НомерТелефона = тНомер;
		Иначе
			НовыйТелефон = искПарт.КонтактнаяИнформация.Добавить();
			НовыйТелефон.Тип =  Перечисления.ТипыКонтактнойИнформации.Телефон;
			НовыйТелефон.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			НовыйТелефон.НомерТелефона = тНомер;   					
			НовыйТелефон.Представление = тНомер;
		КонецЕсли;
	КонецЕсли;
	
	// Почта
	Если Почта<>"" Тогда
		КонтИнф = искКонт.КонтактнаяИнформация;
		СтрПочта = КонтИнф.Найти(Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,"Вид");
		Если СтрПочта <> Неопределено Тогда 
			СтрПочта.Представление = Почта;
			СтрПочта.АдресЭП = Почта;
		Иначе
			НоваяПочта = искКонт.КонтактнаяИнформация.Добавить();
			НоваяПочта.Тип =  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяПочта.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			НоваяПочта.АдресЭП = Почта;   					
			НоваяПочта.Представление = Почта;
		КонецЕсли;
		
		КонтИнф = искПарт.КонтактнаяИнформация;
		СтрПочта = КонтИнф.Найти(Справочники.ВидыКонтактнойИнформации.EmailПартнера,"Вид");
		Если СтрПочта <> Неопределено Тогда 
			СтрПочта.Представление = Почта;
			СтрПочта.АдресЭП = Почта;
		Иначе
			НоваяПочта = искПарт.КонтактнаяИнформация.Добавить();
			НоваяПочта.Тип =  Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяПочта.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			НоваяПочта.АдресЭП = Почта;   					
			НоваяПочта.Представление = Почта;
		КонецЕсли;
	КонецЕсли;
	
	искПарт.Записать();
	
	//+++RetailCRM 13.06.23 #290235
	Если искПарт.ЮрФизЛицо = перечисления.КомпанияЧастноеЛицо.Компания и ЗначениеЗаполнено(ДанныеКонтрагента.ОГРН) Тогда ;
		Реквизит = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("ОГРН",Истина);
		
		МассивСтруктур = Новый Массив;
		МассивСтруктур.Добавить(Новый Структура("Свойство, Значение",Реквизит,ДанныеКонтрагента.ОГРН));
		
		//Используя стандартную процедуру БСП присваиваем значения доп.реквизитов элементу справочника
		УправлениеСвойствами.ЗаписатьСвойстваУОбъекта(искПарт.Ссылка, МассивСтруктур);
	КонецЕсли;
	//+++RetailCRM 13.06.23 #290235

	искКонт.Партнер = искПарт.Ссылка;
	
	//запись id партнера
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(искПарт.Ссылка, СвойствоПартнеров, idПартнера);  
	//
	
	// Адрес доставки
	Если АдресДоставки <> "" Тогда
		КонтИнф = искКонт.КонтактнаяИнформация;
		СтрАдресДоставки = КонтИнф.Найти(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,"Вид");
		Если СтрАдресДоставки <> Неопределено Тогда 
			СтрАдресДоставки.Представление = АдресДоставки;
		Иначе
			НовыйАдресДоставки 					= искКонт.КонтактнаяИнформация.Добавить();
			НовыйАдресДоставки.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес; 
			НовыйАдресДоставки.Вид 				= Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			НовыйАдресДоставки.Представление 	= АдресДоставки;
		КонецЕсли;
	КонецЕсли;
	
	Если (КорпоративныеКлиенты и типКлиента = "customer_corporate") 
		или (Не КорпоративныеКлиенты и типКонтрагента = "ЮрЛицо") 
		или (Не КорпоративныеКлиенты и типКонтрагента = "ИндивидуальныйПредприниматель") Тогда        //корпоративный клиент
		//	ЮридическийАдрес 
		Если ЮридическийАдрес <> "" Тогда
			КонтИнф = искКонт.КонтактнаяИнформация;
			СтрЮрАдрес = КонтИнф.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,"Вид");
			Если СтрЮрАдрес <> Неопределено Тогда 
				СтрЮрАдрес.Представление = ЮридическийАдрес;
			Иначе
				НовыйЮрАдрес 					= искКонт.КонтактнаяИнформация.Добавить();
				НовыйЮрАдрес.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес; 
				НовыйЮрАдрес.Вид 				= Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				НовыйЮрАдрес.Представление 		= ЮридическийАдрес;
			КонецЕсли;
			
			КонтИнф = искПарт.КонтактнаяИнформация;
			СтрАдрес = КонтИнф.Найти(Справочники.ВидыКонтактнойИнформации.АдресПартнера,"Вид");
			Если СтрАдрес <> Неопределено Тогда 
				СтрАдрес.Представление = ЮридическийАдрес;
			Иначе
				НовыйАдрес 					= искПарт.КонтактнаяИнформация.Добавить();
				НовыйАдрес.Тип 				= Перечисления.ТипыКонтактнойИнформации.Адрес; 
				НовыйАдрес.Вид 				= Справочники.ВидыКонтактнойИнформации.АдресПартнера;
				НовыйАдрес.Представление 	= ЮридическийАдрес;
			КонецЕсли;
		КонецЕсли;	
		
		//банковские реквизиты
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчетаКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|ГДЕ
		|	БанковскиеСчетаКонтрагентов.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец", искКонт.Ссылка);
		Результат = Запрос.Выполнить().Выгрузить();
		ЕстьСчет = ложь;      			
		Если Результат.Количество() Тогда
			ЕстьСчет = истина;      			
		КонецЕсли;
		
		Если Не ЕстьСчет Тогда 
			искБанк = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
			НайдБанк = Справочники.КлассификаторБанков.НайтиПоКоду(ДанныеКонтрагента["БИК"]);   
			Если Не НайдБанк = Справочники.КлассификаторБанков.ПустаяСсылка() Тогда 
				искБанк.Владелец = искКонт.Ссылка;
				искБанк.Банк = НайдБанк;
				искБанк.НомерСчета = ДанныеКонтрагента["БанковскийСчет"];
				искБанк.ВалютаДенежныхСредств = Константы.ВалютаРегламентированногоУчета.Получить();
				искБанк.Наименование = строка(НайдБанк) + " (руб.)"; 
				Если ЗначениеЗаполнено(искБанк.НомерСчета) Тогда 
					искБанк.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	искКонт.Записать();
	
	Если КорпоративныеКлиенты и типКлиента = "customer_corporate" Тогда 
		//поиск контактного лица по id 
		искКонтЛицо = УТ11_ВернутьКонтактноеЛицоПоID(ДанныеКонтактногоЛица["ID"]);
		//если не нашли, ищем по владельцу 
		//можно рассмотреть вариант поиска по телефону/ФИО
		Если НЕ ЗначениеЗаполнено(искКонтЛицо) Тогда
			Запрос1 = Новый Запрос;
			Запрос1.Текст = 
			"ВЫБРАТЬ
			|	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо
			|ИЗ
			|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
			|ГДЕ
			|	КонтактныеЛицаПартнеров.Владелец = &Владелец
			|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления";
			
			Запрос1.УстановитьПараметр("Владелец", искПарт.Ссылка);
			
			Рез = Запрос1.Выполнить().Выгрузить();
			
			Если Рез.Количество() Тогда
				искКонтЛицо = Рез[0].КонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
		Если НЕ значениеЗаполнено(искКонтЛицо) Тогда
			искКонтЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
		Иначе 
			искКонтЛицо = искКонтЛицо.ПолучитьОбъект();
		КонецЕсли;
		
		//заполняем данные контактного лица
		искКонтЛицо.Наименование = ДанныеКонтактногоЛица.ФИО;
		искКонтЛицо.Владелец = искПарт.Ссылка;
		искКонтЛицо.Записать();
		
		//запись id контактного лица
		СвойствоКонтЛица = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_КонтактныеЛицаПартнеров);
		crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(искКонтЛицо.Ссылка, СвойствоКонтЛица, ДанныеКонтактногоЛица["ID"]);  
		//
	КонецЕсли;
	
	КлиентПартнер = Новый Соответствие;
	КлиентПартнер.Вставить("Клиент",искКонт.Ссылка);
	КлиентПартнер.Вставить("Партнер",искПарт.Ссылка);
	
	Возврат КлиентПартнер;
	
КонецФункции

Функция УТ11_ВернутьКонтрагентаПоID (ИД, ТипКлиента) Экспорт 	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение,
	|	ДополнительныеСведения.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Значение = &Значение
	|	И ДополнительныеСведения.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Значение", ИД);
	СвойствоКонтрагентов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	Запрос.УстановитьПараметр("Свойство", СвойствоКонтрагентов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда 
			Если ТипКлиента = "customer" и Выборка.Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда		//найденный контрагент должен быть физ лицом
				искКонт = Выборка.Объект;
			ИначеЕсли 
				ТипКлиента = "customer_corporate" и Выборка.Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда		//найденный контрагент должен быть юр лицом
				искКонт = Выборка.Объект;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(искКонт) Тогда 
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат искКонт;
	
КонецФункции

//Функция УТ11_ВернутьПартнераПоID (ИД)  Экспорт 
Функция УТ11_ВернутьПартнераПоID (ИД, типКлиента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение,
	|	ДополнительныеСведения.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Значение = &Значение
	|	И ДополнительныеСведения.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Значение", ИД);
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	Запрос.УстановитьПараметр("Свойство", СвойствоПартнеров);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Партнеры") Тогда 
			Если ТипКлиента = "customer" и Выборка.Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда		//найденный контрагент должен быть физ лицом
				искПарт = Выборка.Объект;
			ИначеЕсли ТипКлиента = "customer_corporate" и Выборка.Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
				искПарт = Выборка.Объект;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(искПарт) Тогда 
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат искПарт;
	
КонецФункции

Функция УТ11_ВернутьКонтактноеЛицоПоID (ИД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение,
	|	ДополнительныеСведения.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Значение = &Значение
	|	И ДополнительныеСведения.Свойство = &Свойство";
	
	Запрос.УстановитьПараметр("Значение", ИД);
	СвойствоКонтЛиц = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_КонтактныеЛицаПартнеров);
	Запрос.УстановитьПараметр("Свойство", СвойствоКонтЛиц);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Объект) = Тип("СправочникСсылка.Контрагенты") Тогда 
			искКонтЛицо = Выборка.Объект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат искКонтЛицо;
	
КонецФункции

Функция УТ11_ВернутьКонтрагентаПоТелефону_Почте (Почта="", тНомер="")
	
	Если Почта <> "" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
		|ГДЕ
		|	КонтрагентыКонтактнаяИнформация.Тип = &Тип
		|	И КонтрагентыКонтактнаяИнформация.Вид = &Вид
		|	И КонтрагентыКонтактнаяИнформация.Представление = &Представление";
		
		Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.EmailКонтрагента);
		Запрос.УстановитьПараметр("Представление", Почта);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() Тогда
			искКонт = Результат[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	//если не нашли, продолжаем искать по номеру
	Если Не ЗначениеЗаполнено(искКонт) и тНомер <> "" Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Представление ПОДОБНО &Представление";
		
		Запрос.УстановитьПараметр("Представление", "%" + тНомер + "%");
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() Тогда
			искКонт = Результат[0].Ссылка;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат искКонт;
	
КонецФункции

Функция УТ11_ВернутьКонтрагентаПоИНН_КПП (ИНН="", КПП="")
	
	Если ЗначениеЗаполнено(ИНН) и Строка(ИНН)<>"" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН";
		Если ЗначениеЗаполнено(КПП) и Строка(КПП)<> "" Тогда 
			Запрос.Текст = Запрос.Текст + "
			|	И Контрагенты.КПП = &КПП";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Запрос.УстановитьПараметр("КПП", КПП);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			искКонт = Выборка.Контрагент;
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат искКонт;
	
КонецФункции

Функция УТ11_ПолучитьСвойство(Наименование, НазначениеСвойства, Тип = "Свойство", ТипЗначения = "Строка")
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов
	|ГДЕ
	|	СвойстваОбъектов.Наименование 	= &Наименование
	|	И СвойстваОбъектов.НаборСвойств = &НазначениеСвойства";
	
	Запрос.УстановитьПараметр("НазначениеСвойства", НазначениеСвойства);
	Запрос.УстановитьПараметр("Наименование", 		Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();                      
	
	ЭтоСведение = ?(Тип = "Сведение", Истина, Ложь);
	ТипЗначенияСвойства = Новый ОписаниеТипов("Строка", ,
	Новый КвалификаторыСтроки(99, ДопустимаяДлина.Переменная));
	НазваниеТЧ	= ?(Тип = "Свойство", "ДополнительныеСведения", "ДополнительныеРеквизиты");					
	
	Если ТипЗначения = "Число" Тогда 
		ТипЗначенияСвойства = Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	КонецЕсли;
	
	Если ТипЗначения = "Строка" Тогда 
		ТипЗначенияСвойства = Новый ОписаниеТипов("Строка",
		Новый КвалификаторыСтроки(50,ДопустимаяДлина.Переменная));
	КонецЕсли;
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда                         
		Свойство = ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		
		Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		Свойство.Наименование 				= Наименование;
		Свойство.Заголовок 					= Наименование;                
		Свойство.ЭтоДополнительноеСведение 	= ЭтоСведение;
		Свойство.НаборСвойств 				= НазначениеСвойства;
		Свойство.ТипЗначения 				= ТипЗначенияСвойства;
		Свойство.Записать();
		Свойство = Свойство.Ссылка;
		
	КонецЕсли;
	
	Если НазначениеСвойства[НазваниеТЧ].Найти(Свойство) = Неопределено Тогда
		
		НаборОбъект = НазначениеСвойства.ПолучитьОбъект();
		НоваяСтрока = НаборОбъект[НазваниеТЧ].Добавить();
		НоваяСтрока.Свойство = Свойство;
		НаборОбъект.Записать();
		
	КонецЕсли;
	
	Возврат Свойство;
	
КонецФункции





// Процедура - Выгрузить заказ ВCRM
// Предназначена для передачи в retailCRM номера реализации
// В данной версии шаблонного решения процедура не используется
// Параметры:
//  док		 - Заказ клиента	 - 
//  НомерР	 - Номер документа реализации	 - 
//
Процедура ВыгрузитьЗаказВCRM(док, НомерР)     
	
	Если Лев(Док.Комментарий, 1) <> "#" Тогда
		Возврат;
	КонецЕсли;
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey",crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	переменные.Вставить("site","demo1c");
	
	НомерЗаказа = crm_RetailCRMОбщий.ПолучитьНомерЗаказа(док.Номер);
	Если НомерЗаказа = Неопределено Тогда Возврат КонецЕсли;		
	
	заказ = Новый Соответствие();
	
	ПользПоля = Новый Соответствие();	
	ПользПоля.Вставить("nomer1c",строка(НомерР));	
	заказ.Вставить("customFields", ПользПоля);  
	
	переменные.Вставить("by","id");		
	переменные.Вставить("order",crm_RetailCRMОбщий.JsonTest(заказ,Новый ЗаписьJSON));
	
	ответ = crm_RetailCRMОбщий.HTTPзапросPOST(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера")
	,"/api/v5/orders/"+НомерЗаказа+"/edit",переменные);
	
	Если Найти(ответ, """success"":true") > 0 Тогда                  
		Сообщить("Заказ успешно выгружен в RetailCRM");	
	Иначе
		Сообщить("Трудности с выгрузкой заказа в RetailCRM");
		сообщить(ответ);
	КонецЕсли;
	
КонецПроцедуры


// ЕНС. Есть проблемы в коде, надо бы вернуться...
// Параметры:
//  ЗаказКлиентаОбъект	 - ДокументОбъект.ЗаказКлиента - 
//	Реализация - ДокументСсылка
//
Процедура УТ11_СоздатьРеализацию(ЗаказКлиентаОбъект, Реализация, СтатусЗаказа) Экспорт
	
	Если Не ЗаказКлиентаОбъект.Проведен Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаказКлиентаСсылка = ЗаказКлиентаОбъект.ссылка;
	ПредставлениеЗаказа = Строка(ЗаказКлиентаОбъект);
	
	Если Не ЗначениеЗаполнено(Реализация) Тогда
		докР = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Иначе 
		докР = Реализация.ПолучитьОбъект();
		
		Если докР.Проведен Тогда
			докР.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаДок = докР.Дата;
	докР.Товары.Очистить();
	
	Попытка
		докР.Заполнить(ЗаказКлиентаСсылка);
	Исключение
		Сообщить("Не удалось заполнить: " + докР + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
	докР.Дата				= ?(не ЗначениеЗаполнено(ДатаДок), ТекущаяДата(),ДатаДок);
	
	докР.Статус 			= Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	докР.ЗаказКлиента 		= ЗаказКлиентаСсылка;
	докР.РеализацияПоЗаказам = Истина; 
	докР.СкидкиРассчитаны 	= Истина;
	
	Попытка
		докР.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Проведен: " + докР , СтатусСообщения.Информация);
	Исключение
		Сообщить("Не удалось провести: " + докР + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Попытка
			докР.Записать(РежимЗаписиДокумента.Запись);
			Сообщить("Записан: " + докР , СтатусСообщения.Информация);
		Исключение
			//ЕНС. Здесь может быть ошибка "В текущей транзакции уже происходили ошибки!"
			Сообщить("Не удалось записать: " + докР + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;  
	КонецПопытки;

	// ЕНС. а если не удалось записать реализацию на предыдущем шаге?
	СвойствоРеализаций = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("crm_СтатусЗаказа", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_РеализацияТоваровУслуг, "Сведение");
	crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докР.Ссылка, СвойствоРеализаций, СтатусЗаказа);  
	
	
	//ЕНС. не думаю, что закрытие заказа в этом месте -  хорошая идея.
	//Наверное, лучше будет сделать очередь на регистре и регл задание для этих целей
	//Регл задание через внеш обработку или в расширении RCRM
	Если (СтатусЗаказа = "complete" или СтатусЗаказа = "partially-completed") и докР.Проведен тогда
		
		СостояниеЗаказа = УТ11_ПолучитьСостояниеЗаказа(ЗаказКлиентаОбъект);
		
		Если СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию Тогда 
			//закрываем заказ
			ЗаказКлиентаОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
			Попытка
				ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Сообщить("Заказ закрыт: " + ПредставлениеЗаказа , СтатусСообщения.Информация);
			Исключение
				Сообщить("Не удалось закрыть заказа: " + ПредставлениеЗаказа + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УТ11_СоздатьДокументОплаты(док, Оплата, ТипДокументаОплаты, ДокументОплаты, Касса, Терминал)
	
	док = док.ссылка;
	
	Если ТипДокументаОплаты = "Поступление безналичных ДС" Тогда 
		//создаем поступление ДС
		Если Не ЗначениеЗаполнено(ДокументОплаты) Тогда
			докОБ = Документы.ПоступлениеБезналичныхДенежныхСредств.СоздатьДокумент();
		Иначе 
			докОБ = ДокументОплаты.ПолучитьОбъект();
		КонецЕсли;
		Попытка
			докОБ.Заполнить(док);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		докОБ.Дата 			= Оплата["ДатаОплаты"];
		докОБ.Комментарий	= "" + Оплата["Комментарий"] + " " + Оплата["ИДОплаты"];
		
		Для Каждого стр Из докОБ.РасшифровкаПлатежа Цикл 
			стр.Сумма = Оплата["СуммаПлатежа"];
			стр.СуммаВзаиморасчетов = Оплата["СуммаПлатежа"];
			стр.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
			Прервать;	
		КонецЦикла;
		
		докОБ.СуммаДокумента = докОБ.РасшифровкаПлатежа.Итог("Сумма");
		докОБ.БанковскийСчет = док.БанковскийСчет;
		
		СвойствоОплаты = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПоступлениеБезналичныхДенежныхСредств);
		СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПоступлениеБезналичныхДенежныхСредств);
		
	ИначеЕсли ТипДокументаОплаты = "Приходный кассовый ордер" Тогда
		//создаем ПКО
		Если Не ЗначениеЗаполнено(ДокументОплаты) Тогда
			докОБ = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
		Иначе
			докОБ = ДокументОплаты.ПолучитьОбъект();
		КонецЕсли;	
		
		докОБ.РасшифровкаПлатежа.Очистить();
		
		Попытка
			докОБ.Заполнить(док);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		докОБ.Дата = Оплата["ДатаОплаты"];
		докОБ.Комментарий	= "" + Оплата["Комментарий"] + " " + Оплата["ИДОплаты"];
		докОБ.Касса = Касса;
		Для Каждого стр Из докОБ.РасшифровкаПлатежа Цикл 
			стр.Сумма = Оплата["СуммаПлатежа"];
			стр.СуммаВзаиморасчетов = Оплата["СуммаПлатежа"];
			стр.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
			Прервать;	
		КонецЦикла;
		
		докОБ.СуммаДокумента = докОБ.РасшифровкаПлатежа.Итог("Сумма");
		
		СвойствоОплаты = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПриходныйКассовыйОрдер);
		СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ПоступлениеБезналичныхДенежныхСредств);
		
	ИначеЕсли ТипДокументаОплаты = "Эквайринговая операция" и ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами")= Истина Тогда
		//создаем эквайринговую 
		
		Если Не ЗначениеЗаполнено(ДокументОплаты) Тогда
			докОБ = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
		Иначе 
			докОБ = ДокументОплаты.ПолучитьОбъект();
		КонецЕсли;
		
		Попытка
			докОБ.Заполнить(док);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		докОБ.Дата 			= Оплата["ДатаОплаты"];
		докОБ.Комментарий	= "" + Оплата["Комментарий"] + " " + Оплата["ИДОплаты"];
		докОБ.НомерПлатежнойКарты = "1111";
		
		Если ЗначениеЗаполнено(Терминал) Тогда 
			докОБ.ЭквайринговыйТерминал = Терминал;
		КонецЕсли;
		
		Для Каждого стр Из докОБ.РасшифровкаПлатежа Цикл 
			стр.Сумма = Оплата["СуммаПлатежа"];
			стр.СуммаВзаиморасчетов = Оплата["СуммаПлатежа"];
			стр.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
			Прервать;	
		КонецЦикла;
		
		докОБ.СуммаДокумента = докОБ.РасшифровкаПлатежа.Итог("Сумма");
		
		СвойствоОплаты = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДоплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);
		СвойствоТип = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ТипОплаты", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ОперацияПоПлатежнойКарте);
		
	КонецЕсли;
	
	Если докОБ <> Неопределено Тогда 
		Если докОБ.ПометкаУдаления Тогда 
			докОБ.ПометкаУдаления = Ложь
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		докОБ.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Документ проведен: " + докОБ.Ссылка, СтатусСообщения.Информация);
	Исключение
		Сообщить("Не удалось провести документ оплаты по заказу " + док + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Попытка
			докОБ.Записать(РежимЗаписиДокумента.Запись);
			Сообщить("Документ записан: " + докОБ.Ссылка , СтатусСообщения.Информация);
		Исключение
			Сообщить("Не удалось записать документ оплаты по заказу " + док + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
	КонецПопытки;
	
	Если докОБ <> Неопределено Тогда
		
		crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докОБ.Ссылка, СвойствоОплаты, Формат(Оплата["ИДОплаты"], "ЧГ=0"));
		
		crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(докОБ.Ссылка, СвойствоТип, Оплата["ТипОплаты"]);

	КонецЕсли;
	
КонецПроцедуры


// Параметры
//	стр - элемент массива строк товаров в json
Процедура УТ11_СоздатьСтрокуДокумента(док,стр,ОтменаЗаказа = Ложь, Выше11_5_7_390, Эталонная, СоответствиеСтатусов)
	
	//ищем строку по тч товары по идентификатору строки, если найдем, то редактируем ее
	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	Если offers_id = "externalId" Тогда   	
		xmlIdТовара = стр["externalId"]; 		
	Иначе 		
		xmlIdТовара = стр["xmlId"]; 	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(xmlIdТовара) Тогда
		Если offers_id = "externalId" Тогда   	
			т = "Номенклатура не может быть найдена! Причина: нет значения в поле externalId"; 		
		Иначе 		
			xmlIdТовара = стр["xmlId"]; 	
			т = "Номенклатура не может быть найдена! Причина: нет значения в поле xmlId"; 		
		КонецЕсли;
		ВызватьИсключение т;
	КонецЕсли;
	
	//++ Работа с характеристиками
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда 
		
		СтруктураНоменклатуры		= УТ11_ВернутьНоменклатуру(xmlIdТовара);
		искХар						= СтруктураНоменклатуры.искХарактеристика;
		искНом 						= СтруктураНоменклатуры.искНоменклатура;
	Иначе 
		
		//ИдентификаторТовара
		ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
		Если ИдентифТовара = "Код" Тогда
			искНом	= Справочники.Номенклатура.найтиПоКоду(xmlIdТовара);
		ИначеЕсли ИдентифТовара = "Артикул" Тогда
			искНом	= Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", xmlIdТовара);
		ИначеЕсли ИдентифТовара = "GUID" Тогда
			уид 	= Новый УникальныйИдентификатор(xmlIdТовара);
			искНом	= Справочники.Номенклатура.ПолучитьСсылку(уид);	
		КонецЕсли;
		
	КонецЕсли;
	//-- Работа с характеристиками
	
	Если Не ЗначениеЗаполнено(искНом) Тогда 
		искНом = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	//ТипЦены
	Если стр["ТипЦены"] <> "" Тогда 
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") = Истина Тогда
			ТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
			Если ТипыЦен <> Неопределено Тогда 
				НайдСтр = ТипыЦен.Найти(стр["ТипЦены"], "КодCRM");
				Если НайдСтр <> Неопределено Тогда 
					ТипЦены = НайдСтр.ТипЦены;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Цена 						= стр["Цена"];
	Количество 					= стр["Количество"];
	СуммаРучнойСкидки 			= ?(стр["ОбщаяСкидка"] 	= Неопределено, 	0, стр["ОбщаяСкидка"]);
	СуммаРучнойСкидки 			= СуммаРучнойСкидки*Количество;
	ЦенаСумма 					= Цена - стр["ОбщаяСкидка"];

	НовСтр 						= док["Товары"].Добавить();
	
	новСтр.Номенклатура 		= искНом.Ссылка;
	
	Если ЗначениеЗаполнено(искХар) Тогда
		новСтр.Характеристика 		= искХар.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦены) Тогда
		НовСтр.ВидЦены = ТипЦены;
	КонецЕсли;
	
	новСтр.Количество 			= стр["Количество"];
	новСтр.Цена 				= стр["Цена"];
	новСтр.Склад 				= док["Склад"];
	новСтр.КоличествоУпаковок 	= новСтр.Количество;
	новСтр.Сумма				= новСтр.Количество * ЦенаСумма;
	
	
	ИспользованиеЗаказов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеЗаказов");
	Если ИспользованиеЗаказов = "ЗаказКакСчет" Тогда
		новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.НеТребуется;
	Иначе 
		новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
//		Если Выше11_5_7_390 Тогда
//			Если не ЗначениеЗаполнено(новСтр.ВариантОбеспечения) Тогда 
//				новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.кОбеспечению;
//			КонецЕсли;
//			Если Эталонная Тогда
//				Если ИспользованиеЗаказов = "ЗаказТолькоСоСклада" Тогда 
//					Если док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Тогда 
//						новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.СоСклада;
//					ИначеЕсли док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда 
//						новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
//					КонецЕсли;
//				Иначе 	
//					Если стр["СтатусТовара"] = "completed" 
//						или стр["СтатусТовара"] = "ready-for-assembly" 
//						или	стр["СтатусТовара"] = "sold" Тогда
//						новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;
//					ИначеЕсли стр["СтатусТовара"] = "in-reserve" Тогда
//						новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.СоСклада;
//					ИначеЕсли стр["СтатусТовара"] = "confirming" 
//						или стр["СтатусТовара"] = "new" Тогда
//						новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.кОбеспечению;
//					КонецЕсли;
//				КонецЕсли;	
//			КонецЕсли; 
//		Иначе 
//			//начало - Елисеев :: 22.11.2023 нет такого значения0
////			новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Требуется;
//			новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.КОбеспечению;
//			//конец - Елисеев :: 22.11.2023
//			
//		КонецЕсли;
	КонецЕсли;
	
	новСтр.ДатаОтгрузки 		= ?(ЗначениеЗаполнено(док.ДатаОтгрузки), док.ДатаОтгрузки, ТекущаяДата());
	
	новСтр.СуммаРучнойСкидки 	= СуммаРучнойСкидки;
	
	Если док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС или
		док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД или 
		док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту Тогда  
		новСтр.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	ИначеЕсли док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда 
		новСтр.СтавкаНДС = новСтр.Номенклатура.СтавкаНДС;
		новСтр.СуммаНДС = РасчитатьНДС(новСтр.Сумма, новСтр.СтавкаНДС); 
	КонецЕсли;
	
	новСтр.СуммаСНДС = новСтр.Сумма;
	
	Если стр["Удален"] = Истина или ОтменаЗаказа Тогда
		новСтр.Отменено = Истина;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов") Тогда
			НовСтр.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ОтклонениеПриОтгрузкеМерныхТоваров;  						
		КонецЕсли;
	Иначе 
		новСтр.Отменено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// В цикле по ТЧ Товары из Заказа Клиента
//	Проверяем наличие этого товара в данных из ЦРМ
//		Если там нет - удаляем из ТЧ Товары
// В цикле по таблице товаров из ЦРМ
//	
//
Процедура УТ11_СравнитьСоставЗаказа(док, ТоварыCRM, ОтменаЗаказа, Выше11_5_7_390, Эталонная, ТЗброни, СоответствиеСтатусов) 
	
	ИспользованиеХарактеристик = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик");
	GUIDОрганизации = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации");
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;

	//ТЗ1С = док.Товары.Выгрузить();
	//ТЗcrm = ТоварыCRM.Скопировать();
	
	Для каждого стрк Из ТоварыCRM Цикл
		
		УТ11_СоздатьСтрокуДокумента(док,стрк, ОтменаЗаказа, Выше11_5_7_390, Эталонная, СоответствиеСтатусов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УТ11_БронированиеТоваров(ТЗБрони, док, ТЗcrm, идЗаказа)
	
	//ищем все паки заказа
	Если ТЗБрони = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если ТЗБрони.Количество() > 0 Тогда 
		БрониПоЗаказу = ТЗБрони.НайтиСтроки(Новый Структура("IDзаказа", идЗаказа));
		
		СтатусТовара = "";
		
		//если метод history, то идем по броням, если получаем заказ по ид, идем по заказу
		Кейс = "";
		Для Каждого стрБр из ТЗБрони Цикл 
			Если стрБР.метод = "history" тогда
				Кейс = 1;
			ИначеЕсли 
				стрБР.метод = "packs" тогда
				Кейс = 2;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		//тут идти надо не по паку, а по документу и искать паки по строкам
		СписокСкладов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склады");
		
		Если СписокСкладов = Неопределено Тогда
			Сообщить("Брони не будут загружены, так как не заполнена таблица соответствия складов. Перейдите на вкладку ""Склады"" и заполните соответствие"); 
			Возврат;
		КонецЕсли;
		
		Если БрониПоЗаказу <> Неопределено Тогда 
			
			Если Кейс = 1 Тогда 
				
				//идем по каждому паку и ищем по id пака его в 1С
				//если нашли по ид меняем
				//если не нашли по ид пака, ищем по id позиции,меняем 
				Для Каждого Бронь из БрониПоЗаказу Цикл 
					
					НайденСтрока1С = док.Товары.Найти(Бронь.IDпака, "crm_IDпака");
					Если НайденСтрока1С = Неопределено Тогда 
						
						НайденСтрока1С = док.Товары.Найти(Бронь.idПозиции, "crm_idПозиции");
						
						Если НайденСтрока1С <> Неопределено Тогда 
							//ищем эту строку в crm чтобы понять статус
							стрCRM = ТЗcrm.Найти(Бронь.idПозиции, "ИДСтроки");
							Если стрCRM <> Неопределено Тогда 
								СтатусТовара = стрCRM.СтатусТовара;
							КонецЕсли;
							
							Если Бронь.Удалена = Истина Тогда 
								НайденСтрока1С.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
								НайденСтрока1С.crm_IDпака		  = 0;
								НайденСтрока1С.crm_Склад  		  = Справочники.Склады.ПустаяСсылка();	
								НайденСтрока1С.crm_КоличествоБронь= 0;
								
							Иначе 
								Если СтатусТовара = "in-reserve" Тогда
									Если док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда 
										НайденСтрока1С.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
									Иначе 
										НайденСтрока1С.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
									КонецЕсли;
									НайденСтрока1С.crm_IDпака		  = Бронь.IDпака;
									
									НайденСтрока1С.crm_КоличествоБронь= Бронь.Количество;
									
									Если ЗначениеЗаполнено(Бронь.Склад) Тогда 
										НайденнаяСтрока = СписокСкладов.Найти(Бронь.Склад, "КодCRM"); 
										Если НайденнаяСтрока <> Неопределено Тогда
											Склад = НайденнаяСтрока.Склад;
											НайденСтрока1С.crm_Склад  = Склад;
											НайденСтрока1С.Склад  = Склад;
										КонецЕсли;
									КонецЕсли;
									
									КолБронь = Бронь.Количество;
									Если КолБронь = Неопределено Тогда 
										Если Бронь.ИзменившеесяПоле = "quantity" Тогда 
											КолБронь = Бронь.newValue;
										КонецЕсли;
									КонецЕсли;
									
									Если КолБронь <> Неопределено Тогда 	 
										Если КолБронь <> НайденСтрока1С.Количество Тогда 
											НеХватаетКоличество = НайденСтрока1С.Количество - КолБронь;
											//добавляем отдельной строкой без брони
											НайденСтрока1С.Количество		  = КолБронь;
											НайденСтрока1С.КоличествоУпаковок  = КолБронь;
											НовСтр 						= док["Товары"].Добавить();
											новСтр.Номенклатура 		= НайденСтрока1С.Номенклатура;
											новСтр.Характеристика 		= НайденСтрока1С.Характеристика;
											НовСтр.ВидЦены 				= НайденСтрока1С.ВидЦены;
											новСтр.Количество 			= НеХватаетКоличество;
											новСтр.Цена 				= НайденСтрока1С.Цена;
											новСтр.Склад 				= НайденСтрока1С.Склад;
											новСтр.КоличествоУпаковок 	= НеХватаетКоличество;
											новСтр.Сумма				= новСтр.Количество * новСтр.Цена;
											новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.КОбеспечению;
											новСтр.Отменено				= Ложь;
											новСтр.СтавкаНДС			= НайденСтрока1С.СтавкаНДС;
											
											Если НовСтр.СтавкаНДС <> Справочники.СтавкиНДС.БезНДС Тогда 
												новСтр.СуммаНДС 		= РасчитатьНДС(новСтр.Сумма, новСтр.СтавкаНДС);
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;				
				КонецЦикла;
				
			ИначеЕсли Кейс = 2 Тогда
				
				Для Каждого стр из док.Товары Цикл 
					//ищем в тз броней пак чтоб перезаписать
					НайденСтрока = ТЗБрони.Найти(стр.crm_IDпака, "IDпака");
					//если пака нет пака с таким ид, ищем пак по товару, чтобы удалить
					
					Если НайденСтрока = Неопределено Тогда 
						
						Если ЗначениеЗаполнено(стр.crm_idПозиции) Тогда 
							НайденСтрока = ТЗБрони.Найти(стр.crm_idПозиции, "idПозиции");
							
							Если НайденСтрока = Неопределено Тогда
								стр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.КОбеспечению;
							Иначе
								//ищем эту строку в crm чтобы понять статус
								стрCRM = ТЗcrm.Найти(стр.crm_idПозиции, "ИДСтроки");
								Если стрCRM <> Неопределено Тогда 
									СтатусТовара = стрCRM.СтатусТовара;
								КонецЕсли;
								
								Если СтатусТовара = "in-reserve" Тогда
									Если док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Тогда 
										стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
									Иначе 
										стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
									КонецЕсли;
									стр.crm_IDпака		  = НайденСтрока.IDпака;
									стр.crm_КоличествоБронь= НайденСтрока.Количество;
									
									Если ЗначениеЗаполнено(НайденСтрока.Склад) Тогда 
										НайденнаяСтрока = СписокСкладов.Найти(НайденСтрока.Склад, "КодCRM"); 
										Если НайденнаяСтрока <> Неопределено Тогда
											Склад = НайденнаяСтрока.Склад; 
											стр.crm_Склад  		  = Склад;
											стр.Склад			= Склад;
										КонецЕсли;
									КонецЕсли; 
									Если НайденСтрока.Количество <> стр.Количество Тогда 
										НеХватаетКоличество = стр.Количество - НайденСтрока.Количество;
										//добавляем отдельной строкой без брони
										стр.Количество		  = НайденСтрока.Количество;
										стр.КоличествоУпаковок  = НайденСтрока.Количество;
										НовСтр 						= док["Товары"].Добавить();
										новСтр.Номенклатура 		= стр.Номенклатура;
										новСтр.Характеристика 		= стр.Характеристика;
										НовСтр.ВидЦены 				= стр.ВидЦены;
										новСтр.Количество 			= НеХватаетКоличество;
										новСтр.Цена 				= стр.Цена;
										новСтр.Склад 				= стр.Склад;
										новСтр.КоличествоУпаковок 	= новСтр.Количество;
										новСтр.Сумма				= новСтр.Количество * новСтр.Цена;
										новСтр.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.КОбеспечению;
										новСтр.Отменено				= Ложь;
										новСтр.СтавкаНДС			= стр.СтавкаНДС;
										
										Если НовСтр.СтавкаНДС <> Справочники.СтавкиНДС.БезНДС Тогда 
											новСтр.СуммаНДС 		= РасчитатьНДС(новСтр.Сумма, новСтр.СтавкаНДС);
										КонецЕсли;
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;	
					КонецЕсли;				
				КонецЦикла;
				
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УТ11_ВернутьНоменклатуру(xmlIdТовара) Экспорт 
	
	искХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда 
		GUIDОрганизации = Истина;
	Иначе 
		GUIDОрганизации = Ложь;
	КонецЕсли;
	
	//если нет # то это товар без характеристики
	Индекс = Найти(xmlIdТовара, "#");
	
	//сначала отбрасываем гуид организации, затем по старой схеме
	Если GUIDОрганизации Тогда 
		xmlIdТовара = Сред(xmlIdТовара,(Индекс+1));
	КонецЕсли;
	
	Инд = Найти(xmlIdТовара, "#");
	Если Инд = 0 Тогда
		уид 				= Новый УникальныйИдентификатор(xmlIdТовара);
		искНоменклатура		= Справочники.Номенклатура.ПолучитьСсылку(уид);
	Иначе 
		МассивЗначений = crm_RetailCRMОбщий.РазложитьСтрокуВМассивПодстрок(xmlIdТовара, "#");
		
		Если МассивЗначений.Количество() < 2 Тогда
			Сообщить("Невозможно найти товар по id: " + xmlIdТовара);
			Возврат искХарактеристика;
		КонецЕсли;
		
		уид 				= Новый УникальныйИдентификатор(МассивЗначений[0]);
		искНоменклатура		= Справочники.Номенклатура.ПолучитьСсылку(уид);
		уид2 				= Новый УникальныйИдентификатор(МассивЗначений[1]);
		искХарактеристика	= Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(уид2);
			
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("искХарактеристика", 		искХарактеристика);
	СтруктураВозврата.Вставить("искНоменклатура", 			искНоменклатура);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Добавляет в документ услугу "Доставка". Эта номенклатура должна быть предварительно указана в "константах"
//
Процедура УТ11_Услуги(док,стр)
	
	Если стр["СтоимостьДоставки"]<>Неопределено Тогда
		Если ЗначениеЗаполнено(стр["СтоимостьДоставки"]) и стр["СтоимостьДоставки"]<>"0" Тогда  
			стрУслуги = док["Товары"].Добавить();		
			СпособДоставки 					= СокрЛП(стр["СпособДоставки"]);
			стрУслуги.Номенклатура			= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Доставка");
			стрУслуги.Количество			= 1;
			стрУслуги.КоличествоУпаковок 	= стрУслуги.Количество;
			стрУслуги.Цена					= стр["СтоимостьДоставки"];
			стрУслуги.Сумма					= стрУслуги.Количество * стрУслуги.Цена;
			стрУслуги.Содержание			= "Доставка";
			// ЕНС. Надо "Отгрузить", иначе Реализация не видит строку доставки из Заказа
			стрУслуги.ВариантОбеспечения 	= Перечисления.ВариантыОбеспечения.Отгрузить;//НеТребуется;
			стрУслуги.ДатаОтгрузки 			= ТекущаяДата();
			
			стрУслуги.СтавкаНДС 			= Справочники.СтавкиНДС.БезНДС;
			стрУслуги.СуммаСНДС 			= стрУслуги.Сумма;
			
			Если док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС или
				док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда  
				стрУслуги.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;;
			ИначеЕсли док.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда 
				стрУслуги.СтавкаНДС = стрУслуги.Номенклатура.СтавкаНДС;
				стрУслуги.СуммаНДС = РасчитатьНДС (стрУслуги.Сумма, стрУслуги.СтавкаНДС); 
			КонецЕсли;
			
		КонецЕсли;	 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Мод_ОстаткиИЦеныВCRM() Экспорт 
	
	ОбменОстатками 	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгружатьОстатки");
	
	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	Если ОбменОстатками = Неопределено или ОбменОстатками = Ложь Тогда
		Сообщить ("Не установлен флаг выгрузки остатков!");
		Возврат;
	КонецЕсли;
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	//
	
	//версия
	//с 11.5.7.390 изменили наименование ресурса с Распределено на Зарезервировано
	Выше11_5_7_390 = Ложь; 
	Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1157390 Тогда 
		Выше11_5_7_390 = Истина;
	КонецЕсли;
	//для ут 11.5.10 и выше
	Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1151046 Тогда
	//Если Найти(Метаданные.Версия, "11.5.10") > 0 Тогда 
		Выше11_5_7_390 = Истина;	
	КонецЕсли;
    //
	
	crm_Ценообразование = "";
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25") Тогда 
		crm_Ценообразование = "2.5";
	Иначе 
		crm_Ценообразование = "2.0";
	КонецЕсли;

    Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		НесколькоОрганизаций = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	crm_Организации.Ссылка КАК Организация,
		|	crm_Организации.КодМагазинаCRM КАК КодМагазина,
		|	crm_Организации.ВыгружатьОстатки КАК ВыгружатьОстатки
		|ИЗ
		|	Справочник.crm_Организации КАК crm_Организации
		|ГДЕ
		|	crm_Организации.ВыгружатьОстатки
		|	И НЕ crm_Организации.ПометкаУдаления";
		
		СписокМагазинов = Запрос.Выполнить().Выгрузить();
	Иначе
		НесколькоОрганизаций = Ложь;
		СписокМагазинов = Новый ТаблицаЗначений;
		СписокМагазинов.Колонки.Добавить("КодМагазина");
		СписокМагазинов.Колонки.Добавить("Организация");
		СписокМагазинов.Колонки.Добавить("ВыгружатьОстатки");
		НовСтр = СписокМагазинов.Добавить();
		НовСтр.КодМагазина		= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина");
		НовСтр.Организация		= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Организация");
		НовСтр.ВыгружатьОстатки = Истина; 
	КонецЕсли;

	Родитель = "";
	Склады = "";
	//временное решение - запрос для каждого магазана
	//использовать список родителей из всех магазинов
	//при выгрузке из магазина только получать данные по необходимым родителям из запроса
	
	Иерархия = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИерархияНоменклатуры");
	
	Если Иерархия = "Виды номенклатуры" Тогда 
		отбор = "ВидНоменклатуры";		
	Иначе 
		отбор = "Родитель";
	КонецЕсли;
	
	Если СписокМагазинов.Количество() = 0 Тогда 
		Сообщить("Отсутствуют организации, с включенной выгрузкой остатков. Проверьте флаги выгрузки остатков в справочнике crm Организации");
	КонецЕсли;
	
	Для Каждого Магазин Из СписокМагазинов Цикл 
		
		Если НесколькоОрганизаций Тогда
			Если Иерархия = "Виды номенклатуры" Тогда 
				Родитель = Магазин.Организация.КаталогПоВидам.Выгрузить();
				Родитель = ?(ЗначениеЗаполнено(Родитель), Родитель.ВыгрузитьКолонку("Номенклатура"), "");
			Иначе 
				Родитель = Магазин.Организация.Каталог.Выгрузить();
				Родитель = ?(ЗначениеЗаполнено(Родитель), Родитель.ВыгрузитьКолонку("Номенклатура"), "");
			КонецЕсли;	
			Склады   = Магазин.Организация.Склады.Выгрузить();
		Иначе
			Если Иерархия = "Виды номенклатуры" Тогда
				Родитель = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КаталогПоВидам");
			Иначе 
				Родитель = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Каталог");
			КонецЕсли;
			Склады 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склады");
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.Склад КАК Склад,
		|	ТоварыКОтгрузке.КОтгрузкеОстаток КАК Отгружается,
		|	0 КАК ВНаличии,
		|	0 КАК Поступит,
		|	0 КАК ВРезерве,
		|	0 КАК Доступно
		|ПОМЕСТИТЬ ТаблицаДанныхОтчета
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			&ТекДата,";
		
		Если ЗначениеЗаполнено(Родитель) Тогда 
			Запрос.Текст = Запрос.Текст + "
		|			Номенклатура." + отбор + " В ИЕРАРХИИ (&Родитель)
		|				И Склад.Ссылка В (&Склады) {((Номенклатура, Характеристика) В";
		Иначе
			Запрос.Текст = Запрос.Текст + "
		|	 Склад.Ссылка В (&Склады) {((Номенклатура, Характеристика) В";

		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "

		|			    (ВЫБРАТЬ
		|			        ТаблицаОтбора.Номенклатура КАК Номенклатура,
		|			        ТаблицаОтбора.Характеристика КАК Характеристика
		|			    ИЗ
		|			        ОтборПоСегментуНоменклатуры КАК ТаблицаОтбора
		|			    ГДЕ
		|			        ТаблицаОтбора.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)) КАК Поле2, (Склад).*, (Номенклатура).*, (Характеристика).*}) КАК ТоварыКОтгрузке
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнформацияОДоступности.Номенклатура,
		|	ИнформацияОДоступности.Характеристика,
		|	ИнформацияОДоступности.Склад,
		|	NULL,
		|	ВЫБОР
		|		КОГДА ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|			ТОГДА ИнформацияОДоступности.Запас
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)
		|			ТОГДА ИнформацияОДоступности.Запас
		|		ИНАЧЕ 0
		|	КОНЕЦ,";
		Если Выше11_5_7_390 Тогда
			Запрос.Текст = Запрос.Текст + "
		|   ИнформацияОДоступности.Зарезервировано + ВЫБОР";
		Иначе 
			Запрос.Текст = Запрос.Текст + "
		|	ИнформацияОДоступности.Распределено + ВЫБОР";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|		КОГДА ИнформацияОДоступности.Назначение.Заказ <> НЕОПРЕДЕЛЕНО
		|			ТОГДА ИнформацияОДоступности.Свободно
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ИнформацияОДоступности.Назначение.Заказ <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 0
		|		ИНАЧЕ ИнформацияОДоступности.Свободно
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности";
		
		Если ЗначениеЗаполнено(Родитель) Тогда 
			Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ИнформацияОДоступности.Номенклатура." + отбор + " В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		
		|{ГДЕ
		|	ИнформацияОДоступности.Склад.* КАК Склад,
		|	ИнформацияОДоступности.Номенклатура.* КАК Номенклатура,
		|	ИнформацияОДоступности.Характеристика.* КАК Характеристика}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Склад КАК Склад,
		|	СУММА(ЕСТЬNULL(Таблица.Доступно, 0)) КАК Остаток,";
		Если crm_Ценообразование = "2.5" Тогда
			Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0) КАК Цена";
		Иначе
			Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура.Ссылка КАК Номенклатура,
		|		Склады.Ссылка КАК Склад
		|	ИЗ
		|		Справочник.Номенклатура КАК Номенклатура,
		|		Справочник.Склады КАК Склады
		|	ГДЕ
		|		Склады.Ссылка В(&Склады)
		|		И НЕ Номенклатура.ЭтоГруппа
		|		И НЕ Номенклатура.ПометкаУдаления
		|		И Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
		
		Если ЗначениеЗаполнено(Родитель) Тогда 
			Запрос.Текст = Запрос.Текст + "
			|	И Номенклатура." + отбор + " В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;
		
		Если ИдентифТовара = "Артикул" Тогда 
			Запрос.Текст = Запрос.Текст + "
			|	И Номенклатура.Артикул <> """"";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|		) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанныхОтчета КАК Таблица
		|		ПО ВложенныйЗапрос.Номенклатура = Таблица.Номенклатура
		|			И ВложенныйЗапрос.Склад = Таблица.Склад";
		Если crm_Ценообразование = "2.5" Тогда
			Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ТекДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура";
		Иначе 
			Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Склад,";
		Если crm_Ценообразование = "2.5" Тогда
			Запрос.Текст = Запрос.Текст + "
        |	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0)";
		Иначе 
			Запрос.Текст = Запрос.Текст + "	
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура
		|АВТОУПОРЯДОЧИВАНИЕ
		|";
		 	
	
		Если Склады = Неопределено Тогда
			Сообщить("В таблице настроек не заполнена вкладка Склады/Организации", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		Запрос.УстановитьПараметр("Склады",  Склады.ВыгрузитьКолонку("Склад"));
		Запрос.УстановитьПараметр("ВидЦены", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗакупочнаяЦена"));
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		Запрос.УстановитьПараметр("Родитель",Родитель);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Счетчик = 0;
		СтТовар = "";
		предложения = Новый Массив();	
		
		// Склады для обмена
		СклДляОбмена = Склады.Скопировать();
		Для Каждого СтрокаТЧ из СклДляОбмена Цикл
			КодСклада = СокрЛП(СтрокаТЧ.КодCRM);
			Если КодСклада = "" Тогда
				Сообщить("В таблице настроек складов не указан КодCRM для склада: " + СтрокаТЧ.Склад, СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого стр из РезультатЗапроса Цикл    		
			
			//Идентификатор товара
			Если ИдентифТовара = "Код" Тогда
				xmlIdТовара = стр.Номенклатура.Код;
			ИначеЕсли ИдентифТовара = "Артикул" Тогда
				xmlIdТовара	= стр.Номенклатура.Артикул;
			ИначеЕсли ИдентифТовара = "GUID" Тогда
				xmlIdТовара	= стр.Номенклатура.УникальныйИдентификатор();	
			КонецЕсли;
			
			Если xmlIdТовара = Неопределено или xmlIdТовара = "" Тогда 
				Продолжить;
			КонецЕсли;
			
			Отправлен = Ложь; 
			Счетчик = Счетчик + 1; 
			
			Если СокрЛП(xmlIdТовара) <> СтТовар Тогда 	
				Если РезультатЗапроса.Индекс(стр)=0 Тогда 	
					масСкладов = Новый Массив;			
				Иначе
					пред = Новый Соответствие();
					пред.Вставить(offers_id, СтТовар);
					пред.Вставить("stores",масСкладов);
					предложения.Добавить(пред);   						
					масСкладов = Новый Массив;
				КонецЕсли;       		
			КонецЕсли;	
			
			Если Число(стр.Остаток) < 0 Тогда 
				стр.Остаток = 0;	
			КонецЕсли;
			
			Цена = СтрЗаменить(строка(стр.Цена),",","."); 
			Остаток = СтрЗаменить(строка(стр.Остаток),",",".");
			
			// Код склада
			СимвольныйКодСклада = "";
			НайденнаяСтрока = СклДляОбмена.Найти(стр.Склад);
			Если НайденнаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СимвольныйКодСклада = СокрЛП(НайденнаяСтрока.КодCRM);
			Если СимвольныйКодСклада = "" Тогда
				Продолжить;
			КонецЕсли;
			//
			
			скл = Новый Соответствие();
			скл.Вставить("code", СимвольныйКодСклада);
			скл.Вставить("available",СтрЗаменить(строка(Остаток),Символ(160),""));
			скл.Вставить("purchasePrice",СтрЗаменить(строка(Цена),Символ(160),"")); 
			масСкладов.Добавить(скл);
			
			СтТовар = СокрЛП(xmlIdТовара);
			
			КоличествоЗаписей = Счетчик/250;
			Если КоличествоЗаписей = Цел(КоличествоЗаписей) Тогда 
				ОтправитьвCRM(предложения, Магазин);
				предложения.Очистить();
				Отправлен = Истина;
			КонецЕсли;	
			
			Если Счетчик = РезультатЗапроса.количество() и Не Отправлен Тогда 
				
				пред = Новый Соответствие();
				пред.Вставить(offers_id, СтТовар);
				пред.Вставить("stores",масСкладов);
				предложения.Добавить(пред);  
				
				ОтправитьвCRM(предложения, Магазин);
				предложения.Очистить();
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура Мод_ОстаткиИЦеныВCRMХарактеристики() Экспорт 
	
	ОбменОстатками 	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгружатьОстатки");

	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	Если ОбменОстатками = Неопределено или ОбменОстатками = Ложь Тогда
		Сообщить ("Не установлен флаг выгрузки остатков!");
		Возврат;
	КонецЕсли;
	
	//версия
	//с 11.5.7.390 изменили наименование ресурса с Распределено на Зарезервировано
	Выше11_5_7_390 = Ложь; 
	Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1157390 Тогда 
		Выше11_5_7_390 = Истина;
	КонецЕсли;
	//для ут 11.5.10 и выше
	Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1151046 Тогда
	//Если Найти(Метаданные.Версия, "11.5.10") > 0 Тогда 
		Выше11_5_7_390 = Истина;	
	КонецЕсли;
    //
    crm_Ценообразование = "";
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25") Тогда 
		crm_Ценообразование = "2.5";
	Иначе 
		crm_Ценообразование = "2.0";
	КонецЕсли;
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		НесколькоОрганизаций = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	crm_Организации.Ссылка КАК ОрганизацияCRM,
		|	crm_Организации.КодМагазинаCRM КАК КодМагазина,
		|	crm_Организации.ВыгружатьОстатки КАК ВыгружатьОстатки,
		|	crm_Организации.Организация КАК Организация
		|ИЗ
		|	Справочник.crm_Организации КАК crm_Организации
		|ГДЕ
		|	crm_Организации.ВыгружатьОстатки
		|	И НЕ crm_Организации.ПометкаУдаления";
		
		СписокМагазинов = Запрос.Выполнить().Выгрузить();
	Иначе
		НесколькоОрганизаций = Ложь;
		СписокМагазинов = Новый ТаблицаЗначений;
		СписокМагазинов.Колонки.Добавить("КодМагазина");
		СписокМагазинов.Колонки.Добавить("Организация");
		СписокМагазинов.Колонки.Добавить("ВыгружатьОстатки");
		НовСтр = СписокМагазинов.Добавить();
		НовСтр.КодМагазина		= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина");
		НовСтр.Организация	    = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Организация");
		НовСтр.ВыгружатьОстатки = Истина; 
	КонецЕсли;

	Родитель = "";
	Склады = "";
	
	//временное решение - запрос для каждого магазана
	//использовать список родителей из всех магазинов
	//при выгрузке из магазина только получать данные по необходимым родителям из запроса 
	
	Иерархия = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИерархияНоменклатуры");
	
	Если Иерархия = "Виды номенклатуры" Тогда 
		отбор = "ВидНоменклатуры";		
	Иначе 
		отбор = "Родитель";
	КонецЕсли;
	
	Если СписокМагазинов.Количество() = 0 Тогда 
		Сообщить("Отсутствуют организации, с включенной выгрузкой остатков. Проверьте флаги выгрузки остатков в справочнике crm Организации");
	КонецЕсли;
	
	Для Каждого Магазин Из СписокМагазинов Цикл 
		
		Если НесколькоОрганизаций Тогда
			Если Иерархия = "Виды номенклатуры" Тогда 
				Родитель = Магазин.ОрганизацияCRM.КаталогПоВидам.Выгрузить();
				Родитель = ?(ЗначениеЗаполнено(Родитель), Родитель.ВыгрузитьКолонку("Номенклатура"), "");
			Иначе
				Родитель = Магазин.ОрганизацияCRM.Каталог.Выгрузить();
				Родитель = ?(ЗначениеЗаполнено(Родитель), Родитель.ВыгрузитьКолонку("Номенклатура"), "");
			КонецЕсли;
			Склады   = Магазин.ОрганизацияCRM.Склады.Выгрузить();
		Иначе
			Если Иерархия = "Виды номенклатуры" Тогда
				Родитель = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КаталогПоВидам");
			Иначе 
				Родитель = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Каталог");
			КонецЕсли;
			Склады 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склады");
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузке.Склад КАК Склад,
		|	ТоварыКОтгрузке.КОтгрузкеОстаток КАК Отгружается,
		|	0 КАК ВНаличии,
		|	0 КАК Поступит,
		|	0 КАК ВРезерве,
		|	0 КАК Доступно
		|ПОМЕСТИТЬ ТаблицаДанныхОтчета
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
		|			&ТекДата,";
		
		Если ЗначениеЗаполнено(Родитель) Тогда 
			Запрос.Текст = Запрос.Текст + "
		|			Номенклатура." + отбор + " В ИЕРАРХИИ (&Родитель)
		|				И Склад.Ссылка В (&Склады) {((Номенклатура, Характеристика) В";
		Иначе
			Запрос.Текст = Запрос.Текст + "
		|	 Склад.Ссылка В (&Склады) {((Номенклатура, Характеристика) В";

		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		
		|			    (ВЫБРАТЬ
		|			        ТаблицаОтбора.Номенклатура КАК Номенклатура,
		|			        ТаблицаОтбора.Характеристика КАК Характеристика
		|			    ИЗ
		|			        ОтборПоСегментуНоменклатуры КАК ТаблицаОтбора
		|			    ГДЕ
		|			        ТаблицаОтбора.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)) КАК Поле2, (Склад).*, (Номенклатура).*, (Характеристика).*}) КАК ТоварыКОтгрузке
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИнформацияОДоступности.Номенклатура,
		|	ИнформацияОДоступности.Характеристика,
		|	ИнформацияОДоступности.Склад,
		|	NULL,
		|	ВЫБОР
		|		КОГДА ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
		|			ТОГДА ИнформацияОДоступности.Запас
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)
		|			ТОГДА ИнформацияОДоступности.Запас
		|		ИНАЧЕ 0
		|	КОНЕЦ,";
		Если Выше11_5_7_390 Тогда
			Запрос.Текст = Запрос.Текст + "
		|   ИнформацияОДоступности.Зарезервировано + ВЫБОР";
		Иначе 
			Запрос.Текст = Запрос.Текст + "
		|	ИнформацияОДоступности.Распределено + ВЫБОР";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		
		|		КОГДА ИнформацияОДоступности.Назначение.Заказ <> НЕОПРЕДЕЛЕНО
		|			ТОГДА ИнформацияОДоступности.Свободно
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ИнформацияОДоступности.Назначение.Заказ <> НЕОПРЕДЕЛЕНО
		|			ТОГДА 0
		|		ИНАЧЕ ИнформацияОДоступности.Свободно
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности"; 
		
		Если ЗначениеЗаполнено(Родитель) Тогда 
			Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	ИнформацияОДоступности.Номенклатура." + отбор + " В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		
		|{ГДЕ
		|	ИнформацияОДоступности.Склад.* КАК Склад,
		|	ИнформацияОДоступности.Номенклатура.* КАК Номенклатура,
		|	ИнформацияОДоступности.Характеристика.* КАК Характеристика}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	ВложенныйЗапрос.Склад КАК Склад,
		|	СУММА(ЕСТЬNULL(Таблица.Доступно, 0)) КАК Остаток,";
		
		Если crm_Ценообразование = "2.5" Тогда
			Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0) КАК Цена";
		Иначе
			Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
        		
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура.Ссылка КАК Номенклатура,
		|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|		Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Владелец, 1) КАК ВладелецХар,
		|		Склады.Ссылка КАК Склад
		|	ИЗ
		|		Справочник.Номенклатура КАК Номенклатура
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|			ПО (ВЫБОР
		|					КОГДА Номенклатура.ИспользованиеХарактеристик = &Индивидуал
		|						ТОГДА Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
		|					ИНАЧЕ ВЫБОР
		|							КОГДА Номенклатура.ИспользованиеХарактеристик = &ОбщиеВид
		|								ТОГДА Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
		|							ИНАЧЕ ВЫБОР
		|									КОГДА Номенклатура.ИспользованиеХарактеристик = &ОбщиеДрВид
		|										ТОГДА Номенклатура.ВидНоменклатуры.ВладелецХарактеристик = ХарактеристикиНоменклатуры.Владелец
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ),
		|		Справочник.Склады КАК Склады
		|	ГДЕ
		|		НЕ Номенклатура.ПометкаУдаления
		|		И НЕ Номенклатура.ЭтоГруппа
		|		И Склады.Ссылка В(&Склады)";
		Если ЗначениеЗаполнено(Родитель) Тогда 
			Запрос.Текст = Запрос.Текст + "
			|	И Номенклатура." + отбор + " В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура.Ссылка,
		|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Владелец, 1),
		|		Номенклатура.ИспользованиеХарактеристик,
		|		Склады.Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанныхОтчета КАК Таблица
		|		ПО ВложенныйЗапрос.Номенклатура = Таблица.Номенклатура
		|			И ВложенныйЗапрос.Характеристика = Таблица.Характеристика
		|			И ВложенныйЗапрос.Склад = Таблица.Склад";
		Если crm_Ценообразование = "2.5" Тогда
			Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ТекДата, ВидЦены = &ЗакупочнаяЦена) КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|			И ВложенныйЗапрос.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = ЦеныНоменклатуры25СрезПоследних.ХарактеристикаЦО";
		Иначе 
			Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекДата, ВидЦены = &ЗакупочнаяЦена) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВложенныйЗапрос.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Склад,
		|	ВложенныйЗапрос.Характеристика,";
		
		Если crm_Ценообразование = "2.5" Тогда
			Запрос.Текст = Запрос.Текст + "
        |	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0)";
		Иначе 
			Запрос.Текст = Запрос.Текст + "	
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "

		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		
		Склады = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склады");
		Если Склады = Неопределено Тогда 
			Сообщить("В таблице настроек не заполнена вкладка Склады/Организации", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		Для Каждого стрСкл из Склады Цикл
			Если стрСкл.Склад.ЭтоГруппа = Ложь Тогда 
				Продолжить;
			ИначеЕсли стрСкл.Склад.ЭтоГруппа = Истина Тогда
				Склады.Удалить(стрСкл);	
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Склады",  Склады.ВыгрузитьКолонку("Склад"));
		Запрос.УстановитьПараметр("ЗакупочнаяЦена", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗакупочнаяЦена"));
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		Запрос.УстановитьПараметр("Индивидуал",  Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
		Запрос.УстановитьПараметр("ОбщиеВид",  	 Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
		Запрос.УстановитьПараметр("ОбщиеДрВид",  Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
		Запрос.УстановитьПараметр("Родитель",  	Родитель);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		РезультатЗапроса.Колонки.Добавить("ИД");
		
		Для каждого СтрокаТЗ Из РезультатЗапроса Цикл
			Если ЗначениеЗаполнено(СтрокаТЗ.Характеристика) Тогда
				СтрокаТЗ.ИД = СокрЛП(СтрокаТЗ.Номенклатура.УникальныйИдентификатор()) + "#" + СокрЛП(СтрокаТЗ.Характеристика.УникальныйИдентификатор());
			Иначе 
				СтрокаТЗ.ИД = СокрЛП(СтрокаТЗ.Номенклатура.УникальныйИдентификатор());
			КонецЕсли;
			
			Если  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда 
				СтрокаТЗ.ИД = СокрЛП(" " + Магазин.Организация.УникальныйИдентификатор() + "#" + СтрокаТЗ.ИД);
			КонецЕсли;
		КонецЦикла; 
		
		// Склады для обмена
		СклДляОбмена = Склады.Скопировать();
		
		Для Каждого СтрокаТЧ из СклДляОбмена Цикл
			КодСклада = СокрЛП(СтрокаТЧ.КодCRM);
			Если КодСклада = "" Тогда
				Сообщить("В таблице настроек складов не указан КодCRM для склада: " + СтрокаТЧ.Склад, СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		Счетчик = 0;
		СтТовар = "";
		предложения = Новый Массив();
		
		Для каждого стр из РезультатЗапроса Цикл    		
			
			xmlIdТовара	= СокрЛП(стр.ИД);
			
			Отправлен = Ложь; 
			Счетчик = Счетчик + 1; 
			
			Если СокрЛП(xmlIdТовара) <> СтТовар Тогда 	
				Если РезультатЗапроса.Индекс(стр)=0 Тогда 	
					масСкладов = Новый Массив;			
				Иначе
					пред = Новый Соответствие();
					пред.Вставить(offers_id, СтТовар);
					пред.Вставить("stores",масСкладов);
					предложения.Добавить(пред);   						
					масСкладов = Новый Массив;
				КонецЕсли;       		
			КонецЕсли;	
			
			Если Число(стр.Остаток) < 0 Тогда 
				стр.Остаток = 0;	
			КонецЕсли;
			
			Цена = СтрЗаменить(строка(стр.Цена),",","."); 
			Остаток = СтрЗаменить(строка(стр.Остаток),",",".");
			
			// Код склада
			СимвольныйКодСклада = "";
			НайденнаяСтрока = СклДляОбмена.Найти(стр.Склад);
			Если НайденнаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СимвольныйКодСклада = СокрЛП(НайденнаяСтрока.КодCRM);
			Если СимвольныйКодСклада = "" Тогда
				Продолжить;
			КонецЕсли;
			//
			
			скл = Новый Соответствие();
			скл.Вставить("code", СимвольныйКодСклада);
			скл.Вставить("available",СтрЗаменить(строка(Остаток),Символ(160),""));
			скл.Вставить("purchasePrice",СтрЗаменить(строка(Цена),Символ(160),"")); 
			масСкладов.Добавить(скл);
			
			СтТовар = СокрЛП(xmlIdТовара);
			
			КоличествоЗаписей = Счетчик/250;
			Если КоличествоЗаписей = Цел(КоличествоЗаписей) Тогда 
				ОтправитьвCRM(предложения, Магазин);
				предложения.Очистить();
				Отправлен = Истина;
			КонецЕсли;	
			
			Если Счетчик = РезультатЗапроса.количество() и Не Отправлен Тогда 
				
				пред = Новый Соответствие();
				пред.Вставить(offers_id, СтТовар);
				пред.Вставить("stores",масСкладов);
				предложения.Добавить(пред);  
				
				ОтправитьвCRM(предложения, Магазин);
				предложения.Очистить();
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьвCRM(предложения, Магазин)	
	
	переменные = Новый Соответствие();
	переменные.Вставить("offers",crm_RetailCRMОбщий.JsonTest(предложения, Новый ЗаписьJSON));	
	переменные.Вставить("site",  Магазин.КодМагазина);
	переменные.Вставить("apiKey",crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));	
	
	Попытка
		ответ = crm_RetailCRMОбщий.HTTPзапросPOST(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера")
		,"/api/v5/store/inventories/upload",переменные);
		
		Сообщить(ответ);
		
		РезультатВыполнения = crm_RetailCRMОбщий.UnJSONТест(ответ);

		Если РезультатВыполнения["success"] = Истина Тогда 
			сообщить("Остатки выгружены " + ТекущаяДата());
		Иначе
			сообщить("Остатки не выгружены. Ошибка в работе API" + ОписаниеОшибки());
			сообщить(Ответ);
			Возврат;
		КонецЕсли;
		
	Исключение
		сообщить("Критическая ошибка работы API в модуле обработки." +
		Символы.ПС +  "Одним из решений является Админка - Настройка - Склад " + 
		Символы.ПС + " (Включить бронирование остатков и включить редактирование остатков)");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

Процедура ОтправитьТипыЦенВCRM(предложения)	
	
	переменные = Новый Соответствие();
	переменные.Вставить("prices",crm_RetailCRMОбщий.JsonTest(предложения,Новый ЗаписьJSON));
    переменные.Вставить("apiKey",crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));	
	
	Попытка
		ответ = crm_RetailCRMОбщий.HTTPзапросPOST(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера")
		,"/api/v5/store/prices/upload",переменные);
		
		сообщить(ответ);
		
		результатВыполнения = crm_RetailCRMОбщий.UnJSONТест(ответ);
		
		Если результатВыполнения["success"] = Истина Тогда 
			сообщить("Типы цен выгружены " + ТекущаяДата());
		Иначе
			сообщить("Типы цен не выгружены " + ОписаниеОшибки());
			сообщить(Ответ);
			Возврат;
		КонецЕсли;
		
	Исключение
		сообщить("Критическая ошибка работы API в модуле обработки." +
		Символы.ПС +  "Одной из возможных причин является отсутствие типов цен в RetailCRM " + 
		Символы.ПС + " или несоответствие символьных кодов типов цен в 1С и RetailCRM");
		Сообщить(Ответ);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры	

Функция УТ11_ЗапросДляКаталога(фильтр)
	
	crm_Ценообразование = "";
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25") Тогда 
		crm_Ценообразование = "2.5";
	Иначе 
		crm_Ценообразование = "2.0";
	КонецЕсли;
	
	Если crm_Ценообразование = "2.0" Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Ссылка,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаПродажи,
		|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)) КАК Остаток
		|ПОМЕСТИТЬ ВтИтог
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура.Ссылка КАК Номенклатура
		|	ИЗ
		|		Справочник.Номенклатура КАК Номенклатура
		|	ГДЕ
		|		НЕ Номенклатура.ПометкаУдаления
		|		И НЕ Номенклатура.ЭтоГруппа";
		
		Если ЗначениеЗаполнено(фильтр) Тогда 
			Запрос.Текст = Запрос.Текст + " 
			|		И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура.Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЦенаПродажи
		|					 " + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура.Родитель В ИЕРАРХИИ (&Родитель)", "") + ") КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ТекДата, " + ?(ЗначениеЗаполнено(фильтр),"Номенклатура.Родитель В ИЕРАРХИИ (&Родитель)", "") + ") КАК ТоварыНаСкладахОстатки
		|		ПО ВложенныйЗапрос.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ вт_штрихкоды
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура В
		|			(ВЫБРАТЬ
		|				ВтИтог.Ссылка КАК Ссылка
		|			ИЗ
		|				ВтИтог КАК ВтИтог)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИтог.Ссылка КАК Номенклатура,
		|	ВтИтог.Остаток КАК Остаток,
		|	ВтИтог.ЦенаПродажи КАК ЦенаПродажи,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаЗакупа,
		|	ЕСТЬNULL(вт_штрихкоды.Штрихкод, 0) КАК Штрихкод,
		|	ЕСТЬNULL(вт_штрихкоды.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдИзм
		|ИЗ
		|	ВтИтог КАК ВтИтог
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЦенаЗакупа
		|					" + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура.Родитель В ИЕРАРХИИ (&Родитель)", "") + ") КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВтИтог.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_штрихкоды КАК вт_штрихкоды
		|		ПО (ВЫБОР
		|				КОГДА вт_штрихкоды.Упаковка.ЕдиницаИзмерения ЕСТЬ NULL
		|					ТОГДА ВтИтог.Ссылка = вт_штрихкоды.Номенклатура
		|				ИНАЧЕ ВтИтог.Ссылка = вт_штрихкоды.Номенклатура
		|						И ВтИтог.Ссылка.ЕдиницаИзмерения = вт_штрихкоды.Упаковка.ЕдиницаИзмерения
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВтИтог.Ссылка.Наименование
		|ИТОГИ
		|	МАКСИМУМ(Остаток),
		|	МАКСИМУМ(ЦенаПродажи),
		|	МАКСИМУМ(ЦенаЗакупа),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Штрихкод),
		|	МАКСИМУМ(ЕдИзм)
		|ПО
		|	Номенклатура";
		//
	Иначе 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Ссылка,
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0) КАК ЦенаПродажи,
		|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)) КАК Остаток
		|ПОМЕСТИТЬ ВтИтог
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура.Ссылка КАК Номенклатура
		|	ИЗ
		|		Справочник.Номенклатура КАК Номенклатура
		|	ГДЕ
		|		НЕ Номенклатура.ПометкаУдаления
		|		И НЕ Номенклатура.ЭтоГруппа";
		
		Если ЗначениеЗаполнено(фильтр) Тогда 
			Запрос.Текст = Запрос.Текст + " 
			|		И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура.Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЦенаПродажи
		|					 " + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура.Родитель В ИЕРАРХИИ (&Родитель)", "") + ") КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ТекДата, " + ?(ЗначениеЗаполнено(фильтр),"Номенклатура.Родитель В ИЕРАРХИИ (&Родитель)", "") + ") КАК ТоварыНаСкладахОстатки
		|		ПО ВложенныйЗапрос.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ вт_штрихкоды
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура В
		|			(ВЫБРАТЬ
		|				ВтИтог.Ссылка КАК Ссылка
		|			ИЗ
		|				ВтИтог КАК ВтИтог)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИтог.Ссылка КАК Номенклатура,
		|	ВтИтог.Остаток КАК Остаток,
		|	ВтИтог.ЦенаПродажи КАК ЦенаПродажи,
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0) КАК ЦенаЗакупа,
		|	ЕСТЬNULL(вт_штрихкоды.Штрихкод, 0) КАК Штрихкод,
		|	ЕСТЬNULL(вт_штрихкоды.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдИзм
		|ИЗ
		|	ВтИтог КАК ВтИтог
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЦенаЗакупа
		|					" + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура.Родитель В ИЕРАРХИИ (&Родитель)", "") + ") КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ВтИтог.Ссылка = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_штрихкоды КАК вт_штрихкоды
		|		ПО (ВЫБОР
		|				КОГДА вт_штрихкоды.Упаковка.ЕдиницаИзмерения ЕСТЬ NULL
		|					ТОГДА ВтИтог.Ссылка = вт_штрихкоды.Номенклатура
		|				ИНАЧЕ ВтИтог.Ссылка = вт_штрихкоды.Номенклатура
		|						И ВтИтог.Ссылка.ЕдиницаИзмерения = вт_штрихкоды.Упаковка.ЕдиницаИзмерения
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВтИтог.Ссылка.Наименование
		|ИТОГИ
		|	МАКСИМУМ(Остаток),
		|	МАКСИМУМ(ЦенаПродажи),
		|	МАКСИМУМ(ЦенаЗакупа),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Штрихкод),
		|	МАКСИМУМ(ЕдИзм)
		|ПО
		|	Номенклатура";
		//

	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЦенаЗакупа", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗакупочнаяЦена"));
	Запрос.УстановитьПараметр("ЦенаПродажи", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЦенаПродажи"));
	
	Запрос.УстановитьПараметр("Родитель", фильтр);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());

	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	//групповые итоги
	Выборка = Результат.Выбрать(способВыборки);
	
	Возврат Выборка;
	
КонецФункции

Функция УТ11_ЗапросДляКаталогаХарактеристики(фильтр)
	
	crm_Ценообразование = "";
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25") Тогда 
		crm_Ценообразование = "2.5";
	Иначе 
		crm_Ценообразование = "2.0";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Остаток,";
	
	Если crm_Ценообразование = "2.5" Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0) КАК ЦенаЗакупа";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаЗакупа";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	
	|ПОМЕСТИТЬ ВтИтог
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Номенклатура,
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|		Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Владелец, 1) КАК ВладелецХар
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО (ВЫБОР
	|					КОГДА Номенклатура.ИспользованиеХарактеристик = &Индивидуал
	|						ТОГДА Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Номенклатура.ИспользованиеХарактеристик = &ОбщиеВид
	|								ТОГДА Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	|							ИНАЧЕ ВЫБОР
	|									КОГДА Номенклатура.ИспользованиеХарактеристик = &ОбщиеДрВид
	|										ТОГДА Номенклатура.ВидНоменклатуры.ВладелецХарактеристик = ХарактеристикиНоменклатуры.Владелец
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОНЕЦ)
	|	ГДЕ
	|		НЕ Номенклатура.ПометкаУдаления
	|		И НЕ Номенклатура.ЭтоГруппа";
	
	Если ЗначениеЗаполнено(фильтр) Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|		И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура.Ссылка,
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Владелец, 1),
	|		Номенклатура.ИспользованиеХарактеристик) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ТекДата, " + ?(ЗначениеЗаполнено(фильтр),"Номенклатура.Родитель В ИЕРАРХИИ (&Родитель)", "") + ") КАК ТоварыНаСкладахОстатки
	|		ПО ВложенныйЗапрос.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И ВложенныйЗапрос.Характеристика = ТоварыНаСкладахОстатки.Характеристика";
	
	Если crm_Ценообразование = "2.5" Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЗакупочнаяЦена
		|					" + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура В ИЕРАРХИИ (&Родитель)","") + ") КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|			И ВложенныйЗапрос.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = ЦеныНоменклатуры25СрезПоследних.ХарактеристикаЦО";
	Иначе                                                                 
		
		Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЗакупочнаяЦена
		|					" + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура В ИЕРАРХИИ (&Родитель)","") + ") КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВложенныйЗапрос.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0),";
	
	Если crm_Ценообразование = "2.5" Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0)";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "

	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ вт_штрихкоды
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВтИтог.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ВтИтог КАК ВтИтог)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтог.Номенклатура КАК Номенклатура,
	|	ВтИтог.Характеристика КАК Характеристика,
	|	ВтИтог.Остаток КАК Остаток,
	|	" + ?(crm_Ценообразование = "2.5", "ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0)","ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)") + " КАК ЦенаПродажи,
	|	ВтИтог.ЦенаЗакупа КАК ЦенаЗакупа,
	|	ЕСТЬNULL(вт_штрихкоды.Штрихкод, 0) КАК Штрихкод,
	|	ЕСТЬNULL(вт_штрихкоды.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка
	|ИЗ
	|	ВтИтог КАК ВтИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ?(crm_Ценообразование = "2.5", "РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(","РегистрСведений.ЦеныНоменклатуры.СрезПоследних(") + "
	|				&ТекДата,
	|				ВидЦены = &ЦенаПродажи
	|					" + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура В ИЕРАРХИИ (&Родитель)","") + ")
	|	КАК " + ?(crm_Ценообразование = "2.5", "ЦеныНоменклатуры25СрезПоследних","ЦеныНоменклатурыСрезПоследних") + "";
	
	Если crm_Ценообразование = "2.5" Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|		ПО ВтИтог.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|			И ВтИтог.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = ЦеныНоменклатуры25СрезПоследних.ХарактеристикаЦО";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|		ПО ВтИтог.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВтИтог.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "

	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_штрихкоды КАК вт_штрихкоды
	|		ПО (ВЫБОР
	|				КОГДА вт_штрихкоды.Упаковка.ЕдиницаИзмерения ЕСТЬ NULL
	|					ТОГДА ВЫБОР
	|							КОГДА ВтИтог.Характеристика ЕСТЬ NULL
	|								ТОГДА ВтИтог.Номенклатура = вт_штрихкоды.Номенклатура
	|							ИНАЧЕ ВтИтог.Номенклатура = вт_штрихкоды.Номенклатура
	|									И ВтИтог.Характеристика = вт_штрихкоды.Характеристика
	|						КОНЕЦ
	|				ИНАЧЕ ВтИтог.Номенклатура = вт_штрихкоды.Номенклатура
	|						И ВтИтог.Характеристика = вт_штрихкоды.Характеристика
	|						И ВтИтог.Номенклатура.ЕдиницаИзмерения = вт_штрихкоды.Упаковка.ЕдиницаИзмерения
	|			КОНЕЦ)
	|ИТОГИ
	|	МАКСИМУМ(Остаток),
	|	МАКСИМУМ(ЦенаПродажи),
	|	МАКСИМУМ(ЦенаЗакупа),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Штрихкод),
	|	МАКСИМУМ(Упаковка)
	|ПО
	|	Номенклатура,
	|	Характеристика";
	//
	Запрос.УстановитьПараметр("ЗакупочнаяЦена", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗакупочнаяЦена")); 
	Запрос.УстановитьПараметр("ЦенаПродажи", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЦенаПродажи"));
	Запрос.УстановитьПараметр("Индивидуал", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
	Запрос.УстановитьПараметр("ОбщиеВид", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
	Запрос.УстановитьПараметр("ОбщиеДрВид", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
	Запрос.УстановитьПараметр("Родитель", фильтр);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	//групповые итоги
	Выборка = Результат.Выбрать(способВыборки);
	
	Возврат Выборка;
	
КонецФункции

Функция УТ11_ЗапросДляКаталогаПоВидам(фильтр)
	
	crm_Ценообразование = "";
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25") Тогда 
		crm_Ценообразование = "2.5";
	Иначе 
		crm_Ценообразование = "2.0";
	КонецЕсли;
	
	Если crm_Ценообразование = "2.0" Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Ссылка,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаПродажи,
		|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)) КАК Остаток
		|ПОМЕСТИТЬ ВтИтог
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура.Ссылка КАК Номенклатура
		|	ИЗ
		|		Справочник.Номенклатура КАК Номенклатура
		|	ГДЕ
		|		НЕ Номенклатура.ПометкаУдаления
		|		И НЕ Номенклатура.ЭтоГруппа";
		
		Если ЗначениеЗаполнено(фильтр) Тогда 
			Запрос.Текст = Запрос.Текст + " 
			|		И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатуры)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура.Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЦенаПродажи
		|					 " + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&ВидНоменклатуры)", "") + ") КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ТекДата, " + ?(ЗначениеЗаполнено(фильтр),"Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&ВидНоменклатуры)", "") + ") КАК ТоварыНаСкладахОстатки
		|		ПО ВложенныйЗапрос.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ вт_штрихкоды
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура В
		|			(ВЫБРАТЬ
		|				ВтИтог.Ссылка КАК Ссылка
		|			ИЗ
		|				ВтИтог КАК ВтИтог)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИтог.Ссылка КАК Номенклатура,
		|	ВтИтог.Остаток КАК Остаток,
		|	ВтИтог.ЦенаПродажи КАК ЦенаПродажи,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаЗакупа,
		|	ЕСТЬNULL(вт_штрихкоды.Штрихкод, 0) КАК Штрихкод,
		|	ЕСТЬNULL(вт_штрихкоды.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдИзм
		|ИЗ
		|	ВтИтог КАК ВтИтог
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЦенаЗакупа
		|					" + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&ВидНоменклатуры)", "") + ") КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВтИтог.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_штрихкоды КАК вт_штрихкоды
		|		ПО (ВЫБОР
		|				КОГДА вт_штрихкоды.Упаковка.ЕдиницаИзмерения ЕСТЬ NULL
		|					ТОГДА ВтИтог.Ссылка = вт_штрихкоды.Номенклатура
		|				ИНАЧЕ ВтИтог.Ссылка = вт_штрихкоды.Номенклатура
		|						И ВтИтог.Ссылка.ЕдиницаИзмерения = вт_штрихкоды.Упаковка.ЕдиницаИзмерения
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВтИтог.Ссылка.Наименование
		|ИТОГИ
		|	МАКСИМУМ(Остаток),
		|	МАКСИМУМ(ЦенаПродажи),
		|	МАКСИМУМ(ЦенаЗакупа),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Штрихкод),
		|	МАКСИМУМ(ЕдИзм)
		|ПО
		|	Номенклатура";
		//
	Иначе 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Ссылка,
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0) КАК ЦенаПродажи,
		|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)) КАК Остаток
		|ПОМЕСТИТЬ ВтИтог
		|ИЗ
		|	(ВЫБРАТЬ
		|		Номенклатура.Ссылка КАК Номенклатура
		|	ИЗ
		|		Справочник.Номенклатура КАК Номенклатура
		|	ГДЕ
		|		НЕ Номенклатура.ПометкаУдаления
		|		И НЕ Номенклатура.ЭтоГруппа";
		
		Если ЗначениеЗаполнено(фильтр) Тогда 
			Запрос.Текст = Запрос.Текст + " 
			|		И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатуры)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Номенклатура.Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЦенаПродажи
		|					 " + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&ВидНоменклатуры)", "") + ") КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ТекДата, " + ?(ЗначениеЗаполнено(фильтр),"Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&ВидНоменклатуры)", "") + ") КАК ТоварыНаСкладахОстатки
		|		ПО ВложенныйЗапрос.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Номенклатура,
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ вт_штрихкоды
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Номенклатура В
		|			(ВЫБРАТЬ
		|				ВтИтог.Ссылка КАК Ссылка
		|			ИЗ
		|				ВтИтог КАК ВтИтог)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИтог.Ссылка КАК Номенклатура,
		|	ВтИтог.Остаток КАК Остаток,
		|	ВтИтог.ЦенаПродажи КАК ЦенаПродажи,
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0) КАК ЦенаЗакупа,
		|	ЕСТЬNULL(вт_штрихкоды.Штрихкод, 0) КАК Штрихкод,
		|	ЕСТЬNULL(вт_штрихкоды.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдИзм
		|ИЗ
		|	ВтИтог КАК ВтИтог
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЦенаЗакупа
		|					" + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&ВидНоменклатуры)", "") + ") КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ВтИтог.Ссылка = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_штрихкоды КАК вт_штрихкоды
		|		ПО (ВЫБОР
		|				КОГДА вт_штрихкоды.Упаковка.ЕдиницаИзмерения ЕСТЬ NULL
		|					ТОГДА ВтИтог.Ссылка = вт_штрихкоды.Номенклатура
		|				ИНАЧЕ ВтИтог.Ссылка = вт_штрихкоды.Номенклатура
		|						И ВтИтог.Ссылка.ЕдиницаИзмерения = вт_штрихкоды.Упаковка.ЕдиницаИзмерения
		|			КОНЕЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВтИтог.Ссылка.Наименование
		|ИТОГИ
		|	МАКСИМУМ(Остаток),
		|	МАКСИМУМ(ЦенаПродажи),
		|	МАКСИМУМ(ЦенаЗакупа),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Штрихкод),
		|	МАКСИМУМ(ЕдИзм)
		|ПО
		|	Номенклатура";
		//

	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЦенаЗакупа", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗакупочнаяЦена"));
	Запрос.УстановитьПараметр("ЦенаПродажи", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЦенаПродажи"));
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", фильтр);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());

	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	//групповые итоги
	Выборка = Результат.Выбрать(способВыборки);
	
	Возврат Выборка;
	
КонецФункции

Функция УТ11_ЗапросДляКаталогаХарактеристикиПоВидам(фильтр)
	
	crm_Ценообразование = "";
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25") Тогда 
		crm_Ценообразование = "2.5";
	Иначе 
		crm_Ценообразование = "2.0";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Остаток,";
	
	Если crm_Ценообразование = "2.5" Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0) КАК ЦенаЗакупа";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаЗакупа";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	
	|ПОМЕСТИТЬ ВтИтог
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Номенклатура,
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|		Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Владелец, 1) КАК ВладелецХар
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО (ВЫБОР
	|					КОГДА Номенклатура.ИспользованиеХарактеристик = &Индивидуал
	|						ТОГДА Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Номенклатура.ИспользованиеХарактеристик = &ОбщиеВид
	|								ТОГДА Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	|							ИНАЧЕ ВЫБОР
	|									КОГДА Номенклатура.ИспользованиеХарактеристик = &ОбщиеДрВид
	|										ТОГДА Номенклатура.ВидНоменклатуры.ВладелецХарактеристик = ХарактеристикиНоменклатуры.Владелец
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОНЕЦ)
	|	ГДЕ
	|		НЕ Номенклатура.ПометкаУдаления
	|		И НЕ Номенклатура.ЭтоГруппа";
	
	Если ЗначениеЗаполнено(фильтр) Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|		И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ(&ВидНоменклатуры)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура.Ссылка,
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Владелец, 1),
	|		Номенклатура.ИспользованиеХарактеристик) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(&ТекДата, " + ?(ЗначениеЗаполнено(фильтр),"Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&ВидНоменклатуры)", "") + ") КАК ТоварыНаСкладахОстатки
	|		ПО ВложенныйЗапрос.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И ВложенныйЗапрос.Характеристика = ТоварыНаСкладахОстатки.Характеристика";
	
	Если crm_Ценообразование = "2.5" Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЗакупочнаяЦена
		|					" + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&ВидНоменклатуры)","") + ") КАК ЦеныНоменклатуры25СрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|			И ВложенныйЗапрос.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = ЦеныНоменклатуры25СрезПоследних.ХарактеристикаЦО";
	Иначе                                                                 
		
		Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&ТекДата,
		|				ВидЦены = &ЗакупочнаяЦена
		|					" + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&ВидНоменклатуры)","") + ") КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВложенныйЗапрос.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВложенныйЗапрос.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0),";
	
	Если crm_Ценообразование = "2.5" Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0)";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "

	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ вт_штрихкоды
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВтИтог.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ВтИтог КАК ВтИтог)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИтог.Номенклатура КАК Номенклатура,
	|	ВтИтог.Характеристика КАК Характеристика,
	|	ВтИтог.Остаток КАК Остаток,
	|	" + ?(crm_Ценообразование = "2.5", "ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0)","ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)") + " КАК ЦенаПродажи,
	|	ВтИтог.ЦенаЗакупа КАК ЦенаЗакупа,
	|	ЕСТЬNULL(вт_штрихкоды.Штрихкод, 0) КАК Штрихкод,
	|	ЕСТЬNULL(вт_штрихкоды.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка
	|ИЗ
	|	ВтИтог КАК ВтИтог
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ?(crm_Ценообразование = "2.5", "РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(","РегистрСведений.ЦеныНоменклатуры.СрезПоследних(") + "
	|				&ТекДата,
	|				ВидЦены = &ЦенаПродажи
	|					" + ?(ЗначениеЗаполнено(фильтр),"И Номенклатура.ВидНоменклатуры В ИЕРАРХИИ (&ВидНоменклатуры)","") + ")
	|	КАК " + ?(crm_Ценообразование = "2.5", "ЦеныНоменклатуры25СрезПоследних","ЦеныНоменклатурыСрезПоследних") + "";
	
	Если crm_Ценообразование = "2.5" Тогда 
		Запрос.Текст = Запрос.Текст + " 
		|		ПО ВтИтог.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
		|			И ВтИтог.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = ЦеныНоменклатуры25СрезПоследних.ХарактеристикаЦО";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|		ПО ВтИтог.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВтИтог.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "

	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_штрихкоды КАК вт_штрихкоды
	|		ПО (ВЫБОР
	|				КОГДА вт_штрихкоды.Упаковка.ЕдиницаИзмерения ЕСТЬ NULL
	|					ТОГДА ВЫБОР
	|							КОГДА ВтИтог.Характеристика ЕСТЬ NULL
	|								ТОГДА ВтИтог.Номенклатура = вт_штрихкоды.Номенклатура
	|							ИНАЧЕ ВтИтог.Номенклатура = вт_штрихкоды.Номенклатура
	|									И ВтИтог.Характеристика = вт_штрихкоды.Характеристика
	|						КОНЕЦ
	|				ИНАЧЕ ВтИтог.Номенклатура = вт_штрихкоды.Номенклатура
	|						И ВтИтог.Характеристика = вт_штрихкоды.Характеристика
	|						И ВтИтог.Номенклатура.ЕдиницаИзмерения = вт_штрихкоды.Упаковка.ЕдиницаИзмерения
	|			КОНЕЦ)
	|ИТОГИ
	|	МАКСИМУМ(Остаток),
	|	МАКСИМУМ(ЦенаПродажи),
	|	МАКСИМУМ(ЦенаЗакупа),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Штрихкод),
	|	МАКСИМУМ(Упаковка)
	|ПО
	|	Номенклатура,
	|	Характеристика";
	//
	Запрос.УстановитьПараметр("ЗакупочнаяЦена", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗакупочнаяЦена")); 
	Запрос.УстановитьПараметр("ЦенаПродажи", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЦенаПродажи"));
	Запрос.УстановитьПараметр("Индивидуал", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
	Запрос.УстановитьПараметр("ОбщиеВид", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
	Запрос.УстановитьПараметр("ОбщиеДрВид", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
	Запрос.УстановитьПараметр("ВидНоменклатуры", фильтр);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	//групповые итоги
	Выборка = Результат.Выбрать(способВыборки);
	
	Возврат Выборка;
	
КонецФункции

&НаСервере
Процедура Мод_ВыгрузкаТиповЦенВCRM() Экспорт
	
	ВыгружатьТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгружатьТипыЦен");

	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	Если ВыгружатьТипыЦен = Неопределено или ВыгружатьТипыЦен = Ложь Тогда
		Сообщить ("Не установлен флаг выгрузки типов цен!");
		Возврат;
	КонецЕсли;
	
	ДатаВыгрузкиТиповЦен 	= ТекущаяДата();
	
	ВидыЦен 			= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
	ВидыЦенДляЗапроса 	= ВидыЦен.ВыгрузитьКолонку("ТипЦены");
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	// 
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		НесколькоОрганизаций = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	crm_Организации.КодМагазинаCRM КАК КодМагазина,
		|	crm_Организации.Ссылка КАК ОрганизацияCRM,
		|	crm_Организации.Организация КАК Организация
		|ИЗ
		|	Справочник.crm_Организации КАК crm_Организации
		|ГДЕ
		|	crm_Организации.ВыгружатьТипыЦен
		|	И НЕ crm_Организации.ПометкаУдаления";
		
		СписокМагазинов = Запрос.Выполнить().Выгрузить();
	Иначе 
		НесколькоОрганизаций = Ложь;
		СписокМагазинов = Новый ТаблицаЗначений;
		СписокМагазинов.Колонки.Добавить("КодМагазина");
		НовСтр = СписокМагазинов.Добавить();
		НовСтр.КодМагазина		= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина");
	КонецЕсли;
	
	crm_Ценообразование = "";
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25") Тогда 
		crm_Ценообразование = "2.5";
	Иначе 
		crm_Ценообразование = "2.0";
	КонецЕсли;
	
	//временное решение - запрос для каждого магазана
	//использовать список родителей из всех магазинов
	//при выгрузке из магазина только получать данные по необходимым роителям из запроса 
	
	Иерархия = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИерархияНоменклатуры");
		
	Для Каждого Магазин Из СписокМагазинов Цикл 
		
		Если НесколькоОрганизаций Тогда
			Если Иерархия = "Виды номенклатуры" Тогда 
				Родитель = Магазин.ОрганизацияCRM.КаталогПоВидам.Выгрузить();
				Родитель = ?(ЗначениеЗаполнено(Родитель), Родитель.ВыгрузитьКолонку("Номенклатура"), "");	
			Иначе 
				Родитель = Магазин.ОрганизацияCRM.Каталог.Выгрузить();
				Родитель = ?(ЗначениеЗаполнено(Родитель), Родитель.ВыгрузитьКолонку("Номенклатура"), "");
			КонецЕсли;
			Склады   = Магазин.ОрганизацияCRM.Склады.Выгрузить();
		Иначе
			Если Иерархия = "Виды номенклатуры" Тогда
				Родитель = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КаталогПоВидам");
			Иначе 
				Родитель = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Каталог");
			КонецЕсли;
			Склады 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склады");
		КонецЕсли;
		
		КодМагазина = Магазин.КодМагазина;
		
		/////////////////////
		РезультатЗапроса = УТ11_ВозвратЗапросаТиповЦен(ДатаВыгрузкиТиповЦен, ВидыЦенДляЗапроса, ИдентифТовара, Родитель, crm_Ценообразование, Иерархия);
		/////////////////////

		Cчетчик = 0;
		СтТовар = "";
		предложения = Новый Массив();	
		Для каждого стр из РезультатЗапроса Цикл    		
			Отправлен = Ложь; 
			Cчетчик = Cчетчик + 1;       		
			
			//Идентификатор товара
			Если ИдентифТовара = "Код" Тогда
				xmlIdТовара = стр.Номенклатура.Код;
			ИначеЕсли ИдентифТовара = "Артикул" Тогда
				xmlIdТовара	= стр.Номенклатура.Артикул;
			ИначеЕсли ИдентифТовара = "GUID" Тогда
				xmlIdТовара	= стр.Номенклатура.УникальныйИдентификатор();	
			КонецЕсли;
			
			Если СокрЛП(xmlIdТовара) <> СтТовар Тогда
				
				Если РезультатЗапроса.Индекс(стр)=0 Тогда 	
					масЦен = Новый Массив;			
				Иначе
					пред = Новый Соответствие();
					пред.Вставить(offers_id, СтТовар);
					пред.Вставить("site", 	КодМагазина);
					пред.Вставить("prices",	масЦен);
					предложения.Добавить(пред);   						
					масЦен = Новый Массив;
				КонецЕсли;       		
			КонецЕсли;	
			
			Цена = СтрЗаменить(строка(стр.Цена),",","."); 
			
			скл = Новый Соответствие();
			скл.Вставить("code", ВидыЦен.Найти(стр.ВидЦены, "ТипЦены").КодCRM);
			скл.Вставить("price",Формат(стр.Цена, "ЧРД=.; ЧГ=0"));
			масЦен.Добавить(скл);
			
			СтТовар = СокрЛП(xmlIdТовара);
			
			КоличествоЗаписей = Cчетчик/250;
			Если КоличествоЗаписей = Цел(КоличествоЗаписей) Тогда 
				ОтправитьТипыЦенВCRM(предложения);
				предложения.Очистить();
				Отправлен = Истина;
			КонецЕсли;	
			
			Если Cчетчик = РезультатЗапроса.количество() и Не Отправлен Тогда 
				
				пред = Новый Соответствие();
				пред.Вставить(offers_id, СтТовар);
				пред.Вставить("site", 	КодМагазина);
				пред.Вставить("prices",	масЦен);
				предложения.Добавить(пред);  
				
				ОтправитьТипыЦенВCRM(предложения);
				предложения.Очистить();
				
			КонецЕсли;
		КонецЦикла;  
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Мод_ВыгрузкаТиповЦенВCRMХарактеристики() Экспорт
	
	ВыгружатьТипыЦен = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгружатьТипыЦен");
	
	offers_id = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	
	Если ВыгружатьТипыЦен = Неопределено или ВыгружатьТипыЦен = Ложь Тогда
		Сообщить ("Не установлен флаг выгрузки типов цен!");
		Возврат;
	КонецЕсли;
	
	ДатаВыгрузкиТиповЦен 	= ТекущаяДата();
	
	ВидыЦен 			= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТипыЦенCRM");
	ВидыЦенДляЗапроса 	= ВидыЦен.ВыгрузитьКолонку("ТипЦены");
	
	Родитель = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Каталог");
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		НесколькоОрганизаций = Истина;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	crm_Организации.КодМагазинаCRM КАК КодМагазина,
		|	crm_Организации.Ссылка КАК ОрганизацияCRM,
		|	crm_Организации.Организация КАК Организация
		|ИЗ
		|	Справочник.crm_Организации КАК crm_Организации
		|ГДЕ
		|	crm_Организации.ВыгружатьТипыЦен
		|	И НЕ crm_Организации.ПометкаУдаления";
		
		СписокМагазинов = Запрос.Выполнить().Выгрузить();
	Иначе
		НесколькоОрганизаций = Ложь;
		СписокМагазинов = Новый ТаблицаЗначений;
		СписокМагазинов.Колонки.Добавить("КодМагазина");
		СписокМагазинов.Колонки.Добавить("Организация");
		НовСтр = СписокМагазинов.Добавить();
		НовСтр.КодМагазина		= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина");
		НовСтр.Организация		= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Организация");
	КонецЕсли;
	
	crm_Ценообразование = "";
	Если ПолучитьФункциональнуюОпцию("ИспользуетсяЦенообразование25") Тогда 
		crm_Ценообразование = "2.5";
	Иначе 
		crm_Ценообразование = "2.0";
	КонецЕсли;
	
	Иерархия = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИерархияНоменклатуры");
	
	Для Каждого Магазин из СписокМагазинов Цикл 
		
		Если НесколькоОрганизаций Тогда
			Если Иерархия = "Виды номенклатуры" Тогда
				Родитель = Магазин.ОрганизацияCRM.КаталогПоВидам.Выгрузить();
				Родитель = ?(ЗначениеЗаполнено(Родитель), Родитель.ВыгрузитьКолонку("Номенклатура"), "");
			Иначе 
				Родитель = Магазин.ОрганизацияCRM.Каталог.Выгрузить();
				Родитель = ?(ЗначениеЗаполнено(Родитель), Родитель.ВыгрузитьКолонку("Номенклатура"), "");
			КонецЕсли;
			Склады   = Магазин.ОрганизацияCRM.Склады.Выгрузить();
		Иначе
			Если Иерархия = "Виды номенклатуры" Тогда
				Родитель = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КаталогПоВидам");
			Иначе 
				Родитель = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Каталог");
			КонецЕсли;
			Склады 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склады");
		КонецЕсли;
		
		КодМагазина = Магазин.КодМагазина;
		
		/////////////////////
		РезультатЗапроса = УТ11_ВозвратЗапросаТиповЦенХарактеристики(ДатаВыгрузкиТиповЦен, ВидыЦенДляЗапроса, Родитель, crm_Ценообразование, Иерархия);
		/////////////////////
		
		Cчетчик = 0;
		СтТовар = "";
		предложения = Новый Массив();	
		Для каждого стр из РезультатЗапроса Цикл    		
			Отправлен = Ложь; 
			Cчетчик = Cчетчик + 1;       		
			
			Если ЗначениеЗаполнено(стр.Характеристика) Тогда 
				xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор()) + "#" + СокрЛП(стр.Характеристика.УникальныйИдентификатор());	
			Иначе 
				xmlIdТовара	= СокрЛП(стр.Номенклатура.УникальныйИдентификатор());
			КонецЕсли;
			
			Если  crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда 
				xmlIdТовара = СокрЛП(" " + Магазин.Организация.УникальныйИдентификатор() + "#" + xmlIdТовара);
			КонецЕсли;

			Если СокрЛП(xmlIdТовара) <> СтТовар Тогда
				
				Если РезультатЗапроса.Индекс(стр)=0 Тогда 	
					масЦен = Новый Массив;			
				Иначе
					пред = Новый Соответствие();
					пред.Вставить(offers_id, СтТовар);
					пред.Вставить("site", 	КодМагазина);
					пред.Вставить("prices",	масЦен);
					предложения.Добавить(пред);   						
					масЦен = Новый Массив;
				КонецЕсли;       		
			КонецЕсли;	
			
			Цена = СтрЗаменить(строка(стр.Цена),",","."); 
			
			скл = Новый Соответствие();
			скл.Вставить("code", ВидыЦен.Найти(стр.ВидЦены, "ТипЦены").КодCRM);
			скл.Вставить("price",Формат(стр.Цена, "ЧРД=.; ЧГ=0"));
			масЦен.Добавить(скл);
			
			СтТовар = СокрЛП(xmlIdТовара);
			
			КоличествоЗаписей = Cчетчик/250;
			Если КоличествоЗаписей = Цел(КоличествоЗаписей) Тогда 
				ОтправитьТипыЦенВCRM(предложения);
				предложения.Очистить();
				Отправлен = Истина;
			КонецЕсли;	
			
			Если Cчетчик = РезультатЗапроса.количество() и Не Отправлен Тогда 
				
				пред = Новый Соответствие();
				пред.Вставить(offers_id, СтТовар);
				пред.Вставить("site", 	КодМагазина);
				пред.Вставить("prices",	масЦен);
				предложения.Добавить(пред);  
				
				ОтправитьТипыЦенВCRM(предложения);
				предложения.Очистить();
				
			КонецЕсли;
		КонецЦикла;  
	КонецЦикла;
	
КонецПроцедуры

Функция УТ11_ВозвратЗапросаТиповЦен(ДатаЗапроса, ВидыЦен, ИдентифТовара, Родитель, crm_Ценообразование, Иерархия)
	
	Если Иерархия = "Виды номенклатуры" Тогда 
		отбор = "ВидНоменклатуры";		
	Иначе 
		отбор = "Родитель";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если crm_Ценообразование = "2.0" Тогда 
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			ВидЦены В (&ВидЦены)
		|				И Номенклатура.ПометкаУдаления = ЛОЖЬ) КАК ЦеныНоменклатурыСрезПоследних";
		
		Если ИдентифТовара = "Артикул" Тогда 
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура.Артикул <> """"";
			Если ЗначениеЗаполнено(Родитель) Тогда 
				Запрос.Текст = Запрос.Текст + "
				|	И Номенклатура." + отбор + " В ИЕРАРХИИ(&Родитель)";
			КонецЕсли;
		Иначе 
			Если ЗначениеЗаполнено(Родитель) Тогда 
				Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	Номенклатура." + отбор + " В ИЕРАРХИИ(&Родитель)";
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли crm_Ценообразование = "2.5" Тогда 
		
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры25СрезПоследних.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|			,
		|			ВидЦены В (&ВидЦены)
		|				И Номенклатура.ПометкаУдаления = ЛОЖЬ) КАК ЦеныНоменклатуры25СрезПоследних";
		
		Если ИдентифТовара = "Артикул" Тогда 
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	ЦеныНоменклатуры25СрезПоследних.Номенклатура.Артикул <> """"";
			Если ЗначениеЗаполнено(Родитель) Тогда 
				Запрос.Текст = Запрос.Текст + "
				|	И Номенклатура." + отбор + " В ИЕРАРХИИ(&Родитель)";
			КонецЕсли;
		Иначе 
			Если ЗначениеЗаполнено(Родитель) Тогда 
				Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	Номенклатура." + отбор + " В ИЕРАРХИИ(&Родитель)";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидЦены", 		ВидыЦен);
	Запрос.УстановитьПараметр("Родитель",		Родитель);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция УТ11_ВозвратЗапросаТиповЦенХарактеристики(ДатаЗапроса, ВидыЦен, Родитель, crm_Ценообразование, Иерархия)
	
	Если Иерархия = "Виды номенклатуры" Тогда 
		отбор = "ВидНоменклатуры";		
	Иначе 
		отбор = "Родитель";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если crm_Ценообразование = "2.0" Тогда
		
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			&ТекДата,
		|			ВидЦены В (&ВидЦены)
		|				И Номенклатура.ПометкаУдаления = ЛОЖЬ) КАК ЦеныНоменклатурыСрезПоследних";
		
		Если ЗначениеЗаполнено(Родитель) Тогда 
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	Номенклатура." + отбор + " В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;

	ИначеЕсли crm_Ценообразование = "2.5" Тогда
		
		Запрос.Текст = 
		
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования КАК ХарактеристикаНоменклатурыДляЦенообразования
		|ПОМЕСТИТЬ вт_характеристика
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования <> &ХарактеристикаНоменклатурыДляЦенообразования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатуры25СрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО1,
		|	ЦеныНоменклатуры25СрезПоследних.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена,
		|	ЕСТЬNULL(вт_характеристика.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
		|	ЕСТЬNULL(вт_характеристика.ХарактеристикаНоменклатурыДляЦенообразования, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК ХарактеристикаЦО
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
		|			&ТекДата,
		|			ВидЦены В (&ВидЦены)
		|				И Номенклатура.ПометкаУдаления = ЛОЖЬ";
		
		Если ЗначениеЗаполнено(Родитель) Тогда 
			Запрос.Текст = Запрос.Текст + "
			|				И Номенклатура." + отбор + " В ИЕРАРХИИ (&Родитель)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|				) КАК ЦеныНоменклатуры25СрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт_характеристика КАК вт_характеристика
		|		ПО ЦеныНоменклатуры25СрезПоследних.ХарактеристикаЦО = вт_характеристика.ХарактеристикаНоменклатурыДляЦенообразования
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидЦены", 		ВидыЦен);
	Запрос.УстановитьПараметр("ТекДата", 		ТекущаяДата());
	Запрос.УстановитьПараметр("Родитель",		Родитель);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатурыДляЦенообразования",		Справочники.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура Мод_ВыгрузкаКаталогаВXML(табКаталога, ПутьКфайлу) Экспорт
	
	//для каждого магазина свой фильтр
	//можно фильтры сгруппировать, а потом для каждого магазина брать строки по своим папкам
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		НесколькоОрганизаций = Истина;
	Иначе 
		НесколькоОрганизаций = Ложь;
	КонецЕсли;
	
	Если НесколькоОрганизаций Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	crm_ОрганизацииКаталог.Ссылка КАК Организация,
		|	crm_ОрганизацииКаталог.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.crm_Организации.Каталог КАК crm_ОрганизацииКаталог
		|ГДЕ
		|	crm_ОрганизацииКаталог.Ссылка.ВыгружатьКаталог
		|	И НЕ crm_ОрганизацииКаталог.Ссылка.ПометкаУдаления";
		
		СписокМагазинов = Запрос.Выполнить().Выгрузить();
		СписокМагазинов.Свернуть("Организация");
	Иначе
		СписокМагазинов = Новый ТаблицаЗначений;
		СписокМагазинов.Колонки.Добавить("КодМагазина");
		НовСтр = СписокМагазинов.Добавить();
		НовСтр.КодМагазина		= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина");
		
		Если табКаталога <> Неопределено Тогда 
			фильтр = табКаталога.Выгрузить(); 
			фильтр = ?(ЗначениеЗаполнено(фильтр), фильтр, "");
			фильтр = ?(ЗначениеЗаполнено(фильтр), фильтр.ВыгрузитьКолонку("Номенклатура"), "");
		Иначе 
			фильтр = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Каталог");
		КонецЕсли;
	КонецЕсли;
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	//
	
	Для Каждого Магазин Из СписокМагазинов Цикл 
		
		Если НесколькоОрганизаций Тогда
			Фильтр = Магазин.Организация.Каталог.Выгрузить();
			Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр.ВыгрузитьКолонку("Номенклатура"), "");
			ПутьКфайлу = Магазин.Организация.ПутьКФайлуКаталога;
			Если Не ЗначениеЗаполнено(ПутьКфайлу) Тогда   
				ПутьКфайлу = КаталогВременныхФайлов() + Магазин.Организация.КодМагазинаCRM + "_catalog_icml.xml";
			КонецЕсли;
			КодМагазина = Магазин.Организация.КодМагазинаCRM;
		Иначе
			Если Не ЗначениеЗаполнено(ПутьКфайлу) Тогда 
				ПутьКфайлу = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ПутьКФайлу");
				Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда 
					ПутьКфайлу = КаталогВременныхФайлов() + "catalog_icml.xml";
				КонецЕсли
			КонецЕсли;
			КодМагазина = Магазин.КодМагазина;
		КонецЕсли;
		
		Выборка = УТ11_ЗапросДляКаталога(фильтр);
		//
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Код,
		|	Номенклатура.Родитель.Код КАК РодительКод,
		|	Номенклатура.Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа";
		
		Если не ЗначениеЗаполнено(табКаталога) Тогда 
			фильтр = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Каталог");
			Если ЗначениеЗаполнено(фильтр) Тогда 
				фильтр = фильтр.ВыгрузитьЗначения();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(фильтр) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	РодительКод";
		
		Запрос.УстановитьПараметр("Родитель", фильтр);
		Результат = Запрос.Выполнить().Выгрузить();   
		//	
		
		ХМЛ			 	= Новый ЗаписьXML; 
		ХМЛ.ОткрытьФайл(ПутьКфайлу);
		ХМЛ.ЗаписатьОбъявлениеXML();
		ХМЛ.ЗаписатьНачалоЭлемента("yml_catalog");
		ХМЛ.ЗаписатьАтрибут("date",Формат(ТекущаяДата(),"ДФ='гггг-ММ-дд ЧЧ:мм:сс'"));		
		ХМЛ.ЗаписатьНачалоЭлемента("shop");
		ХМЛ.ЗаписатьНачалоЭлемента("name");
		ХМЛ.ЗаписатьТекст(КодМагазина);		
		ХМЛ.ЗаписатьКонецЭлемента();	
		ХМЛ.ЗаписатьНачалоЭлемента("company");
		ХМЛ.ЗаписатьТекст(КодМагазина);		
		ХМЛ.ЗаписатьКонецЭлемента();	
		
		ХМЛ.ЗаписатьНачалоЭлемента("categories");
		
		Если ЗначениеЗаполнено(фильтр) Тогда 
			Для Каждого стрГруппа из фильтр Цикл 
				ХМЛ.ЗаписатьНачалоЭлемента("category");
				ИДКод = СокрЛП(стрГруппа.Код); 
				ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
				ХМЛ.ЗаписатьАтрибут("parentId","");
				ХМЛ.ЗаписатьТекст(строка(стрГруппа.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента(); 
			КонецЦикла;;
		КонецЕсли;
		
		Для каждого стр Из Результат Цикл 
			
			Ссылка = стр.Ссылка;
			
			Если Ссылка.ЭтоГруппа Тогда		
				ХМЛ.ЗаписатьНачалоЭлемента("category"); 
				ИДКод = СокрЛП(Ссылка.Код);
				ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
				Если ЗначениеЗаполнено(Ссылка.Родитель.Код) Тогда 
					идРодителя = СокрЛП(Ссылка.Родитель.Код);
				Иначе
					идРодителя = "";
				КонецЕсли;
				ХМЛ.ЗаписатьАтрибут("parentId",СтрЗаменить(идРодителя,Символ(160),""));
				ХМЛ.ЗаписатьТекст(строка(Ссылка.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента(); 
			КонецЕсли;
		КонецЦикла;
		
		ХМЛ.ЗаписатьКонецЭлемента();// categories
		
		ХМЛ.ЗаписатьНачалоЭлемента("offers");
		
		Пока Выборка.Следующий() Цикл
	
			Ссылка = Выборка.Номенклатура;
			Если НЕ Ссылка.ЭтоГруппа Тогда
				
				//Идентификатор товара
				Если ИдентифТовара = "Код" Тогда
					xmlIdТовара = Ссылка.Код;
				ИначеЕсли ИдентифТовара = "Артикул" Тогда
					xmlIdТовара	= Ссылка.Артикул;
				ИначеЕсли ИдентифТовара = "GUID" Тогда
					xmlIdТовара	= Ссылка.УникальныйИдентификатор();	
				КонецЕсли;
				
				ИД	= СокрЛП(xmlIdТовара);
				Артикул = СокрЛП(Ссылка.Артикул);
				
				Если ЗначениеЗаполнено(Ссылка.Родитель) Тогда 
					идРодителя = СокрЛП(Ссылка.Родитель.Код);
				Иначе
					идРодителя = "";
				КонецЕсли;
				
				ХМЛ.ЗаписатьНачалоЭлемента("offer");
				
				ХМЛ.ЗаписатьАтрибут("id",СокрЛП(ИД));	
				ХМЛ.ЗаписатьАтрибут("productId",СокрЛП(ИД));	
				
				Остаток = Выборка.Остаток; 	
				Остаток = СтрЗаменить(строка(Остаток),",",".");
				Остаток = СтрЗаменить(строка(Остаток),Символ(160),"");
				
				ХМЛ.ЗаписатьАтрибут("quantity",Остаток);	
				ХМЛ.ЗаписатьНачалоЭлемента("url");
				ХМЛ.ЗаписатьТекст("");
				ХМЛ.ЗаписатьКонецЭлемента();// url	
				ХМЛ.ЗаписатьНачалоЭлемента("picture");
				ХМЛ.ЗаписатьТекст("");
				ХМЛ.ЗаписатьКонецЭлемента();	
				
				ЦенаРозн = Выборка.ЦенаПродажи;
				
				ЦенаРозн = СтрЗаменить(строка(ЦенаРозн),",",".");
				ЦенаРозн = СтрЗаменить(строка(ЦенаРозн),Символ(160),"");
				
				ЦенаЗакупа = Выборка.ЦенаЗакупа;
				
				ЦенаЗакупа = СтрЗаменить(строка(ЦенаЗакупа),",",".");
				ЦенаЗакупа = СтрЗаменить(строка(ЦенаЗакупа),Символ(160),"");
				
				ХМЛ.ЗаписатьНачалоЭлемента("price");
				ХМЛ.ЗаписатьТекст(ЦенаРозн);
				ХМЛ.ЗаписатьКонецЭлемента();
				ХМЛ.ЗаписатьНачалоЭлемента("purchasePrice");
				ХМЛ.ЗаписатьТекст(ЦенаЗакупа);
				ХМЛ.ЗаписатьКонецЭлемента();
				ХМЛ.ЗаписатьНачалоЭлемента("categoryId");
				ХМЛ.ЗаписатьТекст(СтрЗаменить(идРодителя,Символ(160),""));
				ХМЛ.ЗаписатьКонецЭлемента();	
				ХМЛ.ЗаписатьНачалоЭлемента("name");
				ИмяТовара = строка(Ссылка.Наименование);
				ХМЛ.ЗаписатьТекст(стрЗаменить(ИмяТовара,"""",""));
				ХМЛ.ЗаписатьКонецЭлемента();
				ХМЛ.ЗаписатьНачалоЭлемента("xmlId");
				ХМЛ.ЗаписатьТекст(СокрЛП(ИД));
				ХМЛ.ЗаписатьКонецЭлемента();						                    
				ХМЛ.ЗаписатьНачалоЭлемента("productName");
				ХМЛ.ЗаписатьТекст(стрЗаменить(строка(Ссылка.НаименованиеПолное),"""",""));
				ХМЛ.ЗаписатьКонецЭлемента();	
				
				ХМЛ.ЗаписатьНачалоЭлемента("param"); 
				ХМЛ.ЗаписатьАтрибут("code",строка("article"));	
				ХМЛ.ЗаписатьАтрибут("name",строка("артикул"));	
				ХМЛ.ЗаписатьТекст(СокрЛП(Артикул));				
				ХМЛ.ЗаписатьКонецЭлемента();	  
				
				ХМЛ.ЗаписатьНачалоЭлемента("vendor");
				ХМЛ.ЗаписатьТекст(СокрЛП(Ссылка.Производитель));
				ХМЛ.ЗаписатьКонецЭлемента();	
				
				ХМЛ.ЗаписатьНачалоЭлемента("unit");
				ХМЛ.ЗаписатьАтрибут("code",СокрЛП(Ссылка.ЕдиницаИзмерения.Код));
				ХМЛ.ЗаписатьАтрибут("name",строка(Ссылка.ЕдиницаИзмерения.НаименованиеПолное));
				ХМЛ.ЗаписатьАтрибут("sym",строка(Ссылка.ЕдиницаИзмерения.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента();
				
				Если ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
					//вот тут бы проверить кол-во штрихкодов и разработать алгоритм для выбора наиболее верного
					ДочерниеЗаписи = Выборка.Выбрать();
					Пока ДочерниеЗаписи.Следующий() Цикл
						Если ЗначениеЗаполнено(ДочерниеЗаписи.Штрихкод) Тогда 
							ХМЛ.ЗаписатьНачалоЭлемента("barcode");
							ХМЛ.ЗаписатьТекст(СокрЛП(ДочерниеЗаписи.Штрихкод));
							ХМЛ.ЗаписатьКонецЭлемента();
							Прервать;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
				
				ХМЛ.ЗаписатьКонецЭлемента();// offer						
				
			КонецЕсли;
		КонецЦикла;	
		
		ХМЛ.ЗаписатьКонецЭлемента();// offers			
		ХМЛ.ЗаписатьКонецЭлемента(); // shop	
		ХМЛ.ЗаписатьКонецЭлемента(); // yml_catalog	
		ХМЛ.Закрыть();
		
		Сообщить("Файл каталога сформирован по адресу " + ПутьКфайлу);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Мод_ВыгрузкаКаталогаВXMLХарактеристики(табКаталога, ПутьКфайлу) Экспорт
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		НесколькоОрганизаций = Истина;
	Иначе 
		НесколькоОрганизаций = Ложь;
	КонецЕсли;
	
	Если НесколькоОрганизаций Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	crm_ОрганизацииКаталог.Ссылка КАК Организация,
		|	crm_ОрганизацииКаталог.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.crm_Организации.Каталог КАК crm_ОрганизацииКаталог
		|ГДЕ
		|	crm_ОрганизацииКаталог.Ссылка.ВыгружатьКаталог
		|	И НЕ crm_ОрганизацииКаталог.Ссылка.ПометкаУдаления";
		
		СписокМагазинов = Запрос.Выполнить().Выгрузить();
		СписокМагазинов.Свернуть("Организация");
	Иначе
		СписокМагазинов = Новый ТаблицаЗначений;
		СписокМагазинов.Колонки.Добавить("КодМагазина");
		СписокМагазинов.Колонки.Добавить("Организация");	
		НовСтр = СписокМагазинов.Добавить();
		НовСтр.КодМагазина	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина");
		НовСтр.Организация	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Организация");
		
		Если табКаталога <> Неопределено Тогда 
			фильтр = табКаталога.Выгрузить(); 
			фильтр = ?(ЗначениеЗаполнено(фильтр), фильтр, "");
			фильтр = ?(ЗначениеЗаполнено(фильтр), фильтр.ВыгрузитьКолонку("Номенклатура"), "");
		Иначе 
			фильтр = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Каталог");
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавлятьGUIDОрганизации = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации");
	
	Для Каждого Магазин Из СписокМагазинов Цикл 
		
		Если НесколькоОрганизаций Тогда
			Фильтр = Магазин.Организация.Каталог.Выгрузить();
			Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр.ВыгрузитьКолонку("Номенклатура"), "");
			ПутьКфайлу = Магазин.Организация.ПутьКФайлуКаталога;
			Если Не ЗначениеЗаполнено(ПутьКфайлу) Тогда   
				ПутьКфайлу = КаталогВременныхФайлов() + Магазин.Организация.КодМагазинаCRM + "_catalog_icml.xml";
			КонецЕсли;
			КодМагазина = Магазин.Организация.КодМагазинаCRM;
			GUIDМагазина		= СокрЛП(Магазин.Организация.Организация.УникальныйИдентификатор());
		Иначе
			Если Не ЗначениеЗаполнено(ПутьКфайлу) Тогда 
				ПутьКфайлу = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ПутьКФайлу");
				Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда 
					ПутьКфайлу = КаталогВременныхФайлов() + "catalog_icml.xml";
				КонецЕсли
			КонецЕсли;
			КодМагазина = Магазин.КодМагазина;
			GUIDМагазина		= СокрЛП(Магазин.Организация.УникальныйИдентификатор());
		КонецЕсли;
		
		Рез = УТ11_ЗапросДляКаталогаХарактеристики(фильтр);
		
		ХМЛ			 	= Новый ЗаписьXML; 
		ХМЛ.ОткрытьФайл(ПутьКфайлу);
		ХМЛ.ЗаписатьОбъявлениеXML();
		ХМЛ.ЗаписатьНачалоЭлемента("yml_catalog");
		ХМЛ.ЗаписатьАтрибут("date",Формат(ТекущаяДата(),"ДФ='гггг-ММ-дд ЧЧ:мм:сс'"));		
		ХМЛ.ЗаписатьНачалоЭлемента("shop");
		ХМЛ.ЗаписатьНачалоЭлемента("name");
		ХМЛ.ЗаписатьТекст(КодМагазина);		
		ХМЛ.ЗаписатьКонецЭлемента();	
		ХМЛ.ЗаписатьНачалоЭлемента("company");
		ХМЛ.ЗаписатьТекст(КодМагазина);		
		ХМЛ.ЗаписатьКонецЭлемента();	
		
		ХМЛ.ЗаписатьНачалоЭлемента("categories");
		//
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.Код,
		|	Номенклатура.Родитель.Код КАК РодительКод,
		|	Номенклатура.Наименование
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ЭтоГруппа";
		
		Если не ЗначениеЗаполнено(табКаталога) Тогда 
			фильтр = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Каталог");
			Если ЗначениеЗаполнено(фильтр) Тогда 
				фильтр = фильтр.ВыгрузитьЗначения();
			КонецЕсли;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(фильтр) Тогда 
			Запрос.Текст = Запрос.Текст + "
			|	И Номенклатура.Родитель В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	РодительКод";
		
		Запрос.УстановитьПараметр("Родитель", фильтр);
		Результат = Запрос.Выполнить().Выгрузить();   
		
		Если ЗначениеЗаполнено(фильтр) Тогда 
			Для Каждого стрГруппа из фильтр Цикл 
				ХМЛ.ЗаписатьНачалоЭлемента("category");
				ИДКод = СокрЛП(стрГруппа.Код); 
				ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
				ХМЛ.ЗаписатьАтрибут("parentId","");
				ХМЛ.ЗаписатьТекст(строка(стрГруппа.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента(); 
			КонецЦикла;;
		КонецЕсли;
		
		Для каждого стр Из Результат Цикл 
			
			Ссылка = стр.Ссылка;
			
			Если Ссылка.ЭтоГруппа Тогда		
				ХМЛ.ЗаписатьНачалоЭлемента("category"); 
				ИДКод = СокрЛП(Ссылка.Код);
				ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
				Если ЗначениеЗаполнено(Ссылка.Родитель.Код) Тогда 
					идРодителя = СокрЛП(Ссылка.Родитель.Код);
				Иначе
					идРодителя = "";
				КонецЕсли;
				ХМЛ.ЗаписатьАтрибут("parentId",СтрЗаменить(идРодителя,Символ(160),""));
				ХМЛ.ЗаписатьТекст(строка(Ссылка.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента(); 
			КонецЕсли;
		КонецЦикла;
		
		ХМЛ.ЗаписатьКонецЭлемента();// categories
		
		ХМЛ.ЗаписатьНачалоЭлемента("offers");
		
		Пока Рез.Следующий() Цикл
			//выборка характеристики
			Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				
				
				GUIDТовара = "";
				GUIDХарактеристики = "";
				
				//Ссылка = стр.Номенклатура;
				Ссылка = Выборка.Номенклатура;
				
				Если НЕ Ссылка.ЭтоГруппа Тогда
					
					GUIDТовара			= СокрЛП(Ссылка.УникальныйИдентификатор());
					Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
						GUIDХарактеристики 	= СокрЛП(Выборка.Характеристика.УникальныйИдентификатор());
					КонецЕсли;
					Артикул = СокрЛП(Ссылка.Артикул);
					
					Если ЗначениеЗаполнено(Ссылка.Родитель) Тогда 
						идРодителя = СокрЛП(Ссылка.Родитель.Код);
					Иначе
						идРодителя = "";
					КонецЕсли;
					
					ХМЛ.ЗаписатьНачалоЭлемента("offer");
					
					Если ДобавлятьGUIDОрганизации = Истина Тогда 
						Если ЗначениеЗаполнено(GUIDХарактеристики) Тогда
							ХМЛ.ЗаписатьАтрибут("id", (GUIDМагазина + "#"+ GUIDТовара + "#" + GUIDХарактеристики));
						Иначе 
							ХМЛ.ЗаписатьАтрибут("id", (GUIDМагазина + "#"+ GUIDТовара));
						КонецЕсли;
						ХМЛ.ЗаписатьАтрибут("productId", (GUIDМагазина + "#"+ GUIDТовара));
					Иначе 
						Если ЗначениеЗаполнено(GUIDХарактеристики) Тогда
							ХМЛ.ЗаписатьАтрибут("id", (GUIDТовара + "#" + GUIDХарактеристики));
						Иначе 
							ХМЛ.ЗаписатьАтрибут("id", GUIDТовара);
						КонецЕсли;
						ХМЛ.ЗаписатьАтрибут("productId", GUIDТовара);
					КонецЕсли;
					
					Остаток = Выборка.Остаток; 	
					Остаток = СтрЗаменить(строка(Остаток),",",".");
					Остаток = СтрЗаменить(строка(Остаток),Символ(160),"");
					
					ХМЛ.ЗаписатьАтрибут("quantity",Остаток);	
					ХМЛ.ЗаписатьНачалоЭлемента("url");
					ХМЛ.ЗаписатьТекст("");
					ХМЛ.ЗаписатьКонецЭлемента();// url	
					ХМЛ.ЗаписатьНачалоЭлемента("picture");
					ХМЛ.ЗаписатьТекст("");
					ХМЛ.ЗаписатьКонецЭлемента();	
					
					ЦенаРозн = Выборка.ЦенаПродажи;
					
					ЦенаРозн = СтрЗаменить(строка(ЦенаРозн),",",".");
					ЦенаРозн = СтрЗаменить(строка(ЦенаРозн),Символ(160),""); 
					
					ЦенаЗакупа = Выборка.ЦенаЗакупа;
					
					ЦенаЗакупа = СтрЗаменить(строка(ЦенаЗакупа),",",".");
					ЦенаЗакупа = СтрЗаменить(строка(ЦенаЗакупа),Символ(160),"");
					
					ХМЛ.ЗаписатьНачалоЭлемента("price");
					ХМЛ.ЗаписатьТекст(ЦенаРозн);
					ХМЛ.ЗаписатьКонецЭлемента();
					ХМЛ.ЗаписатьНачалоЭлемента("purchasePrice");
					ХМЛ.ЗаписатьТекст(ЦенаЗакупа);
					ХМЛ.ЗаписатьКонецЭлемента();
					ХМЛ.ЗаписатьНачалоЭлемента("categoryId");
					ХМЛ.ЗаписатьТекст(СтрЗаменить(идРодителя,Символ(160),""));
					ХМЛ.ЗаписатьКонецЭлемента();	
					ХМЛ.ЗаписатьНачалоЭлемента("name");
					Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
						ИмяТовара = строка(Ссылка.Наименование) + ", " + строка(Выборка.Характеристика.НаименованиеПолное);
					Иначе 
						ИмяТовара = строка(Ссылка.Наименование);
					КонецЕсли;
					ХМЛ.ЗаписатьТекст(стрЗаменить(ИмяТовара,"""",""));
					ХМЛ.ЗаписатьКонецЭлемента();
					ХМЛ.ЗаписатьНачалоЭлемента("xmlId");
					
					Если ДобавлятьGUIDОрганизации = Истина Тогда
						Если ЗначениеЗаполнено(GUIDХарактеристики) Тогда
							ХМЛ.ЗаписатьТекст(GUIDМагазина + "#"+ GUIDТовара + "#" + GUIDХарактеристики);
						Иначе 
							ХМЛ.ЗаписатьТекст(GUIDМагазина + "#"+ GUIDТовара);
						КонецЕсли;
					Иначе 
						Если ЗначениеЗаполнено(GUIDХарактеристики) Тогда
							ХМЛ.ЗаписатьТекст(GUIDТовара + "#" + GUIDХарактеристики);
						Иначе 
							ХМЛ.ЗаписатьТекст(GUIDТовара);
						КонецЕсли;  
					КонецЕсли;
					
					ХМЛ.ЗаписатьКонецЭлемента();						                    
					ХМЛ.ЗаписатьНачалоЭлемента("productName");
					ХМЛ.ЗаписатьТекст(строка(Ссылка.НаименованиеПолное));
					ХМЛ.ЗаписатьКонецЭлемента();	
					
					ХМЛ.ЗаписатьНачалоЭлемента("param"); 
					ХМЛ.ЗаписатьАтрибут("code",строка("article"));	
					ХМЛ.ЗаписатьАтрибут("name",строка("артикул"));	
					ХМЛ.ЗаписатьТекст(СокрЛП(Артикул));				
					ХМЛ.ЗаписатьКонецЭлемента();	  
					
					ХМЛ.ЗаписатьНачалоЭлемента("vendor");
					ХМЛ.ЗаписатьТекст(СокрЛП(Ссылка.Производитель));
					ХМЛ.ЗаписатьКонецЭлемента();	
					
					ХМЛ.ЗаписатьНачалоЭлемента("unit");
					ХМЛ.ЗаписатьАтрибут("code",СокрЛП(Ссылка.ЕдиницаИзмерения.Код));
					ХМЛ.ЗаписатьАтрибут("name",строка(Ссылка.ЕдиницаИзмерения.НаименованиеПолное));
					ХМЛ.ЗаписатьАтрибут("sym",строка(Ссылка.ЕдиницаИзмерения.Наименование));
					ХМЛ.ЗаписатьКонецЭлемента();
					
					Если ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
						//вот тут бы проверить кол-во штрихкодов и разработать алгоритм для выбора наиболее верного
						ДочерниеЗаписи = Выборка.Выбрать();
						Пока ДочерниеЗаписи.Следующий() Цикл
							Если ЗначениеЗаполнено(ДочерниеЗаписи.Штрихкод) Тогда 
								ХМЛ.ЗаписатьНачалоЭлемента("barcode");
								ХМЛ.ЗаписатьТекст(СокрЛП(ДочерниеЗаписи.Штрихкод));
								ХМЛ.ЗаписатьКонецЭлемента();
								Прервать;
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;
				
					ХМЛ.ЗаписатьКонецЭлемента();// offer						
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	
		
		ХМЛ.ЗаписатьКонецЭлемента();// offers			
		ХМЛ.ЗаписатьКонецЭлемента(); // shop	
		ХМЛ.ЗаписатьКонецЭлемента(); // yml_catalog	
		ХМЛ.Закрыть();
		
		Сообщить("Файл каталога сформирован по адресу " + ПутьКфайлу);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Мод_ВыгрузкаКаталогаВXMLПоВидам(табКаталога, ПутьКфайлу) Экспорт
	
	//для каждого магазина свой фильтр
	//можно фильтры сгруппировать, а потом для каждого магазина брать строки по своим папкам
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		НесколькоОрганизаций = Истина;
	Иначе 
		НесколькоОрганизаций = Ложь;
	КонецЕсли;
	
	Если НесколькоОрганизаций Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	crm_ОрганизацииКаталогПоВидам.Ссылка КАК Организация,
		|	crm_ОрганизацииКаталогПоВидам.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.crm_Организации.КаталогПоВидам КАК crm_ОрганизацииКаталогПоВидам
		|ГДЕ
		|	crm_ОрганизацииКаталогПоВидам.Ссылка.ВыгружатьКаталог
		|	И НЕ crm_ОрганизацииКаталогПоВидам.Ссылка.ПометкаУдаления";
		
		СписокМагазинов = Запрос.Выполнить().Выгрузить();
		СписокМагазинов.Свернуть("Организация");
	Иначе
		СписокМагазинов = Новый ТаблицаЗначений;
		СписокМагазинов.Колонки.Добавить("КодМагазина");
		НовСтр = СписокМагазинов.Добавить();
		НовСтр.КодМагазина		= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина");
		
		Если табКаталога <> Неопределено Тогда 
			фильтр = табКаталога.Выгрузить(); 
			фильтр = ?(ЗначениеЗаполнено(фильтр), фильтр, "");
			фильтр = ?(ЗначениеЗаполнено(фильтр), фильтр.ВыгрузитьКолонку("Номенклатура"), "");
		Иначе 
			фильтр = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КаталогПоВидам");
		КонецЕсли;
	КонецЕсли;
	
	//Идентификатор товара
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	//
	
	Для Каждого Магазин Из СписокМагазинов Цикл 
		
		Если НесколькоОрганизаций Тогда
			Фильтр = Магазин.Организация.КаталогПоВидам.Выгрузить();
			Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр.ВыгрузитьКолонку("Номенклатура"), "");
			ПутьКфайлу = Магазин.Организация.ПутьКФайлуКаталога;
			Если Не ЗначениеЗаполнено(ПутьКфайлу) Тогда   
				ПутьКфайлу = КаталогВременныхФайлов() + Магазин.Организация.КодМагазинаCRM + "_catalog_icml.xml";
			КонецЕсли;
			КодМагазина = Магазин.Организация.КодМагазинаCRM;
		Иначе
			Если Не ЗначениеЗаполнено(ПутьКфайлу) Тогда 
				ПутьКфайлу = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ПутьКФайлу");
				Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда 
					ПутьКфайлу = КаталогВременныхФайлов() + "catalog_icml.xml";
				КонецЕсли
			КонецЕсли;
			КодМагазина = Магазин.КодМагазина;
		КонецЕсли;
		
		Выборка = УТ11_ЗапросДляКаталогаПоВидам(фильтр);
		//
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Ссылка,
		|	ВидыНоменклатуры.Родитель КАК РодительКод,
		|	ВидыНоменклатуры.ЭтоГруппа,
		|	ВидыНоменклатуры.ТипНоменклатуры,
		|   ВидыНоменклатуры.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры";
				
		Если не ЗначениеЗаполнено(табКаталога) Тогда 
			фильтр = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КаталогПоВидам");
			Если ЗначениеЗаполнено(фильтр) Тогда 
				фильтр = фильтр.ВыгрузитьЗначения();
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(фильтр) Тогда
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	ВидыНоменклатуры.Ссылка В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	РодительКод";
		
		Запрос.УстановитьПараметр("Родитель", фильтр);
		Результат = Запрос.Выполнить().Выгрузить();   
		//	
		
		ХМЛ			 	= Новый ЗаписьXML; 
		ХМЛ.ОткрытьФайл(ПутьКфайлу);
		ХМЛ.ЗаписатьОбъявлениеXML();
		ХМЛ.ЗаписатьНачалоЭлемента("yml_catalog");
		ХМЛ.ЗаписатьАтрибут("date",Формат(ТекущаяДата(),"ДФ='гггг-ММ-дд ЧЧ:мм:сс'"));		
		ХМЛ.ЗаписатьНачалоЭлемента("shop");
		ХМЛ.ЗаписатьНачалоЭлемента("name");
		ХМЛ.ЗаписатьТекст(КодМагазина);		
		ХМЛ.ЗаписатьКонецЭлемента();	
		ХМЛ.ЗаписатьНачалоЭлемента("company");
		ХМЛ.ЗаписатьТекст(КодМагазина);		
		ХМЛ.ЗаписатьКонецЭлемента();	
		
		ХМЛ.ЗаписатьНачалоЭлемента("categories");
		
		Если ЗначениеЗаполнено(фильтр) Тогда
			Для Каждого стрГруппа из фильтр Цикл 
				ХМЛ.ЗаписатьНачалоЭлемента("category");
				
				ИДКод = СокрЛП(стрГруппа.УникальныйИдентификатор());
				
				ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
				ХМЛ.ЗаписатьАтрибут("parentId","");
				ХМЛ.ЗаписатьТекст(строка(стрГруппа.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента(); 
			КонецЦикла;
		КонецЕсли;
		
		Для каждого стр Из Результат Цикл 
			
			Ссылка = стр.Ссылка;
			
			Если Ссылка.ЭтоГруппа Тогда		
				//найти ее в фильтре и если она там есть, не писать ее родителя
				Если фильтр.Найти(Ссылка) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ХМЛ.ЗаписатьНачалоЭлемента("category");
				
				ИДКод = СокрЛП(Ссылка.УникальныйИдентификатор());
				
				ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
				Если ЗначениеЗаполнено(Ссылка.Родитель.УникальныйИдентификатор()) Тогда 
					идРодителя = СокрЛП(Ссылка.Родитель.УникальныйИдентификатор());
				Иначе
					идРодителя = "";
				КонецЕсли;
				ХМЛ.ЗаписатьАтрибут("parentId",СтрЗаменить(идРодителя,Символ(160),""));
				ХМЛ.ЗаписатьТекст(строка(Ссылка.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента();
			Иначе 
				//найти ее в фильтре и если она там есть, не писать ее родителя
				Если фильтр.Найти(Ссылка) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ХМЛ.ЗаписатьНачалоЭлемента("category");
				
				ИДКод = СокрЛП(Ссылка.УникальныйИдентификатор());
				
				ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
				Если ЗначениеЗаполнено(Ссылка.Родитель.УникальныйИдентификатор()) Тогда 
					идРодителя = СокрЛП(Ссылка.Родитель.УникальныйИдентификатор());
				Иначе
					идРодителя = "";
				КонецЕсли;
				ХМЛ.ЗаписатьАтрибут("parentId",СтрЗаменить(идРодителя,Символ(160),""));
				ХМЛ.ЗаписатьТекст(строка(Ссылка.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
		ХМЛ.ЗаписатьКонецЭлемента();// categories
		
		ХМЛ.ЗаписатьНачалоЭлемента("offers");
		
		Пока Выборка.Следующий() Цикл
	
			Ссылка = Выборка.Номенклатура;
			Если НЕ Ссылка.ЭтоГруппа Тогда
				
				//Идентификатор товара
				Если ИдентифТовара = "Код" Тогда
					xmlIdТовара = Ссылка.Код;
				ИначеЕсли ИдентифТовара = "Артикул" Тогда
					xmlIdТовара	= Ссылка.Артикул;
				ИначеЕсли ИдентифТовара = "GUID" Тогда
					xmlIdТовара	= Ссылка.УникальныйИдентификатор();	
				КонецЕсли;
				
				ИД	= СокрЛП(xmlIdТовара);
				Артикул = СокрЛП(Ссылка.Артикул);
				
				Если ЗначениеЗаполнено(Ссылка.ВидНоменклатуры) Тогда 
					идРодителя = СокрЛП(Ссылка.ВидНоменклатуры.УникальныйИдентификатор());
				Иначе
					идРодителя = "";
				КонецЕсли;
				
				ХМЛ.ЗаписатьНачалоЭлемента("offer");
				
				ХМЛ.ЗаписатьАтрибут("id",СокрЛП(ИД));	
				ХМЛ.ЗаписатьАтрибут("productId",СокрЛП(ИД));	
				
				Остаток = Выборка.Остаток; 	
				Остаток = СтрЗаменить(строка(Остаток),",",".");
				Остаток = СтрЗаменить(строка(Остаток),Символ(160),"");
				
				ХМЛ.ЗаписатьАтрибут("quantity",Остаток);	
				ХМЛ.ЗаписатьНачалоЭлемента("url");
				ХМЛ.ЗаписатьТекст("");
				ХМЛ.ЗаписатьКонецЭлемента();// url	
				ХМЛ.ЗаписатьНачалоЭлемента("picture");
				ХМЛ.ЗаписатьТекст("");
				ХМЛ.ЗаписатьКонецЭлемента();	
				
				ЦенаРозн = Выборка.ЦенаПродажи;
				
				ЦенаРозн = СтрЗаменить(строка(ЦенаРозн),",",".");
				ЦенаРозн = СтрЗаменить(строка(ЦенаРозн),Символ(160),"");
				
				ЦенаЗакупа = Выборка.ЦенаЗакупа;
				
				ЦенаЗакупа = СтрЗаменить(строка(ЦенаЗакупа),",",".");
				ЦенаЗакупа = СтрЗаменить(строка(ЦенаЗакупа),Символ(160),"");
				
				ХМЛ.ЗаписатьНачалоЭлемента("price");
				ХМЛ.ЗаписатьТекст(ЦенаРозн);
				ХМЛ.ЗаписатьКонецЭлемента();
				ХМЛ.ЗаписатьНачалоЭлемента("purchasePrice");
				ХМЛ.ЗаписатьТекст(ЦенаЗакупа);
				ХМЛ.ЗаписатьКонецЭлемента();
				ХМЛ.ЗаписатьНачалоЭлемента("categoryId");
				ХМЛ.ЗаписатьТекст(СтрЗаменить(идРодителя,Символ(160),""));
				ХМЛ.ЗаписатьКонецЭлемента();	
				ХМЛ.ЗаписатьНачалоЭлемента("name");
				ИмяТовара = строка(Ссылка.Наименование);
				ХМЛ.ЗаписатьТекст(стрЗаменить(ИмяТовара,"""",""));
				ХМЛ.ЗаписатьКонецЭлемента();
				ХМЛ.ЗаписатьНачалоЭлемента("xmlId");
				ХМЛ.ЗаписатьТекст(СокрЛП(ИД));
				ХМЛ.ЗаписатьКонецЭлемента();						                    
				ХМЛ.ЗаписатьНачалоЭлемента("productName");
				ХМЛ.ЗаписатьТекст(стрЗаменить(строка(Ссылка.НаименованиеПолное),"""",""));
				ХМЛ.ЗаписатьКонецЭлемента();	
				
				ХМЛ.ЗаписатьНачалоЭлемента("param"); 
				ХМЛ.ЗаписатьАтрибут("code",строка("article"));	
				ХМЛ.ЗаписатьАтрибут("name",строка("артикул"));	
				ХМЛ.ЗаписатьТекст(СокрЛП(Артикул));				
				ХМЛ.ЗаписатьКонецЭлемента();	  
				
				ХМЛ.ЗаписатьНачалоЭлемента("vendor");
				ХМЛ.ЗаписатьТекст(СокрЛП(Ссылка.Производитель));
				ХМЛ.ЗаписатьКонецЭлемента();	
				
				ХМЛ.ЗаписатьНачалоЭлемента("unit");
				ХМЛ.ЗаписатьАтрибут("code",СокрЛП(Ссылка.ЕдиницаИзмерения.Код));
				ХМЛ.ЗаписатьАтрибут("name",строка(Ссылка.ЕдиницаИзмерения.НаименованиеПолное));
				ХМЛ.ЗаписатьАтрибут("sym",строка(Ссылка.ЕдиницаИзмерения.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента();
				
				Если ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
					//вот тут бы проверить кол-во штрихкодов и разработать алгоритм для выбора наиболее верного
					ДочерниеЗаписи = Выборка.Выбрать();
					Пока ДочерниеЗаписи.Следующий() Цикл
						Если ЗначениеЗаполнено(ДочерниеЗаписи.Штрихкод) Тогда 
							ХМЛ.ЗаписатьНачалоЭлемента("barcode");
							ХМЛ.ЗаписатьТекст(СокрЛП(ДочерниеЗаписи.Штрихкод));
							ХМЛ.ЗаписатьКонецЭлемента();
							Прервать;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
				
				ХМЛ.ЗаписатьКонецЭлемента();// offer						
				
			КонецЕсли;
		КонецЦикла;	
		
		ХМЛ.ЗаписатьКонецЭлемента();// offers			
		ХМЛ.ЗаписатьКонецЭлемента(); // shop	
		ХМЛ.ЗаписатьКонецЭлемента(); // yml_catalog	
		ХМЛ.Закрыть();
		
		Сообщить("Файл каталога сформирован по адресу " + ПутьКфайлу);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Мод_ВыгрузкаКаталогаВXMLХарактеристикиПоВидам(табКаталога, ПутьКфайлу) Экспорт
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		НесколькоОрганизаций = Истина;
	Иначе 
		НесколькоОрганизаций = Ложь;
	КонецЕсли;
	
	Если НесколькоОрганизаций Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	crm_ОрганизацииКаталогПоВидам.Ссылка КАК Организация,
		|	crm_ОрганизацииКаталогПоВидам.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.crm_Организации.КаталогПоВидам КАК crm_ОрганизацииКаталогПоВидам
		|ГДЕ
		|	crm_ОрганизацииКаталогПоВидам.Ссылка.ВыгружатьКаталог
		|	И НЕ crm_ОрганизацииКаталогПоВидам.Ссылка.ПометкаУдаления";
		
		СписокМагазинов = Запрос.Выполнить().Выгрузить();
		СписокМагазинов.Свернуть("Организация");
	Иначе
		СписокМагазинов = Новый ТаблицаЗначений;
		СписокМагазинов.Колонки.Добавить("КодМагазина");
		СписокМагазинов.Колонки.Добавить("Организация");	
		НовСтр = СписокМагазинов.Добавить();
		НовСтр.КодМагазина	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина");
		НовСтр.Организация	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Организация");
		
		Если табКаталога <> Неопределено Тогда 
			фильтр = табКаталога.Выгрузить(); 
			фильтр = ?(ЗначениеЗаполнено(фильтр), фильтр, "");
			фильтр = ?(ЗначениеЗаполнено(фильтр), фильтр.ВыгрузитьКолонку("Номенклатура"), "");
		Иначе 
			фильтр = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КаталогПоВидам");
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавлятьGUIDОрганизации = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации");
	
	Для Каждого Магазин Из СписокМагазинов Цикл 
		
		Если НесколькоОрганизаций Тогда
			Фильтр = Магазин.Организация.КаталогПоВидам.Выгрузить();
			Фильтр = ?(ЗначениеЗаполнено(Фильтр), Фильтр.ВыгрузитьКолонку("Номенклатура"), "");
			ПутьКфайлу = Магазин.Организация.ПутьКФайлуКаталога;
			Если Не ЗначениеЗаполнено(ПутьКфайлу) Тогда   
				ПутьКфайлу = КаталогВременныхФайлов() + Магазин.Организация.КодМагазинаCRM + "_catalog_icml.xml";
			КонецЕсли;
			КодМагазина = Магазин.Организация.КодМагазинаCRM;
			GUIDМагазина		= СокрЛП(Магазин.Организация.Организация.УникальныйИдентификатор());
		Иначе
			Если Не ЗначениеЗаполнено(ПутьКфайлу) Тогда 
				ПутьКфайлу = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ПутьКФайлу");
				Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда 
					ПутьКфайлу = КаталогВременныхФайлов() + "catalog_icml.xml";
				КонецЕсли
			КонецЕсли;
			КодМагазина = Магазин.КодМагазина;
			GUIDМагазина		= СокрЛП(Магазин.Организация.УникальныйИдентификатор());
		КонецЕсли;
		
		Рез = УТ11_ЗапросДляКаталогаХарактеристикиПоВидам(фильтр);
		
		ХМЛ			 	= Новый ЗаписьXML; 
		ХМЛ.ОткрытьФайл(ПутьКфайлу);
		ХМЛ.ЗаписатьОбъявлениеXML();
		ХМЛ.ЗаписатьНачалоЭлемента("yml_catalog");
		ХМЛ.ЗаписатьАтрибут("date",Формат(ТекущаяДата(),"ДФ='гггг-ММ-дд ЧЧ:мм:сс'"));		
		ХМЛ.ЗаписатьНачалоЭлемента("shop");
		ХМЛ.ЗаписатьНачалоЭлемента("name");
		ХМЛ.ЗаписатьТекст(КодМагазина);		
		ХМЛ.ЗаписатьКонецЭлемента();	
		ХМЛ.ЗаписатьНачалоЭлемента("company");
		ХМЛ.ЗаписатьТекст(КодМагазина);		
		ХМЛ.ЗаписатьКонецЭлемента();	
		
		ХМЛ.ЗаписатьНачалоЭлемента("categories");
		//
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыНоменклатуры.Ссылка КАК Ссылка,
		|	ВидыНоменклатуры.Родитель КАК РодительКод,
		|	ВидыНоменклатуры.ЭтоГруппа,
		|	ВидыНоменклатуры.ТипНоменклатуры,
		|   ВидыНоменклатуры.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры";
		
		Если не ЗначениеЗаполнено(табКаталога) Тогда 
			фильтр = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КаталогПоВидам");
			Если ЗначениеЗаполнено(фильтр) Тогда 
				фильтр = фильтр.ВыгрузитьЗначения();
			КонецЕсли;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(фильтр) Тогда 
			Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	ВидыНоменклатуры.Ссылка В ИЕРАРХИИ(&Родитель)";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	РодительКод";
		
		Запрос.УстановитьПараметр("Родитель", фильтр);
		Результат = Запрос.Выполнить().Выгрузить();   
		
		Если ЗначениеЗаполнено(фильтр) Тогда 
			Для Каждого стрГруппа из фильтр Цикл 
				ХМЛ.ЗаписатьНачалоЭлемента("category");
				
				ИДКод = СокрЛП(стрГруппа.УникальныйИдентификатор());
				
				ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
				ХМЛ.ЗаписатьАтрибут("parentId","");
				ХМЛ.ЗаписатьТекст(строка(стрГруппа.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента(); 
			КонецЦикла;;
		КонецЕсли;
		
		Для каждого стр Из Результат Цикл 
			
			Ссылка = стр.Ссылка;
			
			Если Ссылка.ЭтоГруппа Тогда	
				//найти ее в фильтре и если она там есть, не писать ее родителя
				Если фильтр.Найти(Ссылка) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ХМЛ.ЗаписатьНачалоЭлемента("category"); 
					
				ИДКод = СокрЛП(Ссылка.УникальныйИдентификатор());
				
				ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
				Если ЗначениеЗаполнено(Ссылка.Родитель.УникальныйИдентификатор()) Тогда 
					идРодителя = СокрЛП(Ссылка.Родитель.УникальныйИдентификатор());
				Иначе
					идРодителя = "";
				КонецЕсли;
				ХМЛ.ЗаписатьАтрибут("parentId",СтрЗаменить(идРодителя,Символ(160),""));
				ХМЛ.ЗаписатьТекст(строка(Ссылка.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента();
			Иначе
				//найти ее в фильтре и если она там есть, не писать ее родителя
				Если фильтр.Найти(Ссылка) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ХМЛ.ЗаписатьНачалоЭлемента("category");
				
				ИДКод = СокрЛП(Ссылка.УникальныйИдентификатор());
				
				ХМЛ.ЗаписатьАтрибут("id",стрЗаменить(ИДКод,Символ(160),""));
				Если ЗначениеЗаполнено(Ссылка.Родитель.УникальныйИдентификатор()) Тогда 
					идРодителя = СокрЛП(Ссылка.Родитель.УникальныйИдентификатор());
				Иначе
					идРодителя = "";
				КонецЕсли;
				ХМЛ.ЗаписатьАтрибут("parentId",СтрЗаменить(идРодителя,Символ(160),""));
				ХМЛ.ЗаписатьТекст(строка(Ссылка.Наименование));
				ХМЛ.ЗаписатьКонецЭлемента();

			КонецЕсли;
		КонецЦикла;
		
		ХМЛ.ЗаписатьКонецЭлемента();// categories
		
		ХМЛ.ЗаписатьНачалоЭлемента("offers");
		
		Пока Рез.Следующий() Цикл
			//выборка характеристики
			Выборка = Рез.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				
				GUIDТовара = "";
				GUIDХарактеристики = "";
				
				Ссылка = Выборка.Номенклатура;
				
				Если НЕ Ссылка.ЭтоГруппа Тогда
					
					GUIDТовара			= СокрЛП(Ссылка.УникальныйИдентификатор());
					Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
						GUIDХарактеристики 	= СокрЛП(Выборка.Характеристика.УникальныйИдентификатор());
					КонецЕсли;
					Артикул = СокрЛП(Ссылка.Артикул);
					
					Если ЗначениеЗаполнено(Ссылка.ВидНоменклатуры) Тогда 
						идРодителя = СокрЛП(Ссылка.ВидНоменклатуры.УникальныйИдентификатор());
					Иначе
						идРодителя = "";
					КонецЕсли;
					
					ХМЛ.ЗаписатьНачалоЭлемента("offer");
					
					Если ДобавлятьGUIDОрганизации = Истина Тогда 
						Если ЗначениеЗаполнено(GUIDХарактеристики) Тогда
							ХМЛ.ЗаписатьАтрибут("id", (GUIDМагазина + "#"+ GUIDТовара + "#" + GUIDХарактеристики));
						Иначе 
							ХМЛ.ЗаписатьАтрибут("id", (GUIDМагазина + "#"+ GUIDТовара));
						КонецЕсли;
						ХМЛ.ЗаписатьАтрибут("productId", (GUIDМагазина + "#"+ GUIDТовара));
					Иначе 
						Если ЗначениеЗаполнено(GUIDХарактеристики) Тогда
							ХМЛ.ЗаписатьАтрибут("id", (GUIDТовара + "#" + GUIDХарактеристики));
						Иначе 
							ХМЛ.ЗаписатьАтрибут("id", GUIDТовара);
						КонецЕсли;
						ХМЛ.ЗаписатьАтрибут("productId", GUIDТовара);
					КонецЕсли;
					
					Остаток = Выборка.Остаток; 	
					Остаток = СтрЗаменить(строка(Остаток),",",".");
					Остаток = СтрЗаменить(строка(Остаток),Символ(160),"");
					
					ХМЛ.ЗаписатьАтрибут("quantity",Остаток);	
					ХМЛ.ЗаписатьНачалоЭлемента("url");
					ХМЛ.ЗаписатьТекст("");
					ХМЛ.ЗаписатьКонецЭлемента();// url	
					ХМЛ.ЗаписатьНачалоЭлемента("picture");
					ХМЛ.ЗаписатьТекст("");
					ХМЛ.ЗаписатьКонецЭлемента();	
					
					ЦенаРозн = Выборка.ЦенаПродажи;
					
					ЦенаРозн = СтрЗаменить(строка(ЦенаРозн),",",".");
					ЦенаРозн = СтрЗаменить(строка(ЦенаРозн),Символ(160),""); 
					
					ЦенаЗакупа = Выборка.ЦенаЗакупа;
					
					ЦенаЗакупа = СтрЗаменить(строка(ЦенаЗакупа),",",".");
					ЦенаЗакупа = СтрЗаменить(строка(ЦенаЗакупа),Символ(160),"");
					
					ХМЛ.ЗаписатьНачалоЭлемента("price");
					ХМЛ.ЗаписатьТекст(ЦенаРозн);
					ХМЛ.ЗаписатьКонецЭлемента();
					ХМЛ.ЗаписатьНачалоЭлемента("purchasePrice");
					ХМЛ.ЗаписатьТекст(ЦенаЗакупа);
					ХМЛ.ЗаписатьКонецЭлемента();
					ХМЛ.ЗаписатьНачалоЭлемента("categoryId");
					ХМЛ.ЗаписатьТекст(СтрЗаменить(идРодителя,Символ(160),""));
					ХМЛ.ЗаписатьКонецЭлемента();	
					ХМЛ.ЗаписатьНачалоЭлемента("name");
					Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
						ИмяТовара = строка(Ссылка.Наименование) + ", " + строка(Выборка.Характеристика.НаименованиеПолное);
					Иначе 
						ИмяТовара = строка(Ссылка.Наименование);
					КонецЕсли;
					ХМЛ.ЗаписатьТекст(стрЗаменить(ИмяТовара,"""",""));
					ХМЛ.ЗаписатьКонецЭлемента();
					ХМЛ.ЗаписатьНачалоЭлемента("xmlId");
					
					Если ДобавлятьGUIDОрганизации = Истина Тогда
						Если ЗначениеЗаполнено(GUIDХарактеристики) Тогда
							ХМЛ.ЗаписатьТекст(GUIDМагазина + "#"+ GUIDТовара + "#" + GUIDХарактеристики);
						Иначе 
							ХМЛ.ЗаписатьТекст(GUIDМагазина + "#"+ GUIDТовара);
						КонецЕсли;
					Иначе 
						Если ЗначениеЗаполнено(GUIDХарактеристики) Тогда
							ХМЛ.ЗаписатьТекст(GUIDТовара + "#" + GUIDХарактеристики);
						Иначе 
							ХМЛ.ЗаписатьТекст(GUIDТовара);
						КонецЕсли;  
					КонецЕсли;
					
					ХМЛ.ЗаписатьКонецЭлемента();						                    
					ХМЛ.ЗаписатьНачалоЭлемента("productName");
					ХМЛ.ЗаписатьТекст(строка(Ссылка.НаименованиеПолное));
					ХМЛ.ЗаписатьКонецЭлемента();	
					
					ХМЛ.ЗаписатьНачалоЭлемента("param"); 
					ХМЛ.ЗаписатьАтрибут("code",строка("article"));	
					ХМЛ.ЗаписатьАтрибут("name",строка("артикул"));	
					ХМЛ.ЗаписатьТекст(СокрЛП(Артикул));				
					ХМЛ.ЗаписатьКонецЭлемента();	  
					
					ХМЛ.ЗаписатьНачалоЭлемента("vendor");
					ХМЛ.ЗаписатьТекст(СокрЛП(Ссылка.Производитель));
					ХМЛ.ЗаписатьКонецЭлемента();	
					
					ХМЛ.ЗаписатьНачалоЭлемента("unit");
					ХМЛ.ЗаписатьАтрибут("code",СокрЛП(Ссылка.ЕдиницаИзмерения.Код));
					ХМЛ.ЗаписатьАтрибут("name",строка(Ссылка.ЕдиницаИзмерения.НаименованиеПолное));
					ХМЛ.ЗаписатьАтрибут("sym",строка(Ссылка.ЕдиницаИзмерения.Наименование));
					ХМЛ.ЗаписатьКонецЭлемента();
					
					Если ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
						//вот тут бы проверить кол-во штрихкодов и разработать алгоритм для выбора наиболее верного
						ДочерниеЗаписи = Выборка.Выбрать();
						Пока ДочерниеЗаписи.Следующий() Цикл
							Если ЗначениеЗаполнено(ДочерниеЗаписи.Штрихкод) Тогда 
								ХМЛ.ЗаписатьНачалоЭлемента("barcode");
								ХМЛ.ЗаписатьТекст(СокрЛП(ДочерниеЗаписи.Штрихкод));
								ХМЛ.ЗаписатьКонецЭлемента();
								Прервать;
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;
				
					ХМЛ.ЗаписатьКонецЭлемента();// offer						
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	
		
		ХМЛ.ЗаписатьКонецЭлемента();// offers			
		ХМЛ.ЗаписатьКонецЭлемента(); // shop	
		ХМЛ.ЗаписатьКонецЭлемента(); // yml_catalog	
		ХМЛ.Закрыть();
		
		Сообщить("Файл каталога сформирован по адресу " + ПутьКфайлу);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьДатуCRM (дт)
	
	Если дт = Дата(1,1,1) или дт = "" или  ТипЗнч(дт) = Тип("Дата") Тогда 
		Дата1С = дт;
	Иначе		
		//Дата1С = Дата(Сред(дт,0,4)+Сред(дт,6,2)+Сред(дт,9,2)+Сред(дт,12,2)+Сред(дт,15,2)+Сред(дт,18,2));
		//"3.10.2023 13:2:55"
		//"2023-09-29 19:20:53"
		//"30.09.2023 23:32:00"
		//"2023-10-03"
		
		поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(дт, " ");
		_дата = поля[0];
		Если Поля.Количество() > 1 Тогда
			_время = поля[1];
		Иначе 
			_Время = "00:00:00";
		КонецЕсли;
		
		поля_врем = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(_время, ":");
		
		время = Формат(число(поля_врем[0]),"ЧН=;ЧЦ=2;ЧВН=")
				+Формат(число(поля_врем[1]),"ЧН=;ЧЦ=2;ЧВН=")
				+Формат(число(поля_врем[2]),"ЧН=;ЧЦ=2;ЧВН=");
		
		
		Если СтрНайти(_дата, ".") > 0 Тогда                                                      
			//дата в формате дд.мм.гггг или д.м.гггг
			поля_даты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(_дата, ".");
			ддд = Формат(Число(поля_даты[2]),"ЧН=;ЧЦ=4;ЧВН=;ЧГ=")
					+Формат(Число(поля_даты[1]),"ЧН=;ЧЦ=2;ЧВН=")
					+Формат(Число(поля_даты[0]),"ЧН=;ЧЦ=2;ЧВН=")
		КонецЕсли;
		
		Если СтрНайти(_дата, "-") > 0 Тогда
			//2023-09-29
			поля_даты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(_дата, "-");
			ддд = Формат(Число(поля_даты[0]),"ЧН=;ЧЦ=4;ЧВН=;ЧГ=")   //год
					+Формат(Число(поля_даты[1]),"ЧН=;ЧЦ=2;ЧВН=")//мес
					+Формат(Число(поля_даты[2]),"ЧН=;ЧЦ=2;ЧВН=")//д
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ддд) Тогда
			ВызватьИсключение "Поле Дата+Время имеет неожиданный формат! "+строка(дт);
		КонецЕсли;
				
		Дата1С = Дата(ддд+время);
		
	КонецЕсли;
	
	
	Возврат Дата1С;
	
КонецФункции

&НаСервере
Функция РасчитатьНДС(Сумма, Ставка)
	
	НДС = 0;
	
	Если Ставка = Справочники.СтавкиНДС.НайтиПоНаименованию("18%") Тогда 
		ПроцентСтавки = 18;
	ИначеЕсли Ставка = Справочники.СтавкиНДС.НайтиПоНаименованию("20%") Тогда 
		ПроцентСтавки = 20;
	ИначеЕсли Ставка = Справочники.СтавкиНДС.НайтиПоНаименованию("10%") Тогда 
		ПроцентСтавки = 10;
	КонецЕсли;
	
	Если ПроцентСтавки <> 0 и ПроцентСтавки <> Неопределено Тогда 
		НДС = Сумма / (100 + ПроцентСтавки) * ПроцентСтавки;
		Если НДС <> 0 Тогда 
			Возврат Число(Формат(НДС,"ЧДЦ=2"));
		Иначе 
			Возврат НДС;
		КонецЕсли;
	Иначе 
		Возврат НДС;
	КонецЕсли;
	
КонецФункции

Процедура Мод_ВыгрузитьКлиента(Клиент) Экспорт
	
	ИмяСервера = СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));
	КлючCRM = СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	КодМагазина = СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	
	переменные = Новый Соответствие();
	переменные.Вставить("apiKey", КлючCRM);
	переменные.Вставить("site", КодМагазина);
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КорпоративныеКлиенты") = Истина Тогда
		
		КорпКлиент = Новый Соответствие();
		КорпКлиент.Вставить("nickName",		Клиент.Наименование);  
		//КорпКлиент.Вставить("createdAt",	crm_RetailCRMОбщий.ДатаВремяДляCRM(ТекущаяДата()));
		КорпКлиент.Вставить("firstName",	Клиент.Наименование);
		КорпКлиент.Вставить("externalId",	Строка(Клиент.УникальныйИдентификатор()));
		
		//компании
		Компании = Новый Массив();
		
		Компания = Новый Соответствие();
		Компания.Вставить("isMain",	"true");
		Компания.Вставить("name",	"ОКБ БЕРКАНА ООО");
		Компания.Вставить("isMain",	"true");
		
		ДанныеКонтрагента = Новый Соответствие();
		ДанныеКонтрагента.Вставить("contragentType",	"legal-entity");
		ДанныеКонтрагента.Вставить("legalName", 		"ООО ОКБ БЕРКАНА");
		ДанныеКонтрагента.Вставить("INN",				"7716713936");
		ДанныеКонтрагента.Вставить("OKPO",				"771601001");
		ДанныеКонтрагента.Вставить("KPP",				"1127746272444");
		
		Компания.Вставить("contragent", 				ДанныеКонтрагента);
		
		Компании.Добавить(Компания);
		
		//компании
		
		Телефоны = Новый Массив();
		
		Телефон = Новый Соответствие();
		Телефон.Вставить("number",	"89992223355");
		
		Телефоны.Добавить(Телефон);
		
		КорпКлиент.Вставить("phones",Телефоны);
		
		КорпКлиент.Вставить("companies", Компании);
		
		переменные.Вставить("by", "id");
		переменные.Вставить("customerCorporate", crm_RetailCRMОбщий.JsonTest(КорпКлиент,Новый ЗаписьJSON));
		
		ответ = crm_RetailCRMОбщий.HTTPзапросPOST(ИмяСервера ,"/api/v5/customers-corporate/create", переменные);
		
	Иначе 
		
		Контрагент = Новый Соответствие();
		Контрагент.Вставить("patronymic",	"Отчество");  
		Контрагент.Вставить("lastName",		"Фамилия");
		Контрагент.Вставить("firstName",	Клиент.Наименование);
		Контрагент.Вставить("externalId",	строка(Клиент.УникальныйИдентификатор()));
		
		Телефоны = Новый Массив();
		
		Телефон = Новый Соответствие();
		Телефон.Вставить("number",	"89992223355");
		
		Телефоны.Добавить(Телефон);
		
		Контрагент.Вставить("phones",Телефоны);
		
		ДанныеКонтрагента = Новый Соответствие();
		ДанныеКонтрагента.Вставить("contragentType",	"individual");
		ДанныеКонтрагента.Вставить("legalName", 		Клиент.Наименование);
		
		Контрагент.Вставить("contragent", 				ДанныеКонтрагента);
		
		переменные.Вставить("by", "id");
		переменные.Вставить("customer", crm_RetailCRMОбщий.JsonTest(Контрагент, Новый ЗаписьJSON));
		
		ответ = crm_RetailCRMОбщий.HTTPзапросPOST(ИмяСервера ,"/api/v5/customers/create", переменные);
		
	КонецЕсли;
	
	Если Найти(ответ, """success"":true") > 0 Тогда
		Сообщить("Клиент успешно выгружен в RetailCRM");
	Иначе
		Сообщить("Трудности с выгрузкой клиента: " , СтатусСообщения.Важное);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура РегистрацияСкладскойСистемыНаСервере(СкладскаяСистемаАктивна = Ложь) Экспорт

	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	Код = "1C";
	
	Если СкладскаяСистемаАктивна = Истина Тогда 
		//ничего не делаем
	Иначе 		
		Если ЗначениеЗаполнено(ИмяСервера) Тогда     //ЕНС. добавил проверку на заполненность0000-
			АдресСкрипта = "/api/v5/integration-modules/" + Код + "?apiKey=" + КлючCRM;
		
			Ответ1 = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
			Ответ1 = crm_RetailCRMОбщий.UnJSONТест(Ответ1);
			Если Ответ1["success"] = Истина Тогда
				СкладскаяСистемаАктивна = Ответ1["integrationModule"]["active"];
				Если СкладскаяСистемаАктивна <> Неопределено Тогда
					ЭтотОбъект.СкладскаяСистема = СкладскаяСистемаАктивна;
					УстановитьЗначениеКонстанты("СкладскаяСистема", СкладскаяСистемаАктивна);
					Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СкладскаяСистема") <> СкладскаяСистемаАктивна Тогда 
						Мод_СохранитьКонстанты();
						ЭтотОбъект.СкладскаяСистема = СкладскаяСистемаАктивна;
						УстановитьЗначениеКонстанты("СкладскаяСистема", СкладскаяСистемаАктивна);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ИмяСервера) И СкладскаяСистемаАктивна <> Истина Тогда //ЕНС. добавил проверку на заполненность
		переменные = Новый Соответствие();
		
		переменные.Вставить("apiKey",crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
		
		конфигурация = Новый Соответствие();
		конфигурация.Вставить("name",				"1C");
		конфигурация.Вставить("code", 				Код);
		конфигурация.Вставить("integrationCode", 	Код);
		конфигурация.Вставить("active", 			"true");
		
		конфигурация.Вставить("baseUrl",			"http://demo1c.ru");
		конфигурация.Вставить("clientId",			"1");    
		конфигурация.Вставить("logo",				"http://download.retailcrm.pro/logo1c.svg");
		СклСистема = Новый Соответствие();
		Callback  = Новый Соответствие();
		
		actions = Новый Массив();
		
		Колбэки = Новый Соответствие();
		Колбэки.Вставить("code",	Код);
		Колбэки.Вставить("url",		"http://demo1c.ru");
		
		actions.Добавить(Колбэки);
		
		Callback .Вставить("actions",actions);
		СклСистема.Вставить("store",Callback);
		
		конфигурация.Вставить("integrations",		СклСистема);
		
		переменные.Вставить("integrationModule", crm_RetailCRMОбщий.JsonTest(конфигурация,Новый ЗаписьJSON));
		
			ответ = crm_RetailCRMОбщий.HTTPзапросPOST(ИмяСервера,"/api/v5/integration-modules/" + Код + "/edit", переменные);
			
			Если Найти(ответ, """success"":true") > 0 Тогда                 
				Сообщить("Складская система успешно зарегистрирована!");
				ЭтотОбъект.СкладскаяСистема = Истина;
				УстановитьЗначениеКонстанты("СкладскаяСистема", Истина);
				Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СкладскаяСистема") <> Истина Тогда 
					Мод_СохранитьКонстанты();
					УстановитьЗначениеКонстанты("СкладскаяСистема", Истина);
				КонецЕсли;
			Иначе
				Сообщить("Трудности с регистрацией складской системы");
				сообщить(ответ);
				ЭтотОбъект.СкладскаяСистема = Ложь;
				УстановитьЗначениеКонстанты("СкладскаяСистема", Ложь);
				Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СкладскаяСистема") <> Ложь Тогда 
					Мод_СохранитьКонстанты();
					УстановитьЗначениеКонстанты("СкладскаяСистема", Ложь);
				КонецЕсли;
			КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СозданиеПользовательскогоПоля() Экспорт
	
	//проверяем есть ли такое поле в crm
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	Код = "update_api1c";   
	
	АдресСкрипта = "api/v5/custom-fields?apiKey=" + КлючCRM +"&filter[code]=" + Код;
	
	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
	
	Если Ответ["customFields"].Количество() > 0 Тогда 
		Сообщить ("Пользовательское поле уже создано!");
	Иначе 
		
		переменные = Новый Соответствие();
		переменные.Вставить("apiKey", КлючCRM);
		
		ПП = Новый Соответствие();
		ПП.Вставить("name",			"Поле для работы с web-сервисом 1С");  
		ПП.Вставить("code",			Код);
		ПП.Вставить("type",			"string");
		ПП.Вставить("displayArea",	"shipment");
		ПП.Вставить("viewMode",		"miss");
		
		переменные.Вставить("customField", crm_RetailCRMОбщий.JsonTest(ПП, Новый ЗаписьJSON));
		
		ответ = crm_RetailCRMОбщий.HTTPзапросPOST(ИмяСервера ,"/api/v5/custom-fields/order/create", переменные);
		Если Найти(ответ, """success"":true") > 0 Тогда
			Сообщить("Пользовательское поле успешно создано в RetailCRM");
		Иначе
			Сообщить("Не удалось создать пользовательское поле" , СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Мод_ПолучитьЗаказПоИД(ИДЗаказа) Экспорт
	
	МассивЗаказов = Новый Массив;
	
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"); 
	ApiKey 		 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	АдресСкрипта = "/api/v5/orders/" + ИДЗаказа + "?apiKey=" + ApiKey + "&by=id";
	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
	
	МассивЗаказов.Добавить(Ответ["order"]);

	возврат МассивЗаказов;
	
КонецФункции

&НаСервере
Функция УТ11_ВернутьВозврат (Реализация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		|ГДЕ
		|	ВозвратТоваровОтКлиента.ДокументРеализации = &ДокументРеализации
		//|	И ВозвратТоваровОтКлиента.Проведен
		|";

	Запрос.УстановитьПараметр("ДокументРеализации", Реализация);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	искВозврат = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		искВозврат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат искВозврат;
	
КонецФункции

// Параметры
//	док - ДокументОбъект.ЗаказКлиента / ДокументСсылка.ЗаказКлиента
//
Функция УТ11_ПолучитьСостояниеЗаказа(док)

	Если мЗапросСостоянияЗаказов = Неопределено Тогда
		мЗапросСостоянияЗаказов = СоздатьЗапросСостоянияЗаказов();
	КонецЕсли;
	
	мЗапросСостоянияЗаказов.УстановитьПараметр("Заказ", док.Ссылка);
	Результат = мЗапросСостоянияЗаказов.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Состояние;
	КонецЦикла;
	
	Возврат Неопределено;	
	
КонецФункции

Функция ПолучитьДоговорКонтрагента(ХозОперация, Валюта, Контрагент, Организация)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Контрагент = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|	И ДоговорыКонтрагентов.Статус = &Статус
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозОперация);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", Валюта);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Договор = Неопределено;
	Пока Выборка.Следующий() Цикл
		Договор = Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Договор;	
	
КонецФункции

// Параметры
//	докВозврат - док ссылка
//	Реализация - док ? объект/ссылка
//	ТоварыCRM - ?
//
Процедура УТ11_СоздатьВозврат(Знач докВозврат, Реализация, ТоварыCRM)
	
	Если Не ЗначениеЗаполнено(докВозврат) Тогда
		ДокВозврат = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
	Иначе 
		ДокВозврат = докВозврат.ПолучитьОбъект();
		
		Если докВозврат.Проведен Тогда
			ДокВозврат.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаДок = ДокВозврат.Дата;
	ДокВозврат.Товары.Очистить();
	
	ДокВозврат.Заполнить(Реализация);
	
	ТЗРеализация = Реализация.Товары.Выгрузить();
	ТЗРеализация.Свернуть("Номенклатура, Характеристика", "Количество");
	//если частичный возврат, то сморим на статусы товаров
	//ТЧ не будем очищать, будем искать товар из ТЧ возврата в ТЗ товаров CRM
	//если не нашли, удаляем
	//если нашли, но товар не в отмене, удаляем
	Для Каждого стр из ТоварыCRM Цикл 
		Если стр["СтатусТовара"] =  "returned" Тогда
			Продолжить;
		ИначеЕсли стр["СтатусТовара"] = "chastichnyi-vozvrat" Тогда 
			//сравниваем с реализацией
			СтруктураНоменклатуры		= УТ11_ВернутьНоменклатуру(стр["xmlId"]);
			искХар						= СтруктураНоменклатуры.искХарактеристика;
			искНом 						= СтруктураНоменклатуры.искНоменклатура;
			Если ЗначениеЗаполнено(искХар) Тогда 
				//СтрРеализации = Реализация.Товары.Найти(искХар,"Характеристика");
				СтрРеализации = ТЗРеализация.Найти(искХар,"Характеристика");
				
				СтрВозврата   = ДокВозврат.Товары.Найти(искХар,"Характеристика");
				//СтрокиВозврата   = ДокВозврат.Товары.НайтиСтроки(Новый Структура("Характеристика",искХар));
			Иначе 
				//СтрРеализации = Реализация.Товары.Найти(искНом,"Номенклатура");
				СтрРеализации = ТЗРеализация.Найти(искНом,"Номенклатура");
				
				СтрВозврата   = ДокВозврат.Товары.Найти(искНом,"Номенклатура");
				//СтрокиВозврата   = ДокВозврат.Товары.НайтиСтроки(Новый Структура("Номенклатура",искНом));
			КонецЕсли;
			Если СтрРеализации <> Неопределено Тогда 
				Если СтрРеализации.Количество > стр["Количество"] Тогда //сравним количество и в возврате оставим разницу
					СтрВозврата.Количество = СтрРеализации.Количество - стр["Количество"];
					СтрВозврата.КоличествоУпаковок = СтрВозврата.Количество;
					СтрВозврата.Сумма = СтрВозврата.Количество * СтрВозврата.Цена;
					СтрВозврата.СуммаСНДС = СтрВозврата.Сумма;
				КонецЕсли;
			КонецЕсли;
		Иначе 
			//находим сроку с номенклатурой
			СтруктураНоменклатуры		= УТ11_ВернутьНоменклатуру(стр["xmlId"]);
			искХар						= СтруктураНоменклатуры.искХарактеристика;
			искНом 						= СтруктураНоменклатуры.искНоменклатура;
			Если ЗначениеЗаполнено(искХар) Тогда 
				//НайденСтр = ДокВозврат.Товары.Найти(искХар,"Характеристика");
				НайденСтр = ДокВозврат.Товары.НайтиСтроки(Новый Структура("Характеристика",искХар));
			Иначе 
				//НайденСтр = ДокВозврат.Товары.Найти(искНом,"Номенклатура");
				НайденСтр = ДокВозврат.Товары.НайтиСтроки(Новый Структура("Номенклатура",искНом));
			КонецЕсли;
			Если НайденСтр <> Неопределено Тогда 
				//если нашли несколько строк, то ...не найдем мы несколько так как 1С в возврате сворачивает товары и ставит среднюю цену
				Если НайденСтр.Количество() > 0 Тогда
					Для Каждого строкаВозвр из НайденСтр Цикл 
						//сравним количество
						Если строкаВозвр.Количество > стр["Количество"] Тогда 
							строкаВозвр.Количество 			= строкаВозвр.Количество - стр["Количество"];
							строкаВозвр.КоличествоУпаковок  = строкаВозвр.Количество;
							строкаВозвр.Сумма 				= строкаВозвр.Количество * строкаВозвр.Цена;
							строкаВозвр.СуммаСНДС 			= строкаВозвр.Сумма;
						ИначеЕсли строкаВозвр.Количество = стр["Количество"] Тогда 
							ДокВозврат.Товары.Удалить(ДокВозврат.Товары.Индекс(строкаВозвр));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	ДокВозврат.Дата			= ?(не ЗначениеЗаполнено(ДатаДок), ТекущаяДата(),ДатаДок);
	
	Попытка
		ДокВозврат.Записать(РежимЗаписиДокумента.Проведение);
		Сообщить("Проведен: " + ДокВозврат , СтатусСообщения.Информация);
	Исключение
		Сообщить("Не удалось провести: " + ДокВозврат + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Попытка
			ДокВозврат.Записать(РежимЗаписиДокумента.Запись);
			Сообщить("Записан: " + ДокВозврат , СтатусСообщения.Информация);
		Исключение
			Сообщить("Не удалось записать: " + ДокВозврат + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
			ВызватьИсключение; //ЕНС
		КонецПопытки;  
	КонецПопытки;
                                            
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьАрхивКлиентов(Партнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект,
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ПОМЕСТИТЬ вт_Сведения
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Контрагенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ЕСТЬNULL(Партнеры.ДатаРегистрации, """") КАК ДатаРегистрации,
	|	ЕСТЬNULL(Партнеры.Пол, """") КАК Пол,
	|	ЕСТЬNULL(Партнеры.ДатаРождения, """") КАК ДатаРождения,
	|	ЕСТЬNULL(вт_Сведения.Значение, 0) КАК ИД,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
	|	ЕСТЬNULL(Партнеры.Ссылка, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Партнер,
	|	ЕСТЬNULL(Партнеры.НаименованиеПолное, """") КАК НаименованиеПартнера
	|ПОМЕСТИТЬ вт_итог
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Сведения КАК вт_Сведения
	|		ПО Контрагенты.Ссылка = вт_Сведения.Объект
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И НЕ Партнеры.Предопределенный
	|	И Контрагенты.ЮридическоеФизическоеЛицо = &ЮрФизЛицо";

	Если ЗначениеЗаполнено(Партнер) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И Партнеры.Ссылка = &Ссылка
		|;";
	Иначе 
		Запрос.Текст = Запрос.Текст + "
		|;";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	//
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Телефон,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_телефон
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка1,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Почта
	|ПОМЕСТИТЬ вт_почта
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипПочта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Адрес,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка3
	|ПОМЕСТИТЬ вт_адрес
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК ТелефонП
	|ПОМЕСТИТЬ П_телефон
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК АдресП
	|ПОМЕСТИТЬ П_адрес
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК ПочтаП
	|ПОМЕСТИТЬ П_почта
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипПочта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_итог.Контрагент КАК Контрагент,
	|	вт_итог.ДатаРегистрации КАК ДатаРегистрации,
	|	вт_итог.Пол КАК Пол,
	|	вт_итог.ДатаРождения КАК ДатаРождения,
	|	вт_итог.ИД КАК ИД,
	|	вт_итог.НаименованиеПолное КАК НаименованиеПолное,
	|	вт_итог.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	вт_итог.ИНН КАК ИНН,
	|	вт_итог.КПП КАК КПП,
	|	вт_итог.КодПоОКПО КАК КодПоОКПО,
	|	вт_итог.Партнер КАК Партнер,
	|	вт_итог.НаименованиеПартнера КАК НаименованиеПартнера,
	|	ЕСТЬNULL(вт_адрес.Адрес, """") КАК Адрес,
	|	ЕСТЬNULL(вт_почта.Почта, """") КАК Почта,
	|	ЕСТЬNULL(вт_телефон.Телефон, """") КАК Телефон,
	|	ЕСТЬNULL(П_адрес.АдресП, """") КАК АдресПартнера,
	|	ЕСТЬNULL(П_почта.ПочтаП, """") КАК ПочтаПартнера,
	|	ЕСТЬNULL(П_телефон.ТелефонП, """") КАК ТелефонПартнера
	|ИЗ
	|	вт_итог КАК вт_итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_телефон КАК вт_телефон
	|		ПО вт_итог.Контрагент = вт_телефон.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_почта КАК вт_почта
	|		ПО вт_итог.Контрагент = вт_почта.Ссылка1
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_адрес КАК вт_адрес
	|		ПО вт_итог.Контрагент = вт_адрес.Ссылка3
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_телефон КАК П_телефон
	|		ПО вт_итог.Партнер.Ссылка = П_телефон.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_адрес КАК П_адрес
	|		ПО вт_итог.Партнер.Ссылка = П_адрес.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_почта КАК П_почта
	|		ПО вт_итог.Партнер.Ссылка = П_почта.Ссылка
	//|ГДЕ
	//|	вт_итог.ИД = &ИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент
	|ИТОГИ
	|	МАКСИМУМ(ДатаРегистрации),
	|	МАКСИМУМ(Пол),
	|	МАКСИМУМ(ДатаРождения),
	|	МАКСИМУМ(ИД),
	|	МАКСИМУМ(НаименованиеПолное),
	|	МАКСИМУМ(ЮридическоеФизическоеЛицо),
	|	МАКСИМУМ(ИНН),
	|	МАКСИМУМ(КПП),
	|	МАКСИМУМ(КодПоОКПО),
	|	МАКСИМУМ(Партнер),
	|	МАКСИМУМ(НаименованиеПартнера),
	|	МАКСИМУМ(Адрес),
	|	МАКСИМУМ(Почта),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Телефон),
	|	МАКСИМУМ(АдресПартнера),
	|	МАКСИМУМ(ПочтаПартнера),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТелефонПартнера)
	|ПО
	|	Контрагент";
	
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	СвойствоКонтрагентов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	Запрос.УстановитьПараметр("ИД", 0);
	Запрос.УстановитьПараметр("Свойство", СвойствоКонтрагентов);
	Запрос.УстановитьПараметр("ЮрФизЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо); 
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон); 
	Запрос.УстановитьПараметр("ТипПочта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Ссылка", Партнер);	
	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	//групповые итоги
	Выборка = Результат.Выбрать(способВыборки);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяСервера");
	СтруктураПараметров.Вставить("КлючCRM");
	СтруктураПараметров.Вставить("КодМагазина");
	СтруктураПараметров.Вставить("СвойствоКонтрагентов");
	СтруктураПараметров.Вставить("СвойствоПартнеров");
	СтруктураПараметров.Вставить("СвойствоКонтЛиц");
	СтруктураПараметров.Вставить("Корпы");
	
	Корпы = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КорпоративныеКлиенты");
	СвойствоКонтрагентов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	СвойствоКонтЛиц = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_КонтактныеЛицаПартнеров);
	
	СтруктураПараметров.ИмяСервера    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));;
	СтруктураПараметров.КлючCRM    		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	СтруктураПараметров.КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	СтруктураПараметров.СвойствоКонтрагентов= СвойствоКонтрагентов;
	СтруктураПараметров.СвойствоПартнеров	= СвойствоПартнеров;
	СтруктураПараметров.СвойствоКонтЛиц		= СвойствоКонтЛиц;
	СтруктураПараметров.Корпы				= Корпы;
	
	//для выгрузки архива пакетами
	Счетчик = 0;
	МассивПакета = Новый Массив;
    КолКлиентов = Выборка.Количество(); //кол-во заказов в выборке

	Пока Выборка.Следующий() Цикл
			Счетчик = Счетчик + 1;
			КолКлиентов = КолКлиентов - 1;
			
			//можно проверить количество телефонов, если больше 1 то массив передаем
			ТЗТелефонов = Новый ТаблицаЗначений;
			ТЗТелефонов.Колонки.Добавить("Телефон");
			
			Если ЗначениеЗаполнено(Выборка.ТелефонПартнера) Тогда 
				ДочерниеЗаписи = Выборка.Выбрать();
				Пока ДочерниеЗаписи.Следующий() Цикл
					Если ЗначениеЗаполнено(ДочерниеЗаписи.ТелефонПартнера) Тогда
					Стр = ТЗТелефонов.Добавить();
					Стр.Телефон = ДочерниеЗаписи.ТелефонПартнера;	
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		
			crm_RetailCRMОбщий.ВыгрузитьАрхивногоКлиента(Выборка, СтруктураПараметров, Счетчик, МассивПакета, КолКлиентов, ТЗТелефонов);
			
			Если Счетчик = 50 Тогда 
				Счетчик = 0;
				МассивПакета = Новый Массив;
			КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВыгрузитьАрхивЗаказов(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект,
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ПОМЕСТИТЬ вт_Сведения
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Документ.ЗаказКлиента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(вт_Сведения.Значение, 0) КАК ИД,
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Статус КАК Статус,
	|	ЗаказКлиента.Партнер КАК Клиент,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Соглашение КАК Соглашение,
	|	ЗаказКлиента.Договор КАК Договор,
	|	ЗаказКлиента.Склад КАК Склад,
	|	ЗаказКлиента.Менеджер КАК Менеджер
	|ПОМЕСТИТЬ вт_Итог
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Сведения КАК вт_Сведения
	|		ПО ЗаказКлиента.Ссылка = вт_Сведения.Объект
	|ГДЕ
	|	ЗаказКлиента.Организация = &Организация
	|	И ЗаказКлиента.Дата МЕЖДУ &ДатаС И &ДатаПо
	|	И ЗаказКлиента.Контрагент.ЮридическоеФизическоеЛицо = &ЮридическоеФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Итог.Ссылка КАК Ссылка,
	|	вт_Итог.ИД КАК ИД,
	|	вт_Итог.Дата КАК Дата,
	|	вт_Итог.Статус КАК Статус,
	|	вт_Итог.Клиент КАК Клиент,
	|	вт_Итог.Контрагент КАК Контрагент,
	|	вт_Итог.Склад КАК Склад,
	|	вт_Итог.Менеджер КАК Менеджер
	|ПОМЕСТИТЬ вт_Заказы
	|ИЗ
	|	вт_Итог КАК вт_Итог
	|ГДЕ
	|	вт_Итог.ИД = &ИД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугТовары.ЗаказКлиента КАК ЗаказКлиента
	|ПОМЕСТИТЬ вт_реализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Заказы.Ссылка КАК Заказ,
	|	вт_Заказы.ИД КАК ИД,
	|	вт_Заказы.Дата КАК Дата,
	|	вт_Заказы.Статус КАК Статус,
	|	вт_Заказы.Клиент КАК Клиент,
	|	вт_Заказы.Контрагент КАК Контрагент,
	|	вт_Заказы.Склад КАК Склад,
	|	вт_Заказы.Менеджер КАК Менеджер,
	|	ЕСТЬNULL(вт_реализации.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК Реализация
	|ПОМЕСТИТЬ итогРеализ
	|ИЗ
	|	вт_Заказы КАК вт_Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_реализации КАК вт_реализации
	|		ПО вт_Заказы.Ссылка = вт_реализации.ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиентаТовары.Ссылка КАК Ссылка,
	|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации КАК ДокументРеализации
	|ПОМЕСТИТЬ втВозвраты
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
	|ГДЕ
	|	ВозвратТоваровОтКлиентаТовары.Ссылка.Проведен
	|	И ВозвратТоваровОтКлиентаТовары.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка КАК ПКО,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.Дата КАК Дата,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа КАК ОснованиеПлатежа
	|ПОМЕСТИТЬ вт_ПКО
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПриходныйКассовыйОрдерРасшифровкаПлатежа.ОснованиеПлатежа) = ТИП(Документ.ЗаказКлиента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка КАК ПоступлениеБДС,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.Дата КАК Дата,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ОснованиеПлатежа КАК ОснованиеПлатежа
	|ПОМЕСТИТЬ вт_ПБДС
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ОснованиеПлатежа) = ТИП(Документ.ЗаказКлиента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка КАК Эквайринговая,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Ссылка.Дата КАК Дата,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ОперацияПоПлатежнойКартеРасшифровкаПлатежа.ОснованиеПлатежа КАК ОснованиеПлатежа
	|ПОМЕСТИТЬ вт_ЭО
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ОперацияПоПлатежнойКартеРасшифровкаПлатежа
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ОперацияПоПлатежнойКартеРасшифровкаПлатежа.ОснованиеПлатежа) = ТИП(Документ.ЗаказКлиента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	итогРеализ.Заказ КАК Заказ,
	|	МАКСИМУМ(итогРеализ.ИД) КАК ИД,
	|	итогРеализ.Статус КАК Статус,
	|	итогРеализ.Клиент КАК Клиент,
	|	итогРеализ.Контрагент КАК Контрагент,
	|	итогРеализ.Склад КАК Склад,
	|	итогРеализ.Менеджер КАК Менеджер,
	|	МАКСИМУМ(итогРеализ.Реализация) КАК Реализация,
	|	ЕСТЬNULL(втВозвраты.Ссылка, ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтКлиента.ПустаяСсылка)) КАК ДокВозврат,
	|	вт_ПКО.ПКО КАК ПКО,
	|	вт_ПБДС.ПоступлениеБДС КАК ПоступлениеБДС,
	|	вт_ЭО.Эквайринговая КАК Эквайринговая
	|ИЗ
	|	итогРеализ КАК итогРеализ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВозвраты КАК втВозвраты
	|		ПО итогРеализ.Реализация = втВозвраты.ДокументРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ПКО КАК вт_ПКО
	|		ПО итогРеализ.Заказ = вт_ПКО.ОснованиеПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ПБДС КАК вт_ПБДС
	|		ПО итогРеализ.Заказ = вт_ПБДС.ОснованиеПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ЭО КАК вт_ЭО
	|		ПО итогРеализ.Заказ = вт_ЭО.ОснованиеПлатежа
	|
	|СГРУППИРОВАТЬ ПО
	|	итогРеализ.Заказ,
	|	итогРеализ.Статус,
	|	итогРеализ.Клиент,
	|	итогРеализ.Контрагент,
	|	итогРеализ.Склад,
	|	итогРеализ.Менеджер,
	|	ЕСТЬNULL(втВозвраты.Ссылка, ЗНАЧЕНИЕ(Документ.ВозвратТоваровОтКлиента.ПустаяСсылка)),
	|	вт_ПКО.ПКО,
	|	вт_ПБДС.ПоступлениеБДС,
	|	вт_ЭО.Эквайринговая
	|
	|УПОРЯДОЧИТЬ ПО
	|	итогРеализ.Заказ.Дата
	|ИТОГИ
	|	МАКСИМУМ(ИД),
	|	МАКСИМУМ(Статус),
	|	МАКСИМУМ(Клиент),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(Склад),
	|	МАКСИМУМ(Менеджер),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Реализация),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокВозврат),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПКО),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПоступлениеБДС),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Эквайринговая)
	|ПО
	|	Заказ";
	
	Запрос.УстановитьПараметр("Значение", "пусто");
	Запрос.УстановитьПараметр("ДатаПо", ДатаОкончанияВыгрузкиЗаказов);
	Запрос.УстановитьПараметр("ДатаС", ДатаНачалаВыгрузкиЗаказов);
	Свойство = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИД", 0);
	Запрос.УстановитьПараметр("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	Результат = Запрос.Выполнить();
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	//групповые итоги
	Выборка = Результат.Выбрать(способВыборки);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяСервера");
	СтруктураПараметров.Вставить("КлючCRM");
	СтруктураПараметров.Вставить("КодМагазина");
	СтруктураПараметров.Вставить("offers_id");
    СтруктураПараметров.Вставить("ИдентифТовара");
	СтруктураПараметров.Вставить("ИспользованиеХарактеристик");
	СтруктураПараметров.Вставить("СвойствоЗаказов");
	СтруктураПараметров.Вставить("СвойствоЗаказовМагазин");
	СтруктураПараметров.Вставить("СвойствоПартнеров");
	СтруктураПараметров.Вставить("СвойствоКонтрагентов");
	
	ИдентифТовара = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИдентификаторТовара");
	Если ИдентифТовара = Неопределено или Не ЗначениеЗаполнено(ИдентифТовара) Тогда 
		ИдентифТовара = "Код";
	КонецЕсли;
	
	СвойствоЗаказов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	СвойствоЗаказовМагазин = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("site", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	СвойствоКонтрагентов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	
	СтруктураПараметров.ИмяСервера    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));;
	СтруктураПараметров.КлючCRM    		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	СтруктураПараметров.КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	СтруктураПараметров.offers_id    	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("offers_id");
	СтруктураПараметров.ИдентифТовара	= ИдентифТовара; 
	СтруктураПараметров.ИспользованиеХарактеристик	= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик");
	СтруктураПараметров.СвойствоЗаказов	= СвойствоЗаказов;
	СтруктураПараметров.СвойствоЗаказовМагазин	= СвойствоЗаказовМагазин;
	СтруктураПараметров.СвойствоКонтрагентов	= СвойствоКонтрагентов;
	
	Отказ = Ложь; 
	
	//для выгрузки архива пакетами
	Счетчик = 0;
	МассивПакета = Новый Массив;
    КолЗаказов = Выборка.Количество(); //кол-во заказов в выборке

	Пока Выборка.Следующий() Цикл
			Счетчик = Счетчик + 1;
			КолЗаказов = КолЗаказов - 1;
			
			//проверим количество возвратов и реализаций
			ТЗРеализаций = Новый ТаблицаЗначений;
			ТЗРеализаций.Колонки.Добавить("Реализация");
			
			ТЗВозвратов = Новый ТаблицаЗначений;
			ТЗВозвратов.Колонки.Добавить("ДокВозврат");
			
			ТЗПКО = Новый ТаблицаЗначений;
			ТЗПКО.Колонки.Добавить("ПКО");
			
			ТЗПоступлениеБДС = Новый ТаблицаЗначений;
			ТЗПоступлениеБДС.Колонки.Добавить("ПоступлениеБДС");
			
			ТЗЭквайринг = Новый ТаблицаЗначений;
			ТЗЭквайринг.Колонки.Добавить("ЭквайринговаяОперация");
			
			Если ЗначениеЗаполнено(Выборка.ДокВозврат) или ЗначениеЗаполнено(Выборка.Реализация) или ЗначениеЗаполнено(Выборка.ПКО) или 
				ЗначениеЗаполнено(Выборка.ПоступлениеБДС) или ЗначениеЗаполнено(Выборка.Эквайринговая) Тогда 
				ДочерниеЗаписи = Выборка.Выбрать();
				Пока ДочерниеЗаписи.Следующий() Цикл
					//возвраты
					Если ЗначениеЗаполнено(ДочерниеЗаписи.ДокВозврат) Тогда
						СтрВ = ТЗВозвратов.Добавить();
						СтрВ.ДокВозврат = ДочерниеЗаписи.ДокВозврат;	
					КонецЕсли;
					//реализации
					Если ЗначениеЗаполнено(ДочерниеЗаписи.Реализация) Тогда
						СтрР = ТЗРеализаций.Добавить();
						СтрР.Реализация = ДочерниеЗаписи.Реализация;	
					КонецЕсли;
					//приходные ордера	
					Если ЗначениеЗаполнено(ДочерниеЗаписи.ПКО) Тогда
						СтрПриход = ТЗПКО.Добавить();
						СтрПриход.ПКО = ДочерниеЗаписи.ПКО;	
					КонецЕсли;
					//эквайринг
					Если ЗначениеЗаполнено(ДочерниеЗаписи.Эквайринговая) Тогда
						СтрЭО = ТЗЭквайринг.Добавить();
						СтрЭО.ЭквайринговаяОперация = ДочерниеЗаписи.Эквайринговая;	
					КонецЕсли;
					//поступление безналичных дс
					Если ЗначениеЗаполнено(ДочерниеЗаписи.ПоступлениеБДС) Тогда
						СтрБезнал = ТЗПоступлениеБДС.Добавить();
						СтрБезнал.ПоступлениеБДС = ДочерниеЗаписи.ПоступлениеБДС;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТЗРеализаций1 = ТЗРеализаций.Скопировать();
			ТЗРеализаций1.Свернуть("Реализация");
			ТЗВозвратов1 = ТЗВозвратов.Скопировать();
			ТЗВозвратов1.Свернуть("ДокВозврат");
			ТЗПКО.Свернуть("ПКО");
			ТЗПоступлениеБДС.Свернуть("ПоступлениеБДС");
			ТЗЭквайринг.Свернуть("ЭквайринговаяОперация");
			
			crm_RetailCRMОбщий.ВыгрузитьАрхивныйЗаказВCRM(Выборка.Заказ, ТЗРеализаций1, ТЗВозвратов1, ТЗПКО, ТЗПоступлениеБДС, ТЗЭквайринг, СтруктураПараметров, Отказ, Счетчик, МассивПакета, КолЗаказов);
			
			Если Счетчик = 50 Тогда 
				Счетчик = 0;
				МассивПакета = Новый Массив;
			КонецЕсли;
		
	КонецЦикла;
	
	Сообщить("Заказы выгружены. " + ТекущаяДата());
	
КонецПроцедуры

//Получение информации о программе лояльности
Процедура ПолучитьИнформациюОПЛ (СписокПЛ) Экспорт
	
	//получить список пл
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	
	АдресСкрипта = "/api/v5/loyalty/loyalties?filter[sites][]=" + КодМагазина + "&apiKey=" + КлючCRM + "&by=id";

		Ответ1 = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
		Ответ1 = crm_RetailCRMОбщий.UnJSONТест(Ответ1);
		Если Ответ1["success"] = Истина Тогда
			СписокПЛ = Ответ1["loyalties"];		
		КонецЕсли;
	
КонецПроцедуры

//Бронирование
&НаСервере
Процедура Мод_ЗагрузитьБрони(ИДИзменений, ТЗБрони, ИспДатыАктуальности = Ложь, ДатаИзменений) Экспорт
	
	Если ИспДатыАктуальности = Истина Тогда
		ЗаписьЖурналаРегистрации("RetailCRM",,,,"Загрузка резервов: " + ДатаИзменений);
		ТЗБрони = ПолучитьИсториюИзмененияБроней(ДатаИзменений);
	Иначе 
		Если ИДИзменений = 0 Тогда
			ЗаписьЖурналаРегистрации("RetailCRM",,,,"Загрузка резервов за последний час: " + ТекущаяДата());
			Сообщить("Не указан id последних изменений броней. Будет произведена загрузка резервов за последний час");
			ДатаИзменений = ТекущаяДата() - 3600;
			ТЗБрони = ПолучитьИсториюИзмененияБроней(ДатаИзменений);
		Иначе 
			ЗаписьЖурналаРегистрации("RetailCRM",,,,"Загрузка резервов: " + packs_sinceId);
			ТЗБрони = ПолучитьИсториюИзмененияБроней(ИДИзменений)
		КонецЕсли;
	КонецЕсли;
	
	ИДИзменений = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("packs_sinceId");	
	
	Если ТЗБрони <> Неопределено и ТЗБрони.Количество()>0 Тогда 
		
	Иначе 
		Сообщить("За данный период изменения по броням в RetailCRM отсутствовали!");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсториюИзмененияБроней(Фильтр="") 
	
	ИмяСервера = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	Если Фильтр <> "" Тогда
		//если дата, то грузим по дате, если число,то по sinceId
		Если ТипЗнч(фильтр) = Тип("Дата") Тогда   
			АдресСкрипта = "/api/v5/orders/packs/history?filter[startDate]="+ crm_RetailCRMОбщий.ДатаВремяДляCRM(Фильтр) +"&apiKey=" + КлючCRM;
		Иначе 
			АдресСкрипта = "/api/v5/orders/packs/history?filter[sinceId]="+ Формат(Фильтр,"ЧГ=0") +"&apiKey=" + КлючCRM;
		КонецЕсли;
	КонецЕсли;
	
	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
	
	ТЗБрони = Новый ТаблицаЗначений;
	ТЗБрони.Колонки.Добавить("IDзаказа");
	ТЗБрони.Колонки.Добавить("IDпака");
	ТЗБрони.Колонки.Добавить("ИзменившеесяПоле");
	ТЗБрони.Колонки.Добавить("Количество");
	ТЗБрони.Колонки.Добавить("Склад");
	ТЗБрони.Колонки.Добавить("Удалена");
	ТЗБрони.Колонки.Добавить("Создана");
	ТЗБрони.Колонки.Добавить("oldValue");
	ТЗБрони.Колонки.Добавить("newValue");
	ТЗБрони.Колонки.Добавить("xmlId"); 
	ТЗБрони.Колонки.Добавить("externalId");
	ТЗБрони.Колонки.Добавить("idПозиции");
	ТЗБрони.Колонки.Добавить("sinceId");
    ТЗБрони.Колонки.Добавить("метод");
	
	Для каждого стр из Ответ["history"] Цикл
		Если стр["source"] = "api" Тогда 
			Если стр["apiKey"] <> Неопределено Тогда 
				Если стр["apiKey"]["current"] = Истина Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтрТЗ = ТЗБрони.Добавить(); 
		СтрТЗ.метод		= "history";
		СтрТЗ.IDзаказа 	= Формат(стр["pack"]["item"]["order"]["id"],"ЧГ="); 
		СтрТЗ.IDпака 	=  Формат(стр["pack"]["id"],"ЧГ=");
		СтрТЗ.ИзменившеесяПоле 	= стр["field"]; 
		
		Если стр["field"] = "quantity" или стр["field"] = "shipped" Тогда
			СтрТЗ.oldValue = стр["oldValue"];					
	        СтрТЗ.newValue = стр["newValue"];
		Иначе 
			
			СтрТЗ.Удалена 	= стр["deleted"];
			СтрТЗ.Создана 	= стр["created"];
			
			Если стр["oldValue"] <> Неопределено и ТипЗнч(стр["oldValue"]) <> Тип("Булево") Тогда
				СтрТЗ.oldValue 	= стр["oldValue"]["code"];
			КонецЕсли;
			
			Если стр["newValue"] <> Неопределено и ТипЗнч(стр["newValue"]) <> Тип("Булево")Тогда 
				СтрТЗ.newValue 	=  стр["newValue"]["code"];
			КонецЕсли;
		КонецЕсли;
		
		Если стр["pack"]["store"] <> Неопределено Тогда 
			СтрТЗ.Склад 	= стр["pack"]["store"]["code"];
		КонецЕсли;
		
		
		СтрТЗ.Количество= стр["pack"]["quantity"];
		СтрТЗ.xmlId 	= стр["pack"]["item"]["offer"]["externalId"];
		СтрТЗ.externalId= стр["pack"]["item"]["offer"]["xmlId"]; 
		СтрТЗ.idПозиции	= Формат(стр["pack"]["item"]["id"],"ЧГ=");
		СтрТЗ.sinceId   = Формат(стр["id"],"ЧГ=");
		ПоследнееИзменениеБрони = стр["id"];
	КонецЦикла;
	
	Если ответ["pagination"] <> Неопределено Тогда
		
		всегоСтраниц = ответ["pagination"]["totalPageCount"];
		Счетчик = 2;
		
		Пока всегоСтраниц > 1 Цикл 
			
			АдресСкрипта = "/api/v5/orders/packs/history?filter[sinceId]="+ Формат(ПоследнееИзменениеБрони,"ЧГ=0") +"&apiKey=" + КлючCRM;
			
			ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
			
			Для каждого стр из Ответ["history"] Цикл
				Если стр["source"] = "api" Тогда 
					Если стр["apiKey"] <> Неопределено Тогда 
						Если стр["apiKey"]["current"] = Истина Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СтрТЗ = ТЗБрони.Добавить();
				СтрТЗ.IDзаказа 	= Формат(стр["pack"]["item"]["order"]["id"],"ЧГ="); 
				СтрТЗ.IDпака 	=  Формат(стр["pack"]["id"],"ЧГ=");
				СтрТЗ.ИзменившеесяПоле 	= стр["field"]; 
				
				Если стр["field"] = "quantity" или стр["field"] = "shipped" Тогда
					СтрТЗ.oldValue = стр["oldValue"];					
					СтрТЗ.newValue = стр["newValue"];
				Иначе 
					
					СтрТЗ.Удалена 	= стр["deleted"];
					СтрТЗ.Создана 	= стр["created"];
					
					Если стр["oldValue"] <> Неопределено Тогда
						СтрТЗ.oldValue 	= стр["oldValue"]["code"];
					КонецЕсли;
					
					Если стр["newValue"] <> Неопределено Тогда 
						Для каждого Value из стр["newValue"] Цикл
							СтрТЗ.newValue 	= Value.Значение;
						КонецЦикла;
						СтрТЗ.newValue 	= стр["newValue"]["code"];
					КонецЕсли;
				КонецЕсли;
				
				Если стр["pack"]["store"] <> Неопределено Тогда 
					СтрТЗ.Склад 	= стр["pack"]["store"]["code"];
				КонецЕсли;
				
				СтрТЗ.Количество= стр["pack"]["quantity"];
				СтрТЗ.xmlId 	= стр["pack"]["item"]["offer"]["externalId"];
				СтрТЗ.externalId= стр["pack"]["item"]["offer"]["xmlId"]; 
				СтрТЗ.idПозиции	= Формат(стр["pack"]["item"]["id"],"ЧГ=");
				СтрТЗ.sinceId   = Формат(стр["id"],"ЧГ=");
				ПоследнееИзменениеБрони = стр["id"];
			КонецЦикла;
			всегоСтраниц = ответ["pagination"]["totalPageCount"];
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЕсли;
	//

	Если ПоследнееИзменениеБрони <> Неопределено  Тогда 
		УстановитьЗначениеКонстанты("packs_sinceId", ПоследнееИзменениеБрони);
		ЭтотОбъект.packs_sinceId = ПоследнееИзменениеБрони;
	КонецЕсли;
	
	возврат ТЗБрони;
	
КонецФункции

&НаСервере
Процедура Мод_ЗагрузитьБрониПоЗаказу(ИДЗаказа, ТЗБрони) Экспорт
	
	ЗаписьЖурналаРегистрации("RetailCRM",,,,"Загрузка резервов по заказу: " + packs_sinceId);
	
	ИмяСервера = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	Если ИДЗаказа <> "" Тогда 
		АдресСкрипта = "/api/v5/orders/packs?filter[orderId]="+ Формат(ИДЗаказа,"ЧГ=0") +"&apiKey=" + КлючCRM;
	КонецЕсли;

	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
	
	ТЗБрони = Новый ТаблицаЗначений;
	ТЗБрони.Колонки.Добавить("IDзаказа");
	ТЗБрони.Колонки.Добавить("IDпака");
	ТЗБрони.Колонки.Добавить("ИзменившеесяПоле");
	ТЗБрони.Колонки.Добавить("Количество");
	ТЗБрони.Колонки.Добавить("Склад");
	ТЗБрони.Колонки.Добавить("Удалена");
	ТЗБрони.Колонки.Добавить("Создана");
	ТЗБрони.Колонки.Добавить("oldValue");
	ТЗБрони.Колонки.Добавить("newValue");
	ТЗБрони.Колонки.Добавить("xmlId"); 
	ТЗБрони.Колонки.Добавить("externalId");
	ТЗБрони.Колонки.Добавить("idПозиции");
	ТЗБрони.Колонки.Добавить("sinceId");
    ТЗБрони.Колонки.Добавить("метод");
	
	Для каждого стр из Ответ["packs"] Цикл
		СтрТЗ = ТЗБрони.Добавить();
		СтрТЗ.метод 	= "packs";
		СтрТЗ.IDзаказа 	= ИДЗаказа; 
		СтрТЗ.IDпака 	= Формат(стр["id"],"ЧГ=");
		СтрТЗ.Создана 	= true;
		
		Если стр["store"] <> Неопределено Тогда 
			СтрТЗ.Склад 	= стр["store"];
		КонецЕсли;
		
		СтрТЗ.Количество= стр["quantity"];
		СтрТЗ.xmlId 	= стр["item"]["offer"]["externalId"];
		СтрТЗ.externalId= стр["item"]["offer"]["xmlId"]; 
		СтрТЗ.idПозиции	= Формат(стр["item"]["id"],"ЧГ=");
	КонецЦикла;
	
	Если ответ["pagination"] <> Неопределено Тогда
		
		всегоСтраниц = ответ["pagination"]["totalPageCount"];
		Для ин = 2 по всегоСтраниц Цикл
			
			ответ = ЗапросCRM(АдресСкрипта + "&page=" + строка(Формат(ин,"ЧГ=0")), ИмяСервера);
			
			Для каждого стр из Ответ["packs"] Цикл
				СтрТЗ = ТЗБрони.Добавить();
				СтрТЗ.IDзаказа 	= ИДЗаказа; 
				СтрТЗ.IDпака 	= Формат(стр["id"],"ЧГ=");
				СтрТЗ.Создана 	= true;
				
				Если стр["store"] <> Неопределено Тогда 
					СтрТЗ.Склад 	= стр["store"];
				КонецЕсли;
				
				СтрТЗ.Количество= стр["quantity"];
				СтрТЗ.xmlId 	= стр["item"]["offer"]["externalId"];
				СтрТЗ.externalId= стр["item"]["offer"]["xmlId"]; 
				СтрТЗ.idПозиции	= Формат(стр["item"]["id"],"ЧГ=");
				ПоследнееИзменениеБрони = стр["id"];
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаРезервов(ТЗБрони)
	
	//Загружаем заказы пачками чтобы избавиться от переполнения строки запроса и памяти на сервере на одну операцию
	ИмяСервера  = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	ApiKey 		= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	МассивИД = ТЗБрони.Скопировать();
	МассивИД.Свернуть("IDзаказа");
	//СтрокаИД = "";
	//Для Каждого ИД из МассивИД Цикл
	//	СтрокаИД = СтрокаИД + "filter[ids][]=" + ИД.IDзаказа + "&";
	//КонецЦикла;

	КоличествоЗаказов = 0;
	
	МассивИДЗаказов = Новый Массив;
	
	фильтрИд = "";	
	
	Для Инд = 1 по МассивИД.Количество() Цикл
		
		КоличествоЗаказов = КоличествоЗаказов  + 1;
		
		МассивИДЗаказов.Добавить(МассивИД[Инд -1]);
		
		фильтрИд = фильтрИд + "filter[ids][]=" + Формат(МассивИД[Инд -1].IDзаказа,"ЧГ=") + "&";
		
		Если  КоличествоЗаказов = 50 тогда 
			
			АдресСкрипта = "/api/v5/orders?" + фильтрИд + "&limit=100&apiKey=" + ApiKey;	  		
			
			Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера); 
			Мод_СозданиеЗаказов(Ответ["orders"]);
			
			КоличествоЗаказов =0;
			МассивИДЗаказов = Новый Массив; 
			фильтрИд = "";	
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресСкрипта = "/api/v5/orders?" + фильтрИд + "&limit=100&apiKey=" + ApiKey;
	
	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера); 
	Мод_СозданиеЗаказов(Ответ["orders"], ТЗброни);
	
	Сообщить("Загрузка заказов (резервов) завершена");
	
КонецПроцедуры

Процедура ПроверитьНаличие(док) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.КОтгрузкеОстаток КАК Отгружается,
	|	0 КАК ВНаличии,
	|	0 КАК Поступит,
	|	0 КАК ВРезерве,
	|	0 КАК Доступно
	|ПОМЕСТИТЬ ТаблицаДанныхОтчета
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|			&ТекДата,
	|			Номенклатура В (&Номенклатура)
	|				И Склад.Ссылка В (&Склады) {((Номенклатура, Характеристика) В
	|			    (ВЫБРАТЬ
	|			        ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|			        ТаблицаОтбора.Характеристика КАК Характеристика
	|			    ИЗ
	|			        ОтборПоСегментуНоменклатуры КАК ТаблицаОтбора
	|			    ГДЕ
	|			        ТаблицаОтбора.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)) КАК Поле2, (Склад).*, (Номенклатура).*, (Характеристика).*}) КАК ТоварыКОтгрузке
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Номенклатура,
	|	ИнформацияОДоступности.Характеристика,
	|	ИнформацияОДоступности.Склад,
	|	NULL,
	|	ВЫБОР
	|		КОГДА ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|			ТОГДА ИнформацияОДоступности.Запас
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)
	|			ТОГДА ИнформацияОДоступности.Запас
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ИнформацияОДоступности.Зарезервировано + ВЫБОР
	|		КОГДА ИнформацияОДоступности.Назначение.Заказ <> НЕОПРЕДЕЛЕНО
	|			ТОГДА ИнформацияОДоступности.Свободно
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ИнформацияОДоступности.Назначение.Заказ <> НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ИнформацияОДоступности.Свободно
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|ГДЕ
	|	ИнформацияОДоступности.Номенклатура В(&Номенклатура)
	|{ГДЕ
	|	ИнформацияОДоступности.Склад.* КАК Склад,
	|	ИнформацияОДоступности.Номенклатура.* КАК Номенклатура,
	|	ИнформацияОДоступности.Характеристика.* КАК Характеристика}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Склад КАК Склад,
	|	СУММА(ЕСТЬNULL(Таблица.Доступно, 0)) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		Номенклатура.Ссылка КАК Номенклатура,
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|		Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|		ЕСТЬNULL(ХарактеристикиНоменклатуры.Владелец, 1) КАК ВладелецХар,
	|		Склады.Ссылка КАК Склад,
	|		ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
	|		ХарактеристикиНоменклатуры.ВерсияДанных КАК ВерсияДанных,
	|		ХарактеристикиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
	|		ХарактеристикиНоменклатуры.Владелец КАК Владелец,
	|		ХарактеристикиНоменклатуры.Наименование КАК Наименование,
	|		ХарактеристикиНоменклатуры.НаименованиеПолное КАК НаименованиеПолное,
	|		ХарактеристикиНоменклатуры.Принципал КАК Принципал,
	|		ХарактеристикиНоменклатуры.Контрагент КАК Контрагент,
	|		ХарактеристикиНоменклатуры.КиЗГИСМGTIN КАК КиЗГИСМGTIN,
	|		ХарактеристикиНоменклатуры.ВидНоменклатуры КАК ВидНоменклатуры,
	|		ХарактеристикиНоменклатуры.УдалитьВидНоменклатуры КАК УдалитьВидНоменклатуры,
	|		ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования КАК ХарактеристикаНоменклатурыДляЦенообразования,
	|		ХарактеристикиНоменклатуры.НаименованиеЯзык1 КАК НаименованиеЯзык1,
	|		ХарактеристикиНоменклатуры.НаименованиеЯзык2 КАК НаименованиеЯзык2,
	|		ХарактеристикиНоменклатуры.ДополнительныеРеквизиты.(
	|			Ссылка КАК Ссылка,
	|			НомерСтроки КАК НомерСтроки,
	|			Свойство КАК Свойство,
	|			Значение КАК Значение,
	|			ТекстоваяСтрока КАК ТекстоваяСтрока
	|		) КАК ДополнительныеРеквизиты,
	|		ХарактеристикиНоменклатуры.Представления.(
	|			Ссылка КАК Ссылка,
	|			НомерСтроки КАК НомерСтроки,
	|			КодЯзыка КАК КодЯзыка,
	|			НаименованиеПолное КАК НаименованиеПолное,
	|			Наименование КАК Наименование
	|		) КАК Представления,
	|		ХарактеристикиНоменклатуры.Предопределенный КАК Предопределенный,
	|		ХарактеристикиНоменклатуры.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|	ИЗ
	|		Справочник.Номенклатура КАК Номенклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|			ПО (ВЫБОР
	|					КОГДА Номенклатура.ИспользованиеХарактеристик = &Индивидуал
	|						ТОГДА Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	|					ИНАЧЕ ВЫБОР
	|							КОГДА Номенклатура.ИспользованиеХарактеристик = &ОбщиеВид
	|								ТОГДА Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец
	|							ИНАЧЕ ВЫБОР
	|									КОГДА Номенклатура.ИспользованиеХарактеристик = &ОбщиеДрВид
	|										ТОГДА Номенклатура.ВидНоменклатуры.ВладелецХарактеристик = ХарактеристикиНоменклатуры.Владелец
	|								КОНЕЦ
	|						КОНЕЦ
	|				КОНЕЦ),
	|		Справочник.Склады КАК Склады
	|	ГДЕ
	|		НЕ Номенклатура.ПометкаУдаления
	|		И НЕ Номенклатура.ЭтоГруппа
	|		И Склады.Ссылка В(&Склады)
	|		И Номенклатура.Ссылка В(&Номенклатура)
	|) КАК ВложенныйЗапрос
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанныхОтчета КАК Таблица
	|	ПО ВложенныйЗапрос.Номенклатура = Таблица.Номенклатура
	|		И ВложенныйЗапрос.Характеристика = Таблица.Характеристика
	|		И ВложенныйЗапрос.Склад = Таблица.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Склады",  док.Товары.ВыгрузитьКолонку("Склад"));
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Индивидуал",  Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
	Запрос.УстановитьПараметр("ОбщиеВид",  	 Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
	Запрос.УстановитьПараметр("ОбщиеДрВид",  Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура",  	док.Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("Характеристика",  	док.Товары.ВыгрузитьКолонку("Характеристика"));
		
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	//учесть,  что остатки уже поел текущий заказ
	СтрокВЗаказе = док.товары.Количество();
	Счетчик = 0;
	Для Каждого стр из док.товары Цикл 
		Счетчик = Счетчик + 1;
		Если Счетчик > СтрокВЗаказе Тогда 
			Прервать;
		КонецЕсли;
		
		Если стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
			Если ЗначениеЗаполнено(стр.Характеристика) Тогда 
				НайденСтрока1С = РезультатЗапроса.Найти((стр.Характеристика), "Характеристика");
			Иначе 
				НайденСтрока1С = РезультатЗапроса.Найти((стр.Номенклатура), "Номенклатура");
			КонецЕсли;
			Если НайденСтрока1С <> Неопределено Тогда 
				Если стр.Количество <= НайденСтрока1С.Остаток Тогда 
					НайденСтрока1С.Остаток = НайденСтрока1С.Остаток - стр.Количество;
				Иначе 
					//если бронируется больше чем остаток, делим на 2 строки
					Если НайденСтрока1С.Остаток <=0 Тогда 
						стр.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
					Иначе
						НеХватаетКоличество = стр.Количество - НайденСтрока1С.Остаток;
						стр.Количество = НайденСтрока1С.Остаток;
						стр.КоличествоУпаковок = НайденСтрока1С.Остаток;
						НайденСтрока1С.Остаток = 0;
						
						НовСтр 						= док["Товары"].Добавить();
						новСтр.Номенклатура 		= стр.Номенклатура;
						новСтр.Характеристика 		= стр.Характеристика;
						НовСтр.ВидЦены 				= стр.ВидЦены;
						новСтр.Количество 			= НеХватаетКоличество;
						новСтр.Цена 				= стр.Цена;
						новСтр.Склад 				= стр.Склад;
						новСтр.КоличествоУпаковок 	= новСтр.Количество;
						новСтр.Сумма				= новСтр.Количество * новСтр.Цена;
						новСтр.ВариантОбеспечения 	=Перечисления.ВариантыОбеспечения.КОбеспечению;
						новСтр.Отменено				= Истина;
						Если ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов") Тогда
							НовСтр.ПричинаОтмены = Справочники.ПричиныОтменыЗаказовКлиентов.ОтклонениеПриОтгрузкеМерныхТоваров;  						
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
//Бронирование 

//Получение справочников из RetailCRM
Процедура ПолучитьСтатусыИзRetailCRM(ТЗСтатусы) Экспорт 

	ЗаписьЖурналаРегистрации("RetailCRM",,,,"Загрузка статусов заказа");
	
	ИмяСервера = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	АдресСкрипта = "/api/v5/reference/statuses?apiKey=" + КлючCRM;
		Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
		Ответ = crm_RetailCRMОбщий.UnJSONТест(Ответ);
	
	АдресСкрипта = "/api/v5/reference/status-groups?apiKey=" + КлючCRM;
		ОтветГруппы = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
		ОтветГруппы = crm_RetailCRMОбщий.UnJSONТест(ОтветГруппы);
	
	
		Если Ответ["success"] = Истина и ОтветГруппы["success"] = Истина Тогда
			
			ТЗГруппы = Новый ТаблицаЗначений;
			ТЗГруппы.Колонки.Добавить("КодCRM");
			ТЗГруппы.Колонки.Добавить("Порядок");
			
			Для каждого статус из ОтветГруппы["statusGroups"] Цикл 
					Стр = ТЗГруппы.Добавить();
					Стр.КодCRM 			= статус.Значение["code"];
					Стр.Порядок 		= статус.Значение["ordering"];
			КонецЦикла;
			
			Для каждого статус из Ответ["statuses"] Цикл 
				Если статус.Значение["active"] = Истина Тогда 
					Стр = ТЗСтатусы.Добавить();
					Стр.Название 		= статус.Значение["name"];
					Стр.КодCRM 			= статус.Значение["code"];
					Стр.Порядок 		= статус.Значение["ordering"];
					Стр.Группа	 		= статус.Значение["group"];
					//ищем в тз групп нужную группу
					НайдСтр = ТЗГруппы.Найти(статус.Значение["group"],"КодCRM");
					Если НайдСтр <> Неопределено Тогда 
						Стр.ПорядокГруппы = НайдСтр.Порядок;	
					КонецЕсли;
					
	            КонецЕсли;
			КонецЦикла;
			
			ТЗСтатусы.Сортировать("ПорядокГруппы Возр, Порядок Возр"); 
			
		КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьМенеджеровИзRetailCRM (СписокМенеджеров) Экспорт
	
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	Отказ = Ложь;
	Если не ЗначениеЗаполнено(ИмяСервера) или не ЗначениеЗаполнено(КлючCRM) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресСкрипта = "/api/v5/users?filter[active]=1&filter[isManager]=1&apiKey=" + КлючCRM;
	
	
		Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
		Ответ = crm_RetailCRMОбщий.UnJSONТест(Ответ);
		
		Если Ответ["success"] = Истина Тогда
			СписокМенеджеров = Ответ["users"];		
		КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСкладыИзRetailCRM (СписокСкладов) Экспорт
	
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	Отказ = Ложь;
	Если не ЗначениеЗаполнено(ИмяСервера) или не ЗначениеЗаполнено(КлючCRM) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресСкрипта = "/api/v5/reference/stores?apiKey=" + КлючCRM;
	
	
		Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
		Ответ = crm_RetailCRMОбщий.UnJSONТест(Ответ);
		
		Если Ответ["success"] = Истина Тогда
			СписокСкладов = Ответ["stores"];		
		КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьТипыЦенИзRetailCRM (СписокТиповЦен) Экспорт
	
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	Отказ = Ложь;
	Если не ЗначениеЗаполнено(ИмяСервера) или не ЗначениеЗаполнено(КлючCRM) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресСкрипта = "/api/v5/reference/price-types?apiKey=" + КлючCRM;
	
	
		Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
		Ответ = crm_RetailCRMОбщий.UnJSONТест(Ответ);
		
		Если Ответ["success"] = Истина Тогда
			СписокТиповЦен = Ответ["priceTypes"];		
		КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьТипыОплатИзRetailCRM (СписокТиповОплат) Экспорт
	
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	Отказ = Ложь;
	Если не ЗначениеЗаполнено(ИмяСервера) или не ЗначениеЗаполнено(КлючCRM) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресСкрипта = "/api/v5/reference/payment-types?apiKey=" + КлючCRM;
	
	
		Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
		Ответ = crm_RetailCRMОбщий.UnJSONТест(Ответ);
		
		Если Ответ["success"] = Истина Тогда
			СписокТиповОплат = Ответ["paymentTypes"];		
		КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьТипыДоставокИзRetailCRM (СписокТиповДоставок) Экспорт
	
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	Отказ = Ложь;
	Если не ЗначениеЗаполнено(ИмяСервера) или не ЗначениеЗаполнено(КлючCRM) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресСкрипта = "/api/v5/reference/delivery-types?apiKey=" + КлючCRM;
	
	
		Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
		Ответ = crm_RetailCRMОбщий.UnJSONТест(Ответ);
		
		Если Ответ["success"] = Истина Тогда
			СписокТиповДоставок = Ответ["deliveryTypes"];		
		КонецЕсли;
	
	
КонецПроцедуры

Процедура ПолучитьМагазиныИзRetailCRM (Магазины) Экспорт
	
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	Отказ = Ложь;
	Если не ЗначениеЗаполнено(ИмяСервера) или не ЗначениеЗаполнено(КлючCRM) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресСкрипта = "/api/v5/reference/sites?apiKey=" + КлючCRM;
	
	
		Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
		Ответ = crm_RetailCRMОбщий.UnJSONТест(Ответ);
		
		Если Ответ["success"] = Истина Тогда
			Магазины = Ответ["sites"];		
		КонецЕсли;
	
	
КонецПроцедуры

Процедура ПолучитьСпособыОформленияИзRetailCRM (СпособыОформления) Экспорт
	
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	Отказ = Ложь;
	Если не ЗначениеЗаполнено(ИмяСервера) или не ЗначениеЗаполнено(КлючCRM) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресСкрипта = "/api/v5/reference/order-methods?apiKey=" + КлючCRM;
	
	
		Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
		Ответ = crm_RetailCRMОбщий.UnJSONТест(Ответ);
		
		Если Ответ["success"] = Истина Тогда
			СпособыОформления = Ответ["orderMethods"];		
		КонецЕсли;
	
КонецПроцедуры
//Получение справочников из RetailCRM

Функция ПроверитьКорректностьКлюча (КорректныеДанные, ИмяСервера, КлючCRM) Экспорт
	
	АдресСкрипта = "api/credentials?apiKey=" + КлючCRM;
	
	Попытка
		Ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);
		Ответ = crm_RetailCRMОбщий.UnJSONТест(Ответ);
		
		Если Ответ["success"] = Истина Тогда
			КорректныеДанные = Истина;		
		КонецЕсли;
	Исключение                  
		КорректныеДанные = Ложь;
		т=ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Обработка_crm_RetailCRMОбработка", УровеньЖурналаРегистрации.Ошибка,,,т);
		Сообщить(т);
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Процедура ВыгрузитьКонтактныеЛица() Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
 	|	ДополнительныеСведения.Объект КАК Объект,
 	|	ДополнительныеСведения.Свойство КАК Свойство,
 	|	ДополнительныеСведения.Значение КАК Значение
 	|ПОМЕСТИТЬ вт_Сведения
 	|ИЗ
 	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
 	|ГДЕ
 	|	ДополнительныеСведения.Свойство = &Свойство
 	|	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.КонтактныеЛицаПартнеров)
 	|;
 	|
 	|////////////////////////////////////////////////////////////////////////////////
 	|ВЫБРАТЬ
 	|	КонтактныеЛицаПартнеров.Ссылка КАК Контрагент,
 	|	ЕСТЬNULL(вт_Сведения.Значение, 0) КАК ИД,
 	|	КонтактныеЛицаПартнеров.Владелец КАК Владелец,
 	|	КонтактныеЛицаПартнеров.ДатаРождения КАК ДатаРождения,
 	|	КонтактныеЛицаПартнеров.Пол КАК Пол,
 	|	КонтактныеЛицаПартнеров.ДолжностьПоВизитке КАК ДолжностьПоВизитке,
 	|	КонтактныеЛицаПартнеров.ДатаРегистрацииСвязи КАК ДатаРегистрацииСвязи
 	|ПОМЕСТИТЬ вт_итог
 	|ИЗ
 	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
 	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Сведения КАК вт_Сведения
 	|		ПО КонтактныеЛицаПартнеров.Ссылка = вт_Сведения.Объект
 	|;
 	|
 	|////////////////////////////////////////////////////////////////////////////////
 	|ВЫБРАТЬ
 	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Телефон,
 	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Ссылка
 	|ПОМЕСТИТЬ вт_телефон
 	|ИЗ
 	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
 	|ГДЕ
 	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &ТипТелефон
 	|;
 	|
 	|////////////////////////////////////////////////////////////////////////////////
 	|ВЫБРАТЬ
 	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Ссылка1,
 	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Почта
 	|ПОМЕСТИТЬ вт_почта
 	|ИЗ
 	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
 	|ГДЕ
 	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &ТипПочта
 	|;
 	|
 	|////////////////////////////////////////////////////////////////////////////////
 	|ВЫБРАТЬ
 	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление КАК Адрес,
 	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка КАК Ссылка3
 	|ПОМЕСТИТЬ вт_адрес
 	|ИЗ
 	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
 	|ГДЕ
 	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = &ТипАдрес
 	|;
 	|
 	|////////////////////////////////////////////////////////////////////////////////
 	|ВЫБРАТЬ
 	|	вт_итог.Контрагент КАК КонтактноеЛицо,
 	|	вт_итог.ИД КАК ИД,
 	|	ЕСТЬNULL(вт_адрес.Адрес, """") КАК Адрес,
 	|	ЕСТЬNULL(вт_почта.Почта, """") КАК Почта,
 	|	ЕСТЬNULL(вт_телефон.Телефон, """") КАК Телефон,
 	|	вт_итог.Владелец КАК Владелец,
 	|	вт_итог.ДатаРождения КАК ДатаРождения,
 	|	вт_итог.Пол КАК Пол,
 	|	вт_итог.ДолжностьПоВизитке КАК ДолжностьПоВизитке,
 	|	вт_итог.ДатаРегистрацииСвязи КАК ДатаРегистрацииСвязи
 	|ИЗ
 	|	вт_итог КАК вт_итог
 	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_телефон КАК вт_телефон
 	|		ПО вт_итог.Контрагент = вт_телефон.Ссылка
 	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_почта КАК вт_почта
 	|		ПО вт_итог.Контрагент = вт_почта.Ссылка1
 	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_адрес КАК вт_адрес
 	|		ПО вт_итог.Контрагент = вт_адрес.Ссылка3
 	|ГДЕ
 	|	вт_итог.ИД = &ИД
 	|
 	|УПОРЯДОЧИТЬ ПО
 	|	КонтактноеЛицо
 	|ИТОГИ
 	|	МАКСИМУМ(ИД),
 	|	МАКСИМУМ(Адрес),
 	|	МАКСИМУМ(Почта),
 	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Телефон),
 	|	МАКСИМУМ(Владелец),
 	|	МАКСИМУМ(ДатаРождения),
 	|	МАКСИМУМ(Пол),
 	|	МАКСИМУМ(ДолжностьПоВизитке),
 	|	МАКСИМУМ(ДатаРегистрацииСвязи)
 	|ПО
 	|	КонтактноеЛицо";

	СвойствоКонтЛиц = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_КонтактныеЛицаПартнеров);
	Запрос.УстановитьПараметр("Свойство", СвойствоКонтЛиц);
	Запрос.УстановитьПараметр("ИД", 0);
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон); 
	Запрос.УстановитьПараметр("ТипПочта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Результат = Запрос.Выполнить();
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	
	//групповые итоги
	Выборка = Результат.Выбрать(способВыборки);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяСервера");
	СтруктураПараметров.Вставить("КлючCRM");
	СтруктураПараметров.Вставить("КодМагазина");
	СтруктураПараметров.Вставить("СвойствоКонтрагентов");
	СтруктураПараметров.Вставить("СвойствоПартнеров");
	СтруктураПараметров.Вставить("СвойствоКонтЛиц");
	СтруктураПараметров.Вставить("Корпы");
	
	Корпы = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КорпоративныеКлиенты");
   	СвойствоКонтрагентов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	СвойствоКонтЛиц = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_КонтактныеЛицаПартнеров);
	
	СтруктураПараметров.ИмяСервера    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));;
	СтруктураПараметров.КлючCRM    		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	СтруктураПараметров.КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	СтруктураПараметров.СвойствоКонтрагентов= СвойствоКонтрагентов;
	СтруктураПараметров.СвойствоПартнеров	= СвойствоПартнеров;
	СтруктураПараметров.СвойствоКонтЛиц		= СвойствоКонтЛиц;
	СтруктураПараметров.Корпы				= Корпы;
	
	//для выгрузки архива пакетами
	Счетчик = 0;
	МассивПакета = Новый Массив;
    КолКлиентов = Выборка.Количество(); //кол-во заказов в выборке

	Пока Выборка.Следующий() Цикл
			Счетчик = Счетчик + 1;
			КолКлиентов = КолКлиентов - 1;
			
			ДочерниеЗаписи = Выборка.Выбрать();
		
			crm_RetailCRMОбщий.ВыгрузитьАрхивноеКонтактноеЛицо(Выборка, СтруктураПараметров, Счетчик, МассивПакета, КолКлиентов, ДочерниеЗаписи);
			
			Если Счетчик = 50 Тогда 
				Счетчик = 0;
				МассивПакета = Новый Массив;
			КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьАрхивКорпоративныхКлиентов(Партнер) Экспорт
	
	Запрос = ЗапросКорпКлиентов(Партнер);
		
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	СвойствоКонтрагентов = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	СвойствоКонтЛиц = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_КонтактныеЛицаПартнеров);
	
	Запрос.УстановитьПараметр("ИД", 0);
	Запрос.УстановитьПараметр("Свойство", СвойствоКонтрагентов);
	Запрос.УстановитьПараметр("СвойствоПарт", СвойствоПартнеров);
	Запрос.УстановитьПараметр("СвойствоКЛ", СвойствоКонтЛиц);
	Запрос.УстановитьПараметр("ЮрФизЛицо", Перечисления.КомпанияЧастноеЛицо.Компания); 
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон); 
	Запрос.УстановитьПараметр("ТипПочта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Ссылка", Партнер);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Организация", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Организация"));
	
	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	//групповые итоги
	Выборка = Результат.Выбрать(способВыборки);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяСервера");
	СтруктураПараметров.Вставить("КлючCRM");
	СтруктураПараметров.Вставить("КодМагазина");
	СтруктураПараметров.Вставить("СвойствоКонтрагентов");
	СтруктураПараметров.Вставить("СвойствоПартнеров");
	СтруктураПараметров.Вставить("СвойствоКонтЛиц");
	
	Корпы = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КорпоративныеКлиенты");
	
	СтруктураПараметров.ИмяСервера    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));;
	СтруктураПараметров.КлючCRM    		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	СтруктураПараметров.КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	СтруктураПараметров.СвойствоКонтрагентов= СвойствоКонтрагентов;
	СтруктураПараметров.СвойствоПартнеров	= СвойствоПартнеров;
	СтруктураПараметров.СвойствоКонтЛиц		= СвойствоКонтЛиц;
	
	//для выгрузки архива пакетами
	Счетчик = 0;
	МассивПакета = Новый Массив;
	КолКлиентов = Выборка.Количество(); //кол-во заказов в выборке
	
	ТЗКорпов = Новый ТаблицаЗначений;
	ТЗКорпов.Колонки.Добавить("externalId");
	
	Пока Выборка.Следующий() Цикл 
		Если не ЗначениеЗаполнено(Выборка.Партнер) Тогда
			Сообщить("Отсутствует партнер для контрагента " + Выборка.Контрагент);
			//Продолжить;
		Иначе 
			
			Счетчик = Счетчик + 1;
			КолКлиентов = КолКлиентов - 1;
			
			//собираем в кучу телефоныв
			ТЗТелефонов = Новый ТаблицаЗначений;
			ТЗТелефонов.Колонки.Добавить("Телефон");
			ТЗТелефонов.Колонки.Добавить("Итог");
			
			ЮрАдрес = "";
			
			Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда 
				Для Каждого КИК из Выборка.Контрагент.КонтактнаяИнформация Цикл
					Если КИК.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
						Стр = ТЗТелефонов.Добавить();
						Стр.Телефон = КИК.Представление;
						Стр.Итог = 1;
					ИначеЕсли  КИК.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда 
						Если КИК.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента 
							и ЗначениеЗаполнено(КИК.Представление) и Не ЗначениеЗаполнено(ЮрАдрес) Тогда 
							ЮрАдрес = КИК.Представление;
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Партнер) Тогда 
				Для Каждого КИК из Выборка.Партнер.КонтактнаяИнформация Цикл
					Если КИК.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
						Стр = ТЗТелефонов.Добавить();
						Стр.Телефон = КИК.Представление;
						Стр.Итог = 1;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
			
			//Свернем телефоны чтоб не повторялись
			ТЗТелефонов.Свернуть("Телефон", "Итог");
			
			ТЗКомпаний = Новый ТаблицаЗначений;
			ТЗКомпаний.Колонки.Добавить("externalId");
			ТЗКомпаний.Колонки.Добавить("ДатаРегистрации");
			ТЗКомпаний.Колонки.Добавить("НаименованиеПолное");
			ТЗКомпаний.Колонки.Добавить("ЮрФизЛицо");
			ТЗКомпаний.Колонки.Добавить("ИНН");
			ТЗКомпаний.Колонки.Добавить("КПП");
			ТЗКомпаний.Колонки.Добавить("Адрес");
			ТЗКомпаний.Колонки.Добавить("КодПоОКПО");
			ТЗКомпаний.Колонки.Добавить("Итог");
			
			Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда 
				Стр = ТЗКомпаний.Добавить();
				Стр.externalId 			= Строка(Выборка.Контрагент.УникальныйИдентификатор());
				Стр.ДатаРегистрации 	= Выборка.ДатаРегистрации;
				Стр.НаименованиеПолное 	= Выборка.НаименованиеПолное;
				Стр.ЮрФизЛицо 			= Выборка.Контрагент.ЮрФизЛицо;
				Стр.ИНН 				= Выборка.ИНН;
				Стр.КПП 				= Выборка.КПП;
				Стр.Адрес 				= ЮрАдрес;
				Стр.КодПоОКПО 			= Выборка.КодПоОКПО;
			КонецЕсли;
			
			Если ТЗКомпаний.Количество()>1 Тогда 
				ТЗКомпаний.Свернуть("externalId, ДатаРегистрации, НаименованиеПолное, ЮрФизЛицо, ИНН, КПП, Адрес, КодПоОКПО", "Итог");	
			КонецЕсли;
			
			//добавим сбда договоры
			
			ДочерниеЗаписи = Выборка.Выбрать();
			
			crm_RetailCRMОбщий.ВыгрузитьАрхивногоКорпКлиента(Выборка, СтруктураПараметров, Счетчик, МассивПакета, КолКлиентов, ТЗТелефонов, ТЗКомпаний, ТЗКорпов, ДочерниеЗаписи);
			
			Если Счетчик = 50 Тогда 
				Счетчик = 0;
				МассивПакета = Новый Массив;
				ТЗКорпов = Новый ТаблицаЗначений;
				ТЗКорпов.Колонки.Добавить("externalId");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ЗапросКорпКлиентов(Партнер)

	Запрос = Новый Запрос;
	Запрос.Текст =
	
	     "ВЫБРАТЬ
      |	ДополнительныеСведения.Объект КАК Объект,
      |	ДополнительныеСведения.Свойство КАК Свойство,
      |	ДополнительныеСведения.Значение КАК Значение
      |ПОМЕСТИТЬ вт_СведенияК
      |ИЗ
      |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
      |ГДЕ
      |	ДополнительныеСведения.Свойство = &Свойство
      |	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Контрагенты)
      |;
      |
      |////////////////////////////////////////////////////////////////////////////////
      |ВЫБРАТЬ
      |	ДополнительныеСведения.Объект КАК ОбъектП,
      |	ДополнительныеСведения.Свойство КАК СвойствоП,
      |	ДополнительныеСведения.Значение КАК ЗначениеП
      |ПОМЕСТИТЬ вт_СведенияП
      |ИЗ
      |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
      |ГДЕ
      |	ДополнительныеСведения.Свойство = &СвойствоПарт
      |	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Партнеры)
      |;
      |
      |////////////////////////////////////////////////////////////////////////////////
      |ВЫБРАТЬ
      |	ЕСТЬNULL(Контрагенты.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
      |	Партнеры.ДатаРегистрации КАК ДатаРегистрации,
      |	ЕСТЬNULL(Контрагенты.НаименованиеПолное, """") КАК НаименованиеПолное,
      |	ЕСТЬNULL(Контрагенты.ИНН, """") КАК ИНН,
      |	ЕСТЬNULL(Контрагенты.КПП, """") КАК КПП,
      |	ЕСТЬNULL(Контрагенты.КодПоОКПО, """") КАК КодПоОКПО,
      |	Партнеры.Ссылка КАК Партнер,
      |	Партнеры.НаименованиеПолное КАК НаименованиеПартнераПолное,
      |	Партнеры.Наименование КАК НаименованиеПартнера,
      |	ЕСТЬNULL(Контрагенты.ЮрФизЛицо, """") КАК ЮрФизЛицо,
      |	Партнеры.Ссылка КАК Ссылка,
      |	ЕСТЬNULL(вт_СведенияК.Объект, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Объект,
      |	ЕСТЬNULL(вт_СведенияК.Свойство, """") КАК Свойство,
      |	ЕСТЬNULL(вт_СведенияК.Значение, 0) КАК Значение,
      |	ЕСТЬNULL(вт_СведенияП.ОбъектП, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ОбъектП,
      |	ЕСТЬNULL(вт_СведенияП.СвойствоП, """") КАК СвойствоП,
      |	ЕСТЬNULL(вт_СведенияП.ЗначениеП, 0) КАК ЗначениеП
      |ИЗ
      |	Справочник.Партнеры КАК Партнеры
      |		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
      |			ЛЕВОЕ СОЕДИНЕНИЕ вт_СведенияК КАК вт_СведенияК
      |			ПО Контрагенты.Ссылка = вт_СведенияК.Объект
      |		ПО Партнеры.Ссылка = Контрагенты.Партнер
      |		ЛЕВОЕ СОЕДИНЕНИЕ вт_СведенияП КАК вт_СведенияП
      |		ПО Партнеры.Ссылка = вт_СведенияП.ОбъектП
      |ГДЕ
      |	НЕ Партнеры.ПометкаУдаления
      |	И НЕ Партнеры.Предопределенный
	  |	И Партнеры.ЮрФизЛицо = &ЮрФизЛицо
	  |	И НЕ Контрагенты.ПометкаУдаления";
	  
	  Если ЗначениеЗаполнено(Партнер) Тогда
		  Запрос.Текст = Запрос.Текст + "
		  |	И Партнеры.Ссылка = &Ссылка";
	  КонецЕсли;
	  
	  Возврат Запрос;
	  
КонецФункции

Процедура ВыгрузитьАдресаКорпов(Партнер) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	 "ВЫБРАТЬ
	   |	ДополнительныеСведения.Объект КАК ОбъектП,
	   |	ДополнительныеСведения.Свойство КАК СвойствоП,
	   |	ДополнительныеСведения.Значение КАК ЗначениеП
	   |ПОМЕСТИТЬ вт_СведенияП
	   |ИЗ
	   |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	   |ГДЕ
	   |	ДополнительныеСведения.Свойство = &СвойствоПарт
	   |	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Партнеры)
	   |;
	   |
	   |////////////////////////////////////////////////////////////////////////////////
	   |ВЫБРАТЬ
	   |	ДополнительныеСведения.Объект КАК Объект,
	   |	ДополнительныеСведения.Свойство КАК Свойство,
	   |	ДополнительныеСведения.Значение КАК Значение
	   |ПОМЕСТИТЬ вт_ВыгружАдрес
	   |ИЗ
	   |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	   |ГДЕ
	   |	ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Партнеры)
	   |	И ДополнительныеСведения.Свойство = &ВыгруженАдрес
	   |;
	   |
	   |////////////////////////////////////////////////////////////////////////////////
	   |ВЫБРАТЬ
	    |	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	   |	ПартнерыКонтактнаяИнформация.Тип КАК Тип,
	   |	ЕСТЬNULL(вт_СведенияП.СвойствоП, """") КАК СвойствоП,
	   |	ЕСТЬNULL(вт_СведенияП.ЗначениеП, 0) КАК ЗначениеП,
	   |	ПартнерыКонтактнаяИнформация.Представление КАК Представление,
	   |	ЕСТЬNULL(вт_ВыгружАдрес.Свойство, """") КАК Свойство,
	   |	ЕСТЬNULL(вт_ВыгружАдрес.Значение, 0) КАК Значение
	   |ИЗ
	   |	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	   |		ЛЕВОЕ СОЕДИНЕНИЕ вт_СведенияП КАК вт_СведенияП
	   |		ПО ПартнерыКонтактнаяИнформация.Ссылка = вт_СведенияП.ОбъектП
	   |		ЛЕВОЕ СОЕДИНЕНИЕ вт_ВыгружАдрес КАК вт_ВыгружАдрес
	   |		ПО ПартнерыКонтактнаяИнформация.Ссылка = вт_ВыгружАдрес.Объект
	   |ГДЕ
	   |	ПартнерыКонтактнаяИнформация.Тип = &Тип";

	Если ЗначениеЗаполнено(Партнер) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ПартнерыКонтактнаяИнформация.Ссылка = &Ссылка
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " 
	   
	   |ИТОГИ
	   |	МАКСИМУМ(Тип),
	   |	МАКСИМУМ(СвойствоП),
	   |	МАКСИМУМ(ЗначениеП),
	   |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Представление),
	   |	МАКСИМУМ(Свойство),
	   |	МАКСИМУМ(Значение)
	   |ПО
	   |	Ссылка";
	
	
	СвойствоПартнеров = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	СвойствоАдреса = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("АдресВыгружен", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
					
	Запрос.УстановитьПараметр("СвойствоПарт", СвойствоПартнеров);
	Запрос.УстановитьПараметр("ВыгруженАдрес", СвойствоАдреса);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес); 
	Запрос.УстановитьПараметр("Ссылка", Партнер);
	
	Результат = Запрос.Выполнить();
	
	СпособВыборки = ОбходРезультатаЗапроса.ПоГруппировкам;
	//групповые итоги
	Выборка = Результат.Выбрать(способВыборки);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяСервера");
	СтруктураПараметров.Вставить("КлючCRM");
	СтруктураПараметров.Вставить("КодМагазина");
	СтруктураПараметров.Вставить("СвойствоПартнеров");
	
	СтруктураПараметров.ИмяСервера    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));;
	СтруктураПараметров.КлючCRM    		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	СтруктураПараметров.КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));
	СтруктураПараметров.СвойствоПартнеров	= СвойствоПартнеров;

	Пока Выборка.Следующий() Цикл
			
			ДочерниеЗаписи = Выборка.Выбрать(); 
			Если Выборка.Значение = Истина или  Выборка.Значение = "Истина" Тогда 
				Продолжить;
			Иначе 
				crm_RetailCRMОбщий.ВыгрузитьАдресКК(Выборка, СтруктураПараметров, ДочерниеЗаписи);
			КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

Процедура СвязатьКонтактныеЛицаСКорпами() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка,
		|	КонтактныеЛицаПартнеров.Владелец КАК Владелец
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	НЕ КонтактныеЛицаПартнеров.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ИмяСервера");
	СтруктураПараметров.Вставить("КлючCRM");
	СтруктураПараметров.Вставить("КодМагазина");
	
	СтруктураПараметров.ИмяСервера    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера"));;
	СтруктураПараметров.КлючCRM    		= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"));
	СтруктураПараметров.КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		crm_RetailCRMОбщий.СвязатьКЛицаСКорпами(ВыборкаДетальныеЗаписи, СтруктураПараметров);
	КонецЦикла;
	
КонецПроцедуры


// ЕНС
Процедура ПолучитьТоварыИзRetailCRM () Экспорт
	
	ИмяСервера   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM 	 = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM");
	
	Отказ = Ложь;
	Если не ЗначениеЗаполнено(ИмяСервера) или не ЗначениеЗаполнено(КлючCRM) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресСкрипта = "/api/v5/store/products?apiKey=" + КлючCRM;

	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
	
	МассивТоваров = Новый Массив;
	
	Если Ответ["success"] = Истина Тогда
		//  "success": true,
		//"pagination": {
		//      "limit": 20,
		//      "totalCount": 4050,
		//      "currentPage": 1,
		//      "totalPageCount": 203
		//},   
		СписокТоваров = Ответ["products"];		
		Для Каждого Товар из СписокТоваров Цикл
			МассивТоваров.Добавить(Товар);
		КонецЦикла;

		Если НЕ Ответ["pagination"] = Неопределено Тогда
			
			Лимит = Ответ["pagination"]["limit"];
			totalCount = Ответ["pagination"]["totalCount"];
			currentPage = Ответ["pagination"]["currentPage"];
			totalPageCount = Ответ["pagination"]["totalPageCount"];
					
			Для ин = 2 по totalPageCount Цикл
				процент = Окр(ин * 100 / totalPageCount,2);
				Сообщить("Запрос к retailCRM " + ин + " " + строка(процент) + "% ...");
				
				АдресСкрипта = "/api/v5/store/products?apiKey=" + КлючCRM+"&page="+формат(ин, "ЧГ=;ЧРГ=");
				
				Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера);
				
				Если Ответ["success"] = Истина Тогда
					СписокТоваров = Ответ["products"];		
					Для Каждого Товар из СписокТоваров Цикл
						МассивТоваров.Добавить(Товар);
					КонецЦикла;
				КонецЕсли;
				
			КонецЦикла;

		КонецЕсли;	
	
	КонецЕсли;
	
	Для каждого Товар Из МассивТоваров Цикл
		
		_м = Товар["offers"];
		Если _м.Количество() > 0 Тогда
			xmlIdТовара = _м[0]["xmlId"];
			
			СтруктураВозврата = УТ11_ВернутьНоменклатуру(xmlIdТовара);
			//СтруктураВозврата.Вставить("искХарактеристика", 		искХарактеристика);
			//СтруктураВозврата.Вставить("искНоменклатура", 			искНоменклатура);
			
			
			Если НЕ ЗначениеЗаполнено(СтруктураВозврата.искНоменклатура) 
				ИЛИ НЕ ЗначениеЗаполнено(СтруктураВозврата.искНоменклатура.ВерсияДанных) Тогда
				
				Если xmlIdТовара = Неопределено Тогда
					сообщить("Не удалось получить xmlIdТовара! Товар не создан! name = "+строка(Товар["name"]));
					Продолжить;
				КонецЕсли;
				
				гуиды = ксп_УТ11_ВернутьГуидыНоменклатуры(xmlIdТовара);
				
					//СтруктураВозврата.Вставить("искХарактеристика", 		искХарактеристика);
					//СтруктураВозврата.Вставить("искНоменклатура", 			искНоменклатура);
				
				//------------------------------------- Поиск и создание
				
				ОбъектДанных = Справочники.Номенклатура.СоздатьЭлемент();
				СсылкаНового = Справочники.Номенклатура.ПолучитьСсылку(гуиды.искНоменклатура);
				ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
				
				ЗаполнитьРеквизитыНоменклатуры(ОбъектДанных, Товар);
				
				ОбъектДанных.ОбменДанными.Загрузка = Истина;
				
				ОбъектДанных.Записать();
				
			Иначе 
				
							
				ОбъектДанных = СтруктураВозврата["искНоменклатура"].ПолучитьОбъект();
				
				ЗаполнитьРеквизитыНоменклатуры(ОбъектДанных, Товар);
				
				ОбъектДанных.ОбменДанными.Загрузка = Истина;
				
				ОбъектДанных.Записать();
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры



// ЕНС. Используется только при импорте каталога товаров из RetailCRM
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ЗаполнитьРеквизитыНоменклатуры(ОбъектДанных, СтруктураОбъекта) Экспорт

	//------------------------------------- Реквизиты
	
	//ОбъектДанных.Код = def.code;
	
	ОбъектДанных.Наименование = СтруктураОбъекта["name"];
	
	//ParentRef = "";
	//Если def.parent.Свойство("Ref", ParentRef) Тогда
	//	ОбъектДанных.Родитель = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ParentRef));
	//КонецЕсли;
	
	//ОбъектДанных.ПометкаУдаления = def.DeletionMark;
	    	
	////ОбъектДанных.ВидНоменклатуры = Справочники.ВидыНомнклатуры.ПолучитьСсылку(Новый УникальныйИдентфикатор(def.ВидНоменклатуры.ref));
	
	ВидНом = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Маркируемые товары (характеристики включены)", Истина);
	ОбъектДанных.ВидНоменклатуры = ВидНом;
	ОбъектДанных.ТипНоменклатуры = ОбъектДанных.ВидНоменклатуры.ТипНоменклатуры;
	//Если def.Свойство("ВидНоменклатуры",ВидНоменклатуры) Тогда
	//	
	//	гуид = Неопределено;
	//	
	//	Если ВидНоменклатуры.Свойство("ref", гуид) Тогда
	//		ОбъектДанных.ВидНоменклатуры = РегистрыСведений.ксп_МэппингВидыНоменклатуры.ПоМэппингу(гуид, мВнешняяСистема);
	//	КонецЕсли;
	//	
	//	ОбъектДанных.ТипНоменклатуры = ОбъектДанных.ВидНоменклатуры.ТипНоменклатуры;
	//	
	//КонецЕсли;
	//
	//ОбъектДанных.ЕдиницаИзмерения = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(def.ЕдиницаИзмерения);
	//
	ОбъектДанных.СтавкаНДС = справочники.СтавкиНДС.БезНДС;
	
КонецПроцедуры




Функция ксп_УТ11_ВернутьГуидыНоменклатуры(xmlIdТовара) Экспорт 
	
	искХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("GUIDОрганизации") = Истина Тогда 
		GUIDОрганизации = Истина;
	Иначе 
		GUIDОрганизации = Ложь;
	КонецЕсли;
	
	//если нет # то это товар без характеристики
	Индекс = Найти(xmlIdТовара, "#");
	
	//сначала отбрасываем гуид организации, затем по старой схеме
	Если GUIDОрганизации Тогда 
		xmlIdТовара = Сред(xmlIdТовара,(Индекс+1));
	КонецЕсли;
	
	уид = Неопределено;
	уид2 = Неопределено;
	
	Инд = Найти(xmlIdТовара, "#");
	Если Инд = 0 Тогда
		уид 				= Новый УникальныйИдентификатор(xmlIdТовара);
		
	Иначе 
		МассивЗначений = crm_RetailCRMОбщий.РазложитьСтрокуВМассивПодстрок(xmlIdТовара, "#");
		
		Если МассивЗначений.Количество() < 2 Тогда
			Сообщить("Невозможно найти товар по id: " + xmlIdТовара);
			Возврат искХарактеристика;
		КонецЕсли;
		
		уид 				= Новый УникальныйИдентификатор(МассивЗначений[0]);
		
		уид2 				= Новый УникальныйИдентификатор(МассивЗначений[1]);
		
			
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("искХарактеристика", 		уид2);
	СтруктураВозврата.Вставить("искНоменклатура", 			уид);
	
	Возврат СтруктураВозврата;
	
КонецФункции


#Область Создание_Заказа
//начало - Елисеев :: 26.11.2023 РЕФАКТОРИНГ

//конец - Елисеев :: 26.11.2023

// Параметры
//	ДанныеЗаказа - структура - данные заказа из json. см. ФормированиеСтруктурыЗаказа()
//	стр - соответствие - один объект заказа, конвертированный из json
//	искДок - документ ссылка ЗаказКлиента - может быть пустым, если не найден
//	ТЗброни - таб значение - см. ПолучитьИсториюИзмененияБроней() - здесь создается эта ТЗ,
//							а также: 
//								ЗагрузкаРезервов(), 
//								Мод_ЗагрузитьБрони()
//
Процедура УТ11_СоздатьЗаказ(ДанныеЗаказа, стр, искДок, ТЗброни = Неопределено) Экспорт
	
	
	
	Если СокрЛП(ДанныеЗаказа["id"]) = "" Тогда
		ЗаписьЖурналаРегистрации("RetailCRM_УТ11_СоздатьЗаказ", УровеньЖурналаРегистрации.Ошибка,,,"Не указан id заказа в ответе сайта!");
		Возврат;
	КонецЕсли;
	
	
	Эталонная = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Эталонная");
	
	НесколькоОрганизаций = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеЗаказа.КодМагазина)Тогда 
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда 
			НесколькоОрганизаций = Истина;
			crmОрганизация = Справочники.crm_Организации.НайтиПоРеквизиту("КодМагазинаCRM",ДанныеЗаказа.КодМагазина);
			Организация = crmОрганизация.Организация;                                         
		КонецЕсли;
	КонецЕсли;
	
	Если Организация = Неопределено Тогда 
		Организация = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Организация");
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(искДок) Тогда
		док = Документы.ЗаказКлиента.СоздатьДокумент();
		док.Дата = ДанныеЗаказа.ДатаСоздания;
		док.Статус				= Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		док.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		док.Приоритет			=  ?(НесколькоОрганизаций = Истина, crmОрганизация.Приоритет, crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Приоритет"));
		док.Организация 		= Организация;
		док.НалогообложениеНДС 	=  ?(НесколькоОрганизаций = Истина, crmОрганизация.Налогообложение, crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Налогообложение"));
		док.ЦенаВключаетНДС    = ?(НесколькоОрганизаций = Истина, crmОрганизация.ЦенаВключаетНДС, crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЦенаВключаетНДС"));
		Если НесколькоОрганизаций = Истина Тогда 
			Валюта			= crmОрганизация.Валюта;
		Иначе 
			Валюта			= crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Валюта");
		КонецЕсли;
		док.Валюта 				= Валюта;
		док.Согласован          = Истина;
		док.ДатаСогласования    = док.Дата;
		док.ФормаОплаты         = Перечисления.ФормыОплаты.Наличная;
		док.СпособДоставки		= ?(НесколькоОрганизаций = Истина, crmОрганизация.СпособДоставки, Перечисления.СпособыДоставки.Самовывоз);
		док.НомерПоДаннымКлиента= ДанныеЗаказа["НомерЗаказа"];
		док.ДатаПоДаннымКлиента = ДанныеЗаказа.ДатаСоздания;
	Иначе
		
		СостояниеЗаказа = УТ11_ПолучитьСостояниеЗаказа(искДок);
		Если СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда 
			Сообщить("Заказ №" + искДок.Номер + " закрыт!!! Обновление не выполнено!!!");
			Возврат
		КонецЕсли;
		
		док = искДок.ПолучитьОбъект();
		
	КонецЕсли;
	
	
	СтатусЗаказа 		= СокрЛП(ДанныеЗаказа["СтатусЗаказа"]);
	
	ИспользованиеЗаказов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеЗаказов");
	
	ОтменаЗаказа = Ложь; 
	
	СоответствиеСтатусов = Неопределено;  
	
	Если Эталонная Тогда
		
		ТаблицаСтатусов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТабСтатусов");
		СоответствиеСтатусов = ТаблицаСтатусов.Найти(СтатусЗаказа, "КодCRM"); 
		Если СоответствиеСтатусов <> Неопределено Тогда
			ОтменаЗаказа = СоответствиеСтатусов.Отмена;
			док.Статус = СоответствиеСтатусов.Статус1С;
		Иначе
			Сообщить("Для статуса " + СтатусЗаказа + " не указано соответствие статуса в 1С. Перейдти на вкладку ""Статусы"" и настройте соответствие.");
		КонецЕсли;
		
	Иначе 
		Если СтатусЗаказа = "cancel" или СтатусЗаказа = "cancel-other" Тогда
			ОтменаЗаказа = Истина;
		ИначеЕсли СтатусЗаказа = "new" Тогда 
			док.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		ИначеЕсли СтатусЗаказа = "assembling" Тогда  
			док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		ИначеЕсли СтатусЗаказа = "for-shipment" или  СтатусЗаказа = "otgruzhen" Тогда
			Если ИспользованиеЗаказов = "ЗаказСоСкладаИПодЗаказ" Тогда
				док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
			ИначеЕсли ИспользованиеЗаказов = "ЗаказТолькоСоСклада" Тогда 
				док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
			КонецЕсли;
		//ЕНС
		ИначеЕсли СтатусЗаказа = "complete" Тогда 
			док.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
			
		КонецЕсли; 
	КонецЕсли;
	//---
	
	Если ИспользованиеЗаказов = "ЗаказКакСчет" Тогда
		док.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	КонецЕсли;

	
	// ЕНС. Отключено. У нас своя схема работы с реализациями
	////отмена заказа
	//Если ЗначениеЗаполнено(док.Ссылка) Тогда
	//	Реализация = УТ11_ВернутьРеализацию(док.Ссылка);
	//КонецЕсли;
	//Если ЗначениеЗаполнено(Реализация) Тогда
	//	Если Реализация.Проведен Тогда
	//		РеализацияОб = Реализация.ПолучитьОбъект();
	//		РеализацияОб.Записать(РежимЗаписиДокумента.ОтменаПроведения); 
	//	КонецЕсли;
	//КонецЕсли;
	
	//КлиентПартнер 	= УТ11_ОпределениеКонтрагента(ДанныеЗаказа,организация);
	
	РозничныйПокупатель = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("РозничныйПокупатель");
	
	док.Контрагент 			= РозничныйПокупатель;//КлиентПартнер.Получить("Клиент");
	док.Партнер 			= РозничныйПокупатель.Партнер;//КлиентПартнер.Получить("Партнер");
	
	Склад = УТ11_СоздатьЗаказ_НайтиСкладОтгрузки(ДанныеЗаказа, crmОрганизация);
	док.Склад 				= Склад;
	
	Если ЗначениеЗаполнено(ДанныеЗаказа["ДатаОтгрузкиПлан"]) Тогда 
		док.ДатаОтгрузки 	= ДанныеЗаказа["ДатаОтгрузкиПлан"];
	Иначе 
		док.ДатаОтгрузки 	= док.Дата;
	КонецЕсли;
	
	ИспользуютсяДоговорыКонтрагентов = Истина; 
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Если НесколькоОрганизаций = Истина Тогда 
			док.Соглашение = crmОрганизация.ТиповоеСоглашение;
		Иначе 
			док.Соглашение = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ТиповоеСоглашение");
		КонецЕсли;
		Если ЗначениеЗаполнено(док.Соглашение) Тогда 
			ИспользуютсяДоговорыКонтрагентов = док.Соглашение.ИспользуютсяДоговорыКонтрагентов;
			док.ХозяйственнаяОперация = док.Соглашение.ХозяйственнаяОперация;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") и ИспользуютсяДоговорыКонтрагентов Тогда
		Договор = ПолучитьДоговорКонтрагента(док.ХозяйственнаяОперация, док.Валюта, док.Контрагент, док.Организация);
		док.Договор = Договор;
	КонецЕсли;

	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("БанковскийСчет");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	Структура.Организация = Организация;
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Структура);

	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда 
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда 
			НесколькоОрганизаций = Истина;
			crmОрганизация = Справочники.crm_Организации.НайтиПоРеквизиту("КодМагазинаCRM",ДанныеЗаказа.КодМагазина);
			БанковскийСчет = crmОрганизация.БанковскийСчет;
		Иначе 
			БанковскийСчет = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("БанковскийСчет");
		КонецЕсли;
	КонецЕсли;
	
	Структура = Новый Структура;
	Структура.Вставить("Организация");
	Структура.Вставить("ФормаОплаты");
	Структура.Вставить("Касса");
	Структура.Вставить("Валюта");
	Структура.Вставить("НаправлениеДеятельности");
	Структура.Вставить("ФизическоеЛицо");
	Структура = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	Структура.Организация    	= Организация;
	Структура.Валюта    		= док.Валюта;
	
	Касса	= ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Структура);
	
	Если не ЗначениеЗаполнено(Касса) Тогда 
		//получаем из константы
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда 
			НесколькоОрганизаций = Истина;
			crmОрганизация = Справочники.crm_Организации.НайтиПоРеквизиту("КодМагазинаCRM",ДанныеЗаказа.КодМагазина);
			Касса = crmОрганизация.Касса;
		Иначе 
			Касса = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ОсновнаяКасса");
		КонецЕсли;
	КонецЕсли;	
	
	док.Касса = Касса;
	док.БанковскийСчет 				= БанковскийСчет;	
	док.БанковскийСчетКонтрагента	= Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(док.Контрагент);
	
	док.НеОтгружатьЧастями	=   Истина;
	
	//доставка
	Если ДанныеЗаказа.СпособДоставки <> Неопределено Тогда 
		СписокДоставок = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СоответствиеДоставок");
		Если СписокДоставок <> Неопределено Тогда 
			НайденнаяСтрока = СписокДоставок.Найти(ДанныеЗаказа.СпособДоставки, "КодCRM"); 
			Если НайденнаяСтрока <> Неопределено Тогда
				док.СпособДоставки = НайденнаяСтрока.СпособДоставки;
				Если НайденнаяСтрока.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу или 
					 НайденнаяСтрока.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда 
					док.ПеревозчикПартнер = НайденнаяСтрока.Перевозчик;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если док.СпособДоставки = Перечисления.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки или 
		 док.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу или
		 док.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента Тогда 
		док.ВремяДоставкиС = ДанныеЗаказа.ВремяДоставкиC;
		док.ВремяДоставкиПо = ДанныеЗаказа.ВремяДоставкиПо;
	КонецЕсли;
	
	Если док.СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз Тогда 
		док.ДополнительнаяИнформацияПоДоставке = ДанныеЗаказа.ДопИнформацияПоДоставке;
	КонецЕсли;
	
	док.АдресДоставки = СокрЛП(ДанныеЗаказа["АдресДоставки"]);
	//доставка
	
	////версия
	////с 11.5.7.390 изменили наименование реквизита с Требуется на КОбеспечению
	//Выше11_5_7_390 = Ложь; 
	//Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1157390 Тогда 
	//	Выше11_5_7_390 = Истина;
	//КонецЕсли;
	////для ут 11.5.10 и выше
	//Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1151046 Тогда
	////Если Найти(Метаданные.Версия, "11.5.10") > 0 Тогда 
	//	Выше11_5_7_390 = Истина;	
	//КонецЕсли;
	////
	
	//начало - Елисеев :: 22.11.2023
	// у нас ЕРП, для которой актуально значение Истина в этой переменной
	Выше11_5_7_390 = Истина;	
	//конец - Елисеев :: 22.11.2023

		
	//ЕНС. 
	док.Товары.Очистить();
	
	//счетчик = 0;
	УТ11_СравнитьСоставЗаказа(док,ДанныеЗаказа["ТЗТовары"],ОтменаЗаказа, Выше11_5_7_390, Эталонная, ТЗброни, СоответствиеСтатусов);
	
	// ЕНС. Пока не понятно, как это работает в Элис
	//Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ЗагрузкаБроней") = Истина Тогда
	//	УТ11_БронированиеТоваров(ТЗброни,док,ДанныеЗаказа["ТЗТовары"],ДанныеЗаказа["id"]);
	//КонецЕсли;
	
	Если ОтменаЗаказа = Ложь Тогда 
		УТ11_Услуги(док,ДанныеЗаказа);
	КонецЕсли;
	
	// Менеджер
	Если ДанныеЗаказа["КодМенеджера"]<> Неопределено Тогда  
		СписокМенеджеров = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СоответствиеМенеджеров");
		Если СписокМенеджеров = Неопределено Тогда 
			док.Менеджер = ПараметрыСеанса.ТекущийПользователь;
		Иначе 
			НайденнаяСтрока = СписокМенеджеров.Найти(ДанныеЗаказа["КодМенеджера"], "ИД"); 
			Если НайденнаяСтрока <> Неопределено Тогда
				док.Менеджер = НайденнаяСтрока.Менеджер;
				док.Подразделение = док.Менеджер.Подразделение;
				док.Автор = док.Менеджер;
			КонецЕсли;
		КонецЕсли;
	Иначе 
		док.Менеджер = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	//
	
	//Комментарий
	Индекс = Найти(ДанныеЗаказа["КомментарийКлиента"], "#");
	Если Индекс > 0 Тогда 
		док.Комментарий 		= ?(ДанныеЗаказа.КомментарийКлиента 	<> "", ДанныеЗаказа.КомментарийКлиента, 	"") + 
		?(ДанныеЗаказа.КомментарийМенеджера <> "", Символы.ПС + ДанныеЗаказа.КомментарийМенеджера, 	"");
	Иначе 
		док.Комментарий 		= ?(ДанныеЗаказа.КомментарийКлиента 	<> "","#","") + ?(ДанныеЗаказа.КомментарийКлиента 	<> "", ДанныеЗаказа.КомментарийКлиента, 	"") + 
		?(ДанныеЗаказа.КомментарийМенеджера <> "", Символы.ПС + ДанныеЗаказа.КомментарийМенеджера, 	"");
	КонецЕсли;
	док.Комментарий = док.Комментарий + " " +ДанныеЗаказа.Комментарий;  // Ситько.
	
	док.СкидкиРассчитаны    = 	Истина;
	док.СуммаДокумента 		= 	ДанныеЗаказа["СтоимостьЗаказаСоСкидкамиИДоставкой"];
	
	Если ЗначениеЗаполнено(док.Соглашение) Тогда 
		Док.ГрафикОплаты = Док.Соглашение.ГрафикОплаты;
		Док.ФормаОплаты  = Док.ГрафикОплаты.ФормаОплаты;
		док.ПорядокРасчетов = Док.Соглашение.ПорядокРасчетов;
		Для Каждого строкаГрафика из док.ГрафикОплаты.Этапы Цикл
			ВариантОплаты = строкаГрафика.ВариантОплаты;
			Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1158207 или Число(СтрЗаменить(Метаданные.Версия,".",""))>=1151046 Тогда
				ВариантОтсчета = строкаГрафика.ВариантОтсчета;
				Сдвиг = строкаГрафика.Сдвиг; 
			КонецЕсли;
			Прервать;;
		КонецЦикла;
	Иначе 
		//док.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	КонецЕсли;
	
	Док.ЭтапыГрафикаОплаты.Очистить();
	
	Если ОтменаЗаказа = Ложь Тогда  
		СтрокаОплата = док.ЭтапыГрафикаОплаты.Добавить();
		//начало - Елисеев :: 22.11.2023

		//Если Число(СтрЗаменить(Метаданные.Версия,".",""))>=1158207 или Число(СтрЗаменить(Метаданные.Версия,".",""))>=1151046 Тогда 
		//	СтрокаОплата.ВариантОплаты 	= ?(ЗначениеЗаполнено(ВариантОплаты), ВариантОплаты,Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки);
		//	СтрокаОплата.ВариантОтсчета =  ?(ЗначениеЗаполнено(ВариантОтсчета), ВариантОтсчета,Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа);
		//	Если ЗначениеЗаполнено(Сдвиг) Тогда 
		//		СтрокаОплата.Сдвиг = Сдвиг;
		//	Иначе 
		//		СтрокаОплата.Сдвиг =  Формат(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ОтсрочкаДней"),"ЧЦ=10; ЧДЦ=0");
		//	КонецЕсли;
		//Иначе 
		//	СтрокаОплата.ВариантОплаты 	= ?(ЗначениеЗаполнено(ВариантОплаты), ВариантОплаты,Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки);
		//КонецЕсли;
		
		Если Выше11_5_7_390 Тогда //енс поменял условие
			СтрокаОплата.ВариантОплаты 	= ?(ЗначениеЗаполнено(ВариантОплаты), ВариантОплаты,Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки);
			СтрокаОплата.ВариантОтсчета =  ?(ЗначениеЗаполнено(ВариантОтсчета), ВариантОтсчета,Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыЗаказа);
			Если ЗначениеЗаполнено(Сдвиг) Тогда 
				СтрокаОплата.Сдвиг = Сдвиг;
			Иначе 
				СтрокаОплата.Сдвиг =  Формат(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ОтсрочкаДней"),"ЧЦ=10; ЧДЦ=0");
			КонецЕсли;
		Иначе 
			СтрокаОплата.ВариантОплаты 	= ?(ЗначениеЗаполнено(ВариантОплаты), ВариантОплаты,Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки);
		КонецЕсли;
		//конец - Елисеев :: 22.11.2023

		СтрокаОплата.ДатаПлатежа	= док.ДатаОтгрузки;
		СтрокаОплата.ПроцентПлатежа = 100;
		СтрокаОплата.СуммаПлатежа	= док.СуммаДокумента;
	КонецЕсли;
		
	Если ОтменаЗаказа = Истина Тогда
		док.Согласован          =   истина;
		док.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
	КонецЕсли;  

	#Область ЗаписьЗаказа
	
	ЗаписатьЗаказ_Вендор(Док);	
	
	//Док.ОбменДанными.Загрузка = Ложь;
	//Док.Записать();
	
	
	НЗ = РегистрыСведений.ксп_ИсходныеДанныеЗаказов.СоздатьНаборЗаписей();
	НЗ.Отбор.id.Установить(ДанныеЗаказа["id"]);
	НЗ.Отбор.site.Установить(ДанныеЗаказа["site"]);
	
	НовСтр 				= НЗ.Добавить();
	НовСтр.id 			= ДанныеЗаказа["id"];
	НовСтр.site 		= ДанныеЗаказа["site"];
	НовСтр.ЗаказКлиента = Док.Ссылка;
	НовСтр.json 		= ""; 	//todo передать сюда исходный json
	НовСтр.status 		= СтатусЗаказа;
	НовСтр.ДатаЗаписи 	= ТекущаяУниверсальнаяДата();
	
	НЗ.Записать();    
	
	
	
	
	#КонецОбласти
	
	
	// ЕНС. Установка свойств заказа в "Дополнительные сведения". Отключено, т.к. есть РС.ксп_ИсходныеДанныеЗаказов
	//crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Док.Ссылка, мСвойствоЗаказов_ИД, ДанныеЗаказа["id"]);  
	//crm_RetailCRMОбработка.УТ11_УстановитьСвойствоУОбъекта(Док.Ссылка, мСвойствоЗаказовМагазин, ДанныеЗаказа["site"]);
	
	
	// ЕНС. Создание оплат
	// Отключено, т.к. не нужно в нашей схеме работы	
	//УТ11_СоздатьЗаказ_СозданиеОплат(ДанныеЗаказа, стр, искДок, док, Касса, ТЗброни);
	
	
	// ЕНС. Создание Реализаций
	// Отключено, т.к. не нужно в нашей схеме работы	
	//УТ11_СоздатьЗаказ_СозданиеРеализаций(ДанныеЗаказа, Эталонная, СоответствиеСтатусов, crmОрганизация, док.ссылка, док);
	
	
	// ЕНС. Обновление заказов на сервере. На случай, если в них были изменения в 1С
	// Отключено, т.к. не нужно в нашей схеме работы	
	//УТ11_СоздатьЗаказ_ОбновитьЗаказНаСервере(Док);
	
КонецПроцедуры


// Оригинальный код от вендора - RetailCRM
//
// Параметры:
//	Док - ДокументОбъект.ЗаказКлиента - 
//
Процедура ЗаписатьЗаказ_Вендор(Док)
	Успешно = Истина;
	т = "";
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		
		НЗ = РегистрыСведений.ксп_ОтложенноеПроведение.СоздатьНаборЗаписей();
		НЗ.Отбор.ДокументСсылка.Установить(Док.Ссылка);
		
		стрк = НЗ.Добавить();
		стрк.ДокументСсылка = Док.Ссылка;
		
		стрк.СтатусОбъекта = Перечисления.ксп_СтатусыКачестваДокументов.ОК;
		стрк.СтатусПроведения = Перечисления.КСП_СтатусыОтложенногоПроведения.Проведен;
		
		стрк.ДатаОбработки = ТекущаяДатаСеанса();
		
		НЗ.Записать();
		
		Сообщить("Проведен: " + Док , СтатусСообщения.Информация);
		
	Исключение
		т = ОписаниеОшибки();
		Сообщить("Не удалось провести: " + Док + " " + т, СтатусСообщения.Важное); 
		
		//Для Каждого стр из ПолучитьСообщенияПользователю() цикл
		//	позиция = СтрНайти(стр.Текст, "недостаточно свободного остатка");
		//	Если позиция > 0 Тогда 
		//		//если мы резервируем товары, значит бронируем что можно 
		//		ПроверитьНаличие(док);
		//	Иначе 
		//		Продолжить;
		//	КонецЕсли;
		//КонецЦикла;
		
		Успешно = Ложь;
	КонецПопытки;
	
	Если Успешно = Ложь Тогда
		Попытка
			Док.Записать(РежимЗаписиДокумента.Запись);
			
			НЗ = РегистрыСведений.ксп_ОтложенноеПроведение.СоздатьНаборЗаписей();
			НЗ.Отбор.ДокументСсылка.Установить(Док.Ссылка);
			
			стрк = НЗ.Добавить();
			стрк.ДокументСсылка = Док.Ссылка;
			
			стрк.СтатусОбъекта = Перечисления.ксп_СтатусыКачестваДокументов.ОК;
			стрк.СтатусПроведения = Перечисления.КСП_СтатусыОтложенногоПроведения.ОшибкаПроведения;
			
			стрк.ДатаОбработки = ТекущаяДатаСеанса();
			стрк.ОшибкаПроведения = т;
			
			НЗ.Записать();
			
			Сообщить("Записан: " + Док , СтатусСообщения.Информация);
		Исключение
			т = ОписаниеОшибки();
			Сообщить("Не удалось записать: " + Док + " " + т, СтатусСообщения.Важное);
			ЗаписьЖурналаРегистрации("RetailCRM", УровеньЖурналаРегистрации.Ошибка,,,т);
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры


//начало - Елисеев :: 26.11.2023


// Описание_метода
//
// Параметры:
//	ЗаказКлиентаОбъект 	- ДокументОбъект.ЗаказКлиента - для эксперимента. Вообще закрытие заказа надо переделать на очередь
//
Процедура УТ11_СоздатьЗаказ_СозданиеРеализаций(ДанныеЗаказа, Эталонная, СоответствиеСтатусов, crmОрганизация, ЗаказКлиентаСсылка, ЗаказКлиентаОбъект) Экспорт
	
	СоздаватьРеализацию = Ложь;
	
	СтатусЗаказа 		= СокрЛП(ДанныеЗаказа["СтатусЗаказа"]);
	
	//или сразу найти в тз этот статус и проверить есть ли флаг создания реализации
	Если Эталонная Тогда 
		Если СоответствиеСтатусов <> Неопределено Тогда
			СоздаватьРеализацию = СоответствиеСтатусов.Реализация;
		КонецЕсли;
	Иначе 
		Если СтатусЗаказа = "for-shipment" или СтатусЗаказа = "otgruzhen" или СтатусЗаказа = "complete" Тогда  
			Если НесколькоОрганизаций = Истина Тогда
				Если crmОрганизация.Реализация = Истина Тогда 
					СоздаватьРеализацию = Истина;
				КонецЕсли;
			Иначе
				Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СозданиеРеализаций") = Истина Тогда 
					СоздаватьРеализацию = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СоздаватьРеализацию  Тогда 	
		//todo закэшировать запрос
		
		мЗапросПоискаРеализаций1.УстановитьПараметр("ЗаказКлиента", ЗаказКлиентаСсылка);
		
		РезультатЗапроса = мЗапросПоискаРеализаций1.Выполнить(); 		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Реализация = "";
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Реализация = ВыборкаДетальныеЗаписи.Ссылка;
			//считаем, что реализация будет одна, поэтому - Прервать
			Прервать;
		КонецЦикла;
		
		
		УТ11_СоздатьРеализацию(ЗаказКлиентаОбъект, Реализация, СтатусЗаказа);
		
	КонецЕсли;	
	
		
КонецПроцедуры


//Если заказ оплачен, то на каждую оплату создается документ оплаты. 
//тип документы зависит от типа оплаты
Процедура УТ11_СоздатьЗаказ_СозданиеОплат(ДанныеЗаказа, стр, искДок, ДокЗаказКлиентаОбъект, Касса, ТЗброни = Неопределено) Экспорт
	
	Если НЕ crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СозданиеОплат") = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Оплата из ДанныеЗаказа["Оплаты"] Цикл  
		
		ДокументОплаты = "";
		ТипДокументаОплаты = "";
		Терминал = "";
		СписокОплат = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СоответствиеТиповОплат");
		Если СписокОплат <> Неопределено Тогда 
			НайденнаяСтрока = СписокОплат.Найти(Оплата["ТипОплаты"], "КодCRM"); 
			Если НайденнаяСтрока <> Неопределено Тогда
				ТипДокументаОплаты = НайденнаяСтрока.Документ;
				Если ТипДокументаОплаты = "Эквайринговая операция" Тогда 
					Терминал = НайденнаяСтрока.Терминал;
				КонецЕсли;
			КонецЕсли;
		
			ДокументОплаты = УТ11_ВернутьДокументОплаты(Строка(Оплата["ИДОплаты"]));
			
			Если Оплата["СтатусОплаты"] = "paid" Тогда  			
				УТ11_СоздатьДокументОплаты(ДокЗаказКлиентаОбъект, Оплата, ТипДокументаОплаты, ДокументОплаты, Касса, Терминал); 
				
			ИначеЕсли Оплата["СтатусОплаты"] = "not-paid" и ДокументОплаты <> "" Тогда
				//делаем отмену проведения
				Если ДокументОплаты.Проведен Тогда
					ДокументОплаты = ДокументОплаты.ПолучитьОбъект();
					ДокументОплаты.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Сообщить("Не заполнено соответствие оплат на вкладке ""Оплаты"". Оплата не будет загружена в 1С");
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

Функция УТ11_СоздатьЗаказ_НайтиСкладОтгрузки(ДанныеЗаказа, crmОрганизация) Экспорт
	СкладОтг = ДанныеЗаказа["СкладОтгрузки"];
	Склад = Неопределено;
	Если ЗначениеЗаполнено(СкладОтг) Тогда 
		СписокСкладов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склады");
		Если СписокСкладов <> Неопределено Тогда 
			НайденнаяСтрока = СписокСкладов.Найти(СкладОтг, "КодCRM"); 
			Если НайденнаяСтрока <> Неопределено Тогда
				Склад = НайденнаяСтрока.Склад;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Склад) Тогда 
		Если НесколькоОрганизаций = Истина Тогда 
			Склад = crmОрганизация.Склад;
		Иначе 
			Склад = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Склад");
		КонецЕсли;
	КонецЕсли;
	Возврат Склад;
КонецФункции

// отправляет заказ в RetailCRM
Функция УТ11_СоздатьЗаказ_ОбновитьЗаказНаСервере(ЗаказКлиентаОбъект) Экспорт
	ПустаяНоменклатура = Ложь;
	Для Каждого товар из ЗаказКлиентаОбъект.Товары Цикл 
		Если Не ЗначениеЗаполнено(товар.Номенклатура) Тогда 
			ПустаяНоменклатура = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяНоменклатура Тогда
		crm_RetailCRMОбщий.ВыгрузитьExternalIdsТоваров(ЗаказКлиентаОбъект);
	КонецЕсли;
КонецФункции

//конец - Елисеев :: 26.11.2023

#КонецОбласти


ДатаРедакции = "17.10.2023";
Версия 		= "1";
РелизКонф 	= "1";
СистИнфо 	= Новый СистемнаяИнформация;
РелизПлафт 	= СистИнфо.ВерсияПриложения; 


	мЗапросСостоянияЗаказов 	= СоздатьЗапросСостоянияЗаказов();
	мЗапросПоискаЗаказов 		= СоздатьЗапросПоискаЗаказов();
	мЗапросПоискаРеализаций1 	= СоздатьЗапросПоискаРеализаций1();  
	
	//
	//мСвойствоЗаказовМагазин = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("site", 
	//	Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	//
	//// это ключ для поиска заказа в 1С
	//мСвойствоЗаказов_ИД = crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", 
	//	Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);





		