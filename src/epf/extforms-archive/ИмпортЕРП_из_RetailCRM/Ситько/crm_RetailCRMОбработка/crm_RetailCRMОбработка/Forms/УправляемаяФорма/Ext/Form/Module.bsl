&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	НастройкиПодключенияКСП = ПланыВидовХарактеристик.КСП_НастройкиRetailCRM.пустаяСсылка();
КонецПроцедуры



&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСписокКонстант();

	// ЕНС. Пока не знаю, как отличить первый запуск от следующих. 
	// А первый запуск выдает ошибку, если константы еще не настроены
	// Это баг от вендора
	// Поэтому пока отключу проверку
	//КорректныеДанные = Ложь;
	//ПроверитьКорректностьКлюча(КорректныеДанные);
	КорректныеДанные = Истина;
	
	Если КорректныеДанные = Истина Тогда 
		ЭтаФорма.Элементы.Основная.Видимость = Истина;
		ЭтаФорма.Элементы.Статусы.Видимость = Истина;
		ЭтаФорма.Элементы.Менеджеры.Видимость = Истина;
		ЭтаФорма.Элементы.Склады.Видимость = Истина;
		ЭтаФорма.Элементы.ТипыЦен.Видимость = Истина;
		ЭтаФорма.Элементы.Оплаты.Видимость = Истина;
		ЭтаФорма.Элементы.Доставка.Видимость = Истина;
		ЭтаФорма.Элементы.Группа1.Видимость = Истина;
		ЭтаФорма.Элементы.ПрограммаЛояльности.Видимость = Истина;
		ЭтаФорма.Элементы.Розница.Видимость = Истина;
		ЭтаФорма.Элементы.НастройкиОбмена.Видимость = Истина;
		ЭтаФорма.Элементы.ДоступностьВкладок.Видимость = Ложь;
	КонецЕсли;
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		ЭтаФорма.Элементы.ТабКаталог.Видимость 				= Ложь;
		ЭтаФорма.Элементы.ТабКаталогПоВидам.Видимость 		= Ложь;
		ЭтаФорма.Элементы.ПутьКФайлу.Видимость 				= Ложь;
		ЭтаФорма.Элементы.СозданиеРеализаций.Видимость 		= Ложь;
		ЭтаФорма.Элементы.НастройкаОрганизаций.Видимость 	= Истина;
		ЭтаФорма.Элементы.НастройкаОрганизаций1.Видимость 	= Истина;
		ЭтаФорма.Элементы.ГруппаКаталога.Видимость 			= Ложь;
		ЭтаФорма.Элементы.ВыгрузкаКаталога.Видимость 		= Истина;
	Иначе 
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИерархияНоменклатуры") = "Виды номенклатуры" Тогда
			ЭтаФорма.Элементы.ТабКаталог.Видимость = Ложь;
			ЭтаФорма.Элементы.ТабКаталогПоВидам.Видимость = Истина;
		Иначе 
			ЭтаФорма.Элементы.ТабКаталог.Видимость = Истина;
			ЭтаФорма.Элементы.ТабКаталогПоВидам.Видимость = Ложь;
		КонецЕсли;
		
		ЭтаФорма.Элементы.ПутьКФайлу.Видимость 				= Истина;
		ЭтаФорма.Элементы.СозданиеРеализаций.Видимость 		= Истина;
		ЭтаФорма.Элементы.НастройкаОрганизаций.Видимость 	= Ложь;
		ЭтаФорма.Элементы.НастройкаОрганизаций1.Видимость 	= Ложь;
		ЭтаФорма.Элементы.ГруппаКаталога.Видимость 			= Истина;
		ЭтаФорма.Элементы.ВыгрузкаКаталога.Видимость 		= Ложь;
	КонецЕсли;
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") = Истина Тогда
		ЭтаФорма.Элементы.ТипыЦен.Видимость 			= Истина;
		ЭтаФорма.Элементы.ТипыЦен1.Доступность 			= Истина;
		ЭтаФорма.Элементы.ВыгружатьТипыЦен.Видимость 	= Истина;
	Иначе 
		ЭтаФорма.Элементы.ТипыЦен.Видимость 			= Ложь;
		ЭтаФорма.Элементы.ТипыЦен1.Доступность 			= Ложь;
		ЭтаФорма.Элементы.ВыгружатьТипыЦен.Видимость 	= Ложь;
	КонецЕсли;
	
	//Оплаты
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгрузкаОплатВCRM") <> Истина и
		crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СозданиеОплат") <> Истина Тогда
		ЭтаФорма.Элементы.Оплаты.Видимость = Ложь;
		ЭтаФорма.Элементы.СоответствиеТиповОплат.Доступность = Ложь;
	Иначе 
		ЭтаФорма.Элементы.Оплаты.Видимость = Истина;
		ЭтаФорма.Элементы.СоответствиеТиповОплат.Доступность = Истина;
	КонецЕсли;
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СозданиеОплат") = Истина Тогда 
		ЭтаФорма.Элементы.ОплатаВ1С.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.ОплатаВ1С.Видимость = Ложь;
	КонецЕсли; 
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгрузкаОплатВCRM") = Истина Тогда 
		ЭтаФорма.Элементы.ОплатаИз1С.Видимость = Истина;
		ЭтаФорма.Элементы.ВыгрузкаВозвратовОплатыВCRM.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.ОплатаИз1С.Видимость = Ложь;
		ЭтаФорма.Элементы.ВыгрузкаВозвратовОплатыВCRM.Видимость = Ложь;
	КонецЕсли;	
	//Оплаты
	
	Если Не ЗначениеЗаполнено(Объект.ИдентификаторТовара) Тогда 
		Объект.ИдентификаторТовара = "Код";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИерархияНоменклатуры) Тогда 
		Объект.ИерархияНоменклатуры = "Группы номенклатуры";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.offers_id) Тогда 
		Объект.offers_id = "xmlId";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИспользованиеЗаказов) Тогда 
		Объект.ИспользованиеЗаказов = "ЗаказСоСкладаИПодЗаказ";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НазваниеПЛ) Тогда 
		Объект.НазваниеПЛ = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НазваниеПЛ");
	КонецЕсли;
	
	//++ Работа с характеристиками
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
		ЭтаФорма.Элементы.ИдентификаторТовара.Видимость = Ложь; 
		ЭтаФорма.Элементы.GUIDОрганизации.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ИдентификаторТовара.Видимость = Истина;
		ЭтаФорма.Элементы.GUIDОрганизации.Видимость = Ложь;
	КонецЕсли;
	//-- Работа с характеристиками
	
	ИспользованиеЗаказов = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеЗаказов");
	
	Если ИспользованиеЗаказов = "ЗаказКакСчет" Тогда
		
	КонецЕсли;
	
	//++ Эталонка
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Эталонная") = Истина Тогда 
		
		ЭтаФорма.Элементы.ГруппаСостояния.Видимость = Истина;
		
		Если Объект.ИспользованиеЗаказов = "ЗаказСоСкладаИПодЗаказ" Тогда
			ЭтаФорма.Элементы.ТабСтатусыПримечание.Видимость = Истина;
			ЭтаФорма.Элементы.ТабСтатусыСтатус1С.Видимость = Истина;
			ЭтаФорма.Элементы.ТабСтатусыВариантОбеспечения.Видимость = Истина;
			ЭтаФорма.Элементы.ТабСтатусыСостояниеЗаказа.Видимость = Истина;
		ИначеЕсли Объект.ИспользованиеЗаказов = "ЗаказТолькоСоСклада" Тогда 
			ЭтаФорма.Элементы.ТабСтатусыСостояниеЗаказа.Видимость = Истина;
			ЭтаФорма.Элементы.ТабСтатусыСтатус1С.Видимость = Истина;
			ЭтаФорма.Элементы.ТабСтатусыВариантОбеспечения.Видимость = Ложь;
		Иначе 
			ЭтаФорма.Элементы.ТабСтатусыПримечание.Видимость = Ложь;
			ЭтаФорма.Элементы.ТабСтатусыСтатус1С.Видимость = Ложь;
			ЭтаФорма.Элементы.ТабСтатусыВариантОбеспечения.Видимость = Ложь;
			ЭтаФорма.Элементы.ТабСтатусыСостояниеЗаказа.Видимость = Ложь;
		КонецЕсли;
		
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СозданиеРеализаций") Тогда
			ЭтаФорма.Элементы.ТабСтатусыРеализация.Видимость = Истина;
		Иначе 
			ЭтаФорма.Элементы.ТабСтатусыРеализация.Видимость = Ложь;
		КонецЕсли; 
		
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СозданиеВозвратов") = Истина Тогда
			ЭтаФорма.Элементы.ТабСтатусыВозврат.Видимость = Истина;
		Иначе 
			ЭтаФорма.Элементы.ТабСтатусыВозврат.Видимость = Ложь;
		КонецЕсли;
	Иначе 
		ЭтаФорма.Элементы.ТабСтатусыРеализация.Видимость = Ложь;
		ЭтаФорма.Элементы.ТабСтатусыПримечание.Видимость = Ложь;
		ЭтаФорма.Элементы.ГруппаСостояния.Видимость = Ложь;
	КонецЕсли;
	//-- Эталонка
	
	Если ЭтаФорма.ИспользоватьДатуАктуальности = Истина Тогда 
		ЭтаФорма.Элементы.ДатаАктуальности.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ДатаАктуальности.Видимость = Ложь;
	КонецЕсли;  
	
	//Программа лояльности
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеПЛ") = Истина Тогда 
		ЭтаФорма.Элементы.ПрограммаЛояльности.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ПрограммаЛояльности.Видимость = Ложь;
	КонецЕсли;
	//Программа лояльности

	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("РаботаСРозницей") = Истина Тогда 
		ЭтаФорма.Элементы.Розница.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.Розница.Видимость = Ложь;
	КонецЕсли;
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгружатьЧек") = Истина Тогда 
		ЭтаФорма.Элементы.ВыгружатьЧекРП.Доступность = Истина;
		ЭтаФорма.Элементы.ВыгружатьЧекВозврат.Доступность = Истина;
		ЭтаФорма.Элементы.НастройкиРозницы.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.ВыгружатьЧекРП.Доступность = Ложь;
		ЭтаФорма.Элементы.ВыгружатьЧекВозврат.Доступность = Ложь;
		ЭтаФорма.Элементы.НастройкиРозницы.Видимость = Ложь;
	КонецЕсли;
	
	СвязьМагазина = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СвязьМагазина"); 
	Если СвязьМагазина = "Склад1С" Тогда 
		ЭтаФорма.Элементы.МагазинСклад.Видимость = Истина;
		ЭтаФорма.Элементы.МагазинОрганизация.Видимость = Ложь;
	ИначеЕсли СвязьМагазина = "Организация1С" Тогда
		ЭтаФорма.Элементы.МагазинСклад.Видимость = Ложь;
		ЭтаФорма.Элементы.МагазинОрганизация.Видимость = Истина;
	Иначе 
		Если Не ЗначениеЗаполнено(Объект.СвязьМагазина) Тогда 
			Объект.СвязьМагазина = "Организация1С";
		КонецЕсли;
	КонецЕсли;
	
	СкладскаяСистемаАктивна = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СкладскаяСистема");
	Если СкладскаяСистемаАктивна = Истина Тогда 
		Объект.СкладскаяСистема = Истина;
	Иначе 
		СкладскаяСистемаНаСервере(СкладскаяСистемаАктивна);
		Если СкладскаяСистемаАктивна = Истина Тогда
			Объект.СкладскаяСистема = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если КорректныеДанные = Ложь Тогда 
		ЭтаФорма.Элементы.Основная.Видимость = Ложь;
		ЭтаФорма.Элементы.Статусы.Видимость = Ложь;
		ЭтаФорма.Элементы.Менеджеры.Видимость = Ложь;
		ЭтаФорма.Элементы.Склады.Видимость = Ложь;
		ЭтаФорма.Элементы.ТипыЦен.Видимость = Ложь;
		ЭтаФорма.Элементы.Оплаты.Видимость = Ложь;
		ЭтаФорма.Элементы.Доставка.Видимость = Ложь;
		ЭтаФорма.Элементы.Группа1.Видимость = Ложь;
		ЭтаФорма.Элементы.ПрограммаЛояльности.Видимость = Ложь;
		ЭтаФорма.Элементы.Розница.Видимость = Ложь;
		ЭтаФорма.Элементы.НастройкиОбмена.Видимость = Ложь;
		ЭтаФорма.Элементы.ДоступностьВкладок.Видимость = Истина;
		ЭтаФорма.Элементы.ДоступностьВкладок.Заголовок = "Проверьте корректность адреса crm и api ключа";
	КонецЕсли;
	
КонецПроцедуры

// +++ РАБОТА С КОНСТАНТАМИ +++  
#Область РаботаСКонстантами
&НаСервере
Процедура СоздатьКонстантыНаСервере()
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.СоздатьКонстанты();
	
	ЭтаФорма.Элементы.Основная.Видимость = Ложь;
	ЭтаФорма.Элементы.Статусы.Видимость = Ложь;
	ЭтаФорма.Элементы.Менеджеры.Видимость = Ложь;
	ЭтаФорма.Элементы.Склады.Видимость = Ложь;
	ЭтаФорма.Элементы.ТипыЦен.Видимость = Ложь;
	ЭтаФорма.Элементы.Оплаты.Видимость = Ложь;
	ЭтаФорма.Элементы.Доставка.Видимость = Ложь;
	ЭтаФорма.Элементы.Группа1.Видимость = Ложь;
	ЭтаФорма.Элементы.ПрограммаЛояльности.Видимость = Ложь;
	ЭтаФорма.Элементы.Розница.Видимость = Ложь;
	ЭтаФорма.Элементы.НастройкиОбмена.Видимость = Ложь;
	ЭтаФорма.Элементы.ДоступностьВкладок.Видимость = Истина;
	ЭтаФорма.Элементы.ДоступностьВкладок.Заголовок = "Остальные вкладки будут досутпны после указания корректного адреса crm и api ключа";
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонстантыНаКлиенте(Команда)
	СоздатьКонстантыНаСервере();
	ОбновитьСписокКонстант();
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуНаФорму(УФ,ИмяТЗНаФорме,ТЗ, ТЗОбработчиковСобытий = Неопределено) Экспорт
	
	// СОЗДАНИЕ РЕКВИЗИТОВ ФОРМЫ
	МассивДобавляемыхРеквизитов = Новый Массив; 
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения,ИмяТЗНаФорме ,Колонка.Заголовок));	
	КонецЦикла; 
	
	МассивУдаляемыхРеквизитов = УФ.ПолучитьРеквизиты(ИмяТЗНаФорме);
	МассивИменУдаляемыхРеквизитов = Новый Массив;
	
	Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
		МассивИменУдаляемыхРеквизитов.Добавить(ИмяТЗНаФорме + "." + Элемент.Имя);
	КонецЦикла; 
	
	УФ.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов,МассивИменУдаляемыхРеквизитов); 
	
	// СОЗДАНИЕ ЭЛЕМЕНТОВ ФОРМЫ
	Для каждого Элемент Из МассивУдаляемыхРеквизитов Цикл
		УдаляемыйЭлемент = УФ.Элементы.Найти(ИмяТЗНаФорме + Элемент.Имя);
		УФ.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла; 
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		НоваяКолонка = УФ.Элементы.Добавить(ИмяТЗНаФорме + Колонка.Имя, Тип("ПолеФормы"), УФ.Элементы[ИмяТЗНаФорме]); 
		НоваяКолонка.Заголовок = Колонка.Заголовок; 
		НоваяКолонка.ПутьКДанным = ИмяТЗНаФорме + "." + Колонка.Имя;
		НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
		НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;    
	КонецЦикла; 	
	
	УФ[ИмяТЗНаФорме].Загрузить(ТЗ);
	
	// Привязка обработчиков событий
	Если ТЗОбработчиковСобытий = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого Строка Из ТЗОбработчиковСобытий Цикл
		УФ.Элементы[Строка.ИмяЭлемента].УстановитьДействие(Строка.ИмяСобытия, Строка.ИмяЭлемента + Строка.ИмяСобытия); 
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокКонстант()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Элементы.Версия.Заголовок = "Версия: "+Обработка.Версия;
	Элементы.ДатаРедакции.Заголовок = "Дата редакции: "+Обработка.ДатаРедакции;
	Элементы.РелизКонф.Заголовок = "Конфигурация: " + Обработка.РелизКонф;
	Элементы.Платформа.Заголовок = "1С:Предприятие: " + Обработка.РелизПлафт;
	Обработка.Мод_ОбновитьСписокКонстант(Объект);
	Элементы.ТабКонстанты.ПодчиненныеЭлементы.ТабКонстантыЗначение.ВыбиратьТип = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьКонстантыНаСервере()
	РеквизитФормыВЗначение("Объект").Мод_СохранитьКонстанты();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКонстанты(Команда)
	
	//тут бы проверить соответствие статусов и ругнуться если в примечании есть Внимание!
	СохранитьКонстантыНаСервере();
	
	//начало - Елисеев :: 25.11.2023
	ОбновитьПовторноИспользуемыеЗначения();
	//конец - Елисеев :: 25.11.2023
	
	КорректныеДанные = Ложь;
	ПроверитьКорректностьКлюча(КорректныеДанные);
	
	Если КорректныеДанные = Истина Тогда 
		ЭтаФорма.Элементы.Основная.Видимость = Истина;
		ЭтаФорма.Элементы.Статусы.Видимость = Истина;
		ЭтаФорма.Элементы.Менеджеры.Видимость = Истина;
		ЭтаФорма.Элементы.Склады.Видимость = Истина;
		ЭтаФорма.Элементы.ТипыЦен.Видимость = Истина;
		ЭтаФорма.Элементы.Оплаты.Видимость = Истина;
		ЭтаФорма.Элементы.Доставка.Видимость = Истина;
		ЭтаФорма.Элементы.Группа1.Видимость = Истина;
		ЭтаФорма.Элементы.ПрограммаЛояльности.Видимость = Истина;
		ЭтаФорма.Элементы.Розница.Видимость = Истина;
		ЭтаФорма.Элементы.НастройкиОбмена.Видимость = Истина;
		ЭтаФорма.Элементы.ДоступностьВкладок.Видимость = Ложь;
	КонецЕсли;

	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НесколькоОрганизаций") = Истина Тогда
		ЭтаФорма.Элементы.ТабКаталог.Видимость = Ложь;
		ЭтаФорма.Элементы.ТабКаталогПоВидам.Видимость = Ложь;
		ЭтаФорма.Элементы.ПутьКФайлу.Видимость = Ложь;
		ЭтаФорма.Элементы.СозданиеРеализаций.Видимость = Ложь;
		ЭтаФорма.Элементы.НастройкаОрганизаций.Видимость = Истина;
		ЭтаФорма.Элементы.НастройкаОрганизаций1.Видимость = Истина;
		ЭтаФорма.Элементы.ГруппаКаталога.Видимость = Ложь;
		ЭтаФорма.Элементы.ВыгрузкаКаталога.Видимость = Истина;
	Иначе 
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИерархияНоменклатуры") = "Виды номенклатуры" Тогда
			ЭтаФорма.Элементы.ТабКаталог.Видимость = Ложь;
			ЭтаФорма.Элементы.ТабКаталогПоВидам.Видимость = Истина;
		Иначе 
			ЭтаФорма.Элементы.ТабКаталог.Видимость = Истина;
			ЭтаФорма.Элементы.ТабКаталогПоВидам.Видимость = Ложь;
		КонецЕсли;
		ЭтаФорма.Элементы.ПутьКФайлу.Видимость = Истина;
		ЭтаФорма.Элементы.СозданиеРеализаций.Видимость = Истина;
		ЭтаФорма.Элементы.НастройкаОрганизаций1.Видимость = Ложь;
		ЭтаФорма.Элементы.НастройкаОрганизаций1.Видимость = Ложь;
		ЭтаФорма.Элементы.ГруппаКаталога.Видимость = Истина;
		ЭтаФорма.Элементы.ВыгрузкаКаталога.Видимость = Ложь;
	КонецЕсли;
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеТиповЦен") = Истина Тогда
		ЭтаФорма.Элементы.ТипыЦен.Видимость = Истина;
		ЭтаФорма.Элементы.ТипыЦен1.Доступность = Истина;
		ЭтаФорма.Элементы.ВыгружатьТипыЦен.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ТипыЦен.Видимость = Ложь;
		ЭтаФорма.Элементы.ТипыЦен1.Доступность = Ложь;
		ЭтаФорма.Элементы.ВыгружатьТипыЦен.Видимость = Ложь;
	КонецЕсли;
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгрузкаОплатВCRM") <> Истина и
		crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СозданиеОплат") <> Истина Тогда
		ЭтаФорма.Элементы.Оплаты.Видимость = Ложь;
		ЭтаФорма.Элементы.СоответствиеТиповОплат.Доступность = Ложь;
	Иначе 
		ЭтаФорма.Элементы.Оплаты.Видимость = Истина;
		ЭтаФорма.Элементы.СоответствиеТиповОплат.Доступность = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИдентификаторТовара) Тогда 
		Объект.ИдентификаторТовара = "Код";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИерархияНоменклатуры) Тогда 
		Объект.ИерархияНоменклатуры = "Группы номенклатуры";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.offers_id) Тогда 
		Объект.offers_id = "xmlId";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИспользованиеЗаказов) Тогда 
		Объект.ИспользованиеЗаказов = "ЗаказСоСкладаИПодЗаказ";
	КонецЕсли;
	
	//++ Работа с характеристиками
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
		ЭтаФорма.Элементы.ИдентификаторТовара.Видимость = Ложь;
		ЭтаФорма.Элементы.GUIDОрганизации.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ИдентификаторТовара.Видимость = Истина;
		ЭтаФорма.Элементы.GUIDОрганизации.Видимость = Ложь;
	КонецЕсли;
	//-- Работа с характеристиками
	
	//++ Эталонка
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("Эталонная") = Истина Тогда 
		
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СозданиеРеализаций") = Истина Тогда
			ЭтаФорма.Элементы.ТабСтатусыРеализация.Видимость = Истина;
		КонецЕсли;
		
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СозданиеВозвратов") = Истина Тогда
			ЭтаФорма.Элементы.ТабСтатусыВозврат.Видимость = Истина;
		КонецЕсли;
		
		Если Объект.ИспользованиеЗаказов = "ЗаказСоСкладаИПодЗаказ" Тогда
			ЭтаФорма.Элементы.ТабСтатусыСостояниеЗаказа.Видимость = Истина;
			ЭтаФорма.Элементы.ТабСтатусыСтатус1С.Видимость = Истина;
			ЭтаФорма.Элементы.ТабСтатусыВариантОбеспечения.Видимость = Истина;
			ЭтаФорма.Элементы.ТабСтатусыПримечание.Видимость = Истина;
		ИначеЕсли Объект.ИспользованиеЗаказов = "ЗаказТолькоСоСклада" Тогда 
			ЭтаФорма.Элементы.ТабСтатусыСостояниеЗаказа.Видимость = Истина;
			ЭтаФорма.Элементы.ТабСтатусыСтатус1С.Видимость = Истина;
			ЭтаФорма.Элементы.ТабСтатусыВариантОбеспечения.Видимость = Ложь;
			ЭтаФорма.Элементы.ТабСтатусыПримечание.Видимость = Истина;
		Иначе 
			ЭтаФорма.Элементы.ТабСтатусыСостояниеЗаказа.Видимость = Ложь;
			ЭтаФорма.Элементы.ТабСтатусыСтатус1С.Видимость = Ложь;
			ЭтаФорма.Элементы.ТабСтатусыВариантОбеспечения.Видимость = Ложь; 
			ЭтаФорма.Элементы.ТабСтатусыПримечание.Видимость = Ложь;
		КонецЕсли;
		
	Иначе 
		ЭтаФорма.Элементы.ТабСтатусыРеализация.Видимость = Ложь;
		ЭтаФорма.Элементы.ТабСтатусыВозврат.Видимость = Ложь;
		ЭтаФорма.Элементы.ТабСтатусыСостояниеЗаказа.Видимость = Ложь;
		ЭтаФорма.Элементы.ТабСтатусыСтатус1С.Видимость = Ложь;
		ЭтаФорма.Элементы.ТабСтатусыВариантОбеспечения.Видимость = Ложь;
		ЭтаФорма.Элементы.ТабСтатусыПримечание.Видимость = Ложь;
		
	КонецЕсли;
	//-- Эталонка
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("РаботаСРозницей") = Истина Тогда
		ЭтаФорма.Элементы.Розница.Видимость = Истина;
		
		Если Объект.ВыгружатьЧек = Истина Тогда 
			ЭтаФорма.Элементы.ВыгружатьЧекРП.Доступность = Истина;
			ЭтаФорма.Элементы.ВыгружатьЧекВозврат.Доступность = Истина;
		Иначе 
			ЭтаФорма.Элементы.ВыгружатьЧекРП.Доступность = Ложь;
			ЭтаФорма.Элементы.ВыгружатьЧекВозврат.Доступность = Ложь;
		КонецЕсли;
	Иначе 
		ЭтаФорма.Элементы.Розница.Видимость = Ложь;
	КонецЕсли;
	
	Если КорректныеДанные = Ложь Тогда 
		ЭтаФорма.Элементы.Основная.Видимость = Ложь;
		ЭтаФорма.Элементы.Статусы.Видимость = Ложь;
		ЭтаФорма.Элементы.Менеджеры.Видимость = Ложь;
		ЭтаФорма.Элементы.Склады.Видимость = Ложь;
		ЭтаФорма.Элементы.ТипыЦен.Видимость = Ложь;
		ЭтаФорма.Элементы.Оплаты.Видимость = Ложь;
		ЭтаФорма.Элементы.Доставка.Видимость = Ложь;
		ЭтаФорма.Элементы.Группа1.Видимость = Ложь;
		ЭтаФорма.Элементы.ПрограммаЛояльности.Видимость = Ложь;
		ЭтаФорма.Элементы.Розница.Видимость = Ложь;
		ЭтаФорма.Элементы.НастройкиОбмена.Видимость = Ложь;
		ЭтаФорма.Элементы.ДоступностьВкладок.Видимость = Истина;
		ЭтаФорма.Элементы.ДоступностьВкладок.Заголовок = "Проверьте корректность адреса crm и api ключ";
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьКонстантыИз1СНаСервере(НастройкиПодключенияКСП)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПВХ.Наименование КАК Название,
	|	ПВХ.ТипЗначения КАК Тип,
	|	ЗначениеОбщихНастроек.Значение КАК Значение
	|ИЗ
	|	ПланВидовХарактеристик.КСП_НастройкиRetailCRM КАК ПВХ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ксп_ЗначенияНастроекRetailCRM КАК ЗначениеОбщихНастроек
	|		ПО (ПВХ.Ссылка = ЗначениеОбщихНастроек.Настройка)
	|ГДЕ
	|	ПВХ.Родитель = &Родитель
	|	И НЕ ПВХ.ПометкаУдаления";
	Запрос.УстановитьПараметр("Родитель", НастройкиПодключенияКСП);
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл 
		СтруктураПоиска = Новый Структура("Название", Результат.Название);
		Настройка = Обработка.ТабКонстанты.НайтиСтроки(СтруктураПоиска);
		Если Не Настройка.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(Настройка[0], Результат);	
		КонецЕсли;
	КонецЦикла;                                               
	ЗначениеВРеквизитФормы(Обработка, "Объект");	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонстантыИз1С(Команда)        
		
	Если Не ЗначениеЗаполнено(НастройкиПодключенияКСП) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнено значение ""Настройки подключения к КСП""";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	ЗагрузитьКонстантыИз1СНаСервере(НастройкиПодключенияКСП);
	
КонецПроцедуры

#КонецОбласти
// --- РАБОТА С КОНСТАНТАМИ ---

&НаКлиенте
Процедура ПроверитьКорректностьКлюча(КорректныеДанные)
	
	ИмяСервера = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИмяСервера");
	КлючCRM = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КлючCRM"); 
	
	Если Не ЗначениеЗаполнено(ИмяСервера) или Не ЗначениеЗаполнено(КлючCRM) Тогда
		КорректныеДанные = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяСервера) и ЗначениеЗаполнено(КлючCRM) Тогда
		//проверяем доступность
		ПроверитьКорректностьКлючаНаСервере(КорректныеДанные, ИмяСервера, КлючCRM);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКорректностьКлючаНаСервере(КорректныеДанные, ИмяСервера, КлючCRM)
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ПроверитьКорректностьКлюча(КорректныеДанные, ИмяСервера, КлючCRM);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаСФайлами ()
	
	//Обработка = РеквизитФормыВЗначение("Объект");
	//Обработка.РаботаСФайлами();
	//	Результат = ПодключитьРасширениеРаботыСФайлами();
	
	//     //если подключить не удалось - требуется установить его (в первый раз)
	//     Если не Результат Тогда
	//          //устанавливаем
	//          УстановитьРасширениеРаботыСФайлами();
	//          //если не удалось установить - то повторный вызов подключения будет неудачный
	//          Если не ПодключитьРасширениеРаботыСФайлами() Тогда
	//               //сообщаем об ошибке и прерываем работу программы
	//               ВызватьИсключение "Ошибка. Ваш браузер не поддерживает работу с файлами.";
	//          КонецЕсли;
	//     КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗаказыНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.Мод_ЗагрузитьЗаказы(
		ЭтаФорма.ИспользоватьДатуАктуальности, 
		Объект.ДатаАктуальности, 
		Объект.ИДПоследнихИзменений,
		НастройкиПодключенияКСП);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказы(Команда)
	ЗагрузитьЗаказыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОстаткиНаСервере()
	
	Сообщить("Начало выгрузки остатков " + ТекущаяДата());
	Обработка = РеквизитФормыВЗначение("Объект");
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
		Обработка.Мод_ОстаткиИЦеныВCRMХарактеристики();
	Иначе 
		Обработка.Мод_ОстаткиИЦеныВCRM();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Остатки(Команда)
	
	Состояние("Выгрузка остатков!");
	ОстаткиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаКаталога(Команда)
	ВыгрузкаКаталогаНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузкаКаталогаНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект"); 
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИерархияНоменклатуры") = "Виды номенклатуры" Тогда
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
			Обработка.Мод_ВыгрузкаКаталогаВXMLХарактеристикиПоВидам(Объект.ТабКаталогПоВидам, Объект.ПутьКФайлу);
		Иначе 
			Обработка.Мод_ВыгрузкаКаталогаВXMLПоВидам(Объект.ТабКаталогПоВидам, Объект.ПутьКФайлу);
		КонецЕсли;
	Иначе 
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
			Обработка.Мод_ВыгрузкаКаталогаВXMLХарактеристики(Объект.ТабКаталог, Объект.ПутьКФайлу);
		Иначе 
			Обработка.Мод_ВыгрузкаКаталогаВXML(Объект.ТабКаталог, Объект.ПутьКФайлу);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеСозданияКонстантПриИзменении(Элемент)
	ПодтверждениеСозданияКонстантПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодтверждениеСозданияКонстантПриИзмененииНаСервере()
	Элементы.СоздатьКонстанты.Доступность = Элементы.СоздатьКонстанты.Доступность*-1+1;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.ПутьКфайлу = ДиалогОткрытияФайла.Каталог + "\icml.xml";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкладскаяСистемаНаСервере(СкладскаяСистемаАктивна)
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.РегистрацияСкладскойСистемыНаСервере(СкладскаяСистемаАктивна);
КонецПроцедуры

&НаКлиенте
Процедура СкладскаяСистема(Команда)
	СкладскаяСистемаАктивна = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("СкладскаяСистема");
	СкладскаяСистемаНаСервере(СкладскаяСистемаАктивна);
	Объект.СкладскаяСистема = Истина;
КонецПроцедуры

&НаСервере
Процедура ТипыЦенНаСервере()
	
	Сообщить("Начало выгрузки типов цен " + ТекущаяДата());
	Обработка = РеквизитФормыВЗначение("Объект");
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ИспользованиеХарактеристик") = Истина Тогда
		Обработка.Мод_ВыгрузкаТиповЦенВCRMХарактеристики();
	Иначе 
		Обработка.Мод_ВыгрузкаТиповЦенВCRM();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыЦен(Команда)
	ТипыЦенНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗаказПоИДНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.Мод_ЗагрузитьЗаказПоИД(ИДЗаказаДляЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказПоИД(Команда)
	ЗагрузитьЗаказПоИДНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбменНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.Мод_ВыполнитьОбмен();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	ВыполнитьОбменНаСервере();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиВФайлНаСервере(Путь)
	
	Если Не ЗначениеЗаполнено(Путь) Тогда   
		Путь = КаталогВременныхФайлов() + "customization.txt";
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	
	СохраняемыйМассив = Новый СписокЗначений;
	
	ТЧ = Объект.ТабКонстанты.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "ТабКонстанты");
	
	ТЧ = Объект.ТабСтатусы.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "ТабСтатусы");
	
	ТЧ = Объект.СтатусыСостояния.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "ТабСостояний");
	
	ТЧ = Объект.ТипыЦенДляОбмена.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "ТипыЦенДляОбмена");
	
	ТЧ = Объект.СкладыДляОбмена.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "СкладыДляОбмена");
	
	ТЧ = Объект.ТабКаталог.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "ТабКаталог");
	
	ТЧ = Объект.ТабКаталогПоВидам.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "ТабКаталогПоВидам");
	
	ТЧ = Объект.СоответствиеМенеджеров.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "СоответствиеМенеджеров");
	
	ТЧ = Объект.МагазинОрганизация.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "МагазинОрганизация"); 
	
	ТЧ = Объект.МагазинСклад.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "МагазинСклад");
	
	ТЧ = Объект.СоответствиеТиповОплат.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "СоответствиеТиповОплат");
	
	ТЧ = Объект.СоответствиеТиповОплатИз1С.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "СоответствиеТиповОплатИз1С");
	
	ТЧ = Объект.СоответствиеФормОплаты.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "СоответствиеФормОплаты");
	
	ТЧ = Объект.СоответствиеДоставок.Выгрузить();
	СохраняемыйМассив.Добавить(ТЧ, "СоответствиеДоставок");
	
	ПрочиеНастройки = Новый Соответствие;
	ПрочиеНастройки.Вставить("ВыгружатьЗаказы", 	Объект.ВыгружатьЗаказы);
	ПрочиеНастройки.Вставить("ЗагружатьЗаказы", 	Объект.ЗагружатьЗаказы);
	ПрочиеНастройки.Вставить("ВыгружатьОстатки", 	Объект.ВыгружатьОстатки);
	ПрочиеНастройки.Вставить("ВыгружатьТипыЦен", 	Объект.ВыгружатьТипыЦен);
	ПрочиеНастройки.Вставить("НесколькоОрганизаций",Объект.НесколькоОрганизаций);
	ПрочиеНастройки.Вставить("ИспользованиеТиповЦен",Объект.ИспользованиеТиповЦен);
	ПрочиеНастройки.Вставить("СозданиеОплат", 		Объект.СозданиеОплат);
	ПрочиеНастройки.Вставить("СозданиеРеализаций", 	Объект.СозданиеРеализаций);
	ПрочиеНастройки.Вставить("ИдентификаторТовара", Объект.ИдентификаторТовара);
	ПрочиеНастройки.Вставить("ВыгрузкаОплатВCRM", 	Объект.ВыгрузкаОплатВCRM);
	ПрочиеНастройки.Вставить("ВыгрузкаВозвратовОплатыВCRM", Объект.ВыгрузкаВозвратовОплатыВCRM);
	ПрочиеНастройки.Вставить("КорпоративныеКлиенты",Объект.КорпоративныеКлиенты);
	ПрочиеНастройки.Вставить("ПутьКФайлу", 			Объект.ПутьКФайлу);
	ПрочиеНастройки.Вставить("ПутьКНастройкам", 	Объект.ПутьКНастройкам);
	ПрочиеНастройки.Вставить("ИспользованиеЗаказов",Объект.ИспользованиеЗаказов); 
	ПрочиеНастройки.Вставить("ИДПоследнихИзменений",Объект.ИДПоследнихИзменений);
	ПрочиеНастройки.Вставить("offers_id",			Объект.offers_id);
	ПрочиеНастройки.Вставить("Эталонная",			Объект.Эталонная);
	ПрочиеНастройки.Вставить("ВыгрузкаРеализаций", 	Объект.ВыгрузкаРеализаций);
	ПрочиеНастройки.Вставить("СозданиеВозвратов", 	Объект.СозданиеВозвратов);
	ПрочиеНастройки.Вставить("ВыгрузкаВозвратов", 	Объект.ВыгрузкаВозвратов);
	ПрочиеНастройки.Вставить("ИспользованиеПЛ", 	Объект.ИспользованиеПЛ);
	ПрочиеНастройки.Вставить("idПЛ", 				Объект.idПЛ);
	ПрочиеНастройки.Вставить("НазваниеПЛ", 			Объект.НазваниеПЛ);
	ПрочиеНастройки.Вставить("ПЛАктивна", 			Объект.ПЛАктивна);
	ПрочиеНастройки.Вставить("ПЛЗаблокирована", 	Объект.ПЛЗаблокирована);
	ПрочиеНастройки.Вставить("ПодтверждатьСМС", 	Объект.ПодтверждатьСМС);
	ПрочиеНастройки.Вставить("ИерархияНоменклатуры",Объект.ИерархияНоменклатуры); 
	ПрочиеНастройки.Вставить("packs_sinceId",		Объект.packs_sinceId);
	ПрочиеНастройки.Вставить("ЗагрузкаБроней",		Объект.ЗагрузкаБроней);
	ПрочиеНастройки.Вставить("СкладскаяСистема",	Объект.СкладскаяСистема);
	ПрочиеНастройки.Вставить("РаботаСРозницей",		Объект.РаботаСРозницей);
	ПрочиеНастройки.Вставить("ВыгружатьЧек",		Объект.ВыгружатьЧек);
	ПрочиеНастройки.Вставить("ВыгружатьЧекРП",		Объект.ВыгружатьЧекРП);
	ПрочиеНастройки.Вставить("ВыгружатьЧекВозврат",	Объект.ВыгружатьЧекВозврат);
	ПрочиеНастройки.Вставить("СвязьМагазина",		Объект.СвязьМагазина);
	
	//++ Работа с характеристиками
	ПрочиеНастройки.Вставить("ИспользованиеХарактеристик", Объект.ИспользованиеХарактеристик);
	ПрочиеНастройки.Вставить("GUIDОрганизации", 		   Объект.GUIDОрганизации);
	//-- Работа с характеристиками
	
	СохраняемыйМассив.Добавить(ПрочиеНастройки, 	"ПрочиеНастройки");
	
	СохраняемаяСтрока = ЗначениеВСтрокуВнутр(СохраняемыйМассив);
	
	Текст.ДобавитьСтроку(СохраняемаяСтрока);
	
	Попытка
		Текст.Записать(Путь);
		Сообщить("Настройки сохранены.");
	Исключение
		Сообщить("Не удалось записать файл: " + Путь, СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПутьКНастройкам) Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.Заголовок 			= "Сохранить настройки";
		Диалог.МножественныйВыбор 	= Ложь;
		Диалог.Фильтр = "Текстовый документ(*.txt)|*.txt";
		
		Если Диалог.Выбрать() Тогда
			Путь = Диалог.ПолноеИмяФайла;
		Иначе
			Путь = Объект.ПутьКНастройкам; 
		КонецЕсли;
		
		Объект.ПутьКНастройкам = Путь;
		СохранитьКонстантыНаСервере();
		СохранитьНастройкиВФайлНаСервере(Путь);
	Иначе 
		
		СохранитьНастройкиВФайлНаСервере(Объект.ПутьКНастройкам);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличныйДокументВоВременноеХранилищеНаСервере(ТабличныйДокумент, Расширение, ТипФайла)
	
	АдресХранилища	= Неопределено;
	ИмяФайла		= ПолучитьИмяВременногоФайла(Расширение);
	
	Попытка
		ТабличныйДокумент.Записать(ИмяФайла, ТипФайла);
		АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат АдресХранилища;
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройкиИзФайлаНаСервере(Путь)
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(Путь);
	ТекстФайла = Текст.ПолучитьТекст();
	
	МассивНастроек = ЗначениеИзСтрокиВнутр(ТекстФайла);
	
	ТипВосстановленногоЗначения = "";
	Попытка
		ТипВосстановленногоЗначения = ТипЗнч(МассивНастроек);
	Исключение
		Сообщить("Не удалось восстановить настройки.");
		Возврат;
	КонецПопытки;
	
	Если ТипВосстановленногоЗначения = Тип("СписокЗначений") Тогда
		Для Каждого ЭлементНастройки из МассивНастроек Цикл
			
			Если ТипЗнч(ЭлементНастройки.Значение) = Тип("ТаблицаЗначений") Тогда
				
				Попытка
					Объект[ЭлементНастройки.Представление].Загрузить(ЭлементНастройки.Значение);
				Исключение
				КонецПопытки;
				
			ИначеЕсли ТипЗнч(ЭлементНастройки.Значение) = Тип("Соответствие") Тогда
				
				Для Каждого ПрочаяНастройка из ЭлементНастройки.Значение Цикл
					Попытка
						Объект[ПрочаяНастройка.Ключ] = ПрочаяНастройка.Значение;
					Исключение
					КонецПопытки;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	НастройкаКонстант = МассивНастроек[0].Значение;
	Объект.ТабКонстанты.Загрузить(НастройкаКонстант);
	
	Сообщить("Настройки восстановлены.");
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиИзФайла(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПутьКНастройкам) Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Заголовок 			= "Сохранить настройки";
		Диалог.МножественныйВыбор 	= Ложь;
		Диалог.Фильтр 				= "Текстовый документ(*.txt)|*.txt";
		
		Если Диалог.Выбрать() Тогда
			Путь = Диалог.ПолноеИмяФайла;
		Иначе
			Путь = Объект.ПутьКНастройкам;
		КонецЕсли;
		
		Объект.ПутьКНастройкам = Путь;
		СохранитьКонстантыНаСервере();
		ВосстановитьНастройкиИзФайлаНаСервере(Путь);
		
	Иначе 
		
		ВосстановитьНастройкиИзФайлаНаСервере(Объект.ПутьКНастройкам);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьЗаказНаСервере()
	crm_RetailCRMОбщий.RetailCRM_ДокументыОбработкаПроверкиЗаполнения(Заказ, Ложь, );
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаказ(Команда)
	ВыгрузитьЗаказНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьКлиентаНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.Мод_ВыгрузитьКлиента(КлиентДляВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКлиента(Команда)
	ВыгрузитьКлиентаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКНастройкамНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.ПутьКНастройкам = ДиалогОткрытияФайла.Каталог + "\customization.txt";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Объект.ПутьКФайлуВыгрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеХарактеристикПриИзменении(Элемент)
	
	Если Объект.ИспользованиеХарактеристик = Истина Тогда
		ЭтаФорма.Элементы.ИдентификаторТовара.Видимость = Ложь;
		ЭтаФорма.Элементы.GUIDОрганизации.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ИдентификаторТовара.Видимость = Истина;
		ЭтаФорма.Элементы.GUIDОрганизации.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОрганизацийНажатие(Элемент)
	
	ОткрытьФорму("Справочник.crm_Организации.ФормаСписка");
	
КонецПроцедуры     

&НаКлиенте
Процедура НесколькоОрганизацийПриИзменении(Элемент)
	
	Если Объект.НесколькоОрганизаций = Истина Тогда
		ЭтаФорма.Элементы.ТабКаталог.Видимость = Ложь;
		ЭтаФорма.Элементы.ПутьКФайлу.Видимость = Ложь;
		ЭтаФорма.Элементы.СозданиеРеализаций.Видимость = Ложь;
		ЭтаФорма.Элементы.НастройкаОрганизаций.Видимость = Истина;
		ЭтаФорма.Элементы.НастройкаОрганизаций1.Видимость = Истина;
		ЭтаФорма.Элементы.ГруппаКаталога.Видимость = Ложь;
		ЭтаФорма.Элементы.ВыгрузкаКаталога.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ТабКаталог.Видимость = Истина;
		ЭтаФорма.Элементы.ПутьКФайлу.Видимость = Истина;
		ЭтаФорма.Элементы.СозданиеРеализаций.Видимость = Истина;
		ЭтаФорма.Элементы.НастройкаОрганизаций.Видимость = Ложь;
		ЭтаФорма.Элементы.НастройкаОрганизаций1.Видимость = Ложь;
		ЭтаФорма.Элементы.ГруппаКаталога.Видимость = Истина;
		ЭтаФорма.Элементы.ВыгрузкаКаталога.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеТиповЦенПриИзменении(Элемент)
	
	Если Объект.ИспользованиеТиповЦен = Истина Тогда
		ЭтаФорма.Элементы.ТипыЦен.Видимость = Истина;
		ЭтаФорма.Элементы.ТипыЦен1.Доступность = Истина;
		ЭтаФорма.Элементы.ВыгружатьТипыЦен.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ТипыЦен.Видимость = Ложь;
		ЭтаФорма.Элементы.ТипыЦен1.Доступность = Ложь;
		ЭтаФорма.Элементы.ВыгружатьТипыЦен.Видимость = Ложь;
		Объект.ВыгружатьТипыЦен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеОплатПриИзменении(Элемент)
	
	Если Объект.ВыгрузкаОплатВCRM = Истина Или Объект.СозданиеОплат = Истина Тогда
		ЭтаФорма.Элементы.Оплаты.Видимость = Истина;
		ЭтаФорма.Элементы.СоответствиеТиповОплат.Доступность = Истина;
	Иначе 
		ЭтаФорма.Элементы.Оплаты.Видимость = Ложь;
		ЭтаФорма.Элементы.СоответствиеТиповОплат.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.СозданиеОплат = Истина Тогда 
		ЭтаФорма.Элементы.ОплатаВ1С.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.ОплатаВ1С.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаОплатВCRMПриИзменении(Элемент)
	
	Если Объект.ВыгрузкаОплатВCRM = Истина Или Объект.СозданиеОплат = Истина Тогда
		ЭтаФорма.Элементы.Оплаты.Видимость = Истина;
		ЭтаФорма.Элементы.СоответствиеТиповОплат.Доступность = Истина;
	Иначе 
		ЭтаФорма.Элементы.Оплаты.Видимость = Ложь;
		ЭтаФорма.Элементы.СоответствиеТиповОплат.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.ВыгрузкаОплатВCRM = Истина Тогда 
		ЭтаФорма.Элементы.ОплатаИз1С.Видимость = Истина;
		ЭтаФорма.Элементы.ВыгрузкаВозвратовОплатыВCRM.Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы.ОплатаИз1С.Видимость = Ложь;
		ЭтаФорма.Элементы.ВыгрузкаВозвратовОплатыВCRM.Видимость = Ложь;
		Объект.ВыгрузкаВозвратовОплатыВCRM = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьППНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.СозданиеПользовательскогоПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПП(Команда)
	СоздатьППНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДатуАктуальностиПриИзменении(Элемент)
	
	Если ЭтаФорма.ИспользоватьДатуАктуальности = Истина Тогда 
		ЭтаФорма.Элементы.ДатаАктуальности.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ДатаАктуальности.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиКлиентовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект,
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ПОМЕСТИТЬ вт_Сведения
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Контрагенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ЕСТЬNULL(Партнеры.ДатаРегистрации, """") КАК ДатаРегистрации,
	|	ЕСТЬNULL(Партнеры.Пол, """") КАК Пол,
	|	ЕСТЬNULL(Партнеры.ДатаРождения, """") КАК ДатаРождения,
	|	ЕСТЬNULL(вт_Сведения.Значение, 0) КАК ИД,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
	|	ЕСТЬNULL(Партнеры.Ссылка, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Партнер,
	|	ЕСТЬNULL(Партнеры.НаименованиеПолное, """") КАК НаименованиеПартнера
	|ПОМЕСТИТЬ вт_итог
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Сведения КАК вт_Сведения
	|		ПО Контрагенты.Ссылка = вт_Сведения.Объект
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И НЕ Партнеры.Предопределенный
	|	И Контрагенты.ЮридическоеФизическоеЛицо = &ЮрФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Телефон,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_телефон
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка1,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Почта
	|ПОМЕСТИТЬ вт_почта
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипПочта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Адрес,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка3
	|ПОМЕСТИТЬ вт_адрес
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК ТелефонП
	|ПОМЕСТИТЬ П_телефон
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК АдресП
	|ПОМЕСТИТЬ П_адрес
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК ПочтаП
	|ПОМЕСТИТЬ П_почта
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипПочта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_итог.Контрагент КАК Контрагент,
	|	вт_итог.ДатаРегистрации КАК ДатаРегистрации,
	|	вт_итог.Пол КАК Пол,
	|	вт_итог.ДатаРождения КАК ДатаРождения,
	|	вт_итог.ИД КАК ИД,
	|	вт_итог.НаименованиеПолное КАК НаименованиеПолное,
	|	вт_итог.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	вт_итог.ИНН КАК ИНН,
	|	вт_итог.КПП КАК КПП,
	|	вт_итог.КодПоОКПО КАК КодПоОКПО,
	|	вт_итог.Партнер КАК Партнер,
	|	вт_итог.НаименованиеПартнера КАК НаименованиеПартнера,
	|	ЕСТЬNULL(вт_адрес.Адрес, """") КАК Адрес,
	|	ЕСТЬNULL(вт_почта.Почта, """") КАК Почта,
	|	ЕСТЬNULL(вт_телефон.Телефон, """") КАК Телефон,
	|	ЕСТЬNULL(П_адрес.АдресП, """") КАК АдресП,
	|	ЕСТЬNULL(П_почта.ПочтаП, """") КАК ПочтаП,
	|	ЕСТЬNULL(П_телефон.ТелефонП, """") КАК ТелефонП
	|ИЗ
	|	вт_итог КАК вт_итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_телефон КАК вт_телефон
	|		ПО вт_итог.Контрагент = вт_телефон.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_почта КАК вт_почта
	|		ПО вт_итог.Контрагент = вт_почта.Ссылка1
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_адрес КАК вт_адрес
	|		ПО вт_итог.Контрагент = вт_адрес.Ссылка3
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_телефон КАК П_телефон
	|		ПО вт_итог.Партнер.Ссылка = П_телефон.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_адрес КАК П_адрес
	|		ПО вт_итог.Партнер.Ссылка = П_адрес.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_почта КАК П_почта
	|		ПО вт_итог.Партнер.Ссылка = П_почта.Ссылка
	|ГДЕ
	|	вт_итог.ИД = &ИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	
	Запрос.УстановитьПараметр("Клиент", Истина);
	СвойствоКонтрагентов = Обработки.crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	Запрос.УстановитьПараметр("ИД", 0);
	Запрос.УстановитьПараметр("Свойство", СвойствоКонтрагентов);
	Запрос.УстановитьПараметр("ЮрФизЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо); 
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон); 
	Запрос.УстановитьПараметр("ТипПочта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	//выведем результат на форму
	ЭтаФорма.СписокКлиентов.Загрузить(РезультатЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиКлиентов(Команда)
	НайтиКлиентовНаСервере();
КонецПроцедуры  

&НаСервере
Процедура ВыгрузитьКлиентовНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КорпоративныеКлиенты") Тогда  
		Обработка.ВыгрузитьАрхивКорпоративныхКлиентов(Партнер); 
	Иначе 
		Обработка.ВыгрузитьАрхивКлиентов(Партнер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКлиентов(Команда)
	ВыгрузитьКлиентовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаАрхива(Команда)
	
	ПереходНаСтраницу = ЭтаФорма.Элементы.Вкладки.ПодчиненныеЭлементы.Группа1;
	ЭтаФорма.Элементы.Вкладки.ПодчиненныеЭлементы.Группа1.Видимость = Истина;
	ЭтаФорма.Элементы.Вкладки.ТекущаяСтраница = ПереходНаСтраницу;
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьЗаказыНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	Обработка.ВыгрузитьАрхивЗаказов(Организация); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗаказы(Команда)
	ВыгрузитьЗаказыНаСервере();
КонецПроцедуры

&НаСервере
Процедура НайтиЗаказыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект,
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ПОМЕСТИТЬ вт_Сведения
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Документ.ЗаказКлиента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(вт_Сведения.Значение, 0) КАК ИД,
	|	ЗаказКлиента.Номер КАК Номер,
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.Статус КАК Статус,
	|	ЗаказКлиента.Партнер КАК Клиент,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Соглашение КАК Соглашение,
	|	ЗаказКлиента.Договор КАК Договор,
	|	ЗаказКлиента.Склад КАК Склад,
	|	ЗаказКлиента.Менеджер КАК Менеджер
	|ПОМЕСТИТЬ вт_Итог
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Сведения КАК вт_Сведения
	|		ПО ЗаказКлиента.Ссылка = вт_Сведения.Объект
	|ГДЕ
	|	ЗаказКлиента.Организация = &Организация
	|	И ЗаказКлиента.Дата МЕЖДУ &ДатаС И &ДатаПо
	|	И ЗаказКлиента.Контрагент.ЮридическоеФизическоеЛицо = &ЮридическоеФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_Итог.Ссылка КАК Ссылка,
	|	вт_Итог.ИД КАК ИД,
	|	вт_Итог.Номер КАК Номер,
	|	вт_Итог.Дата КАК Дата,
	|	вт_Итог.Статус КАК Статус,
	|	вт_Итог.Клиент КАК Клиент,
	|	вт_Итог.Контрагент КАК Контрагент,
	|	вт_Итог.Соглашение КАК Соглашение,
	|	вт_Итог.Договор КАК Договор,
	|	вт_Итог.Склад КАК Склад,
	|	вт_Итог.Менеджер КАК Менеджер
	|ИЗ
	|	вт_Итог КАК вт_Итог
	|ГДЕ
	|	вт_Итог.ИД = &ИД";
	
	Запрос.УстановитьПараметр("ДатаС", Объект.ДатаНачалаВыгрузкиЗаказов);
	Запрос.УстановитьПараметр("ДатаПо", Объект.ДатаОкончанияВыгрузкиЗаказов);
	Свойство = Обработки.crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьДокумент_ЗаказКлиента);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИД", 0);
	Запрос.УстановитьПараметр("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	//выведем результат на форму
	ЭтаФорма.СписокДанныхАрхива.Загрузить(РезультатЗапроса);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЗаказы(Команда)
	НайтиЗаказыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЭталоннаяПриИзменении(Элемент)
	
	//++ Эталонка
	Если Объект.Эталонная = Истина Тогда
		ЭтаФорма.Элементы.ГруппаСостояния.Видимость = Истина;
		
		Если Объект.СозданиеРеализаций = Истина Тогда
			ЭтаФорма.Элементы.ТабСтатусыРеализация.Видимость = Истина;
		Иначе 
			ЭтаФорма.Элементы.ТабСтатусыРеализация.Видимость = Ложь;
		КонецЕсли;
	Иначе
		ЭтаФорма.Элементы.ТабСтатусыРеализация.Видимость = Ложь;
		ЭтаФорма.Элементы.ГруппаСостояния.Видимость = Ложь;
	КонецЕсли;
	//-- Эталонка 
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеРеализацийПриИзменении(Элемент)
	
	//++ Эталонка
	Если Объект.Эталонная = Истина и Объект.СозданиеРеализаций = Истина Тогда
		ЭтаФорма.Элементы.ТабСтатусыРеализация.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ТабСтатусыРеализация.Видимость = Ложь;
	КонецЕсли;
	//-- Эталонка
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьЗаказыПриИзменении(Элемент)
	
	Если Объект.ВыгружатьЗаказы = Ложь Тогда
		Объект.ВыгрузкаРеализаций = Ложь;
		Объект.ВыгрузкаОплатВCRM = Ложь;
		Объект.ВыгрузкаВозвратов = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектИспользованиеПЛПриИзменении(Элемент)
	
	Если Объект.ИспользованиеПЛ = Истина Тогда
		ЭтаФорма.Элементы.ПрограммаЛояльности.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ПрограммаЛояльности.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВкладкиПриСменеСтраницыНаСервере(СписокПЛ) 
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ПолучитьИнформациюОПЛ(СписокПЛ); 
	
	Если СписокПЛ <> Неопределено и СписокПЛ.Количество()>0 Тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Наименование");
		ТЗ.Колонки.Добавить("Активность");
		ТЗ.Колонки.Добавить("idПрограммы"); 
		ТЗ.Колонки.Добавить("РегистрацияПоСМС");
		ТЗ.Колонки.Добавить("Заблокирована");
		Для Каждого пл из СписокПЛ Цикл 
			Стр = ТЗ.Добавить();
			Стр.Наименование 	= пл["name"];
			Стр.Активность 	= пл["active"];
			Стр.idПрограммы 	= пл["id"];
			Стр.РегистрацияПоСМС = пл["confirmSmsRegistration"];
			Стр.Заблокирована = пл["blocked"];
		КонецЦикла;
		
		ЭтаФорма.ДанныеПЛ.Загрузить(ТЗ);	
	КонецЕсли;
	
	Объект.НазваниеПЛ = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НазваниеПЛ"); 
	
	СтруктураОтбора = Новый Структура("idПрограммы", crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("idПЛ"));// задаем условия
	НайдСтр = ЭтаФорма.ДанныеПЛ.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено Тогда 
		Для Каждого стр из НайдСтр Цикл 
			Объект.ПЛЗаблокирована = стр.Заблокирована;
			Объект.ПодтверждатьСМС = стр.РегистрацияПоСМС;
			Объект.ПЛАктивна = стр.Активность;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВкладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	СписокПЛ = Неопределено;	
	Если ТекущаяСтраница = ЭтаФорма.Элементы.ПрограммаЛояльности Тогда 
		ВкладкиПриСменеСтраницыНаСервере(СписокПЛ);
		Объект.НазваниеПЛ = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("НазваниеПЛ");
		
		ПолучитьПрограммыЛояльности(СписокПЛ);
		ЭтаФорма.Элементы.ПрограммаЛояльности.ПодчиненныеЭлементы.НазваниеПЛ.СписокВыбора.ЗагрузитьЗначения(СписокПЛ);
		
	ИначеЕсли ТекущаяСтраница = ЭтаФорма.Элементы.Менеджеры Тогда 
		
		Менеджеры = Неопределено;
		
		ПолучитьМенеджеров(Менеджеры);
		
		Если Менеджеры <> Неопределено Тогда 
			ЭтаФорма.Элементы.СоответствиеМенеджеровМенеджерCRM.СписокВыбора.ЗагрузитьЗначения(Менеджеры);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = ЭтаФорма.Элементы.Склады Тогда 
		
		Склады = Неопределено;
		
		ПолучитьСклады(Склады);
		
		Если Склады <> Неопределено Тогда 
			ЭтаФорма.Элементы.СкладыДляОбменаСкладCRM.СписокВыбора.ЗагрузитьЗначения(Склады);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = ЭтаФорма.Элементы.ТипыЦен Тогда 
		
		ТипыЦен = Неопределено;
		
		ПолучитьТипыЦен(ТипыЦен);
		
		Если ТипыЦен <> Неопределено Тогда 
			ЭтаФорма.Элементы.ТипыЦенДляОбменаТипЦеныCRM.СписокВыбора.ЗагрузитьЗначения(ТипыЦен);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = ЭтаФорма.Элементы.Оплаты Тогда 
		
		ТипыОплат = Неопределено;
		
		ПолучитьТипыОплат(ТипыОплат);
		
		Если ТипыОплат <> Неопределено Тогда 
			ЭтаФорма.Элементы.СоответствиеТиповОплатТипОплатыCRM.СписокВыбора.ЗагрузитьЗначения(ТипыОплат);
			ЭтаФорма.Элементы.СоответствиеТиповОплатИз1СТипОплатыCRM.СписокВыбора.ЗагрузитьЗначения(ТипыОплат);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = ЭтаФорма.Элементы.Статусы Тогда 
		
		Статусы = Неопределено;
		
		ПолучитьСтатусы(Статусы);
		
		Если Статусы <> Неопределено и Статусы.Количество()>0 Тогда 
			ЭтаФорма.Элементы.ТабСтатусыНазвание.СписокВыбора.ЗагрузитьЗначения(Статусы);
			ЭтаФорма.Элементы.ОбъектСтатусыСостоянияСтатусCRM.СписокВыбора.ЗагрузитьЗначения(Статусы);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = ЭтаФорма.Элементы.Доставка Тогда 
		
		ТипыДоставок = Неопределено;
		
		ПолучитьТипыДоставок(ТипыДоставок);
		
		Если ТипыДоставок <> Неопределено Тогда 
			ЭтаФорма.Элементы.СоответствиеДоставокТипДоставкиCRM.СписокВыбора.ЗагрузитьЗначения(ТипыДоставок);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = ЭтаФорма.Элементы.Розница Тогда 
		
		Магазины = Неопределено;
		
		ПолучитьМагазины(Магазины);
		
		Если Магазины <> Неопределено Тогда 
			ЭтаФорма.Элементы.МагазинОрганизацияМагазинCRM.СписокВыбора.ЗагрузитьЗначения(Магазины);
			ЭтаФорма.Элементы.МагазинСкладМагазинCRM.СписокВыбора.ЗагрузитьЗначения(Магазины);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = ЭтаФорма.Элементы.Группа1 Тогда
		Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КорпоративныеКлиенты") = Истина Тогда 
			ЭтаФорма.Элементы.НайтиКлиентов.Видимость = Ложь;
			ЭтаФорма.Элементы.ВыгрузитьКонтЛица.Видимость = Истина;
			ЭтаФорма.Элементы.ВыгрузитьАдреса.Видимость = Истина;
			ЭтаФорма.Элементы.СвязатьКонтЛица.Видимость = Истина;
			ЭтаФорма.Элементы.ВыгрузитьКонтЛица.Заголовок = "1. Выгрузить контактные лица";
			ЭтаФорма.Элементы.ВыгрузитьКлиентов.Заголовок = "2. Выгрузить клиентов";
			ЭтаФорма.Элементы.СвязатьКонтЛица.Заголовок = "3. Привязать контактные лица к корп клиентам";
			ЭтаФорма.Элементы.ВыгрузитьАдреса.Заголовок = "4. Выгрузить адреса клиентов";
		Иначе 
			ЭтаФорма.Элементы.НайтиКлиентов.Видимость = Истина;
			ЭтаФорма.Элементы.ВыгрузитьКонтЛица.Видимость = Ложь;
			ЭтаФорма.Элементы.ВыгрузитьАдреса.Видимость = Ложь;
			ЭтаФорма.Элементы.СвязатьКонтЛица.Видимость = Ложь;
			ЭтаФорма.Элементы.ВыгрузитьКлиентов.Заголовок = "Выгрузить клиентов";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиРозницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = ЭтаФорма.Элементы.ОплатыР Тогда 
		
		ТипыОплат = Неопределено;
		
		ПолучитьТипыОплат(ТипыОплат);
		
		Если ТипыОплат <> Неопределено Тогда 
			ЭтаФорма.Элементы.СоответствиеФормОплатыТипОплатыCRM.СписокВыбора.ЗагрузитьЗначения(ТипыОплат);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = ЭтаФорма.Элементы.МагазиныР Тогда 
		
		Магазины = Неопределено;
		
		ПолучитьМагазины(Магазины);
		
		Если Магазины <> Неопределено Тогда 
			ЭтаФорма.Элементы.МагазинОрганизацияМагазинCRM.СписокВыбора.ЗагрузитьЗначения(Магазины);
			ЭтаФорма.Элементы.МагазинСкладМагазинCRM.СписокВыбора.ЗагрузитьЗначения(Магазины);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазваниеПЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПЛ = Неопределено;
	
	ПолучитьПрограммыЛояльности(СписокПЛ);
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокПЛ);     
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПрограммыЛояльности(СписокПЛ)
	
	СписокПЛ2 = ДанныеПЛ.Выгрузить(,"Наименование");
	Значения = Новый Массив;
	
	Для Каждого строка из СписокПЛ2 Цикл  
		Значения.Добавить(Строка.Наименование); // (100)
	КонецЦикла;
	
	СписокПЛ = Значения; 
КонецПроцедуры

&НаКлиенте
Процедура НазваниеПЛПриИзменении(Элемент)
	
	НайдСтроки = ДанныеПЛ.НайтиСтроки(Новый Структура("Наименование", Элемент.ВыделенныйТекст));
	
	Если НайдСтроки <> Неопределено Тогда 
		Для Каждого стр из НайдСтроки Цикл 
			Объект.idПЛ = стр.idПрограммы;
			Объект.ПЛАктивна = стр.Активность;
			Объект.ПодтверждатьСМС = стр.РегистрацияПоСМС;
			Объект.ПЛЗаблокирована = стр.Заблокирована;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазваниеПЛНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокПЛ = Неопределено;
	
	ПолучитьПрограммыЛояльности(СписокПЛ);
	Элемент.СписокВыбора.ЗагрузитьЗначения(СписокПЛ);
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьКлиентовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект,
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ПОМЕСТИТЬ вт_Сведения
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Контрагенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект,
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ПОМЕСТИТЬ вт_СведенияПарт
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &СвойствоПарт
	|	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Партнеры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект КАК Объект,
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ПОМЕСТИТЬ вт_СведенияПЛ
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &СвойствоУчастия
	|	И ТИПЗНАЧЕНИЯ(ДополнительныеСведения.Объект) = ТИП(Справочник.Партнеры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ЕСТЬNULL(Партнеры.ДатаРегистрации, """") КАК ДатаРегистрации,
	|	ЕСТЬNULL(Партнеры.Пол, """") КАК Пол,
	|	ЕСТЬNULL(Партнеры.ДатаРождения, """") КАК ДатаРождения,
	|	ЕСТЬNULL(вт_Сведения.Значение, 0) КАК ИД,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
	|	ЕСТЬNULL(Партнеры.Ссылка, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Партнер,
	|	ЕСТЬNULL(Партнеры.НаименованиеПолное, """") КАК НаименованиеПартнера,
	|	ЕСТЬNULL(вт_СведенияПарт.Значение, 0) КАК ИДпартн
	|ПОМЕСТИТЬ вт_итог
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|			ЛЕВОЕ СОЕДИНЕНИЕ вт_СведенияПарт КАК вт_СведенияПарт
	|			ПО Партнеры.Ссылка = вт_СведенияПарт.Объект
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_Сведения КАК вт_Сведения
	|		ПО Контрагенты.Ссылка = вт_Сведения.Объект
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И НЕ Партнеры.Предопределенный
	|	И Контрагенты.ЮридическоеФизическоеЛицо = &ЮрФизЛицо
	|	И Партнеры.ЮрФизЛицо = &ЮрФиз
	|;	
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Телефон,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ вт_телефон
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка1,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Почта
	|ПОМЕСТИТЬ вт_почта
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипПочта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Представление КАК Адрес,
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка3
	|ПОМЕСТИТЬ вт_адрес
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Тип = &ТипАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК ТелефонПр
	|ПОМЕСТИТЬ П_телефон
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипТелефон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК АдресПр
	|ПОМЕСТИТЬ П_адрес
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Ссылка,
	|	ПартнерыКонтактнаяИнформация.Представление КАК ПочтаПр
	|ПОМЕСТИТЬ П_почта
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Тип = &ТипПочта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_итог.Контрагент КАК Контрагент,
	|	вт_итог.ДатаРегистрации КАК ДатаРегистрации,
	|	вт_итог.Пол КАК Пол,
	|	вт_итог.ДатаРождения КАК ДатаРождения,
	|	вт_итог.ИД КАК ИД,
	|	вт_итог.ИДпартн КАК ИДпартн,
	|	ЕСТЬNULL(вт_СведенияПЛ.Значение, 0) КАК ИДУчастия,
	|	вт_итог.НаименованиеПолное КАК НаименованиеПолное,
	|	вт_итог.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	вт_итог.Партнер КАК Партнер,
	|	вт_итог.НаименованиеПартнера КАК НаименованиеПартнера,
	|	вт_СведенияПЛ.Объект КАК Объект,
	|	вт_СведенияПЛ.Свойство КАК Свойство
	|ПОМЕСТИТЬ вт_ИтогСКЛ
	|ИЗ
	|	вт_итог КАК вт_итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_СведенияПЛ КАК вт_СведенияПЛ
	|		ПО вт_итог.Партнер = вт_СведенияПЛ.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт_ИтогСКЛ.Контрагент КАК Контрагент,
	|	вт_ИтогСКЛ.ДатаРегистрации КАК ДатаРегистрации,
	|	вт_ИтогСКЛ.Пол КАК Пол,
	|	вт_ИтогСКЛ.ДатаРождения КАК ДатаРождения,
	|	вт_ИтогСКЛ.ИД КАК ИД,
	|	вт_ИтогСКЛ.ИДпартн КАК ИДпартн,
	|	вт_ИтогСКЛ.ИДУчастия КАК ИДУчастия,
	|	вт_ИтогСКЛ.НаименованиеПолное КАК НаименованиеПолное,
	|	вт_ИтогСКЛ.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	вт_ИтогСКЛ.Партнер КАК Партнер,
	|	вт_ИтогСКЛ.НаименованиеПартнера КАК НаименованиеПартнера,
	|	ЕСТЬNULL(вт_адрес.Адрес, """") КАК Адрес,
	|	ЕСТЬNULL(вт_почта.Почта, """") КАК Почта,
	|	ЕСТЬNULL(вт_телефон.Телефон, """") КАК Телефон,
	|	ЕСТЬNULL(П_адрес.Ссылка, """") КАК АдресП,
	|	ЕСТЬNULL(П_почта.ПочтаПр, """") КАК ПочтаП,
	|	ЕСТЬNULL(П_телефон.ТелефонПр, """") КАК ТелефонП
	|ИЗ
	|	вт_ИтогСКЛ КАК вт_ИтогСКЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_телефон КАК вт_телефон
	|		ПО вт_ИтогСКЛ.Контрагент = вт_телефон.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_почта КАК вт_почта
	|		ПО вт_ИтогСКЛ.Контрагент = вт_почта.Ссылка1
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт_адрес КАК вт_адрес
	|		ПО вт_ИтогСКЛ.Контрагент = вт_адрес.Ссылка3
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_телефон КАК П_телефон
	|		ПО вт_ИтогСКЛ.Партнер = П_телефон.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_адрес КАК П_адрес
	|		ПО вт_ИтогСКЛ.Партнер = П_адрес.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ П_почта КАК П_почта
	|		ПО вт_ИтогСКЛ.Партнер = П_почта.Ссылка
	|ГДЕ
	|	вт_ИтогСКЛ.ИДУчастия = &ИДУчастия
	|	И (П_телефон.ТелефонПр <> &ТелефонПр
	|			ИЛИ вт_телефон.Телефон <> &ТелефонПр)
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеПолное";
	
	СвойствоКонтрагентов = Обработки.crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Контрагенты);
	СвойствоУчастия = Обработки.crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИДУчастияВПЛ", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	СвойствоПартнеров = Обработки.crm_RetailCRMОбработка.УТ11_ПолучитьСвойство("ИД", Справочники.НаборыДополнительныхРеквизитовИСведений.УдалитьСправочник_Партнеры);
	Запрос.УстановитьПараметр("ТелефонП", "");
	Запрос.УстановитьПараметр("Свойство", 		 СвойствоКонтрагентов);
	Запрос.УстановитьПараметр("СвойствоУчастия", СвойствоУчастия);
	Запрос.УстановитьПараметр("СвойствоПарт",	 СвойствоПартнеров);
	Запрос.УстановитьПараметр("ЮрФизЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	Запрос.УстановитьПараметр("ЮрФиз", Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон); 
	Запрос.УстановитьПараметр("ТипПочта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ТипАдрес", Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ИДУчастия", 0);
	Запрос.УстановитьПараметр("ТелефонПр", "");
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	//выведем результат на форму
	//ЭтаФорма.СписокКлиентов.Загрузить(РезультатЗапроса);
	ЭтаФорма.КлиентыПЛ.Загрузить(РезультатЗапроса);	
	Элементы.ЗарегистрироватьВПЛ.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьКлиентов(Команда)
	ПодобратьКлиентовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьКлиентовВПЛ(Команда)
	ЗарегистрироватьВПЛНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьВПЛНаСервере()
	
	КодМагазина    	= СокрЛП(crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина"));

	СтруктураОтбора = Новый Структура("Выбрать", Истина);// задаем условия
	ТаблицаВыгрузки = ЭтаФорма.КлиентыПЛ.Выгрузить(СтруктураОтбора);
	Если ТаблицаВыгрузки.Количество() = 0 Тогда 
		Сообщить("Не выбран клиент для регистрации. Выберите клиента и повторите попытку");	
	Иначе 
		Для Каждого Клиент из ТаблицаВыгрузки Цикл
			Если Не ЗначениеЗаполнено(Клиент.ИД) или Клиент.ИД = "0" Тогда 
				Успешно = Ложь;
				idПартнера = Клиент.ИД; 
				crm_RetailCRMОбщий.СоздатьКлиентаВCRM(Клиент, Успешно, idПартнера, Истина, Ложь, КодМагазина, Неопределено);
				Клиент.ИД = idПартнера;
				Клиент.ИДпартн = idПартнера;
				Если Успешно Тогда
					crm_RetailCRMОбщий.ЗарегистрироватьКлиентаВПЛCRM(Клиент, Успешно, Неопределено, idПартнера, КодМагазина, Неопределено);
				КонецЕсли;
			Иначе 
				Успешно = Ложь;
				crm_RetailCRMОбщий.ЗарегистрироватьКлиентаВПЛCRM(Клиент, Успешно, Неопределено, Неопределено, КодМагазина, Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	Для Каждого стр из ЭтаФорма.КлиентыПЛ Цикл 
		стр.Выбрать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	Для Каждого стр из ЭтаФорма.КлиентыПЛ Цикл 
		стр.Выбрать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриИзменении(Элемент)
	
	Если Объект.ИерархияНоменклатуры = "Виды номенклатуры" Тогда
		ЭтаФорма.Элементы.ТабКаталог.Видимость = Ложь;
		ЭтаФорма.Элементы.ТабКаталогПоВидам.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ТабКаталог.Видимость = Истина;
		ЭтаФорма.Элементы.ТабКаталогПоВидам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьБрониНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.Мод_ЗагрузитьБрони(Объект.packs_sinceId);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьБрони(Команда)
	ЗагрузитьБрониНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтатусыНаСервере()
	
	ТЗСтатусы = Новый ТаблицаЗначений; 
	ТЗСтатусы.Колонки.Добавить("Название");
	ТЗСтатусы.Колонки.Добавить("КодCRM");
	ТЗСтатусы.Колонки.Добавить("Порядок");
	ТЗСтатусы.Колонки.Добавить("Группа");
	ТЗСтатусы.Колонки.Добавить("ПорядокГруппы");
	
	Обработка = РеквизитФормыВЗначение("Объект");  	
	Обработка.ПолучитьСтатусыИзRetailCRM(ТЗСтатусы); 
	
	Обработка.ТабСтатусы.Очистить(); // СЕВ После загрузки статусы просто добавляются к уже загруженным. Поэтому - очистить.
	Если ТЗСтатусы <> Неопределено и ТЗСтатусы.Количество()>0 Тогда
		ЭтаФорма.Объект.ТабСтатусы.Загрузить(ТЗСтатусы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаКомандыЗавершение(РезультатВопроса, ДополнительныеПараметры)экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры = "ЗагрузитьСтатусы" Тогда 
			ЗагрузитьСтатусыНаСервере();
		ИначеЕсли ДополнительныеПараметры = "ЗагрузитьСтатусыСост" Тогда 
			ЗагрузитьСтатусыСостНаСервере();
		ИначеЕсли ДополнительныеПараметры = "ЗагрузитьМенеджеров" Тогда 
			ЗагрузитьМенеджеровНаСервере();
		ИначеЕсли ДополнительныеПараметры = "ЗагрузитьСклады" Тогда 
			ЗагрузитьСкладыНаСервере();
		ИначеЕсли ДополнительныеПараметры = "ЗагрузитьТипыЦен" Тогда 
			ЗагрузитьТипыЦенНаСервере();
		ИначеЕсли ДополнительныеПараметры = "ЗагрузитьТипыОплат" Тогда 
			ЗагрузитьТипыОплатНаСервере("ЗагрузитьТипыОплат");
		ИначеЕсли ДополнительныеПараметры = "ЗагрузитьТипыОплатИз1С" Тогда 
			ЗагрузитьТипыОплатНаСервере("ЗагрузитьТипыОплатИз1С");
		ИначеЕсли ДополнительныеПараметры = "ЗагрузитьФормыОплат" Тогда 
			ЗагрузитьТипыОплатНаСервере("ЗагрузитьФормыОплат");
		ИначеЕсли ДополнительныеПараметры = "ЗагрузитьТипыДоставок" Тогда 
			ЗагрузитьТипыДоставокНаСервере("ЗагрузитьТипыДоставок");
		ИначеЕсли ДополнительныеПараметры = "ЗагрузитьМагазины" Тогда 
			ЗагрузитьМагазиныНаСервере("ЗагрузитьМагазины");
		ИначеЕсли ДополнительныеПараметры = "ЗагрузитьМагазины1" Тогда 
			ЗагрузитьМагазиныНаСервере("ЗагрузитьМагазиныОрганизация");
		КонецЕсли;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтатусы(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект), 
	"После подтверждения загрузки будет очищена таблица статусов. Загрузить статусы?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабСтатусыСтатус1СПриИзменении(Элемент)
	
	СостояниеЗаказа = "";
	ЗаполнитьСостояниеЗаказа();
	ЗаполнитьПримечание();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСостояниеЗаказа() 
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока;
	Обработка = РеквизитФормыВЗначение("Объект");
	ТекСтрока = Обработка.ТабСтатусы[ТекущиеДанные];
	
	Если ТекСтрока.Отмена = Истина Тогда 
		
		ТекСтрока.Статус1С = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
		ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт;
		
	ИначеЕсли ТекСтрока.Возврат = Истина Тогда 
		
		ТекСтрока.Статус1С = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
		ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт;
		ТекСтрока.Реализация = Истина;
		
	ИначеЕсли  ТекСтрока.Реализация = Истина Тогда 
		
		ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить; 
		
	КонецЕсли;
	
	
	Если ТекСтрока.Статус1С = Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда 
		
		Если ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется Тогда 
			
			ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяСогласование;
			
		КонецЕсли;
		
	ИначеЕсли  ТекСтрока.Статус1С = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Тогда
		
		Если ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется или 
			ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению Тогда //ЕНС исправлено. было ГотовКОбеспечению
			
			ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению;
			
		ИначеЕсли ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению или
			ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
			
			ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке;
			
		ИначеЕсли ТекСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить Тогда
			
			Если ТекСтрока.Реализация = Ложь Тогда 
				ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки;
			ИначеЕсли ТекСтрока.Реализация = Истина Тогда 
				ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию; 
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли  ТекСтрока.Статус1С = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
		
		ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Обработка, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабСтатусыВариантОбеспеченияПриИзменении(Элемент)
	
	ЗаполнитьСостояниеЗаказа();
	ЗаполнитьПримечание();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПримечание() 
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока;
	Обработка = РеквизитФормыВЗначение("Объект");
	ТекСтрока = Обработка.ТабСтатусы[ТекущиеДанные];
	
	Если ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяСогласование Тогда
		
		ТекСтрока.Примечание = "Заказ не создает записи в регистрах, используется для регистрации неподтвержденного/несогласованного 
		|желания клиента. В статусе На согласовании можно зарезервировать товар на складе, т.е. указать действие для строк 
		|Резервировать на складе, либо Отгрузить. При этом фактически отгрузить товар можно будет только после перевода документа
		| в статус К выполнению.";
		
	ИначеЕсли ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению Тогда
		
		ТекСтрока.Примечание = "Доступно управлять отгрузкой, а также резервировать товар по каждой позиции в документе. 
		|Заказы принимаются не только на товар, имеющийся в наличии, но и на товар, требующий обеспечения.";
		
	ИначеЕсли ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке Тогда
		
		ТекСтрока.Примечание = "Предоплата получена, заказ ждет выставления действия Отгрузить/Отгрузить обособленно во всех строках";
		
	ИначеЕсли ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки Тогда 
		
		ТекСтрока.Примечание = " Означает, что получена предоплата и во  всех  строках  установлено  действие Отгрузить или Отгрузить обособленно, 
		|но складские ордера или реализации оформлены не на весь заказанный товар. По отчетам товар уже отгружается, но реализации еще нет";
		
	ИначеЕсли ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки Тогда
		
		ТекСтрока.Примечание = "Означает, что товары отгружены и ожидается оплата потому, что в заказе выбран вариант кредит ( после отгрузки)";
		
	ИначеЕсли ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию Тогда
		
		ТекСтрока.Примечание = "Заказы, по которым на все позиции, указанные в заказе, оформлены документы Реализация товаров и услуг и/или Акт выполненных работ.";
		
	ИначеЕсли ТекСтрока.СостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда 
		//отменен
		Если ТекСтрока.Отмена = Истина Тогда
			
			ТекСтрока.Примечание = "Заказ закрыт с отменой строк. Резервы сняты, товар возвращен на склад"; 
			
			//возврат
		ИначеЕсли ТекСтрока.Отмена = Ложь и ТекСтрока.Возврат = Истина Тогда
			
			ТекСтрока.Примечание = "Заказ закрыт. На основании реализаци создан документ возврата, товар возвращен на склад";
			//выполнен	
		ИначеЕсли ТекСтрока.Отмена = Ложь и ТекСтрока.Возврат = Ложь и ТекСтрока.Реализация = Истина Тогда
			Если ТекСтрока.Реализация = Истина Тогда 
				ТекСтрока.Примечание = "Исполнены все обязательства по заказу – как по отгрузке, так и по оплате.";
			КонецЕсли;
			
		ИначеЕсли 
			ТекСтрока.Отмена = Ложь и ТекСтрока.Возврат = Ложь и ТекСтрока.Реализация = Ложь Тогда 
			ТекСтрока.Примечание = "!!!Внимание! Заказ не может быть закрыт без реализации или без отмены.";  
			//ЭтаФорма.ТекущийЭлемент.ТекущийЭлемент.ЦветФона = WebЦвета.Красный;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Обработка, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабСтатусыРеализацияПриИзменении(Элемент)
	
	ЗаполнитьСостояниеЗаказа();
	ЗаполнитьПримечание();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабСтатусыОтменаПриИзменении(Элемент)
	
	ЗаполнитьСостояниеЗаказа();
	ЗаполнитьПримечание();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабСтатусыВозвратПриИзменении(Элемент)
	
	ЗаполнитьСостояниеЗаказа();
	ЗаполнитьПримечание();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеЗаказовПриИзменении(Элемент)
	
	Если Объект.ИспользованиеЗаказов = "ЗаказСоСкладаИПодЗаказ" Тогда
		ЭтаФорма.Элементы.ТабСтатусыСостояниеЗаказа.Видимость = Истина;
		ЭтаФорма.Элементы.ТабСтатусыСтатус1С.Видимость = Истина;
		ЭтаФорма.Элементы.ТабСтатусыВариантОбеспечения.Видимость = Истина;
		
		ЭтаФорма.Элементы.ЗагрузитьБрони.Видимость = Ложь;
	ИначеЕсли  Объект.ИспользованиеЗаказов = "ЗаказТолькоСоСклада" Тогда 
		ЭтаФорма.Элементы.ТабСтатусыСостояниеЗаказа.Видимость = Истина;
		ЭтаФорма.Элементы.ТабСтатусыСтатус1С.Видимость = Истина;
		ЭтаФорма.Элементы.ТабСтатусыВариантОбеспечения.Видимость = Ложь;
	Иначе 
		ЭтаФорма.Элементы.ТабСтатусыСостояниеЗаказа.Видимость = Ложь;
		ЭтаФорма.Элементы.ТабСтатусыСтатус1С.Видимость = Ложь;
		ЭтаФорма.Элементы.ТабСтатусыВариантОбеспечения.Видимость = Ложь; 
		ЭтаФорма.Элементы.ТабСтатусыПримечание.Видимость = Ложь;
		
		ЭтаФорма.Элементы.ЗагрузитьБрони.Видимость = Ложь;
		Объект.ЗагрузкаБроней = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеВозвратовПриИзменении(Элемент)
	
	//++ Эталонка
	Если Объект.Эталонная = Истина и Объект.СозданиеВозвратов = Истина Тогда
		ЭтаФорма.Элементы.ТабСтатусыВозврат.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ТабСтатусыВозврат.Видимость = Ложь;
	КонецЕсли;
	//-- Эталонка 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьЧекПриИзменении(Элемент)

	Если Объект.ВыгружатьЧек = Истина Тогда
		ЭтаФорма.Элементы.ВыгружатьЧекРП.Доступность = Истина;
		ЭтаФорма.Элементы.ВыгружатьЧекВозврат.Доступность = Истина;
		ЭтаФорма.Элементы.НастройкиРозницы.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.ВыгружатьЧекРП.Доступность = Ложь;
		ЭтаФорма.Элементы.ВыгружатьЧекВозврат.Доступность = Ложь; 
		Объект.ВыгружатьЧекРП = Ложь;
		Объект.ВыгружатьЧекВозврат = Ложь;
		ЭтаФорма.Элементы.НастройкиРозницы.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектРаботаСРозницейПриИзменении(Элемент)
	
	Если Объект.РаботаСРозницей = Истина Тогда
		ЭтаФорма.Элементы.Розница.Видимость = Истина;
	Иначе 
		ЭтаФорма.Элементы.Розница.Видимость = Ложь;
		Объект.ВыгружатьЧек = Ложь;
		Объект.ВыгружатьЧекРП = Ложь;
		Объект.ВыгружатьЧекВозврат = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвязьМагазинаПриИзменении(Элемент)
	
	Если Объект.СвязьМагазина = "Склад1С" Тогда 
		ЭтаФорма.Элементы.МагазинСклад.Видимость = Истина;
		ЭтаФорма.Элементы.МагазинОрганизация.Видимость = Ложь;
	ИначеЕсли Объект.СвязьМагазина = "Организация1С" Тогда
		ЭтаФорма.Элементы.МагазинСклад.Видимость = Ложь;
		ЭтаФорма.Элементы.МагазинОрганизация.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМенеджеров(Менеджеры) 
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ПолучитьМенеджеровИзRetailCRM(Менеджеры); 
	
	Если Менеджеры <> Неопределено и Менеджеры.Количество()>0 Тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Менеджер");
		ТЗ.Колонки.Добавить("id"); 
		Для Каждого Менеджер из Менеджеры Цикл 
			Стр = ТЗ.Добавить();
			Стр.Менеджер = СокрЛП("" + Менеджер["firstName"] + " " + Менеджер["lastName"] + " " + Менеджер["patronymic"]);
			Стр.id 	= Менеджер["id"];
		КонецЦикла;
		
		ЭтаФорма.МенеджерыCRM.Загрузить(ТЗ);
		
		Значения = Новый Массив;
		
		Для Каждого строка из ТЗ Цикл  
			Значения.Добавить(Строка.Менеджер);
		КонецЦикла;
		
		Менеджеры = Значения;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПолучитьСклады(Склады) 
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ПолучитьСкладыИзRetailCRM(Склады); 
	
	Если Склады <> Неопределено и Склады.Количество()>0 Тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("СкладCRM");
		ТЗ.Колонки.Добавить("КодCRM"); 
		Для Каждого Склад из Склады Цикл
			Если Склад["active"] = true Тогда 
				Стр = ТЗ.Добавить();
				Стр.СкладCRM = Склад["name"];
				Стр.КодCRM 	= Склад["code"];
			Иначе 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		ЭтаФорма.СкладыCRM.Загрузить(ТЗ);
		
		Значения = Новый Массив;
		
		Для Каждого строка из ТЗ Цикл  
			Значения.Добавить(Строка.СкладCRM);
		КонецЦикла;
		
		Склады = Значения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТипыЦен(ТипыЦен) 
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ПолучитьТипыЦенИзRetailCRM(ТипыЦен); 
	
	Если ТипыЦен <> Неопределено и ТипыЦен.Количество()>0 Тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ТипЦеныCRM");
		ТЗ.Колонки.Добавить("КодCRM"); 
		Для Каждого ТипЦены из ТипыЦен Цикл
			Если ТипЦены["active"] = true Тогда 
				Стр = ТЗ.Добавить();
				Стр.ТипЦеныCRM = ТипЦены["name"];
				Стр.КодCRM 	= ТипЦены["code"];
			Иначе 
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		ЭтаФорма.ТипыЦенCRM.Загрузить(ТЗ);
		
		Значения = Новый Массив;
		
		Для Каждого строка из ТЗ Цикл  
			Значения.Добавить(Строка.ТипЦеныCRM);
		КонецЦикла;
		
		ТипыЦен = Значения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТипыОплат(ТипыОплат) 
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ПолучитьТипыОплатИзRetailCRM(ТипыОплат); 
	
	КодМагазина   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина");
	
	Если ТипыОплат <> Неопределено и ТипыОплат.Количество()>0 Тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ТипОплатыCRM");
		ТЗ.Колонки.Добавить("КодCRM"); 
		Для Каждого ТипОплаты из ТипыОплат Цикл
			Если ТипОплаты.Значение["active"] = true Тогда
				//проверим доступность магазину
				Если ТипОплаты.Значение["sites"].Количество() = 0 Тогда 
					Стр = ТЗ.Добавить();
					Стр.ТипОплатыCRM = ТипОплаты.Значение["name"];
					Стр.КодCRM 	= ТипОплаты.Значение["code"];
				ИначеЕсли ТипОплаты.Значение["sites"].Количество() > 0 Тогда
					Индекс = ТипОплаты.Значение["sites"].Найти(КодМагазина);
					Если Индекс <> Неопределено Тогда 
						Стр = ТЗ.Добавить();
						Стр.ТипОплатыCRM = ТипОплаты.Значение["name"];
						Стр.КодCRM 	= ТипОплаты.Значение["code"];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЭтаФорма.ТипыОплатCRM.Загрузить(ТЗ);
		
		Значения = Новый Массив;
		
		Для Каждого строка из ТЗ Цикл  
			Значения.Добавить(Строка.ТипОплатыCRM);
		КонецЦикла;
		
		ТипыОплат = Значения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМагазины(Магазины) 
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ПолучитьМагазиныИзRetailCRM(Магазины); 
	
	Если Магазины <> Неопределено и Магазины.Количество()>0 Тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("МагазинCRM");
		ТЗ.Колонки.Добавить("КодМагазина"); 
		Для Каждого Магазин из Магазины Цикл
			Стр = ТЗ.Добавить();
			Стр.МагазинCRM = Магазин.Значение["name"];
			Стр.КодМагазина 	= Магазин.Значение["code"];
		КонецЦикла;
		
		ЭтаФорма.МагазиныCRM.Загрузить(ТЗ);
		
		Значения = Новый Массив;
		
		Для Каждого строка из ТЗ Цикл  
			Значения.Добавить(Строка.МагазинCRM);
		КонецЦикла;
		
		Магазины = Значения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтатусы(Статусы) 
	
	Статусы = Новый ТаблицаЗначений; 
	Статусы.Колонки.Добавить("Название");
	Статусы.Колонки.Добавить("КодCRM");
	Статусы.Колонки.Добавить("Порядок");
	Статусы.Колонки.Добавить("Группа");
	Статусы.Колонки.Добавить("ПорядокГруппы");
		
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ПолучитьСтатусыИзRetailCRM(Статусы); 
	
	Если Статусы <> Неопределено и Статусы.Количество()>0 Тогда

		ЭтаФорма.СтатусыCRM.Загрузить(Статусы);
		
		Значения = Новый Массив;
		
		Для Каждого строка из Статусы Цикл
			Значения.Добавить(строка.Название);
		КонецЦикла;
		
		Статусы = Значения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТипыДоставок(ТипыДоставок) 
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Обработка.ПолучитьТипыДоставокИзRetailCRM(ТипыДоставок); 
	
	КодМагазина   = crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("КодМагазина");
	
	Если ТипыДоставок <> Неопределено и ТипыДоставок.Количество()>0 Тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ТипДоставкиCRM");
		ТЗ.Колонки.Добавить("КодCRM"); 
		Для Каждого ТипДоставки из ТипыДоставок Цикл
			Если ТипДоставки.Значение["active"] = true Тогда
				//проверим доступность магазину
				Если ТипДоставки.Значение["sites"].Количество() = 0 Тогда
					Стр = ТЗ.Добавить();
					Стр.ТипДоставкиCRM = ТипДоставки.Значение["name"];
					Стр.КодCRM 	= ТипДоставки.Значение["code"];
				ИначеЕсли ТипДоставки.Значение["sites"].Количество() > 0 Тогда
					Индекс = ТипДоставки.Значение["sites"].Найти(КодМагазина);
					Если Индекс <> Неопределено Тогда
						Стр = ТЗ.Добавить();
						Стр.ТипДоставкиCRM = ТипДоставки.Значение["name"];
						Стр.КодCRM 	= ТипДоставки.Значение["code"];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЭтаФорма.ТипыДоставокCRM.Загрузить(ТЗ);
		
		Значения = Новый Массив;
		
		Для Каждого строка из ТЗ Цикл  
			Значения.Добавить(Строка.ТипДоставкиCRM);
		КонецЦикла;
		
		ТипыДоставок = Значения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеМенеджеровМенеджерCRMПриИзменении(Элемент)
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("Менеджер", ТекущиеДанные.МенеджерCRM);
	НайдСтр = МенеджерыCRM.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено и НайдСтр.Количество() > 0 Тогда
		ТекущиеДанные.ИД = НайдСтр[0].id;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСправочникиCRM(Команда)
	
	Если Команда.Имя = "ЗагрузитьСтатусы" Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, "ЗагрузитьСтатусы"), 
		"После подтверждения загрузки будет очищена таблица статусов. Загрузить статусы?", РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Команда.Имя = "ЗагрузитьСтатусыСост" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, "ЗагрузитьСтатусыСост"), 
		"После подтверждения загрузки будет очищена таблица статусов. Загрузить статусы?", РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Команда.Имя = "ЗагрузитьМенеджеров" Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, "ЗагрузитьМенеджеров"), 
		"После подтверждения загрузки будет очищена таблица менеджеров. Загрузить менеджеров?", РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Команда.Имя = "ЗагрузитьСклады" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, "ЗагрузитьСклады"), 
		"После подтверждения загрузки будет очищена таблица складов. Загрузить склады?", РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Команда.Имя = "ЗагрузитьТипыЦен" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, "ЗагрузитьТипыЦен"), 
		"После подтверждения загрузки будет очищена таблица типов цен. Загрузить типы цен?", РежимДиалогаВопрос.ДаНет); 
	ИначеЕсли Команда.Имя = "ЗагрузитьТипыОплат" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, "ЗагрузитьТипыОплат"), 
		"После подтверждения загрузки будет очищена таблица типов оплат. Загрузить типы оплат?", РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Команда.Имя = "ЗагрузитьТипыОплат1С" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, "ЗагрузитьТипыОплатИз1С"), 
		"После подтверждения загрузки будет очищена таблица типов оплат. Загрузить типы оплат?", РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Команда.Имя = "ЗагрузитьФормыОплат" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, "ЗагрузитьФормыОплат"), 
		"После подтверждения загрузки будет очищена таблица типов оплат. Загрузить типы оплат?", РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Команда.Имя = "ЗагрузитьТипыДоставок" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, "ЗагрузитьТипыДоставок"), 
		"После подтверждения загрузки будет очищена таблица типов доставок. Загрузить типы доставок?", РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Команда.Имя = "ЗагрузитьМагазины" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, "ЗагрузитьМагазины"), 
		"После подтверждения загрузки будет очищена таблица соответствия магазинов. Загрузить магазины?", РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Команда.Имя = "ЗагрузитьМагазины1" Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаКомандыЗавершение", ЭтотОбъект, "ЗагрузитьМагазины1"), 
		"После подтверждения загрузки будет очищена таблица соответствия магазинов. Загрузить магазины?", РежимДиалогаВопрос.ДаНет);
		
    КонецЕсли;
		 
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьМенеджеровНаСервере()
	
	ТЗМенеджеров = Новый ТаблицаЗначений; 
	ТЗМенеджеров.Колонки.Добавить("МенеджерCRM");
	ТЗМенеджеров.Колонки.Добавить("ИД");
	
	Если МенеджерыCRM <> Неопределено и МенеджерыCRM.Количество()>0 Тогда
		Для Каждого Менеджер из МенеджерыCRM Цикл 
			Стр = ТЗМенеджеров.Добавить();
			Стр.МенеджерCRM = Менеджер.Менеджер;
			Стр.ИД 	= Менеджер.id;
		КонецЦикла;
	КонецЕсли;
	
	Если ТЗМенеджеров <> Неопределено и ТЗМенеджеров.Количество()>0 Тогда
		ЭтаФорма.Объект.СоответствиеМенеджеров.Загрузить(ТЗМенеджеров);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтатусыСостНаСервере()
	
	ТЗСтатусов = Новый ТаблицаЗначений; 
	ТЗСтатусов.Колонки.Добавить("СтатусCRM");
	ТЗСтатусов.Колонки.Добавить("Название");
	
	Если СтатусыCRM <> Неопределено и СтатусыCRM.Количество()>0 Тогда
		Для Каждого Статус из СтатусыCRM Цикл 
			Стр = ТЗСтатусов.Добавить();
			Стр.СтатусCRM = Статус.Название;
			Стр.Название  = Статус.КодCRM;
		КонецЦикла;
	КонецЕсли;
	
	Если ТЗСтатусов <> Неопределено и ТЗСтатусов.Количество()>0 Тогда
		ЭтаФорма.Объект.СтатусыСостояния.Загрузить(ТЗСтатусов);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСкладыНаСервере()
	
	ТЗскладов = Новый ТаблицаЗначений; 
	ТЗскладов.Колонки.Добавить("СкладCRM");
	ТЗскладов.Колонки.Добавить("КодCRM");
	
	Если СкладыCRM <> Неопределено и СкладыCRM.Количество()>0 Тогда
		Для Каждого Склад из СкладыCRM Цикл 
			Стр = ТЗскладов.Добавить();
			Стр.СкладCRM = Склад.СкладCRM;
			Стр.КодCRM 	= Склад.КодCRM;
		КонецЦикла;
	КонецЕсли;
	
	Если ТЗскладов <> Неопределено и ТЗскладов.Количество()>0 Тогда
		ЭтаФорма.Объект.СкладыДляОбмена.Загрузить(ТЗскладов);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТипыЦенНаСервере()
	
	ТЗТиповЦен = Новый ТаблицаЗначений; 
	ТЗТиповЦен.Колонки.Добавить("ТипЦеныCRM");
	ТЗТиповЦен.Колонки.Добавить("КодCRM");
	
	Если ТипыЦенCRM <> Неопределено и ТипыЦенCRM.Количество()>0 Тогда
		Для Каждого ТипЦены из ТипыЦенCRM Цикл 
			Стр = ТЗТиповЦен.Добавить();
			Стр.ТипЦеныCRM = ТипЦены.ТипЦеныCRM;
			Стр.КодCRM 	= ТипЦены.КодCRM;
		КонецЦикла;
	КонецЕсли;
	
	Если ТЗТиповЦен <> Неопределено и ТЗТиповЦен.Количество()>0 Тогда
		ЭтаФорма.Объект.ТипыЦенДляОбмена.Загрузить(ТЗТиповЦен);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТипыОплатНаСервере(Действие)
	
	ТЗТиповОплат = Новый ТаблицаЗначений; 
	ТЗТиповОплат.Колонки.Добавить("ТипОплатыCRM");
	ТЗТиповОплат.Колонки.Добавить("КодCRM");
	
	Если ТипыОплатCRM <> Неопределено и ТипыОплатCRM.Количество()>0 Тогда
		Для Каждого ТипОплаты из ТипыОплатCRM Цикл 
			Стр = ТЗТиповОплат.Добавить();
			Стр.ТипОплатыCRM = ТипОплаты.ТипОплатыCRM;
			Стр.КодCRM 	= ТипОплаты.КодCRM;
		КонецЦикла;
	КонецЕсли;
	
	Если ТЗТиповОплат <> Неопределено и ТЗТиповОплат.Количество()>0 Тогда
		Если Действие = "ЗагрузитьТипыОплат" Тогда 
			ЭтаФорма.Объект.СоответствиеТиповОплат.Загрузить(ТЗТиповОплат);
		ИначеЕсли Действие = "ЗагрузитьТипыОплатИз1С" Тогда 
			ЭтаФорма.Объект.СоответствиеТиповОплатИз1С.Загрузить(ТЗТиповОплат);
		ИначеЕсли Действие = "ЗагрузитьФормыОплат" Тогда 
			ЭтаФорма.Объект.СоответствиеФормОплаты.Загрузить(ТЗТиповОплат);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТипыДоставокНаСервере(Действие)
	
	ТЗТиповДоставок = Новый ТаблицаЗначений; 
	ТЗТиповДоставок.Колонки.Добавить("ТипДоставкиCRM");
	ТЗТиповДоставок.Колонки.Добавить("КодCRM");
	
	Если ТипыДоставокCRM <> Неопределено и ТипыДоставокCRM.Количество()>0 Тогда
		Для Каждого ТипДоставки из ТипыДоставокCRM Цикл 
			Стр = ТЗТиповДоставок.Добавить();
			Стр.ТипДоставкиCRM = ТипДоставки.ТипДоставкиCRM;
			Стр.КодCRM 	= ТипДоставки.КодCRM;
		КонецЦикла;
	КонецЕсли;
	
	Если ТЗТиповДоставок <> Неопределено и ТЗТиповДоставок.Количество()>0 Тогда
		ЭтаФорма.Объект.СоответствиеДоставок.Загрузить(ТЗТиповДоставок);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьМагазиныНаСервере(Действие)
	
	ТЗМагазинов = Новый ТаблицаЗначений; 
	ТЗМагазинов.Колонки.Добавить("МагазинCRM");
	ТЗМагазинов.Колонки.Добавить("КодМагазина");
	
	Если МагазиныCRM <> Неопределено и МагазиныCRM.Количество()>0 Тогда
		Для Каждого Магазин из МагазиныCRM Цикл 
			Стр = ТЗМагазинов.Добавить();
			Стр.МагазинCRM = Магазин.МагазинCRM;
			Стр.КодМагазина 	= Магазин.КодМагазина;
		КонецЦикла;
	КонецЕсли;
	
	Если ТЗМагазинов <> Неопределено и ТЗМагазинов.Количество()>0 Тогда
		Если Действие = "ЗагрузитьМагазины" Тогда 
			ЭтаФорма.Объект.МагазинСклад.Загрузить(ТЗМагазинов);
		ИначеЕсли Действие = "ЗагрузитьМагазиныОрганизация" Тогда 
			ЭтаФорма.Объект.МагазинОрганизация.Загрузить(ТЗМагазинов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладыДляОбменаСкладCRMПриИзменении(Элемент)
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("СкладCRM", ТекущиеДанные.СкладCRM);
	НайдСтр = СкладыCRM.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено и НайдСтр.Количество() > 0 Тогда
		ТекущиеДанные.КодCRM = НайдСтр[0].КодCRM;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипыЦенДляОбменаТипЦеныCRMПриИзменении(Элемент)
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("ТипЦеныCRM", ТекущиеДанные.ТипЦеныCRM);
	НайдСтр = ТипыЦенCRM.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено и НайдСтр.Количество() > 0 Тогда
		ТекущиеДанные.КодCRM = НайдСтр[0].КодCRM;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеТиповОплатТипОплатыCRMПриИзменении(Элемент)
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("ТипОплатыCRM", ТекущиеДанные.ТипОплатыCRM);
	НайдСтр = ТипыОплатCRM.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено и НайдСтр.Количество() > 0 Тогда
		ТекущиеДанные.КодCRM = НайдСтр[0].КодCRM;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеТиповОплатИз1СТипОплатыCRMПриИзменении(Элемент)
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("ТипОплатыCRM", ТекущиеДанные.ТипОплатыCRM);
	НайдСтр = ТипыОплатCRM.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено и НайдСтр.Количество() > 0 Тогда
		ТекущиеДанные.КодCRM = НайдСтр[0].КодCRM;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеФормОплатыТипОплатыCRMПриИзменении(Элемент)
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("ТипОплатыCRM", ТекущиеДанные.ТипОплатыCRM);
	НайдСтр = ТипыОплатCRM.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено и НайдСтр.Количество() > 0 Тогда
		ТекущиеДанные.КодCRM = НайдСтр[0].КодCRM;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабСтатусыНазваниеПриИзменении(Элемент)
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("Название", ТекущиеДанные.Название);
	НайдСтр = СтатусыCRM.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено и НайдСтр.Количество() > 0 Тогда
		ТекущиеДанные.КодCRM = НайдСтр[0].КодCRM;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоответствиеДоставокТипДоставкиCRMПриИзменении(Элемент)
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("ТипДоставкиCRM", ТекущиеДанные.ТипДоставкиCRM);
	НайдСтр = ТипыДоставокCRM.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено и НайдСтр.Количество() > 0 Тогда
		ТекущиеДанные.КодCRM = НайдСтр[0].КодCRM;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинОрганизацияМагазинCRMПриИзменении(Элемент)
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("МагазинCRM", ТекущиеДанные.МагазинCRM);
	НайдСтр = МагазиныCRM.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено и НайдСтр.Количество() > 0 Тогда
		ТекущиеДанные.КодМагазина = НайдСтр[0].КодМагазина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МагазинСкладМагазинCRMПриИзменении(Элемент)
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("МагазинCRM", ТекущиеДанные.МагазинCRM);
	НайдСтр = МагазиныCRM.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено и НайдСтр.Количество() > 0 Тогда
		ТекущиеДанные.КодМагазина = НайдСтр[0].КодМагазина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтатусыСостоянияСтатусCRMПриИзменении(Элемент)
	
	ТекущиеДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("Название", ТекущиеДанные.СтатусCRM);
	НайдСтр = СтатусыCRM.НайтиСтроки(СтруктураОтбора);
	Если НайдСтр <> Неопределено и НайдСтр.Количество() > 0 Тогда
		ТекущиеДанные.Название = НайдСтр[0].КодCRM;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоответствиеТиповОплатИз1СДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокОплат = Новый Массив;
	СписокОплат.Добавить("Эквайринговая операция");
	СписокОплат.Добавить("Приходный кассовый ордер");
	СписокОплат.Добавить("Поступление безналичных ДС");
	Если crm_RetailCRMПовтИсп.ПолучитьЗначениеКонстанты("ВыгрузкаВозвратовОплатыВCRM") = Истина Тогда
		СписокОплат.Добавить("Расходный кассовый ордер");
	    СписокОплат.Добавить("Списание безналичных ДС");
	КонецЕсли;
	
	ЭтаФорма.Элементы.СоответствиеТиповОплатИз1СДокумент.СписокВыбора.ЗагрузитьЗначения(СписокОплат); 
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьКонтЛицаНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	
	Обработка.ВыгрузитьКонтактныеЛица();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьКонтЛица(Команда)
	ВыгрузитьКонтЛицаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьАдреса(Команда)
	ВыгрузитьАдресаНаСервере();
КонецПроцедуры  

&НаСервере
Процедура ВыгрузитьАдресаНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
		
	Обработка.ВыгрузитьАдресаКорпов(Партнер); 
	
КонецПроцедуры

&НаСервере
Процедура СвязатьКонтЛицаНаСервере()
	
	Обработка = РеквизитФормыВЗначение("Объект");
		
	Обработка.СвязатьКонтактныеЛицаСКорпами();
	
КонецПроцедуры

&НаКлиенте
Процедура СвязатьКонтЛица(Команда)
	СвязатьКонтЛицаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КорпоративныеКлиентыПриИзменении(Элемент)
	
	Если Объект.КорпоративныеКлиенты = Истина Тогда
		ЭтаФорма.Элементы.НайтиКлиентов.Видимость = Ложь;
		ЭтаФорма.Элементы.ВыгрузитьКонтЛица.Видимость = Истина;
		ЭтаФорма.Элементы.ВыгрузитьАдреса.Видимость = Истина;
        ЭтаФорма.Элементы.СвязатьКонтЛица.Видимость = Истина;
		ЭтаФорма.Элементы.ВыгрузитьКонтЛица.Заголовок = "1. Выгрузить контактные лица";
		ЭтаФорма.Элементы.ВыгрузитьКлиентов.Заголовок = "2. Выгрузить клиентов";
		ЭтаФорма.Элементы.СвязатьКонтЛица.Заголовок = "3. Привязать контактные лица к корп клиентам";
		ЭтаФорма.Элементы.ВыгрузитьАдреса.Заголовок = "4. Выгрузить адреса клиентов";
	Иначе 
		ЭтаФорма.Элементы.НайтиКлиентов.Видимость = Истина;
		ЭтаФорма.Элементы.ВыгрузитьКонтЛица.Видимость = Ложь;
		ЭтаФорма.Элементы.ВыгрузитьАдреса.Видимость = Ложь;
        ЭтаФорма.Элементы.СвязатьКонтЛица.Видимость = Ложь;
		ЭтаФорма.Элементы.ВыгрузитьКлиентов.Заголовок = "Выгрузить клиентов";
	КонецЕсли;
		
КонецПроцедуры


&НаСервере
Процедура ксп_ЗагрузитьКаталогНаСервере()
	РеквизитФормыВЗначение("Объект").ПолучитьТоварыИзRetailCRM();
КонецПроцедуры


&НаКлиенте
Процедура ксп_ЗагрузитьКаталог(Команда)
	ДопПараметры = Неопределено;
	Колбэк = Новый ОписаниеОповещения("ЗагрузитьКаталогКолбэк", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Колбэк, "Загрузить номенклатуру с сайта?", РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.Отмена);
	//ксп_ЗагрузитьКаталогНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ЗагрузитьКаталогКолбэк(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ксп_ЗагрузитьКаталогНаСервере();
		ПоказатьПредупреждение(,"Загрузка номенклатуры завершена!");
	КонецЕсли;
КонецПроцедуры













#Область РАЗРАБОТКА


&НаСервере
Процедура ЗагрузитьЗаказИзJSONНаСервере()
	обк = РеквизитФормыВЗначение("Объект");
	СоответствиеЗаказы = crm_RetailCRMОбщий.UnJSONТест("["+ЗаказJSON+"]");
	ТЗБрони = Неопределено;                              
	обк.Мод_СозданиеЗаказов(СоответствиеЗаказы, ТЗБрони);

КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьЗаказИзJSON(Команда)
	ЗагрузитьЗаказИзJSONНаСервере();
КонецПроцедуры

#КонецОбласти


