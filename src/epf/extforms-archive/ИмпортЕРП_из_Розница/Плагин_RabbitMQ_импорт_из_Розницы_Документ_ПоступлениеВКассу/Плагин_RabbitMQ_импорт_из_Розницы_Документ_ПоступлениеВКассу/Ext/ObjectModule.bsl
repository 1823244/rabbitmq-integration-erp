Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.2");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ПоступлениеВКассу");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ПоступлениеВКассу");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_ПоступлениеВКассу",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_ВыемкаДенежныхСредствИзКассыККМ",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.Поступлениевкассу") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	//ВидОбъекта = "ВыемкаДенежныхСредствИзКассыККМ";
	ВидОбъекта = "ПриходныйКассовыйОрдер";

	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			
		//ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText);
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText);
		ЗафиксироватьТранзакцию();          		
		Возврат ДанныеСсылка;		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	
			
КонецФункции


Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
    ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	ОбъектДанных.Автор = Неопределено;
	
	НомерСчета="";
	ЕстьАтрибут = деф.СчетОрганизации.свойство("НомерСчета",НомерСчета);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.БанковскийСчет = ксп_ИмпортСлужебный.НайтиБанковскийСчет(НомерСчета, деф.БанковскийСчет.БИК);
	Иначе
		ОбъектДанных.БанковскийСчет = Неопределено;
	КонецЕсли;
	ОбъектДанных.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ОбъектДанных.ВалютаКонвертации = Неопределено;
	//ОбъектДанных.Ведомость = Неопределено;
	ОбъектДанных.ПринятоОт = деф.ПринятоОт;
	ОбъектДанных.ГлавныйБухгалтер = Неопределено;
	ОбъектДанных.ГруппаФинансовогоУчета = Неопределено;
	//ОбъектДанных.ДатаАвансовогоОтчета = Неопределено;
	//ОбъектДанных.ДатаВедомостиНаВыплатуЗарплаты = Неопределено;
	
	ОбъектДанных.Договор = Неопределено;
	
	
	// основания в Рознице:
	
	//ВозвратТоваровОтПокупателя
	//ЗаказПоставщику	
	//ЗарплатаКВыплатеОрганизаций
	//ЗаявкаНаРасходованиеДенежныхСредств
	//ОтчетКомитентуОПродажах
	//ОтчетОРозничныхПродажах
	//ПоступлениеТоваров
	//ПриходныйКассовыйОрдер
	
	// основания в ЕРП
	
	//АвансовыйОтчет
	//ВозвратТоваровОтКлиента
	//ВыкупПринятыхНаХранениеТоваров
	//ЗаказПереработчику
	//ЗаказПереработчику2_5
	//ЗаказПоставщику
	//ЗаявкаНаРасходованиеДенежныхСредств
	//НачислениеДивидендов
	//ОтчетКомиссионера
	//ОтчетКомиссионераОСписании
	//ОтчетКомитенту
	//ОтчетКомитентуОСписании
	//ОтчетОператораСистемыПлатон
	//ОтчетОСписанииТоваровСХранения
	//ОтчетПереработчика
	//ОтчетПереработчика2_5
	//ОтчетПоКомиссииМеждуОрганизациями
	//ОтчетПоКомиссииМеждуОрганизациямиОСписании
	//ПередачаТоваровМеждуОрганизациями
	//ПоступлениеДенежныхДокументов
	//ПоступлениеУслугПоАренде
	//ПриобретениеТоваровУслуг
	//ПриобретениеУслугПрочихАктивов
	//ТаможеннаяДекларацияИмпорт	
	
	
	ОбъектДанных.ДокументОснование = ксп_ИмпортСлужебный.НайтиДокументОснование(деф.ДокументОснование);
	
	//ОбъектДанных.ЗаявкаНаРасходованиеДенежныхСредств = Неопределено;
	ОбъектДанных.ИдентификаторДокумента = Неопределено;
	ОбъектДанных.Исправление = Неопределено;
	ОбъектДанных.ИсправляемыйДокумент = Неопределено;
	
	ОбъектДанных.Касса = ксп_ИмпортСлужебный.НайтиКассу(деф.Касса, мВнешняяСистема);
	
	ОбъектДанных.КассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ);
	
	
	ОбъектДанных.КассаПолучатель = ОбъектДанных.Касса;

	ОбъектДанных.Кассир = Неопределено;
	ОбъектДанных.Комментарий = деф.Комментарий;

	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);

	ОбъектДанных.КратностьКурсаКонвертации = 1;
	ОбъектДанных.КурсКонвертации = 1;
	
	ОбъектДанных.НалогообложениеНДС = перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;

	// доделать
	//гуид="";
	//ЕстьАтрибут = деф.НаправлениеДеятельности.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.НаправлениеДеятельности = деф.НаправлениеДеятельности.Ref;
	//Иначе
	//	ОбъектДанных.НаправлениеДеятельности = Неопределено;
	//КонецЕсли;
	
	ОбъектДанных.НеКонтролироватьЗаполнениеЗаявки = Истина;
	ОбъектДанных.НомерВедомостиНаВыплатуЗарплаты = Неопределено;
	
	ОбъектДанных.ОбъектРасчетов = Неопределено;
	ОбъектДанных.ОплатаПоЗаявкам = Неопределено;
	
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.ОрганизацияПолучатель = Неопределено;

	ОбъектДанных.Основание = деф.Основание;

	ОбъектДанных.Партнер = ОбъектДанных.Контрагент.Партнер;

	ОбъектДанных.ПериодРегистрации = Неопределено;
	//ОбъектДанных.ПоДокументу = деф.ПоДокументу;
	
	ОбъектДанных.ПодотчетноеЛицо = Неопределено;
	ОбъектДанных.Подразделение = Неопределено;
	
	ОбъектДанных.Приложение = деф.Приложение;
	
	ОбъектДанных.ПроводкиПоРаботникам = Ложь;
	ОбъектДанных.РаспоряжениеНаПеремещениеДенежныхСредств = Неопределено;
	ОбъектДанных.Руководитель = Неопределено;

	
	ОбъектДанных.СтатьяДвиженияДенежныхСредств = ксп_ИмпортСлужебный.НайтиСтатьюДДС(деф.Статья,мВнешняяСистема);
	
	ОбъектДанных.СторнируемыйДокумент = Неопределено;

	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	ОбъектДанных.СуммаКонвертации = Неопределено;
	
	ОбъектДанных.ХозяйственнаяОперация = СоответствиеОпераций(деф.ВидОперации);


	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции

Функция СоответствиеОпераций(УзелОперации)
	
	рОперация = Неопределено;
	ХозОперация = Неопределено;
	
	Если УзелОперации.Свойство("Значение", рОперация) Тогда 
		
		Если рОперация = "РозничнаяВыручка" Тогда 
			
			ХозОперация =  Перечисления.ХозяйственныеОперации.ВыемкаДенежныхСредствИзКассыККМ;
			
		ИначеЕсли рОперация = "ОтПокупателя" Тогда
			
			ХозОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
			
		ИначеЕсли рОперация = "Прочее" Тогда 
			
			ХозОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
			
	    КонецЕсли;
		
		
	КонецЕсли;
	
    Возврат ХозОперация;

КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
//Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

//	id = СтруктураОбъекта.identification;
//	деф = СтруктураОбъекта.definition;
//	
//	ОбъектДанных.Номер = деф.Number;
//	ОбъектДанных.Дата = деф.Date;
//	
//	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;

//	ОбъектДанных.Валюта	= Константы.ВалютаРегламентированногоУчета.Получить();

//	Если деф.КассаККМ.Свойство("Ref") Тогда
//		КассаККМ = Справочники.КассыККМ.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.КассаККМ.Ref));
//		ОбъектДанных.КассаККМ	= КассаККМ;	
//	КонецЕсли;
//	
//	ОбъектДанных.Комментарий	= деф.Комментарий;
//	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
//	ОбъектДанных.СуммаДокумента	= деф.СуммаДокумента;
//	


//	ОбъектДанных.ОбменДанными.Загрузка = Истина;
//	ОбъектДанных.Записать();

//	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
//	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
//	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
//	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
//	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

//КонецФункции






#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


 мВнешняяСистема = "retail";
 
 