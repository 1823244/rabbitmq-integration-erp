Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.6");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОтчетОРозничныхПродажах");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОтчетОРозничныхПродажах");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОтчетОРозничныхПродажах",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОтчетОРозничныхПродажах",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	





Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.отчеторозничныхпродажах") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта = "ОтчетОРозничныхПродажах";

	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText);		
		ЗафиксироватьТранзакцию();          		
		Возврат ДанныеСсылка;		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	//Реквизит	Тип	Вид
	//Валюта	Справочник	Валюты
	ОбъектДанных.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	//ВидЦены	Справочник	ВидыЦен
	ОбъектДанных.ВидЦены = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("ДокументОтчетОРозничныхПродажах_ВидЦены", мВнешняяСистема); //нет в Рознице
	
	//ВидыЗапасовУказаныВручную	Булево	
	ОбъектДанных.ВидыЗапасовУказаныВручную = Ложь; //что это такое? что-то связано с ТЧ "ВидыЗапасов"
	
	//ГлавныйБухгалтер	Справочник	ОтветственныеЛицаОрганизаций
	ОбъектДанных.ГлавныйБухгалтер = Неопределено;
	
	//ГруппаФинансовогоУчета	Справочник	ГруппыФинансовогоУчетаРасчетов
	ОбъектДанных.ГруппаФинансовогоУчета = Неопределено;
	
	//ЕстьМаркируемаяПродукцияГИСМ	Булево	
	ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ = Неопределено;  //todo Доделать
	
	//ИдентификаторДокумента	Строка	
	ОбъектДанных.ИдентификаторДокумента = Неопределено; //на что это влияет? где используется?
	
	//КассаККМ	Справочник	КассыККМ
	ОбъектДанных.КассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ); 
	
	//КассоваяСмена	Документ	КассоваяСмена
	КассоваяСменаСтруктура = Неопределено;
	Если деф.Свойство("КассоваяСмена", КассоваяСменаСтруктура) И ТипЗнч(КассоваяСменаСтруктура) = Тип("Структура") Тогда
		КассоваяСменаГУИД = "";
		Если КассоваяСменаСтруктура.Свойство("Ref", КассоваяСменаГУИД) Тогда
			ОбъектДанных.КассоваяСмена = Документы.КассоваяСмена.ПолучитьСсылку( Новый УникальныйИдентификатор(КассоваяСменаГУИД) );
		КонецЕсли;
	КонецЕсли;
	
	
	//Комментарий	Строка	
	ОбъектДанных.Комментарий = деф.Комментарий;
	
	//Контрагент	Справочник	Контрагенты
	ОбъектДанных.Контрагент = Неопределено; // нет в источнике
	
	// todo уточнить у аналитика
	//НалогообложениеНДС	Перечисление	ТипыНалогообложенияНДС
	ОбъектДанных.НалогообложениеНДС = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("ДокументОтчетОРозничныхПродажах_НалогообложениеНДС", мВнешняяСистема); //нет в Рознице
	
	//НаправлениеДеятельности	Справочник	НаправленияДеятельности
	
	//Организация	Справочник	Организации
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	
	//ОрганизацияЕГАИС	Справочник	КлассификаторОрганизацийЕГАИС
	
	//Ответственный	Справочник	Пользователи
	ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию();
	
	//Подразделение	Справочник	СтруктураПредприятия
	
	//ПоРезультатамИнвентаризации	Булево	
	
	// todo уточнить у аналитика
	//ПорядокРасчетов	Перечисление	ПорядокРасчетов
	ОбъектДанных.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	
	//Руководитель	Справочник	ОтветственныеЛицаОрганизаций
	
	//Склад	Справочник	Склады
	ОбъектДанных.Склад = РегистрыСведений.ксп_МэппингМагазинСклад.ПоМэппингу(деф.Магазин, мВнешняяСистема);
	
	// todo насколько это важно? если будет несколько форм оплат, будут ли эти документы
	// разделены по ним в источнике?
	//ФормаОплаты	Перечисление	ФормыОплаты
	ОбъектДанных.ФормаОплаты = перечисления.ФормыОплаты.Наличная;
		    
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
		
	ОбъектДанных.Комментарий = деф.Комментарий;
	
	
	//ПользовательГУИД = ""; 
	//Если деф.Автор.Свойство("Ref", ПользовательГУИД) Тогда
	//	ОбъектДанных.Ответственный = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ПользовательГУИД));
	//КонецЕсли;
	
	
	
	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	
	//ОбъектДанных.УчитыватьНДС = ксп_ИмпортСлужебный.УчитыватьНДС(деф.НалогообложениеНДС);
	
	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;	
	

	
	//---------------------------------------------ТЧ ТОВАРЫ
	
	
	
	ОбъектДанных.Товары.Очистить();

	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		НовСтр = ОбъектДанных.Товары.Добавить();    
		
				
		// не надо АналитикаУчетаНаборов	Справочник	КлючиАналитикиУчетаНаборов
		//ДокументРеализации	Документ	ОтчетОРозничныхПродажах
		//ИдентификаторСтроки	Строка	
		//Количество	Число	
		НовСтр.Количество = стрк.Количество;
		//КоличествоУпаковок	Число	
		НовСтр.КоличествоУпаковок = стрк.КоличествоУпаковок;
		//КоличествоУпаковокУчет	Число	
		НовСтр.КоличествоУпаковокУчет = стрк.КоличествоУпаковок;
		//КоличествоУпаковокФакт	Число	
		НовСтр.КоличествоУпаковокФакт = стрк.КоличествоУпаковок;
		//Номенклатура	Справочник	Номенклатура        
		НовСтр.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		//не надо НоменклатураНабора	Справочник	Номенклатура
		//Партнер	Справочник	Партнеры
		//Помещение	Справочник	СкладскиеПомещения
		//ПоЧекуКоррекции	Булево	
		НовСтр.Продавец	= Пользователи.ТекущийПользователь(); //ЕНС. Без этого не проводится!
		//ПроцентРучнойСкидки	Число	
		//Серия	Справочник	СерииНоменклатуры
		//СтавкаНДС	Справочник	СтавкиНДС
		НовСтр.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюРозницы(стрк.СтавкаНДС);
		//СтатусУказанияСерий	Число	
		//Сумма	Число	
		НовСтр.Сумма = стрк.Сумма;
		//СуммаНДС	Число	     
		НовСтр.СуммаНДС = стрк.СуммаНДС;
		//СуммаРучнойСкидки	Число		
		//Упаковка	Справочник	УпаковкиЕдиницыИзмерения
		НовСтр.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);
		//Характеристика	Справочник	ХарактеристикиНоменклатуры
		НовСтр.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);
		//не надо ХарактеристикаНабора	Справочник	ХарактеристикиНоменклатуры
		//Цена	Число			
		НовСтр.Цена = стрк.Цена;		

		новСтр.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиСоздатьКлючАналитикиНом(
			новстр.Номенклатура, ОбъектДанных.Склад, новстр.Характеристика);
		
	КонецЦикла;
	

	
	////---------------------------------------------ТЧ ОплатаПлатежнымиКартами	
	
	ОбъектДанных.ОплатаПлатежнымиКартами.Очистить();

	Для счТовары = 0 По деф.ТЧОплатаПлатежнымиКартами.Количество()-1 Цикл
		стрк = деф.ТЧОплатаПлатежнымиКартами[счТовары];
		
		гуид = "";
		ЕстьЗначение = стрк.ВидОплаты.свойство("Ref", гуид);
		Если ЕстьЗначение Тогда
			ВидОплаты = РегистрыСведений.ксп_МэппингПеречислениеТипыПлатежнойСистемыККТ
				.ПоМэппингу( гуид, мВнешняяСистема );
		Иначе
			ВидОплаты = Неопределено;
		КонецЕсли;

		Если ВидОплаты <> перечисления.ТипыПлатежнойСистемыККТ.ПлатежнаяКарта Тогда
			Продолжить;
		КонецЕсли;     
		
		СтрокаТЧ = ОбъектДанных.ОплатаПлатежнымиКартами.Добавить();    
		
		СтрокаТЧ.ВидОплаты = ВидОплаты;
		
		СтрокаТЧ.Сумма	= стрк.сумма;	

		СтрокаТЧ.ЭквайринговыйТерминал = ксп_ИмпортСлужебный.
			НайтиЭквайринговыйТерминал(стрк.ЭквайринговыйТерминал, мВнешняяСистема);

	КонецЦикла;
		


	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции






#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


 мВнешняяСистема = "retail";
 
 