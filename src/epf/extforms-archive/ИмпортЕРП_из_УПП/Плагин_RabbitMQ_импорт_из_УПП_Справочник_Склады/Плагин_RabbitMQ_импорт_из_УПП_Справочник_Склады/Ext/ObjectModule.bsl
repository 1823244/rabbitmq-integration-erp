
Перем мВнешняяСистема;  
Перем ИмяСобытияЖР;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.6");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Справочник_Склады");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Справочник_Склады");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Справочник_Склады",
		"Форма_Плагин_RabbitMQ_импорт_из_УПП_Справочник_Склады",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("справочник.Склады") Тогда  
		Сообщить("Ошибка типа данных");
		Возврат Неопределено;
	КонецЕсли;  
	
	ЧислоЭлементов = 0;
	ЧислоНовыхЭлементов = 0;
	
	СкладУППСсылка = Загрузить_Справочник_КСП_СкладыУПП(СтруктураОбъекта, jsonText);
	Загрузить_Справочник_КСП_ВидыОперацийПоСкладамУПП(СтруктураОбъекта, jsonText, СкладУППСсылка);
	ДобавитьЗаписьВМэппингСкладов(СтруктураОбъекта);
	Возврат СкладУППСсылка;
	
КонецФункции

#Область ЗагрузкаВСправочник_КСП_СкладыУПП

Функция Загрузить_Справочник_КСП_СкладыУПП(СтруктураОбъекта, jsonText = "") Экспорт

	id 	= СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта = "ксп_СкладыУПП";  
	
	
	
  	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);

	ЭтоНовый = Ложь;
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда 
		
		Если деф.Свойство("isFolder") И деф.isFolder = Истина Тогда
			ОбъектДанных = Справочники[ВидОбъекта].СоздатьГруппу(); 
			Сообщить("Создаем группу");
		Иначе 
			ОбъектДанных = Справочники[ВидОбъекта].СоздатьЭлемент();
		КонецЕсли;
		
		СсылкаНового = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		

	//------------------------------------- Заполнение реквизитов Справочника
	Попытка			    
		
		Если деф.Свойство("isFolder") И деф.isFolder = Истина Тогда
			ЗаполнитьРеквизитыГруппы_СкладыУПП(ОбъектДанных, СтруктураОбъекта, jsonText);
		Иначе 
			ЗаполнитьРеквизитыЭлемента_СкладыУПП(ОбъектДанных, СтруктураОбъекта, jsonText);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();          		
		Возврат ДанныеСсылка;		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ПредставлениеОбъекта,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	
			
КонецФункции

// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизитыЭлемента_СкладыУПП(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Код = деф.code;
	
	ОбъектДанных.Наименование = деф.description;
	
	ParentRef = "";
	Если деф.parent.Свойство("Ref", ParentRef) Тогда
		Если ЗначениеЗаполнено(ParentRef) и ParentRef <> "00000000-0000-0000-0000-000000000000" Тогда
			ОбъектДанных.Родитель = Справочники.КСП_СкладыУПП.ПолучитьСсылку(Новый УникальныйИдентификатор(ParentRef));
		Иначе
			ОбъектДанных.Родитель = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	ОбъектДанных.ОбменДанными.Загрузка = ИСтина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции

Функция ЗаполнитьРеквизитыГруппы_СкладыУПП(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Код = деф.code;
	
	ОбъектДанных.Наименование = деф.description;
	ParentRef = "";
	Если деф.parent.Свойство("Ref", ParentRef) Тогда
		Если ЗначениеЗаполнено(ParentRef) и ParentRef <> "00000000-0000-0000-0000-000000000000" Тогда
			ОбъектДанных.Родитель = Справочники.КСП_СкладыУПП.ПолучитьСсылку(Новый УникальныйИдентификатор(ParentRef));
		Иначе
			ОбъектДанных.Родитель = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	

	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции

#КонецОбласти 	


#Область ЗагрузкаВСправочник_КСП_ВидыОперацийПоСкладамУПП

Функция Загрузить_Справочник_КСП_ВидыОперацийПоСкладамУПП(
	СтруктураОбъекта, jsonText, СкладУППСсылка) Экспорт

	id 	= СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта 			= "КСП_ВидыОперацийПоСкладамУПП";

	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		
		Если деф.Свойство("isFolder") И деф.isFolder = Истина Тогда
			ОбъектДанных = Справочники[ВидОбъекта].СоздатьГруппу();
		Иначе 
			ОбъектДанных = Справочники[ВидОбъекта].СоздатьЭлемент();
		КонецЕсли;
		
		СсылкаНового = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			    
		
		Если деф.Свойство("isFolder") И деф.isFolder = Истина Тогда
			ЗаполнитьРеквизитыГруппы_ВидыОперацийПоСкладамУПП(ОбъектДанных, СтруктураОбъекта, jsonText);
		Иначе 
			ЗаполнитьРеквизитыЭлемента_ВидыОперацийПоСкладамУПП(ОбъектДанных, СтруктураОбъекта, jsonText, СкладУППСсылка);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();          		
		Возврат ДанныеСсылка;		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	
			
КонецФункции

// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизитыЭлемента_ВидыОперацийПоСкладамУПП(ОбъектДанных, СтруктураОбъекта, jsonText, СкладУППСсылка) Экспорт

	деф = СтруктураОбъекта.definition;
	
	//ОбъектДанных.Код = деф.code;
	
	ОбъектДанных.Наименование = деф.description;
	ParentRef = "";
	Если деф.parent.Свойство("Ref", ParentRef) Тогда
		Если ЗначениеЗаполнено(ParentRef) и ParentRef <> "00000000-0000-0000-0000-000000000000" Тогда
			ОбъектДанных.Родитель = Справочники.КСП_ВидыОперацийПоСкладамУПП.ПолучитьСсылку(Новый УникальныйИдентификатор(ParentRef));
		Иначе
			ОбъектДанных.Родитель = Неопределено;
		КонецЕсли;
	КонецЕсли;                                                                                       
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	ОбъектДанных.СкладУПП = СкладУППСсылка;
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;   //
	ОбъектДанных.Записать();
	
	
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции

Функция ЗаполнитьРеквизитыГруппы_ВидыОперацийПоСкладамУПП(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	деф = СтруктураОбъекта.definition;
	
	//ОбъектДанных.Код = деф.code;
	
	ОбъектДанных.Наименование = деф.description;
	ParentRef = "";
	Если деф.parent.Свойство("Ref", ParentRef) Тогда
		Если ЗначениеЗаполнено(ParentRef) и ParentRef <> "00000000-0000-0000-0000-000000000000" Тогда
			ОбъектДанных.Родитель = Справочники.КСП_ВидыОперацийПоСкладамУПП.ПолучитьСсылку(Новый УникальныйИдентификатор(ParentRef));
		Иначе
			ОбъектДанных.Родитель = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ДобавитьЗаписьВМэппингСкладов(СтруктураОбъекта)

	id 	= СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;

	НаименованиеДляМэппинга = деф.Description + ?(ЗначениеЗаполнено(деф.code),", Код: " + деф.code,"");
	
	Если НЕ РегистрыСведений.ксп_МэппингСправочникСклады.ЕстьГУИД(id.Ref, мВнешняяСистема) Тогда
		РегистрыСведений.ксп_МэппингСправочникСклады.ДобавитьГУИД(id.Ref, НаименованиеДляМэппинга, мВнешняяСистема);
		// здесь идеально было бы отправить алерт, чтобы пользователь проставил мэппинг
	КонецЕсли;
	
		
КонецПроцедуры


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	//Сообщить("Загружаем данные!");

	Рез =  ЗагрузитьОбъект(СтруктураОбъекта, json);
	Возврат Рез;
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции


#КонецОбласти 	

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции



мВнешняяСистема = "upp";

ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
