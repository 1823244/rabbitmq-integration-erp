Перем мЛоггер;
Перем мИдВызова;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","22май24-01");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_БП_Справочник_Контрагенты");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_БП_Справочник_Контрагенты");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_БП_Справочник_Контрагенты",
		"Форма_Плагин_RabbitMQ_импорт_из_БП_Справочник_Контрагенты",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта) Экспорт
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт НСИ из БазаПоказов: Контрагенты");

	Если СтруктураОбъекта.Свойство("type") И НЕ НРег(СтруктураОбъекта.type) = "справочник.контрагенты" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
	
		id = СтруктураОбъекта.identification;
		def = СтруктураОбъекта.definition;
		
		СуществующийОбъект = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		
		Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
			ОбъектДанных = Справочники.Контрагенты.СоздатьЭлемент();
			ОбъектДанных.УстановитьНовыйКод();
			СсылкаНового = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);	

			ОбъектДанныхПартнер = Справочники.Партнеры.СоздатьЭлемент();
			ОбъектДанныхПартнер.УстановитьНовыйКод();
			СсылкаНового = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			ОбъектДанныхПартнер.УстановитьСсылкуНового(СсылкаНового);	
		Иначе 
			ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
			Если объектДанных.Партнер = Справочники.Партнеры.ПустаяСсылка() Тогда
				ОбъектДанныхПартнер = Справочники.Партнеры.СоздатьЭлемент(); 
				ОбъектДанныхПартнер.УстановитьНовыйКод();
				СсылкаНового = Справочники.Партнеры.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
				ОбъектДанныхПартнер.УстановитьСсылкуНового(СсылкаНового);	
			Иначе
				ОбъектДанныхПартнер = ОбъектДанных.Партнер.ПолучитьОбъект();
			КонецЕсли;	
		КонецЕсли;   
		
		Если def.ЮрФизЛицо.Свойство("Значение")
			И def.ЮрФизЛицо.Значение = "ФизЛицо" Тогда
			ЗаполнитьРеквизитыИП(def, ОбъектДанных);
		Иначе 
			ЗаполнитьРеквизитыЮрлица(def, ОбъектДанных);
		КонецЕсли;
		
			
		
		ЗаполнитьРеквизитыПартнера(def, ОбъектДанныхПартнер);
		
		ОбъектДанныхПартнер.ОбменДанными.Загрузка = Истина;
		ОбъектДанныхПартнер.Записать(); 

		
		ОбъектДанных.Партнер = ОбъектДанныхПартнер.Ссылка;

		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		
		ОбъектДанных.Записать(); 
		
		ОбъектДанных.ГоловнойКонтрагент = ОбъектДанных.Ссылка;
		
		ОбъектДанных.Записать();  
		
		ЗафиксироватьТранзакцию();

		Возврат ОбъектДанных.Ссылка;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;                                               
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
        мЛоггер.ерр("Плагин: Импорт Контрагенты. Подробности: "+т);
		ВызватьИсключение;// для помещения в retry
	КонецПопытки;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗаполнитьРеквизитыПартнера(def, ОбъектДанныхПартнер)
	
	ОбъектДанныхПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;

	Если def.ЮрФизЛицо.Свойство("Значение")
		И def.ЮрФизЛицо.Значение = "ФизЛицо" Тогда
			ОбъектДанныхПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	КонецЕсли;
	ОбъектДанныхПартнер.НаименованиеПолное = def.НаименованиеПолное;
	ОбъектДанныхПартнер.Наименование = def.description;
	ОбъектДанныхПартнер.Клиент = def.Покупатель;
	ОбъектДанныхПартнер.ДатаРегистрации = def.ДатаГосРегистрации;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗаполнитьРеквизитыИП(def, ОбъектДанных)
	
	//ГоловнойКонтрагент	Контрагент
	//ДополнительнаяИнформация	Строка
	//ДополнительныеРеквизиты	ТабличнаяЧасть
	//ИмяПредопределенныхДанных	Строка
	//ИНН	Строка
	ОбъектДанных.ИНН = def.ИНН;
	//ИсторияКПП	ТабличнаяЧасть
	//ИсторияНаименований	ТабличнаяЧасть
	//КодПоОКПО	Строка
	//КонтактнаяИнформация	ТабличнаяЧасть
	//КПП	Строка
	//Наименование	Строка
	ОбъектДанных.Наименование = def.description;
	//НаименованиеМеждународное	Строка
	ОбъектДанных.НаименованиеПолное = def.НаименованиеПолное;
	//НаименованиеПолное	Строка
	//НалоговыйНомер	Строка
	//НДСПоСтавкам4и2	Булево
	//ОбособленноеПодразделение	Булево
	//Партнер	Партнер
	//ПометкаУдаления	Булево
	ОбъектДанных.ПометкаУдаления = def.DeletionMark;       			
	//Предопределенный	Булево
	//РегистрационныйНомер	Строка
	//Ссылка	Контрагент
	//СтранаРегистрации	Страна мира
	Если def.Страна.Свойство("code") И ЗначениеЗаполнено(def.Страна.code) Тогда
		ОбъектДанных.СтранаРегистрации = Справочники.СтраныМира.НайтиПоКоду(def.Страна.code);
	КонецЕсли;
	//ЮридическоеФизическоеЛицо	Юридическое / физическое лицо
	//ЮрФизЛицо	Юр/Физлицо	
	ОбъектДанных.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ОбъектДанных.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;

		
	Возврат ОбъектДанных;
	
КонецФункции

Функция ЗаполнитьРеквизитыЮрлица(def, ОбъектДанных)
	
	//ГоловнойКонтрагент	Контрагент
	//ДополнительнаяИнформация	Строка
	//ДополнительныеРеквизиты	ТабличнаяЧасть
	//ИмяПредопределенныхДанных	Строка
	//ИНН	Строка
	ОбъектДанных.ИНН = def.ИНН;
	//ИсторияКПП	ТабличнаяЧасть
	//ИсторияНаименований	ТабличнаяЧасть
	//КодПоОКПО	Строка
	//КонтактнаяИнформация	ТабличнаяЧасть
	//КПП	Строка
	ОбъектДанных.КПП = def.КПП;			
	//Наименование	Строка
	ОбъектДанных.Наименование = def.description;
	//НаименованиеМеждународное	Строка
	ОбъектДанных.НаименованиеПолное = def.НаименованиеПолное;
	//НаименованиеПолное	Строка
	//НалоговыйНомер	Строка
	//НДСПоСтавкам4и2	Булево
	//ОбособленноеПодразделение	Булево
	//Партнер	Партнер
	//ПометкаУдаления	Булево
	ОбъектДанных.ПометкаУдаления = def.DeletionMark;       			
	//Предопределенный	Булево
	//РегистрационныйНомер	Строка
	//Ссылка	Контрагент
	//СтранаРегистрации	Страна мира
	Если def.Страна.Свойство("code") И ЗначениеЗаполнено(def.Страна.code) Тогда
		ОбъектДанных.СтранаРегистрации = Справочники.СтраныМира.НайтиПоКоду(def.Страна.code);
	КонецЕсли;
	//ЮридическоеФизическоеЛицо	Юридическое / физическое лицо
	//ЮрФизЛицо	Юр/Физлицо	
	ОбъектДанных.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ОбъектДанных.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;

		
	Возврат ОбъектДанных;
	
КонецФункции

#Область Тестирование


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции


#КонецОбласти 	

// Описание_метода              
//
// Параметры:
//  Параметр1   - Тип1 -
//
Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
    Возврат ЭтотОбъект;
     
КонецФункции

