
Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.2");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Справочник_СкидкиНаценки");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Справочник_СкидкиНаценки");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Справочник_СкидкиНаценки",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Справочник_СкидкиНаценки",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("справочник.СкидкиНаценки") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";

	id 	= СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта 			= "СкидкиНаценки";
	ВидРегистраМэппинга = "ксп_МэппингСправочникСкидкиНаценки";

	//------------------------------------- работа с мэппингом
	
	// Если нашли по мэппингу - выходим.
	// Если такого ГУИДа в регистре еще нет - добавляем
	
	НаименованиеДляМэппинга = деф.Description+?(ЗначениеЗаполнено(деф.code),", Код: "+деф.code,"");
	
	ПоМэппингу = Неопределено;
	Если РегистрыСведений[ВидРегистраМэппинга].ЕстьГУИД(id.Ref, мВнешняяСистема) Тогда
		ПоМэппингу = РегистрыСведений[ВидРегистраМэппинга].ПоМэппингу(id.Ref, мВнешняяСистема);
	Иначе 
		РегистрыСведений[ВидРегистраМэппинга].ДобавитьГУИД(id.Ref, НаименованиеДляМэппинга, мВнешняяСистема);
		// здесь идеально было бы отправить алерт, чтобы пользователь проставил мэппинг
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоМэппингу) Тогда
		Возврат ПоМэппингу;
	КонецЕсли;
	
	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		
		Если деф.Свойство("isFolder") И деф.isFolder = Истина Тогда
			ОбъектДанных = Справочники[ВидОбъекта].СоздатьГруппу();
		Иначе 
			ОбъектДанных = Справочники[ВидОбъекта].СоздатьЭлемент();
		КонецЕсли;
		
		СсылкаНового = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			    
		
		Если деф.Свойство("isFolder") И деф.isFolder = Истина Тогда
			ЗаполнитьРеквизитыГруппы(ОбъектДанных, СтруктураОбъекта, jsonText);
		Иначе 
			ЗаполнитьРеквизитыЭлемента(ОбъектДанных, СтруктураОбъекта, jsonText);
			
			// Созданный элемент добавляем в регистр мэппингов (если есть), т.к. это выглядит логичным для пользователя
			РегистрыСведений[ВидРегистраМэппинга].ДобавитьЗапись(id.Ref, НаименованиеДляМэппинга, мВнешняяСистема, ОбъектДанных.Ссылка);	
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();          		
		Возврат ДанныеСсылка;		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизитыЭлемента(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	//------------------------------------- Заполнение реквизитов
	// кода нет!
	ОбъектДанных.Наименование = деф.Description;	
	
	
	гуид="";
	ЕстьАтрибут = деф.БонуснаяПрограммаЛояльности.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.БонуснаяПрограммаЛояльности = Справочники.БонусныеПрограммыЛояльности.ПолучитьСсылку(деф.БонуснаяПрограммаЛояльности.Ref);
	Иначе
		ОбъектДанных.БонуснаяПрограммаЛояльности = Неопределено;
	КонецЕсли;
	
	
	
	ОбъектДанных.ВалютаПредоставления = Справочники.Валюты.НайтиПоКоду(деф.ВалютаПредоставления);

	//_знч = "";
	//ЕстьЗначение = деф.ВариантОкругления.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ВариантОкругления = деф.ВариантОкругления.Значение;
	//Иначе
	//	ОбъектДанных.ВариантОкругления = Неопределено;
	//КонецЕсли;

	//_знч = "";
	//ЕстьЗначение = деф.ВариантОтбораНоменклатуры.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ВариантОтбораНоменклатуры = деф.ВариантОтбораНоменклатуры.Значение;
	//Иначе
	//	ОбъектДанных.ВариантОтбораНоменклатуры = Неопределено;
	//КонецЕсли;
	
	
	//гуид="";
	//ЕстьАтрибут = деф.ВидКартыЛояльности.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ВидКартыЛояльности = деф.ВидКартыЛояльности.Ref;
	//Иначе
	//	ОбъектДанных.ВидКартыЛояльности = Неопределено;
	//КонецЕсли;
	
	ОбъектДанных.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(деф.ВидЦены, мВнешняяСистема);
	
	ОбъектДанных.ЗначениеСкидкиНаценки = деф.ЗначениеСкидкиНаценки;
	
	//ОбъектДанных.ИспользоватьКратность = деф.ИспользоватьКратность;
	ОбъектДанных.КоличествоПериодовДействия = деф.КоличествоПериодовДействия;
	ОбъектДанных.КоличествоПериодовОтсрочкиНачалаДействия = деф.КоличествоПериодовОтсрочкиНачалаДействия;
	//ОбъектДанных.ОкруглятьВБольшуюСторону = деф.ОкруглятьВБольшуюСторону;
	
	_знч = "";
	ЕстьЗначение = деф.ПериодДействия.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ПериодДействия = деф.ПериодДействия.Значение;
	Иначе
		ОбъектДанных.ПериодДействия = Неопределено;
	КонецЕсли;
	
	_знч = "";
	ЕстьЗначение = деф.ПериодОтсрочкиНачалаДействия.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ПериодОтсрочкиНачалаДействия = деф.ПериодОтсрочкиНачалаДействия.Значение;
	Иначе
		ОбъектДанных.ПериодОтсрочкиНачалаДействия = Неопределено;
	КонецЕсли;
	
	//ОбъектДанных.ПрименятьУмножениеВРамкахВышестоящейГруппы = деф.ПрименятьУмножениеВРамкахВышестоящейГруппы;
	
	//ОбъектДанных.ПсихологическоеОкругление = деф.ПсихологическоеОкругление;
	
	ОбъектДанных.РеквизитДопУпорядочивания = деф.РеквизитДопУпорядочивания;
	
	гуид="";
	ЕстьАтрибут = деф.СегментНоменклатурыПредоставления.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.СегментНоменклатурыОграничения = Справочники.СегментыНоменклатуры.ПолучитьСсылку(деф.СегментНоменклатурыПредоставления.Ref);
	Иначе
		ОбъектДанных.СегментНоменклатурыОграничения = Неопределено;
	КонецЕсли;
	
	//гуид="";
	//ЕстьАтрибут = деф.СегментПодарков.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.СегментПодарков = деф.СегментПодарков.Ref;
	//Иначе
	//	ОбъектДанных.СегментПодарков = Неопределено;
	//КонецЕсли;

	_знч = "";
	ЕстьЗначение = деф.ПериодОтсрочкиНачалаДействия.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.СпособПредоставления = деф.СпособПредоставления.Ref;
		//в ЕРП
		Если _знч = "ВидЦены" Тогда
		ОбъектДанных.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены;
		//Перечисления.СпособыПредоставленияСкидокНаценок.КартаЛояльности
		ИначеЕсли _знч = "КоличествоБонусныхБаллов" Тогда
			ОбъектДанных.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Количество
		//Перечисления.СпособыПредоставленияСкидокНаценок.ОкруглениеСуммы
		ИначеЕсли _знч = "Подарок" Тогда
			ОбъектДанных.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок;
		ИначеЕсли _знч = "Процент" Тогда
			ОбъектДанных.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент;
		ИначеЕсли _знч = "Сообщение" Тогда
			ОбъектДанных.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение;
		ИначеЕсли _знч = "Сумма" Тогда
			ОбъектДанных.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма;
		//Перечисления.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки
		ИначеЕсли _знч = "ЗапретРозничнойПродажи" Тогда
		ИначеЕсли _знч = "ПроцентОтСуммыПредыдущейПокупки" Тогда
		ИначеЕсли _знч = "ПроцентОтСуммыВВидеБонусныхБаллов" Тогда
		ИначеЕсли _знч = "ВнешняяОбработка" Тогда
		
		КонецЕсли;		
		
	Иначе
		ОбъектДанных.СпособПредоставления = Неопределено;
	КонецЕсли;
	
	//_знч = "";
	//ЕстьЗначение = деф.СпособПримененияСкидки.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.СпособПримененияСкидки = деф.СпособПримененияСкидки.Значение;
	//Иначе
	//	ОбъектДанных.СпособПримененияСкидки = Неопределено;
	//КонецЕсли;

	ОбъектДанных.ТекстСообщения = деф.ТекстСообщения;
	//ОбъектДанных.ТочностьОкругления = деф.ТочностьОкругления;
	ОбъектДанных.Управляемая = деф.Управляемая;
	//ОбъектДанных.УсловиеДляСкидкиКоличеством = деф.УсловиеДляСкидкиКоличеством;
	//ОбъектДанных.УстановленДополнительныйОтбор = деф.УстановленДополнительныйОтбор;
	//ОбъектДанных.УчитыватьХарактеристики = деф.УчитыватьХарактеристики;

	

	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции

Функция ЗаполнитьРеквизитыГруппы(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	деф = СтруктураОбъекта.definition;
	
	_знч = "";
	
	ЕстьЗначение = ТипЗнч(деф.ВариантСовместногоПрименения) = Тип("Структура")
		И деф.ВариантСовместногоПрименения.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		Если _знч = "Вытеснение" Тогда
			ОбъектДанных.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение;
		ИначеЕсли _знч = "Минимум" Тогда
			ОбъектДанных.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум;
		ИначеЕсли _знч = "Максимум" Тогда
			ОбъектДанных.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум;
		ИначеЕсли _знч = "Сложение" Тогда
			ОбъектДанных.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение;
		ИначеЕсли _знч = "ПоследовательноеПрименение" Тогда
			ОбъектДанных.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение;
		КонецЕсли;
	Иначе 
		ОбъектДанных.ВариантСовместногоПрименения = Неопределено;
		
	КонецЕсли;

	ОбъектДанных.РеквизитДопУпорядочивания = деф.РеквизитДопУпорядочивания;
	
	//_знч = "";
	//ЕстьЗначение = деф.ВариантРасчетаРезультатаСовместногоПрименения.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ВариантРасчетаРезультатаСовместногоПрименения = деф.ВариантРасчетаРезультатаСовместногоПрименения.Значение;
	//Иначе
	//	ОбъектДанных.ВариантРасчетаРезультатаСовместногоПрименения = Неопределено;
	//КонецЕсли;

	
	
	
	
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Справочники_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции






	
#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта, json);
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции


#КонецОбласти 	

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции



мВнешняяСистема = "retail";

