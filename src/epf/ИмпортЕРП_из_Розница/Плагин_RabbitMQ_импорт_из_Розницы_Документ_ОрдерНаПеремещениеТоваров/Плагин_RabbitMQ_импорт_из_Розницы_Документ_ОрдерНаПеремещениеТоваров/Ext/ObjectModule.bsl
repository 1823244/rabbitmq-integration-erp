Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.4");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОрдерНаПеремещениеТоваров");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОрдерНаПеремещениеТоваров");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОрдерНаПеремещениеТоваров",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОрдерНаПеремещениеТоваров",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	




// ///////////   ИМПОРТ  В ЗаказНаПеремещение ////////////

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.ОрдерНаПеремещениеТоваров") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта = "ЗаказНаПеремещение";

	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	//------------------------------------- Отмена проведения
	Попытка			
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в отмены проведения: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;	

	//------------------------------------- Заполнение реквизитов
	ЗаказНаПеремещение = Неопределено;
	Попытка			
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText);		
		
		ЗаказНаПеремещение = ОбъектДанных.Ссылка;
		
		СоздатьРасходныйОрдерНаТовары(ЗаказНаПеремещение);
		СоздатьПеремещениеТоваров(ЗаказНаПеремещение);
		
		ЗафиксироватьТранзакцию();          		
		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ЗаказНаПеремещение;
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



	//гуид="";
	//ЕстьАтрибут = деф.Автор.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Автор = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Автор.Ref ) );
	//Иначе
	//	ОбъектДанных.Автор = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Автор = ксп_ИмпортСлужебный.НайтиАвтор(деф.Автор);

	//_знч = "";
	//ЕстьЗначение = деф.ВариантПриемкиТоваров.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ВариантПриемкиТоваров = деф.ВариантПриемкиТоваров.Значение;
	//Иначе
	//	ОбъектДанных.ВариантПриемкиТоваров = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ВариантПриемкиТоваров = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантПриемкиТоваров(деф.ВариантПриемкиТоваров);
	ОбъектДанных.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	
	//------- 					ДокументОснование
	// типы ЕРП
//ВнутреннееПотребление
//ДвижениеПродукцииИМатериалов
//ЗаказКлиента
//ЗаказМатериаловВПроизводство
//ЗаказНаВнутреннееПотребление
//ЗаказНаСборку
//ЗаявкаНаВозвратТоваровОтКлиента
//ПередачаМатериаловВПроизводство
//ПоступлениеТоваровНаСклад
//ПриемкаТоваровНаХранение
//ПриобретениеТоваровУслуг    

	// типы Розницы
//ВозвратИзРегистра2ЕГАИС
//ЗаказНаПеремещение
//ИзменениеАссортимента
//ОприходованиеТоваров
//ПередачаТоваровМеждуОрганизациями
//ПеремещениеТоваров
//ПоступлениеТоваров	

	//гуид="";
	//ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ДокументОснование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДокументОснование.Ref ) );
	//Иначе
	//	ОбъектДанных.ДокументОснование = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ДокументОснование = ксп_ИмпортСлужебный.НайтиДокументОснование(деф.ДокументОснование);

	//ОбъектДанных.ЖелаемаяДатаПоступления = деф.ЖелаемаяДатаПоступления;

	ОбъектДанных.Комментарий = деф.Комментарий;

	//гуид="";
	//ЕстьАтрибут = деф.Назначение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Назначение.Ref ) );
	//Иначе
	//	ОбъектДанных.Назначение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(деф.Назначение);

	//гуид="";
	//ЕстьАтрибут = деф.НаправлениеДеятельности.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.НаправлениеДеятельности = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.НаправлениеДеятельности.Ref ) );
	//Иначе
	//	ОбъектДанных.НаправлениеДеятельности = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.НаправлениеДеятельности = ксп_ИмпортСлужебный.НайтиНаправлениеДеятельности(деф.НаправлениеДеятельности);

	//ОбъектДанных.ОбосабливатьПоНазначениюЗаказа = деф.ОбосабливатьПоНазначениюЗаказа;

	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

	// нет в источнике
	//гуид="";
	//ЕстьАтрибут = деф.ОрганизацияПолучатель.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ОрганизацияПолучатель = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.ОрганизацияПолучатель, мВнешняяСистема);
	//Иначе
	//	ОбъектДанных.ОрганизацияПолучатель = Неопределено;
	//КонецЕсли;

	//ОбъектДанных.ОсобыеУсловияПеревозки = деф.ОсобыеУсловияПеревозки;

	//ОбъектДанных.ОсобыеУсловияПеревозкиОписание = деф.ОсобыеУсловияПеревозкиОписание;

	//гуид="";
	//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
	ОбъектДанных.Ответственный = Пользователи.ТекущийПользователь();
	//Иначе
	//	ОбъектДанных.Ответственный = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);

	//гуид="";
	//ЕстьАтрибут = деф.ПеревозчикПартнер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ПеревозчикПартнер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ПеревозчикПартнер.Ref ) );
	//Иначе
	//	ОбъектДанных.ПеревозчикПартнер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ПеревозчикПартнер = ксп_ИмпортСлужебный.НайтиПеревозчикПартнер(деф.ПеревозчикПартнер);

	//_знч = "";
	//ЕстьЗначение = деф.ПеремещениеПодДеятельность.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ПеремещениеПодДеятельность = деф.ПеремещениеПодДеятельность.Значение;
	//Иначе
	//	ОбъектДанных.ПеремещениеПодДеятельность = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ПеремещениеПодДеятельность = ксп_ИмпортСлужебный.НайтиПеречисление_ПеремещениеПодДеятельность(деф.ПеремещениеПодДеятельность);

	//гуид="";
	//ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Подразделение.Ref ) );
	//Иначе
	//	ОбъектДанных.Подразделение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(деф.Подразделение);

	ОбъектДанных.Приоритет = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("ПриоритетЗаказаНаПеремещение_ИмпортПеремещенияИзРозница", мВнешняяСистема);

	//гуид="";
	//ЕстьАтрибут = деф.Сделка.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Сделка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Сделка.Ref ) );
	//Иначе
	//	ОбъектДанных.Сделка = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Сделка = ксп_ИмпортСлужебный.НайтиСделка(деф.Сделка);

	ОбъектДанных.СкладОтправитель = ксп_ИмпортСлужебный.НайтиСклад(деф.СкладОтправитель, мВнешняяСистема);
	ОбъектДанных.СкладПолучатель = ксп_ИмпортСлужебный.НайтиСклад(деф.СкладПолучатель, мВнешняяСистема);

	//_знч = "";
	//ЕстьЗначение = деф.СостояниеЗаполненияМногооборотнойТары.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = деф.СостояниеЗаполненияМногооборотнойТары.Значение;
	//Иначе
	//	ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = ксп_ИмпортСлужебный.НайтиПеречисление_СостояниеЗаполненияМногооборотнойТары(деф.СостояниеЗаполненияМногооборотнойТары);

	//_знч = "";
	//ЕстьЗначение = деф.СпособДоставки.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.СпособДоставки = деф.СпособДоставки.Значение;
	//Иначе
	//	ОбъектДанных.СпособДоставки = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СпособДоставки = ксп_ИмпортСлужебный.НайтиПеречисление_СпособДоставки(деф.СпособДоставки);

	ОбъектДанных.Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;

	ОбъектДанных.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.ПеремещениеТоваров;




	//------------------------------------------------------     ТЧ Товары



	ОбъектДанных.Товары.Очистить();


	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();


		СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		
		//_знч = "";
		//ЕстьЗначение = стрк.ВариантОбеспеченияДоИзмененияОбновлениемИБ.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	СтрокаТЧ.ВариантОбеспеченияДоИзмененияОбновлениемИБ = стрк.ВариантОбеспеченияДоИзмененияОбновлениемИБ.Значение;
		//Иначе
		//	СтрокаТЧ.ВариантОбеспеченияДоИзмененияОбновлениемИБ = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.ВариантОбеспеченияДоИзмененияОбновлениемИБ = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантОбеспеченияДоИзмененияОбновлениемИБ(стрк.ВариантОбеспеченияДоИзмененияОбновлениемИБ);

		//СтрокаТЧ.КодСтроки = стрк.КодСтроки;

		СтрокаТЧ.Количество = стрк.Количество;

		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

		//гуид="";
		//ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
		//Иначе
		//	СтрокаТЧ.Назначение = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);
		
		// без включенного флага "ИспользоватьДлительностьПеремещения" это будет колонка с заголовком "Дата отгрузки"
		СтрокаТЧ.НачалоОтгрузки = ОбъектДанных.Дата;

		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);

		//гуид="";
		//ЕстьАтрибут = стрк.НоменклатураНабора.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.НоменклатураНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураНабора.Ref ) );
		//Иначе
		//	СтрокаТЧ.НоменклатураНабора = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.НоменклатураНабора = ксп_ИмпортСлужебный.НайтиНоменклатураНабора(стрк.НоменклатураНабора);

		//СтрокаТЧ.Обособленно = стрк.Обособленно;

		//СтрокаТЧ.ОкончаниеПоступления = стрк.ОкончаниеПоступления;

		//СтрокаТЧ.Отменено = стрк.Отменено;

		//гуид="";
		//ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
		//Иначе
		//	СтрокаТЧ.Серия = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);

		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);

		//гуид="";
		//ЕстьАтрибут = стрк.ХарактеристикаНабора.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.ХарактеристикаНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаНабора.Ref ) );
		//Иначе
		//	СтрокаТЧ.ХарактеристикаНабора = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.ХарактеристикаНабора = ксп_ИмпортСлужебный.НайтиХарактеристикаНабора(стрк.ХарактеристикаНабора);

	КонецЦикла;

	//------------------------------------------------------     ТЧ ДополнительныеРеквизиты



	//ОбъектДанных.ДополнительныеРеквизиты.Очистить();


	//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
	//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ДополнительныеРеквизиты.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Значение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Свойство = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);

	//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

	//КонецЦикла;




	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции



// ///////////   Расходный Ордер на товары ////////////

// Описание_метода
//
// Параметры:
//	ЗаказНаПеремещение 	- ДокументСсылка.ЗаказыНаПеремещение - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьРасходныйОрдерНаТовары(ЗаказНаПеремещение) Экспорт
	
	ИскомыйДокумент = НайтиПодчиненныйРО(ЗаказНаПеремещение);
	
	Если НЕ ЗначениеЗаполнено(ИскомыйДокумент) Тогда
		ОбъектДанных = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
	Иначе 
		ОбъектДанных = ИскомыйДокумент.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектДанных.Проведен Тогда
		ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	ЗаполнитьРеквизитыРО(ОбъектДанных, ЗаказНаПеремещение);
	
	
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	СтруктураОбъекта = Неопределено;
	jsonText = Неопределено;
	
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	
	
	
	Возврат ОбъектДанных.Ссылка;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиПодчиненныйРО(ЗаказНаПеремещение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Док_.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК Док_
		|ГДЕ
		|	Док_.Распоряжение = &ЗаказНаПеремещение";
	
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат Неопределено;
	
КонецФункции

Функция ЗаполнитьРеквизитыРО(ОбъектДанных, ЗаказНаПеремещение) Экспорт

	jsonText = "";
	СтруктураОбъекта = Неопределено;
	
	
	ОбъектДанных.Дата 					= ЗаказНаПеремещение.Дата;
	ОбъектДанных.Склад 					= ЗаказНаПеремещение.СкладОтправитель;
	ОбъектДанных.Статус 				= Перечисления.СтатусыРасходныхОрдеров.КОтгрузке;
	ОбъектДанных.СкладскаяОперация 		= Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
	ОбъектДанных.Получатель				= ЗаказНаПеремещение.СкладПолучатель;
	ОбъектДанных.ДатаОтгрузки 			= ЗаказНаПеремещение.Дата;
	ОбъектДанных.Приоритет 				= РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ПриоритетРасходногоОрдераНаТоварыИзРозница", мВнешняяСистема);
	
	ОбъектДанных.ТоварыПоРаспоряжениям.Очистить();
	Для каждого стрк Из ЗаказНаПеремещение.Товары Цикл
		НовСтр = ОбъектДанных.ТоварыПоРаспоряжениям.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, стрк);
		НовСтр.Распоряжение = ЗаказНаПеремещение;
	КонецЦикла;	
	
	ОбъектДанных.ОтгружаемыеТовары.Очистить();
	Для каждого стрк Из ЗаказНаПеремещение.Товары Цикл
		НовСтр = ОбъектДанных.ОтгружаемыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, стрк);
		НовСтр.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	КонецЦикла;	
	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции



// ///////////   Перемещение товаров ////////////


// Описание_метода
//
// Параметры:
//	ЗаказНаПеремещение 	- ДокументСсылка.ЗаказыНаПеремещение - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПеремещениеТоваров(ЗаказНаПеремещение) Экспорт
		
	
	ИскомыйДокумент = НайтиПодчиненныйПеремещение(ЗаказНаПеремещение);
	
	Если НЕ ЗначениеЗаполнено(ИскомыйДокумент) Тогда
		ОбъектДанных = Документы.ПеремещениеТоваров.СоздатьДокумент();
	Иначе 
		ОбъектДанных = ИскомыйДокумент.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбъектДанных.Проведен Тогда
		ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	ЗаполнитьРеквизитыПеремещение(ОбъектДанных, ЗаказНаПеремещение);
	
	
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	СтруктураОбъекта = Неопределено;
	jsonText = Неопределено;
	
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	
	
	
	Возврат ОбъектДанных.Ссылка;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиПодчиненныйПеремещение(ЗаказНаПеремещение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док_.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК Док_
		|ГДЕ
		|	Док_.ЗаказНаПеремещение = &ЗаказНаПеремещение";
	
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	Возврат Неопределено;
	
КонецФункции

Функция ЗаполнитьРеквизитыПеремещение(ОбъектДанных, ЗаказНаПеремещение) Экспорт

	jsonText = "";
	СтруктураОбъекта = Неопределено;
	
	ЗаполнитьЗначенияСвойств(ОбъектДанных, ЗаказНаПеремещение,,"Номер");
	
	ОбъектДанных.Дата 					= ЗаказНаПеремещение.Дата;
	ОбъектДанных.СкладОтправитель 		= ЗаказНаПеремещение.СкладОтправитель;
	ОбъектДанных.СкладПолучатель 		= ЗаказНаПеремещение.СкладПолучатель;
	ОбъектДанных.ЗаказНаПеремещение		= ЗаказНаПеремещение;
	ОбъектДанных.Статус 				= Перечисления.СтатусыПеремещенийТоваров.Принято;
	ОбъектДанных.ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ОбъектДанных.ПеремещениеПоЗаказам	= Истина;
	
	ОбъектДанных.Товары.Очистить();
	Для каждого стрк Из ЗаказНаПеремещение.Товары Цикл
		НовСтр = ОбъектДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, стрк);
		НовСтр.ЗаказНаПеремещение = ЗаказНаПеремещение;// ЕНС. а надо ли это?
	КонецЦикла;	
	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции






#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Возврат XMLЗначение(Тип("Число"),Значение);
		Иначе 
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("СкладОтправитель");
	//мРеквизиты.Добавить("СкладПолучатель");
	//мРеквизиты.Добавить("Организация");
	////мРеквизиты.Добавить("ОрганизацияПолучатель");
	//мРеквизиты.Добавить("Ответственный");
	Возврат мРеквизиты;
	
КонецФункции





мВнешняяСистема = "retail";

