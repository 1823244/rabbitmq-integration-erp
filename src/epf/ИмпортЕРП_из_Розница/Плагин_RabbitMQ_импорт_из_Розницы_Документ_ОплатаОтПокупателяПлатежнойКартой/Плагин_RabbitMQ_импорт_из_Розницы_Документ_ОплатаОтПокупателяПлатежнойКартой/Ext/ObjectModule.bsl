Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОплатаОтПокупателяПлатежнойКартой");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОплатаОтПокупателяПлатежнойКартой");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОплатаОтПокупателяПлатежнойКартой",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_ОплатаОтПокупателяПлатежнойКартой",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.оплатаотпокупателяплатежнойкартой") Тогда
		Возврат Неопределено;
	КонецЕсли;
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	СуществующийОбъект = Документы.ОперацияПоПлатежнойКарте.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		
	Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
		СсылкаНового = Документы.ОперацияПоПлатежнойКарте.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	Иначе 
		// а вот здесь вопрос - надо обновлять документ или нет?
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
		


	//-------------------- ЗАПОЛНЕНИЕ РЕКВИЗИТОВ

	ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = id.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



	//гуид="";
	//ЕстьАтрибут = деф.Автор.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Автор = деф.Автор.Ref;
	//Иначе
	//	ОбъектДанных.Автор = Неопределено;
	//КонецЕсли;
	
	//гуид="";
	//ЕстьАтрибут = деф.АналитикаРасходов.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.АналитикаРасходов = деф.АналитикаРасходов.Ref;
	//Иначе
	//	ОбъектДанных.АналитикаРасходов = Неопределено;
	//КонецЕсли;
	
	//гуид="";
	//ЕстьАтрибут = деф.Валюта.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Валюта = деф.Валюта.Ref;
	//Иначе
	//	ОбъектДанных.Валюта = Неопределено;
	//КонецЕсли;
	ОбъектДанных.Валюта = константы.ВалютаРегламентированногоУчета.Получить();
	
	//гуид="";
	//ЕстьАтрибут = деф.ГруппаФинансовогоУчета.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ГруппаФинансовогоУчета = деф.ГруппаФинансовогоУчета.Ref;
	//Иначе
	//	ОбъектДанных.ГруппаФинансовогоУчета = Неопределено;
	//КонецЕсли;
	
	//гуид="";
	//ЕстьАтрибут = деф.Договор.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Договор = деф.Договор.Ref;
	//Иначе
	//	ОбъектДанных.Договор = Неопределено;
	//КонецЕсли;
	
	//гуид="";
	//ЕстьАтрибут = деф.ДоговорЭквайринга.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ДоговорЭквайринга = деф.ДоговорЭквайринга.Ref;
	//Иначе
	//	ОбъектДанных.ДоговорЭквайринга = Неопределено;
	//КонецЕсли;

	//гуид="";
	//ЕстьАтрибут = деф.ЗаявкаНаРасходованиеДенежныхСредств.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ЗаявкаНаРасходованиеДенежныхСредств = деф.ЗаявкаНаРасходованиеДенежныхСредств.Ref;
	//Иначе
	//	ОбъектДанных.ЗаявкаНаРасходованиеДенежныхСредств = Неопределено;
	//КонецЕсли;

	//ОбъектДанных.ИдентификаторДокумента = деф.ИдентификаторДокумента;

	ОбъектДанных.Исправление = ложь;

	//гуид="";
	//ЕстьАтрибут = деф.ИсправляемыйДокумент.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ИсправляемыйДокумент = деф.ИсправляемыйДокумент.Ref;
	//Иначе
	//	ОбъектДанных.ИсправляемыйДокумент = Неопределено;
	//КонецЕсли;

	//ОбъектДанных.КодАвторизации = деф.КодАвторизации;

	ОбъектДанных.Комментарий = деф.Комментарий;

	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	
	ОбъектДанных.НалогообложениеНДС = перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		
	//гуид="";
	//ЕстьАтрибут = деф.НаправлениеДеятельности.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.НаправлениеДеятельности = деф.НаправлениеДеятельности.Ref;
	//Иначе
	//	ОбъектДанных.НаправлениеДеятельности = Неопределено;
	//КонецЕсли;
	
	ОбъектДанных.НеКонтролироватьЗаполнениеЗаявки = Истина;
	
	ОбъектДанных.НомерПлатежнойКарты = деф.НомерПлатежнойКарты;
	
	//гуид="";
	//ЕстьАтрибут = деф.ОбъектРасчетов.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ОбъектРасчетов = деф.ОбъектРасчетов.Ref;
	//Иначе
	//	ОбъектДанных.ОбъектРасчетов = Неопределено;
	//КонецЕсли;

	ОбъектДанных.ОплатаВыполнена = деф.ОплатаВыполнена;

	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

	//гуид="";
	//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Ответственный = деф.Ответственный.Ref;
	//Иначе
	//	ОбъектДанных.Ответственный = Неопределено;
	//КонецЕсли;

	Если деф.СуммаКомиссии <> 0 Тогда
		ОбъектДанных.ОтражатьКомиссию = Истина;
	Иначе 
		ОбъектДанных.ОтражатьКомиссию = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДанных.контрагент) Тогда
		ОбъектДанных.Партнер = ОбъектДанных.Контрагент.Партнер;
	КонецЕсли;
	
	//гуид="";
	//ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Подразделение = деф.Подразделение.Ref;
	//Иначе
	//	ОбъектДанных.Подразделение = Неопределено;
	//КонецЕсли;

	ОбъектДанных.РазрешеныПлатежиБезУказанияЗаявок = Истина;

	ОбъектДанных.СтатьяДвиженияДенежныхСредств = справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	
	//гуид="";
	//ЕстьАтрибут = деф.СтатьяРасходов.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.СтатьяРасходов = деф.СтатьяРасходов.Ref;
	//Иначе
	//	ОбъектДанных.СтатьяРасходов = Неопределено;
	//КонецЕсли;
	
	//гуид="";
	//ЕстьАтрибут = деф.СторнируемыйДокумент.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.СторнируемыйДокумент = деф.СторнируемыйДокумент.Ref;
	//Иначе
	//	ОбъектДанных.СторнируемыйДокумент = Неопределено;
	//КонецЕсли;

	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;

	ОбъектДанных.СуммаКомиссии = деф.СуммаКомиссии;

	ОбъектДанных.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;

	гуид="";
	ЕстьАтрибут = деф.ЭквайринговыйТерминал.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ЭквайринговыйТерминал = ксп_ИмпортСлужебный.НайтиЭквайринговыйТерминал(деф.ЭквайринговыйТерминал, мВнешняяСистема);
	Иначе
		ОбъектДанных.ЭквайринговыйТерминал = Неопределено;
	КонецЕсли;

	


	////------------------------------------------------------     ТЧ РасшифровкаПлатежа



	ОбъектДанных.РасшифровкаПлатежа.Очистить();
	
	Для сч = 0 По деф.ТЧРасшифровкаПлатежа.Количество()-1 Цикл

		стрк = деф.ТЧРасшифровкаПлатежа[сч];

		СтрокаТЧ = ОбъектДанных.РасшифровкаПлатежа.Добавить();
		
		СтрокаТЧ.ВалютаВзаиморасчетов =  Константы.ВалютаРегламентированногоУчета.Получить();
		СтрокаТЧ.ИдентификаторСтроки =  Неопределено;
		СтрокаТЧ.КурсЗнаменательВзаиморасчетов =  1;
		СтрокаТЧ.КурсЧислительВзаиморасчетов =  1;
		СтрокаТЧ.ОбъектРасчетов =  Неопределено;
		СтрокаТЧ.ОснованиеПлатежа =  Неопределено;
		СтрокаТЧ.Партнер =  Неопределено;
		СтрокаТЧ.СтавкаНДС =  Неопределено;
		СтрокаТЧ.СтатьяДвиженияДенежныхСредств =  Неопределено;
		СтрокаТЧ.Сумма =  стрк.сумма;
		СтрокаТЧ.СуммаВзаиморасчетов =  Неопределено;
		СтрокаТЧ.СуммаНДС =  Неопределено;


	КонецЦикла;


	//------------------------------------------------------ ФИНАЛ
		
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	

	Возврат ОбъектДанных.Ссылка;


КонецФункции




#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиЗаказНаПеремещение(УзелДокументОснование)
	
	гуид="";
	ЕстьАтрибут = УзелДокументОснование.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ДокументОснование = Документы.ЗаказНаПеремещение.ПолучитьСсылку(
			Новый УникальныйИдентификатор(гуид));
		Возврат ДокументОснование;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции


 мВнешняяСистема = "retail";
 
 