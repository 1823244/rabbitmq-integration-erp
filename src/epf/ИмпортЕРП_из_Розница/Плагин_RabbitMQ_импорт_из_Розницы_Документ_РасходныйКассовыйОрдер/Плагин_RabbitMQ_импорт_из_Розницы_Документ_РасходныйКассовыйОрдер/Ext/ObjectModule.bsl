Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_РасходныйКассовыйОрдер");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_РасходныйКассовыйОрдер");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_РасходныйКассовыйОрдер",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_РасходныйКассовыйОрдер",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//	jsonText 			- строка - оригинальное сообщение из брокера
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект_пример(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = "документ.отчеторозничныхпродажах" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	СуществующийОбъект = Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		
	Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		СсылкаНового = Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	Иначе 
		// а вот здесь вопрос - надо обновлять документ или нет?
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
		
	ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = id.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	//Реквизит	Тип	Вид
	//Валюта	Справочник	Валюты
	ОбъектДанных.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	//ВидЦены	Справочник	ВидыЦен
	ОбъектДанных.ВидЦены = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("ДокументОтчетОРозничныхПродажах_ВидЦены", мВнешняяСистема); //нет в Рознице
	
	//ВидыЗапасовУказаныВручную	Булево	
	ОбъектДанных.ВидыЗапасовУказаныВручную = Ложь; //что это такое? что-то связано с ТЧ "ВидыЗапасов"
	
	//ГлавныйБухгалтер	Справочник	ОтветственныеЛицаОрганизаций
	ОбъектДанных.ГлавныйБухгалтер = Неопределено;
	
	//ГруппаФинансовогоУчета	Справочник	ГруппыФинансовогоУчетаРасчетов
	ОбъектДанных.ГруппаФинансовогоУчета = Неопределено;
	
	//ЕстьМаркируемаяПродукцияГИСМ	Булево	
	ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ = Неопределено;  //todo Доделать
	
	//ИдентификаторДокумента	Строка	
	ОбъектДанных.ИдентификаторДокумента = Неопределено; //на что это влияет? где используется?
	
	//КассаККМ	Справочник	КассыККМ
	ОбъектДанных.КассаККМ = ксп_ИмпортСлужебный.НайтиКассуККМ(деф.КассаККМ); 
	
	//КассоваяСмена	Документ	КассоваяСмена
	ОбъектДанных.КассоваяСмена = Неопределено;
	
	//Комментарий	Строка	
	ОбъектДанных.Комментарий = деф.Комментарий;
	
	//Контрагент	Справочник	Контрагенты
	ОбъектДанных.Контрагент = Неопределено; // нет в источнике
	
	// todo уточнить у аналитика
	//НалогообложениеНДС	Перечисление	ТипыНалогообложенияНДС
	ОбъектДанных.НалогообложениеНДС = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("ДокументОтчетОРозничныхПродажах_НалогообложениеНДС", мВнешняяСистема); //нет в Рознице
	
	//НаправлениеДеятельности	Справочник	НаправленияДеятельности
	
	//Организация	Справочник	Организации
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	
	//ОрганизацияЕГАИС	Справочник	КлассификаторОрганизацийЕГАИС
	
	//Ответственный	Справочник	Пользователи
	ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию();
	
	//Подразделение	Справочник	СтруктураПредприятия
	
	//ПоРезультатамИнвентаризации	Булево	
	
	// todo уточнить у аналитика
	//ПорядокРасчетов	Перечисление	ПорядокРасчетов
	ОбъектДанных.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	
	//Руководитель	Справочник	ОтветственныеЛицаОрганизаций
	
	//Склад	Справочник	Склады
	ОбъектДанных.Склад = РегистрыСведений.ксп_МэппингМагазинСклад.ПоМэппингу(деф.Магазин, мВнешняяСистема);
	
	// todo насколько это важно? если будет несколько форм оплат, будут ли эти документы
	// разделены по ним в источнике?
	//ФормаОплаты	Перечисление	ФормыОплаты
	ОбъектДанных.ФормаОплаты = перечисления.ФормыОплаты.Наличная;
		    
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
		
	ОбъектДанных.Комментарий = деф.Комментарий;
	
	
	//ПользовательГУИД = ""; 
	//Если деф.Автор.Свойство("Ref", ПользовательГУИД) Тогда
	//	ОбъектДанных.Ответственный = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ПользовательГУИД));
	//КонецЕсли;
	
	
	
	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	
	//ОбъектДанных.УчитыватьНДС = ксп_ИмпортСлужебный.УчитыватьНДС(деф.НалогообложениеНДС);
	
	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;	
	

	
	
	
	
	
	
	
	
	
	
	
	//---------------------------------------------ТЧ ТОВАРЫ
	
	
	
	ОбъектДанных.Товары.Очистить();

	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		НовСтр = ОбъектДанных.Товары.Добавить();    
		
				
		// не надо АналитикаУчетаНаборов	Справочник	КлючиАналитикиУчетаНаборов
		//ДокументРеализации	Документ	ОтчетОРозничныхПродажах
		//ИдентификаторСтроки	Строка	
		//Количество	Число	
		НовСтр.Количество = стрк.Количество;
		//КоличествоУпаковок	Число	
		НовСтр.КоличествоУпаковок = стрк.КоличествоУпаковок;
		//КоличествоУпаковокУчет	Число	
		НовСтр.КоличествоУпаковокУчет = стрк.КоличествоУпаковок;
		//КоличествоУпаковокФакт	Число	
		НовСтр.КоличествоУпаковокФакт = стрк.КоличествоУпаковок;
		//Номенклатура	Справочник	Номенклатура        
		НовСтр.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		//не надо НоменклатураНабора	Справочник	Номенклатура
		//Партнер	Справочник	Партнеры
		//Помещение	Справочник	СкладскиеПомещения
		//ПоЧекуКоррекции	Булево	
		//Продавец	Справочник	Пользователи
		//ПроцентРучнойСкидки	Число	
		//Серия	Справочник	СерииНоменклатуры
		//СтавкаНДС	Справочник	СтавкиНДС
		НовСтр.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюРозницы(стрк.СтавкаНДС);
		//СтатусУказанияСерий	Число	
		//Сумма	Число	
		НовСтр.Сумма = стрк.Сумма;
		//СуммаНДС	Число	     
		НовСтр.СуммаНДС = стрк.СуммаНДС;
		//СуммаРучнойСкидки	Число		
		//Упаковка	Справочник	УпаковкиЕдиницыИзмерения
		НовСтр.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);
		//Характеристика	Справочник	ХарактеристикиНоменклатуры
		НовСтр.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);
		//не надо ХарактеристикаНабора	Справочник	ХарактеристикиНоменклатуры
		//Цена	Число			
		НовСтр.Цена = стрк.Цена;		

		новСтр.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиСоздатьКлючАналитикиНом(
			новстр.Номенклатура, ОбъектДанных.Склад);
		
	КонецЦикла;
	

	
	////---------------------------------------------ТЧ ОплатаПлатежнымиКартами	
	//
	//ОбъектДанных.ОплатаПлатежнымиКартами.Очистить();

	//Для счТовары = 0 По деф.ТЧОплатаПлатежнымиКартами.Количество()-1 Цикл
	//	стрк = деф.ТЧОплатаПлатежнымиКартами[счТовары];
	//	НовСтр = ОбъектДанных.ОплатаПлатежнымиКартами.Добавить();    
	//	
	//	//НовСтр.ВидОплаты	Перечисление	ТипыПлатежнойСистемыККТ
	//	_ВидОплатыРозница = "";
	//
	//	Если def.ВидОплаты.Свойство("Значение", _ВидОплатыРозница) Тогда
	//		Если _ВидОплатыРозница = "ФискальныйРегистратор" Тогда
	//			ОбъектДанных.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
	//		ИначеЕсли _ТипКассы = "АвтономнаяККМ" Тогда
	//			ОбъектДанных.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
	//		ИначеЕсли _ТипКассы = "ККМOffline" Тогда
	//			ОбъектДанных.ТипКассы = Перечисления.ТипыКассККМ.ККМOffline;                          
	//		ИначеЕсли _ТипКассы = "ККМED" Тогда
	//			ОбъектДанных.ТипКассы = Перечисления.ТипыКассККМ.АвтономноеРМК;
	//			
	//		КонецЕсли;
	//	КонецЕсли;
	//	//НовСтр.ДоговорПодключения	Справочник	ДоговорыЭквайринга
	//	//НовСтр.ИдентификаторСтроки	Строка	
	//	//НовСтр.КодАвторизации	Строка	
	//	//НовСтр.НомерПлатежнойКарты	Строка	
	//	НовСтр.Сумма	= стрк.сумма;	
	//	//НовСтр.ЭквайринговыйТерминал	Справочник	ЭквайринговыеТерминалы  
	//	
	//	// розница:
	//	//Реквизит	Тип	Вид
	//	//ВидОплаты	Справочник	ВидыОплатЧекаККМ
	//	//ДоговорКонтрагента	Справочник	ДоговорыКонтрагентов
	//	//ПроцентКомиссии	Число	
	//	//+Сумма	Число	
	//	//СуммаКомиссии	Число	
	//	//ЭквайринговыйТерминал	Справочник	ЭквайринговыеТерминалы		
	//		
	//КонецЦикла;
		
		



	
		
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	
	ОбъектДанных.Записать();

	
	// сохранить исходное сообщение
	
//	РегистрыСведений.ксп_ИсходныеДанныеСообщений.ДобавитьЗапись(ОбъектДанных.Ссылка, jsonText);
	
	
	// добавить документ в РС для проведения
	
	ксп_ИмпортСлужебный.ПроверитьКачествоДанных(ОбъектДанных, ЭтотОбъект);
	
	

	Возврат ОбъектДанных.Ссылка;
	
КонецФункции



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.расходныйкассовыйордер") Тогда
		Возврат Неопределено;
	КонецЕсли;
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	СуществующийОбъект = Документы.РасходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		
	Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
		СсылкаНового = Документы.РасходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	Иначе 
		// а вот здесь вопрос - надо обновлять документ или нет?
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
		
	ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = id.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



	//гуид="";
	//ЕстьАтрибут = деф.Автор.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Автор = деф.Автор.Ref;
	//Иначе
		ОбъектДанных.Автор = Неопределено;
	//КонецЕсли;
	НомерСчета="";
	ЕстьАтрибут = деф.БанковскийСчет.свойство("НомерСчета",НомерСчета);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.БанковскийСчет = ксп_ИмпортСлужебный.НайтиБанковскийСчет(НомерСчета, деф.БанковскийСчет.БИК);
	Иначе
		ОбъектДанных.БанковскийСчет = Неопределено;
	КонецЕсли;
	ОбъектДанных.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ОбъектДанных.ВалютаКонвертации = Неопределено;
	ОбъектДанных.Ведомость = Неопределено;
	ОбъектДанных.Выдать = деф.Выдать;
	ОбъектДанных.ГлавныйБухгалтер = Неопределено;
	ОбъектДанных.ГруппаФинансовогоУчета = Неопределено;
	ОбъектДанных.ДатаАвансовогоОтчета = Неопределено;
	ОбъектДанных.ДатаВедомостиНаВыплатуЗарплаты = Неопределено;
	
	// доделать
	гуид="";
	ЕстьАтрибут = деф.ДоговорКонтрагента.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Договор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(деф.ДоговорКонтрагента.Ref);
	Иначе
		ОбъектДанных.Договор = Неопределено;
	КонецЕсли;
	
	// основания в Рознице:
	
	//ВозвратТоваровОтПокупателя
	//ЗаказПоставщику	
	//ЗарплатаКВыплатеОрганизаций
	//ЗаявкаНаРасходованиеДенежныхСредств
	//ОтчетКомитентуОПродажах
	//ОтчетОРозничныхПродажах
	//ПоступлениеТоваров
	//ПриходныйКассовыйОрдер
	
	// основания в ЕРП
	
	//АвансовыйОтчет
	//ВозвратТоваровОтКлиента
	//ВыкупПринятыхНаХранениеТоваров
	//ЗаказПереработчику
	//ЗаказПереработчику2_5
	//ЗаказПоставщику
	//ЗаявкаНаРасходованиеДенежныхСредств
	//НачислениеДивидендов
	//ОтчетКомиссионера
	//ОтчетКомиссионераОСписании
	//ОтчетКомитенту
	//ОтчетКомитентуОСписании
	//ОтчетОператораСистемыПлатон
	//ОтчетОСписанииТоваровСХранения
	//ОтчетПереработчика
	//ОтчетПереработчика2_5
	//ОтчетПоКомиссииМеждуОрганизациями
	//ОтчетПоКомиссииМеждуОрганизациямиОСписании
	//ПередачаТоваровМеждуОрганизациями
	//ПоступлениеДенежныхДокументов
	//ПоступлениеУслугПоАренде
	//ПриобретениеТоваровУслуг
	//ПриобретениеУслугПрочихАктивов
	//ТаможеннаяДекларацияИмпорт	
	
	// доделать
	гуид="";
	ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ДокументОснование = деф.ДокументОснование.Ref;
	Иначе
		ОбъектДанных.ДокументОснование = Неопределено;
	КонецЕсли;

	ОбъектДанных.ЗаявкаНаРасходованиеДенежныхСредств = Неопределено;
	ОбъектДанных.ИдентификаторДокумента = Неопределено;
	ОбъектДанных.Исправление = Неопределено;
	ОбъектДанных.ИсправляемыйДокумент = Неопределено;
	
	ОбъектДанных.Касса = ксп_ИмпортСлужебный.НайтиКассу(деф.Касса, мВнешняяСистема);
	
	гуид="";
	ЕстьАтрибут = деф.КассаККМ.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.КассаККМ = Справочники.КассыККМ.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.КассаККМ.Ref));
	Иначе
		ОбъектДанных.КассаККМ = Неопределено;
	КонецЕсли;
	
	ОбъектДанных.КассаПолучатель = ксп_ИмпортСлужебный.НайтиКассу(деф.КассаПолучатель, мВнешняяСистема);

	ОбъектДанных.Кассир = Неопределено;
	ОбъектДанных.Комментарий = деф.Комментарий;

	гуид="";
	ЕстьАтрибут = деф.Контрагент.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.Контрагент.Ref));
	Иначе
		ОбъектДанных.Контрагент = Неопределено;
	КонецЕсли;

	ОбъектДанных.КратностьКурсаКонвертации = 1;
	ОбъектДанных.КурсКонвертации = 1;
	
	ОбъектДанных.НалогообложениеНДС = перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;

	// доделать
	//гуид="";
	//ЕстьАтрибут = деф.НаправлениеДеятельности.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.НаправлениеДеятельности = деф.НаправлениеДеятельности.Ref;
	//Иначе
	//	ОбъектДанных.НаправлениеДеятельности = Неопределено;
	//КонецЕсли;
	
	ОбъектДанных.НеКонтролироватьЗаполнениеЗаявки = Истина;
	ОбъектДанных.НомерВедомостиНаВыплатуЗарплаты = Неопределено;
	
	ОбъектДанных.ОбъектРасчетов = Неопределено;
	ОбъектДанных.ОплатаПоЗаявкам = Неопределено;
	
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.ОрганизацияПолучатель = Неопределено;

	ОбъектДанных.Основание = деф.Основание;

	ОбъектДанных.Партнер = ОбъектДанных.Контрагент.Партнер;

	ОбъектДанных.ПериодРегистрации = Неопределено;
	ОбъектДанных.ПоДокументу = деф.ПоДокументу;
	
	ОбъектДанных.ПодотчетноеЛицо = Неопределено;
	ОбъектДанных.Подразделение = Неопределено;
	
	ОбъектДанных.Приложение = деф.Приложение;
	
	ОбъектДанных.ПроводкиПоРаботникам = Ложь;
	ОбъектДанных.РаспоряжениеНаПеремещениеДенежныхСредств = Неопределено;
	ОбъектДанных.Руководитель = Неопределено;

	// доделать
	ОбъектДанных.СтатьяДвиженияДенежныхСредств = Неопределено;
	
	ОбъектДанных.СторнируемыйДокумент = Неопределено;

	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	ОбъектДанных.СуммаКонвертации = Неопределено;
	
	ОбъектДанных.ХозяйственнаяОперация = ксп_ИмпортСлужебный.КонвертацияПеречисления_ХозяйственныеОперации_Розница(деф.ХозяйственнаяОперация);

	


	//------------------------------------------------------     ТЧ РасшифровкаПлатежа



//	НаборЗаписей_ТЧРасшифровкаПлатежа = РегистрыСведений.РасходныйКассовыйОрдер_ТЧ_РасшифровкаПлатежа__.СоздатьНаборЗаписей();
//	НаборЗаписей_ТЧРасшифровкаПлатежа.Отбор.ГУИД.установить(id.Ref);
//	НаборЗаписей_ТЧРасшифровкаПлатежа.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


//	счНомерСтроки = 0;

//	Для сч = 0 По деф.ТЧРасшифровкаПлатежа.Количество()-1 Цикл

//		стрк = деф.ТЧРасшифровкаПлатежа[сч];

//		СтрокаТЧ = НаборЗаписей_ТЧРасшифровкаПлатежа.Добавить();
//	СтрокаТЧ.ГУИД = id.Ref;
//	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
//		гуид="";
//		ЕстьАтрибут = стрк.АналитикаАктивовПассивов.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.АналитикаАктивовПассивов = стрк.АналитикаАктивовПассивов.Ref;
//		Иначе
//			СтрокаТЧ.АналитикаАктивовПассивов = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.АналитикаРасходов.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.АналитикаРасходов = стрк.АналитикаРасходов.Ref;
//		Иначе
//			СтрокаТЧ.АналитикаРасходов = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.ВалютаВзаиморасчетов.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ВалютаВзаиморасчетов = стрк.ВалютаВзаиморасчетов.Ref;
//		Иначе
//			СтрокаТЧ.ВалютаВзаиморасчетов = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.ДоговорАренды.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ДоговорАренды = стрк.ДоговорАренды.Ref;
//		Иначе
//			СтрокаТЧ.ДоговорАренды = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.ДоговорЗаймаСотруднику.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ДоговорЗаймаСотруднику = стрк.ДоговорЗаймаСотруднику.Ref;
//		Иначе
//			СтрокаТЧ.ДоговорЗаймаСотруднику = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.ДоговорКредитаДепозита.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ДоговорКредитаДепозита = стрк.ДоговорКредитаДепозита.Ref;
//		Иначе
//			СтрокаТЧ.ДоговорКредитаДепозита = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.ЗаявкаНаРасходованиеДенежныхСредств.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ЗаявкаНаРасходованиеДенежныхСредств = стрк.ЗаявкаНаРасходованиеДенежныхСредств.Ref;
//		Иначе
//			СтрокаТЧ.ЗаявкаНаРасходованиеДенежныхСредств = Неопределено;
//		КонецЕсли;
//		СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;

//		СтрокаТЧ.Комментарий = стрк.Комментарий;

//		СтрокаТЧ.КурсЗнаменательВзаиморасчетов = стрк.КурсЗнаменательВзаиморасчетов;

//		СтрокаТЧ.КурсЧислительВзаиморасчетов = стрк.КурсЧислительВзаиморасчетов;

//		гуид="";
//		ЕстьАтрибут = стрк.НаправлениеДеятельности.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.НаправлениеДеятельности = стрк.НаправлениеДеятельности.Ref;
//		Иначе
//			СтрокаТЧ.НаправлениеДеятельности = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.НастройкаСчетовУчета.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.НастройкаСчетовУчета = стрк.НастройкаСчетовУчета.Ref;
//		Иначе
//			СтрокаТЧ.НастройкаСчетовУчета = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.ОбъектРасчетов.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ОбъектРасчетов = стрк.ОбъектРасчетов.Ref;
//		Иначе
//			СтрокаТЧ.ОбъектРасчетов = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.Организация.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Организация = стрк.Организация.Ref;
//		Иначе
//			СтрокаТЧ.Организация = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.Партнер.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Партнер = стрк.Партнер.Ref;
//		Иначе
//			СтрокаТЧ.Партнер = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.Подразделение.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Подразделение = стрк.Подразделение.Ref;
//		Иначе
//			СтрокаТЧ.Подразделение = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.СтавкаНДС.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.СтавкаНДС = стрк.СтавкаНДС.Ref;
//		Иначе
//			СтрокаТЧ.СтавкаНДС = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.СтатьяДвиженияДенежныхСредств.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.СтатьяДвиженияДенежныхСредств = стрк.СтатьяДвиженияДенежныхСредств.Ref;
//		Иначе
//			СтрокаТЧ.СтатьяДвиженияДенежныхСредств = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.СтатьяРасходов.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.СтатьяРасходов = стрк.СтатьяРасходов.Ref;
//		Иначе
//			СтрокаТЧ.СтатьяРасходов = Неопределено;
//		КонецЕсли;
//		СтрокаТЧ.Сумма = стрк.Сумма;

//		СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

//		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

//		_знч = "";
//		ЕстьЗначение = стрк.ТипПлатежаПоАренде.свойство("Значение",_знч);
//		Если ЕстьЗначение Тогда
//			СтрокаТЧ.ТипПлатежаПоАренде = стрк.ТипПлатежаПоАренде.Значение;
//		Иначе
//			СтрокаТЧ.ТипПлатежаПоАренде = Неопределено;
//		КонецЕсли;
//		_знч = "";
//		ЕстьЗначение = стрк.ТипСуммыКредитаДепозита.свойство("Значение",_знч);
//		Если ЕстьЗначение Тогда
//			СтрокаТЧ.ТипСуммыКредитаДепозита = стрк.ТипСуммыКредитаДепозита.Значение;
//		Иначе
//			СтрокаТЧ.ТипСуммыКредитаДепозита = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.УдалитьЗаказ.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.УдалитьЗаказ = стрк.УдалитьЗаказ.Ref;
//		Иначе
//			СтрокаТЧ.УдалитьЗаказ = Неопределено;
//		КонецЕсли;
//		СтрокаТЧ.УдалитьПериодВозникновенияРасхода = стрк.УдалитьПериодВозникновенияРасхода;

//		_знч = "";
//		ЕстьЗначение = стрк.УдалитьСтавкаНДС.свойство("Значение",_знч);
//		Если ЕстьЗначение Тогда
//			СтрокаТЧ.УдалитьСтавкаНДС = стрк.УдалитьСтавкаНДС.Значение;
//		Иначе
//			СтрокаТЧ.УдалитьСтавкаНДС = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.УдалитьСубконто1.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.УдалитьСубконто1 = стрк.УдалитьСубконто1.Ref;
//		Иначе
//			СтрокаТЧ.УдалитьСубконто1 = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.УдалитьСубконто2.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.УдалитьСубконто2 = стрк.УдалитьСубконто2.Ref;
//		Иначе
//			СтрокаТЧ.УдалитьСубконто2 = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.УдалитьСубконто3.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.УдалитьСубконто3 = стрк.УдалитьСубконто3.Ref;
//		Иначе
//			СтрокаТЧ.УдалитьСубконто3 = Неопределено;
//		КонецЕсли;
//		СтрокаТЧ._НомерСтроки = счНомерСтроки;

//		счНомерСтроки = счНомерСтроки + 1;

//	КонецЦикла;

//	НаборЗаписей_ТЧРасшифровкаПлатежа.Записать();
//	//------------------------------------------------------     ТЧ ВыплатаЗаработнойПлаты



//	НаборЗаписей_ТЧВыплатаЗаработнойПлаты = РегистрыСведений.РасходныйКассовыйОрдер_ТЧ_ВыплатаЗаработнойПлаты__.СоздатьНаборЗаписей();
//	НаборЗаписей_ТЧВыплатаЗаработнойПлаты.Отбор.ГУИД.установить(id.Ref);
//	НаборЗаписей_ТЧВыплатаЗаработнойПлаты.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


//	счНомерСтроки = 0;

//	Для сч = 0 По деф.ТЧВыплатаЗаработнойПлаты.Количество()-1 Цикл

//		стрк = деф.ТЧВыплатаЗаработнойПлаты[сч];

//		СтрокаТЧ = НаборЗаписей_ТЧВыплатаЗаработнойПлаты.Добавить();
//	СтрокаТЧ.ГУИД = id.Ref;
//	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
//		СтрокаТЧ.Сумма = стрк.Сумма;

//		гуид="";
//		ЕстьАтрибут = стрк.ФизическоеЛицо.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.ФизическоеЛицо = стрк.ФизическоеЛицо.Ref;
//		Иначе
//			СтрокаТЧ.ФизическоеЛицо = Неопределено;
//		КонецЕсли;
//		СтрокаТЧ._НомерСтроки = счНомерСтроки;

//		счНомерСтроки = счНомерСтроки + 1;

//	КонецЦикла;

//	НаборЗаписей_ТЧВыплатаЗаработнойПлаты.Записать();
//	//------------------------------------------------------     ТЧ ДополнительныеРеквизиты



//	НаборЗаписей_ТЧДополнительныеРеквизиты = РегистрыСведений.РасходныйКассовыйОрдер_ТЧ_ДополнительныеРеквизиты__.СоздатьНаборЗаписей();
//	НаборЗаписей_ТЧДополнительныеРеквизиты.Отбор.ГУИД.установить(id.Ref);
//	НаборЗаписей_ТЧДополнительныеРеквизиты.Отбор.ВнешняяСистема.установить(мВнешняяСистема);


//	счНомерСтроки = 0;

//	Для сч = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл

//		стрк = деф.ТЧДополнительныеРеквизиты[сч];

//		СтрокаТЧ = НаборЗаписей_ТЧДополнительныеРеквизиты.Добавить();
//	СтрокаТЧ.ГУИД = id.Ref;
//	СтрокаТЧ.ВнешняяСистема = мВнешняяСистема;
//		гуид="";
//		ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Значение = стрк.Значение.Ref;
//		Иначе
//			СтрокаТЧ.Значение = Неопределено;
//		КонецЕсли;
//		гуид="";
//		ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
//		Если ЕстьАтрибут Тогда
//			СтрокаТЧ.Свойство = стрк.Свойство.Ref;
//		Иначе
//			СтрокаТЧ.Свойство = Неопределено;
//		КонецЕсли;
//		СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

//		СтрокаТЧ._НомерСтроки = счНомерСтроки;

//		счНомерСтроки = счНомерСтроки + 1;

//	КонецЦикла;

//	НаборЗаписей_ТЧДополнительныеРеквизиты.Записать();



	//------------------------------------------------------ ФИНАЛ

		
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	
	ОбъектДанных.Записать();

	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	Если деф.isPosted Тогда 
		ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
	
	// сохранить исходное сообщение
	
//	РегистрыСведений.ксп_ИсходныеДанныеСообщений.ДобавитьЗапись(ОбъектДанных.Ссылка, jsonText);
	
	
	// добавить документ в РС для проведения
	
	ксп_ИмпортСлужебный.ПроверитьКачествоДанных(ОбъектДанных, ЭтотОбъект);
	
	

	Возврат ОбъектДанных.Ссылка;

КонецФункции





#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


 мВнешняяСистема = "retail";
 
 