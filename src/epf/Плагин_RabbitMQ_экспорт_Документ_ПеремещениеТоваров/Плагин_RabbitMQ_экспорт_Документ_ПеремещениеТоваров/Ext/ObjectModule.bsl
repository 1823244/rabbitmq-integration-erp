#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Документ_ПеремещениеТоваров");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Документ_ПеремещениеТоваров");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_экспорт_Документ_ПеремещениеТоваров",
		"Форма_Плагин_RabbitMQ_экспорт_Документ_ПеремещениеТоваров",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	Номенклатура	- СправочникСсылка.Номенклатура / СправочникОбъект.Номенклатура - при чтении узла обмена сюда будут приходить именно объекты
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВыгрузитьОбъект(Ссылка) Экспорт
	
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Обк = Ссылка.ПолучитьОбъект(); 
	Иначе 
		Обк = Ссылка; 
	КонецЕсли;

	
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	
	СтруктураОбъекта.Вставить("source", "ERP");
	СтруктураОбъекта.Вставить("type", Обк.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	
	//	DEFINITION
	
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	
	
//Реквизит	Тип	Вид
//Автор	Справочник	Пользователи
	#Область Автор
	Автор = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Автор);
	definition.Вставить("Автор", Автор); 	
	#КонецОбласти

//АдресДоставки	Строка	
	definition.Вставить("АдресДоставки", обк.АдресДоставки); 	
//АдресДоставкиЗначение	Строка	
	definition.Вставить("АдресДоставкиЗначение", обк.АдресДоставкиЗначение); 	
//АдресДоставкиЗначенияПолей	Строка	
	definition.Вставить("АдресДоставкиЗначенияПолей", обк.АдресДоставкиЗначенияПолей); 	
//АдресДоставкиПеревозчика	Строка	
	definition.Вставить("АдресДоставкиПеревозчика", обк.АдресДоставкиПеревозчика); 	
//АдресДоставкиПеревозчикаЗначение	Строка	
	definition.Вставить("АдресДоставкиПеревозчикаЗначение", обк.АдресДоставкиПеревозчикаЗначение); 	
//АдресДоставкиПеревозчикаЗначенияПолей	Строка	
	definition.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", обк.АдресДоставкиПеревозчикаЗначенияПолей); 	
//БанковскийСчетОрганизации	Справочник	БанковскиеСчетаОрганизаций
	#Область БанковскийСчетОрганизации
	БанковскийСчетОрганизации = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.БанковскийСчетОрганизации);
	definition.Вставить("БанковскийСчетОрганизации", БанковскийСчетОрганизации); 	
	#КонецОбласти
//ВариантПриемкиТоваров	Перечисление	ВариантыПриемкиТоваров
	#Область ВариантПриемкиТоваров
	ВариантПриемкиТоваров = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВариантПриемкиТоваров);
	definition.Вставить("ВариантПриемкиТоваров", ВариантПриемкиТоваров); 	
	#КонецОбласти
//ВидЦены	Справочник	ВидыЦен
	#Область ВидЦены
	ВидЦены = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВидЦены);
	definition.Вставить("ВидЦены", ВидЦены); 	
	#КонецОбласти
//ВидыЗапасовУказаныВручную	Булево	
	definition.Вставить("ВидыЗапасовУказаныВручную", обк.ВидыЗапасовУказаныВручную); 	
//ВремяДоставкиПо	Дата	
	definition.Вставить("ВремяДоставкиПо", XMLСтрока(обк.ВремяДоставкиПо)); 	
//ВремяДоставкиС	Дата	
	definition.Вставить("ВремяДоставкиС", XMLСтрока(обк.ВремяДоставкиС)); 	
//ГлавныйБухгалтер	Справочник	ОтветственныеЛицаОрганизаций
	#Область ГлавныйБухгалтер
	ГлавныйБухгалтер = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ГлавныйБухгалтер);
	definition.Вставить("ГлавныйБухгалтер", ГлавныйБухгалтер); 	
	#КонецОбласти

//ДатаПоступления	Дата	
	definition.Вставить("ДатаПоступления", XMLСтрока(обк.ДатаПоступления)); 	
//ДокументОснование	Документ	ПриобретениеТоваровУслуг
	#Область ДокументОснование
	ДокументОснование = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ДокументОснование);
	definition.Вставить("ДокументОснование", ДокументОснование); 	
	#КонецОбласти

//ДополнительнаяИнформацияПоДоставке	Строка	
	definition.Вставить("ДополнительнаяИнформацияПоДоставке", обк.ДополнительнаяИнформацияПоДоставке); 	
//ЗаказНаПеремещение	Документ	ЗаказНаПеремещение
	#Область ЗаказНаПеремещение
	ЗаказНаПеремещение = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЗаказНаПеремещение);
	definition.Вставить("ЗаказНаПеремещение", ЗаказНаПеремещение); 	
	#КонецОбласти
//ЗонаДоставки	Справочник	ЗоныДоставки
	#Область ЗонаДоставки
	ЗонаДоставки = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЗонаДоставки);
	definition.Вставить("ЗонаДоставки", ЗонаДоставки); 	
	#КонецОбласти
//Исправление	Булево	
	definition.Вставить("Исправление", обк.Исправление); 	
//ИсправляемыйДокумент	Документ	ПеремещениеТоваров
	#Область ИсправляемыйДокумент
	ИсправляемыйДокумент = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ИсправляемыйДокумент);
	definition.Вставить("ИсправляемыйДокумент", ИсправляемыйДокумент); 	
	#КонецОбласти
//Комментарий	Строка	
	definition.Вставить("Комментарий", обк.Комментарий); 	
//НаправлениеДеятельности	Справочник	НаправленияДеятельности
	#Область НаправлениеДеятельности
	НаправлениеДеятельности = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.НаправлениеДеятельности);
	definition.Вставить("НаправлениеДеятельности", НаправлениеДеятельности); 	
	#КонецОбласти
//Организация	Справочник	Организации
	#Область Организация
	Организация = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Организация);
	definition.Вставить("Организация", Организация); 	
	#КонецОбласти
//ОрганизацияПолучатель	Справочник	Организации
	#Область ОрганизацияПолучатель
	ОрганизацияПолучатель = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ОрганизацияПолучатель);
	definition.Вставить("ОрганизацияПолучатель", ОрганизацияПолучатель); 	
	#КонецОбласти
//ОсобыеУсловияПеревозки	Булево	
	definition.Вставить("ОсобыеУсловияПеревозки", обк.ОсобыеУсловияПеревозки); 	
//ОсобыеУсловияПеревозкиОписание	Строка	
	definition.Вставить("ОсобыеУсловияПеревозки", обк.ОсобыеУсловияПеревозкиОписание); 	
//Ответственный	Справочник	Пользователи
	#Область Ответственный
	Ответственный = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ответственный);
	definition.Вставить("Ответственный", Ответственный); 	
	#КонецОбласти
//ПеревозчикПартнер	Справочник	Партнеры
	#Область ПеревозчикПартнер
	ПеревозчикПартнер = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПеревозчикПартнер);
	definition.Вставить("ПеревозчикПартнер", ПеревозчикПартнер); 	
	#КонецОбласти
//ПеремещениеАктаОРасхождениях	Документ	ПеремещениеТоваров
	#Область ПеремещениеАктаОРасхождениях
	ПеремещениеАктаОРасхождениях = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПеремещениеАктаОРасхождениях);
	definition.Вставить("ПеремещениеАктаОРасхождениях", ПеремещениеАктаОРасхождениях); 	
	#КонецОбласти
//ПеремещениеПодДеятельность	Перечисление	ТипыНалогообложенияНДС
	#Область ПеремещениеПодДеятельность
	ПеремещениеПодДеятельность = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПеремещениеПодДеятельность);
	definition.Вставить("ПеремещениеПодДеятельность", ПеремещениеПодДеятельность); 	
	#КонецОбласти
//ПеремещениеПоЗаказам	Булево	
	definition.Вставить("ПеремещениеПоЗаказам", обк.ПеремещениеПоЗаказам); 	
//Подразделение	Справочник	СтруктураПредприятия
	#Область Подразделение
	Подразделение = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Подразделение);
	definition.Вставить("Подразделение", Подразделение); 	
	#КонецОбласти
//Руководитель	Справочник	ОтветственныеЛицаОрганизаций
	#Область Руководитель
	Руководитель = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Руководитель);
	definition.Вставить("Руководитель", Руководитель); 	
	#КонецОбласти
//Сделка	Справочник	СделкиСКлиентами
	#Область Сделка
	Сделка = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Сделка);
	definition.Вставить("Сделка", Сделка); 	
	#КонецОбласти
//СкладОтправитель	Справочник	Склады
	#Область СкладОтправитель
	СкладОтправитель = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СкладОтправитель);
	definition.Вставить("СкладОтправитель", СкладОтправитель); 	
	#КонецОбласти
//СкладПолучатель	Справочник	Склады
	#Область СкладПолучатель
	СкладПолучатель = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СкладПолучатель);
	definition.Вставить("СкладПолучатель", СкладПолучатель); 	
	#КонецОбласти
//СостояниеЗаполненияМногооборотнойТары	Перечисление	СостоянияЗаполненияМногооборотнойТары
	#Область СостояниеЗаполненияМногооборотнойТары
	СостояниеЗаполненияМногооборотнойТары = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СостояниеЗаполненияМногооборотнойТары);
	definition.Вставить("СостояниеЗаполненияМногооборотнойТары", СостояниеЗаполненияМногооборотнойТары); 	
	#КонецОбласти
//СпособДоставки	Перечисление	СпособыДоставки
	#Область СпособДоставки
	СпособДоставки = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СпособДоставки);
	definition.Вставить("СпособДоставки", СпособДоставки); 	
	#КонецОбласти
//Статус	Перечисление	СтатусыПеремещенийТоваров
	#Область Статус
	Статус = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Статус);
	definition.Вставить("Статус", Статус); 	
	#КонецОбласти
//СторнируемыйДокумент	Документ	ПеремещениеТоваров
	#Область СторнируемыйДокумент
	СторнируемыйДокумент = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СторнируемыйДокумент);
	definition.Вставить("СторнируемыйДокумент", СторнируемыйДокумент); 	
	#КонецОбласти
//УдалитьДатаРаспоряжения	Дата	
//ХозяйственнаяОперация	Перечисление	ХозяйственныеОперации
	#Область ХозяйственнаяОперация
	ХозяйственнаяОперация = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ХозяйственнаяОперация);
	definition.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация); 	
	#КонецОбласти 
	
	// ТЧ ТОВАРЫ
	
	ТЧТовары = Новый Структура;
	
    Для сч = 0 По обк.товары.Количество()-1 Цикл
		
		стрк = обк.товары[сч];
		
		СтрокаТовары = Новый Структура;

	//Реквизит	Тип	Вид
	//АналитикаУчетаНаборов	Справочник	КлючиАналитикиУчетаНаборов
		#Область АналитикаУчетаНаборов
		АналитикаУчетаНаборов = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.АналитикаУчетаНаборов);
		СтрокаТовары.Вставить("АналитикаУчетаНаборов", АналитикаУчетаНаборов); 	
		#КонецОбласти 

	//АналитикаУчетаНоменклатуры	Справочник	КлючиАналитикиУчетаНоменклатуры
		#Область АналитикаУчетаНоменклатуры
		АналитикаУчетаНоменклатуры = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.АналитикаУчетаНоменклатуры);
		СтрокаТовары.Вставить("АналитикаУчетаНоменклатуры", АналитикаУчетаНоменклатуры); 	
		#КонецОбласти 
	//ЗаказНаПеремещение	Документ	ЗаказНаПеремещение
		#Область ЗаказНаПеремещение
		ЗаказНаПеремещение = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ЗаказНаПеремещение);
		СтрокаТовары.Вставить("ЗаказНаПеремещение", ЗаказНаПеремещение); 	
		#КонецОбласти 
	//ИдентификаторСтроки	Строка	
		СтрокаТовары.Вставить("ИдентификаторСтроки", стрк.ИдентификаторСтроки); 	
	//КодСтроки	Число	
		СтрокаТовары.Вставить("КодСтроки", стрк.КодСтроки); 	
	//Количество	Число	
		СтрокаТовары.Вставить("Количество", стрк.Количество); 	
	//КоличествоУпаковок	Число	
		СтрокаТовары.Вставить("КоличествоУпаковок", стрк.КоличествоУпаковок); 	
	//Назначение	Справочник	Назначения
		#Область Назначение
		Назначение = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Назначение);
		СтрокаТовары.Вставить("Назначение", Назначение); 	
		#КонецОбласти 
	//НазначениеОтправителя	Справочник	Назначения
		#Область НазначениеОтправителя
		НазначениеОтправителя = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.НазначениеОтправителя);
		СтрокаТовары.Вставить("НазначениеОтправителя", НазначениеОтправителя); 	
		#КонецОбласти 
	//Номенклатура	Справочник	Номенклатура
		#Область Номенклатура
		Номенклатура = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Номенклатура);
		СтрокаТовары.Вставить("Номенклатура", Номенклатура); 	
		#КонецОбласти 
	//НоменклатураНабора	Справочник	Номенклатура
		#Область НоменклатураНабора
		НоменклатураНабора = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.НоменклатураНабора);
		СтрокаТовары.Вставить("НоменклатураНабора", НоменклатураНабора); 	
		#КонецОбласти 
	//Сделка	Справочник	СделкиСКлиентами
		#Область Сделка
		Сделка = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Сделка);
		СтрокаТовары.Вставить("Сделка", Сделка); 	
		#КонецОбласти 
	//Серия	Справочник	СерииНоменклатуры
		#Область Серия
		Серия = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Серия);
		СтрокаТовары.Вставить("Серия", Серия); 	
		#КонецОбласти 
	//СтатусУказанияСерий	Число	
		СтрокаТовары.Вставить("СтатусУказанияСерий", стрк.СтатусУказанияСерий); 	
	//СтатусУказанияСерийОтправитель	Число	
		СтрокаТовары.Вставить("СтатусУказанияСерийОтправитель", стрк.СтатусУказанияСерийОтправитель); 	
	//СтатусУказанияСерийПолучатель	Число	
		СтрокаТовары.Вставить("СтатусУказанияСерийПолучатель", стрк.СтатусУказанияСерийПолучатель); 	
	//Упаковка	Справочник	УпаковкиЕдиницыИзмерения
		#Область Упаковка
		Упаковка = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Упаковка);
		СтрокаТовары.Вставить("Упаковка", Упаковка); 	
		#КонецОбласти 
	//Характеристика	Справочник	ХарактеристикиНоменклатуры
		#Область Характеристика
		Характеристика = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Характеристика);
		СтрокаТовары.Вставить("Характеристика", Характеристика); 	
		#КонецОбласти 
	//ХарактеристикаНабора	Справочник	ХарактеристикиНоменклатуры		
		#Область ХарактеристикаНабора
		ХарактеристикаНабора = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ХарактеристикаНабора);
		СтрокаТовары.Вставить("ХарактеристикаНабора", ХарактеристикаНабора); 	
		#КонецОбласти 
			
		ТЧТовары.Вставить("Строка"+Формат(сч,"ЧГ=;ЧРГ=;ЧН="), СтрокаТовары);
	КонецЦикла;
	
	definition.Вставить("ТЧТовары", ТЧТовары);

	
	
	
	
	// ТЧ ВИДЫ ЗАПАСОВ	

	ТЧВидыЗапасов = Новый Структура;
	
    Для сч = 0 По обк.ВидыЗапасов.Количество()-1 Цикл
		
		стрк = обк.ВидыЗапасов[сч];
		
		СтрокаТовары = Новый Структура;

//Реквизит	Тип	Вид
//АналитикаУчетаНоменклатуры	Справочник	КлючиАналитикиУчетаНоменклатуры
		#Область АналитикаУчетаНоменклатуры
		АналитикаУчетаНоменклатуры = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.АналитикаУчетаНоменклатуры);
		СтрокаТовары.Вставить("АналитикаУчетаНоменклатуры", АналитикаУчетаНоменклатуры); 	
		#КонецОбласти 
//ВидЗапасов	Справочник	ВидыЗапасов
		#Область ВидЗапасов
		ВидЗапасов = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВидЗапасов);
		СтрокаТовары.Вставить("ВидЗапасов", ВидЗапасов); 	
		#КонецОбласти 
//ВидЗапасовПолучателя	Справочник	ВидыЗапасов
		#Область ВидЗапасовПолучателя
		ВидЗапасовПолучателя = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВидЗапасовПолучателя);
		СтрокаТовары.Вставить("ВидЗапасовПолучателя", ВидЗапасовПолучателя); 	
		#КонецОбласти 
//ИдентификаторСтроки	Строка	
		СтрокаТовары.Вставить("ИдентификаторСтроки", стрк.ИдентификаторСтроки); 	
//Количество	Число	
		СтрокаТовары.Вставить("Количество", стрк.Количество); 	
//КоличествоПоРНПТ	Число	
		СтрокаТовары.Вставить("КоличествоПоРНПТ", стрк.КоличествоПоРНПТ); 	
//Назначение	Справочник	Назначения
		#Область Назначение
		Назначение = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Назначение);
		СтрокаТовары.Вставить("Назначение", Назначение); 	
		#КонецОбласти 
//НомерГТД	Справочник	НомераГТД
		#Область НомерГТД
		НомерГТД = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.НомерГТД);
		СтрокаТовары.Вставить("НомерГТД", НомерГТД); 	
		#КонецОбласти 
	//Сделка	Справочник	СделкиСКлиентами
		#Область Сделка
		Сделка = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Сделка);
		СтрокаТовары.Вставить("Сделка", Сделка); 	
		#КонецОбласти 
	//Серия	Справочник	СерииНоменклатуры
		#Область Серия
		Серия = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Серия);
		СтрокаТовары.Вставить("Серия", Серия); 	
		#КонецОбласти 

		ТЧВидыЗапасов.Вставить("Строка"+Формат(сч,"ЧГ=;ЧРГ=;ЧН="), СтрокаТовары);
	КонецЦикла;
	
	definition.Вставить("ТЧВидыЗапасов", ТЧВидыЗапасов);



   

	// ТЧ СЕРИИ

	ТЧСерии = Новый Структура;
	
    Для сч = 0 По обк.Серии.Количество()-1 Цикл
		
		стрк = обк.Серии[сч];
		
		СтрокаТовары = Новый Структура;

//Реквизит	Тип	Вид
//Количество	Число	
		СтрокаТовары.Вставить("Количество", стрк.Количество); 	

//Назначение	Справочник	Назначения
		#Область Назначение
		Назначение = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Назначение);
		СтрокаТовары.Вставить("Назначение", Назначение); 	
		#КонецОбласти 
//НазначениеОтправителя	Справочник	Назначения
		#Область НазначениеОтправителя
		НазначениеОтправителя = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.НазначениеОтправителя);
		СтрокаТовары.Вставить("НазначениеОтправителя", НазначениеОтправителя); 	
		#КонецОбласти 
//Номенклатура	Справочник	Номенклатура
		#Область Номенклатура
		Номенклатура = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Номенклатура);
		СтрокаТовары.Вставить("Номенклатура", Номенклатура); 	
		#КонецОбласти 
//Серия	Справочник	СерииНоменклатуры
		#Область Серия
		Серия = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Серия);
		СтрокаТовары.Вставить("Серия", Серия); 	
		#КонецОбласти 
//Характеристика	Справочник	ХарактеристикиНоменклатуры 
		#Область Характеристика
		Характеристика = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Характеристика);
		СтрокаТовары.Вставить("Характеристика", Характеристика); 	
		#КонецОбласти 

		ТЧСерии.Вставить("Строка"+Формат(сч,"ЧГ=;ЧРГ=;ЧН="), СтрокаТовары);
	КонецЦикла;
	
	definition.Вставить("ТЧСерии", ТЧСерии);
	

	// ТЧ ДополнительныеРеквизиты
	

	ТЧДополнительныеРеквизиты = Новый Структура;
	
    Для сч = 0 По обк.ДополнительныеРеквизиты.Количество()-1 Цикл
		
		стрк = обк.ДополнительныеРеквизиты[сч];
		
		СтрокаТовары = Новый Структура;

//Реквизит	Тип	Вид
//Значение	Справочник	ПрофессииРабочих
		#Область Значение
		Значение = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Значение);
		СтрокаТовары.Вставить("Значение", Значение); 	
		#КонецОбласти 

//Свойство	ПланВидовХарактеристик	ДополнительныеРеквизитыИСведения
		#Область Свойство
		Свойство = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Свойство);
		СтрокаТовары.Вставить("Свойство", Свойство); 	
		#КонецОбласти 

//ТекстоваяСтрока	Строка		
		СтрокаТовары.Вставить("ТекстоваяСтрока", стрк.ТекстоваяСтрока); 	

		ТЧДополнительныеРеквизиты.Вставить("Строка"+Формат(сч,"ЧГ=;ЧРГ=;ЧН="), СтрокаТовары);
	КонецЦикла;
	
	definition.Вставить("ТЧДополнительныеРеквизиты", ТЧДополнительныеРеквизиты);	
	
	//------------------------------------------------------
	
	СтруктураОбъекта.Вставить("definition", definition);
	
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	
	Возврат json;
	
	
	Возврат Неопределено;
	
КонецФункции
