//---- Раздел 1 ---- Начало --- Получение токена  

//--- ПриСозданииНаСервере ---
//    - заполнение списка формы действующих сертификатов
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		//Поиск доступных сертификатов
	CAPICOM_CURRENT_USER_STORE = 2;
	//2 - Искать сертификат в ветке "Личное" хранилища.
	CAPICOM_MY_STORE = "My";
	// Указываем, что ветку "Личное" берем из хранилища текущего пользователя
	CAPICOM_STORE_OPEN_READ_ONLY = 0; // Открыть хранилище только на чтение 
	
	oStore = Новый COMОбъект("CAdESCOM.Store"); // Объект описывает хранилище сертификатов
	
	oStore.Open(CAPICOM_CURRENT_USER_STORE, CAPICOM_MY_STORE,
		CAPICOM_STORE_OPEN_READ_ONLY); // Открыть хранилище сертификатов
		
	// 1 вариант: поиск сертификата по отпечатку
	//CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;
	//Certificates = oStore.Certificates.Find(CAPICOM_CERTIFICATE_FIND_SHA1_HASH, ОтпечатокСтр);
	//Рез = Certificates.Item(1); 
	CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;
	
	//2 вариант: обходом по коллекции и сравнение с отпечатком
	ТекДата = ТекущаяДата();
	Для Каждого ТекСертификат Из oStore.Certificates Цикл 
		стрИНН = ПолучитьИНН_ИзСертификата(ТекСертификат.SubjectName,",");
		//Если стрИНН <> Неопределено Тогда
			НоваяСтрока = Сертификаты.Добавить();   
			НоваяСтрока.Владелец = ТекСертификат.SubjectName;
			НоваяСтрока.ПериодС = ТекСертификат.ValidFromDate;
			НоваяСтрока.ПериодДо = ТекСертификат.ValidToDate;
			//Если НЕ ТекСертификат.PrivateKey.IsRemovable() Тогда
			//	НоваяСтрока.Контейнер = ТекСертификат.PrivateKey.UniqueContainerName;     
			//КонецЕсли;
			НоваяСтрока.Отпечаток = ТекСертификат.Thumbprint; 	
			МассивЭлементов = СтрРазделить(НоваяСтрока.Владелец,","); 
			
			Индекс_Фамилия = НайтиИндексВМассивеПоСтроке("SN=",МассивЭлементов);     // Поиск индекса элемента массива с фамилией
			Индекс_ИмяОтчество = НайтиИндексВМассивеПоСтроке("G=",МассивЭлементов);  // Поиск индекса элемента массива с именем и отчеством
            Индекс_ОГРНИП = НайтиИндексВМассивеПоСтроке("ОГРНИП=",МассивЭлементов);
			//--Если владелец - индивидуальный предприниматель  или физ. лицо, длина ИНН 12 символов
			Если ( СтрДлина(стрИНН)=12) И (Дата(НоваяСтрока.ПериодДо) > ТекДата) Тогда             
				МассивЭлементов[Индекс_Фамилия]=СтрЗаменить(МассивЭлементов[Индекс_Фамилия],"SN=","");         // Фамилия, удаляются символы "SN="
				МассивЭлементов[Индекс_ИмяОтчество]=СтрЗаменить(МассивЭлементов[Индекс_ИмяОтчество],"G=" ,""); // Имя Отчество, удаляются символы "G="

				СтрокаДляСпискаВыбора = МассивЭлементов[Индекс_Фамилия]+МассивЭлементов[Индекс_ИмяОтчество]+"    | до: "+НоваяСтрока.ПериодДо+"        |       ИНН="+стрИНН;				
				
				Индекс_ОГРНИП = НайтиИндексВМассивеПоСтроке("ОГРНИП=",МассивЭлементов); // Поиск индекса ОГРНИП, индивидуальный предприниматель или физ. лицо
				Если НЕ Индекс_ОГРНИП = Неопределено Тогда               // индивидуальный предприниматель  
				   СтрокаДляСпискаВыбора = "ИП "+СтрокаДляСпискаВыбора	
			    Иначе                                                     // физ. лицо    
				   СтрокаДляСпискаВыбора = СокрЛП(СтрокаДляСпискаВыбора) +"  |   физ. лицо"	
				КонецЕсли;
				
				//--добавляем в список выбора на форме
				ЭтаФорма.Элементы.Сертификат.СписокВыбора.Добавить(НоваяСтрока.Отпечаток,СтрокаДляСпискаВыбора);
				
			//-- Если владелец - должностное лицо ООО, длина ИНН 10 символов	
		    ИначеЕсли ( СтрДлина(стрИНН)=10) И (Дата(НоваяСтрока.ПериодДо) > ТекДата)  Тогда  
			    МассивЭлементов[Индекс_Фамилия]=СтрЗаменить(МассивЭлементов[Индекс_Фамилия],"SN=","");         // Фамилия, удаляются символы "SN="
				МассивЭлементов[Индекс_ИмяОтчество]=СтрЗаменить(МассивЭлементов[Индекс_ИмяОтчество],"G=" ,""); // Имя Отчество, удаляются символы "G="
				
				Индекс_Должность = НайтиИндексВМассивеПоСтроке("T=",МассивЭлементов);    // Поиск индекса элемента массива с должностью сотрудника
				Индекс_Организация = НайтиИндексВМассивеПоСтроке("CN=",МассивЭлементов);  // Поиск индекса элемента массива с названием организации
				
				МассивЭлементов[Индекс_Должность]=СтрЗаменить(МассивЭлементов[Индекс_Должность],"T=" ,""); // должность (директор), удаляются символы "T=" 
                МассивЭлементов[Индекс_Организация]=СтрЗаменить(МассивЭлементов[Индекс_Организация],"CN=",""); // Название ООО, удаляются символы "CN="

				СтрокаДляСпискаВыбора = МассивЭлементов[Индекс_Организация]+"  |  "+МассивЭлементов[Индекс_Фамилия]+МассивЭлементов[Индекс_ИмяОтчество]+"   | до: "+НоваяСтрока.ПериодДо+"    |   ИНН="+стрИНН+"   |   "+МассивЭлементов[Индекс_Должность];				
				//--добавляем в список выбора на форме
				ЭтаФорма.Элементы.Сертификат.СписокВыбора.Добавить(НоваяСтрока.Отпечаток,СтрокаДляСпискаВыбора);		
				
			Иначе 
				СтрокаДляСпискаВыбора = ТекСертификат.SubjectName;
				ЭтаФорма.Элементы.Сертификат.СписокВыбора.Добавить(НоваяСтрока.Отпечаток,СтрокаДляСпискаВыбора);		
			КонецЕсли;  
			
			//Если (Дата(НоваяСтрока.ПериодДо) > ТекДата) Тогда                   //(Лев(МассивЭлементов[2],4)=" CN=") И 
			//	МассивЭлементов[2]=СтрЗаменить(МассивЭлементов[2]," CN=",""); 
			//	СтрокаДляСпискаВыбора = МассивЭлементов[2]+"    | до: "+НоваяСтрока.ПериодДо+"        |       ИНН="+стрИНН;
			//	
			//	ЭтаФорма.Элементы.Сертификат.СписокВыбора.Добавить(НоваяСтрока.Отпечаток,СтрокаДляСпискаВыбора);
			//КонецЕсли;  
		//КонецЕсли;
	КонецЦикла;
	//ЕНС. ПРОД
    //Сервер = "markirovka.crpt.ru";
	//ЕНС. Песочница
	Сервер = "markirovka.sandbox.crptech.ru";
	ГруппаТоваров =  ЭтаФорма.Элементы.ГруппаТоваров.СписокВыбора[0].Значение;
	ДатаЭмиссииОт = НачалоМесяца(ТекущаяДата())-1; // Дата("20230601000000");
    ДатаЭмиссииДо = ТекущаяДата();                 // Дата("20230630235959");

	
	//ЕНС. Коды можно найти в файле Инструкция_по_формированию_выгрузок_данных_через_True_API-v74.0-14.12.2023-at-08-20-00.pdf
	//(c:\E\rabbitmq-integration-erp\GISMP\)
	// Справочник "Причины выбытия"
	//
    Элементы.ПричинаСписания.СписокВыбора.Добавить("DEFECT","Брак"); 
	Элементы.ПричинаСписания.СписокВыбора.Добавить("DAMAGE_LOSS","Утрата");
	Элементы.ПричинаСписания.СписокВыбора.Добавить("CONFISCATION","Конфискация");
	Элементы.ПричинаСписания.СписокВыбора.Добавить("DESTRUCTION","Уничтожение");
	Элементы.ПричинаСписания.СписокВыбора.Добавить("EXPIRY","Истечение срока годности"); 
	Элементы.ПричинаСписания.СписокВыбора.Добавить("LIQUIDATION","Ликвидация");
	Элементы.ПричинаСписания.СписокВыбора.Добавить("OTHER","Прочее");
	Элементы.ПричинаСписания.СписокВыбора.Добавить("OWN_USE_EXCISE","Списание для собственных нужд с уплатой акциза");
	//ЕНС
	Элементы.ПричинаСписания.СписокВыбора.Добавить("RETAIL", "Розничная продажа");
	
	ПричинаСписания = ЭтаФорма.Элементы.ПричинаСписания.СписокВыбора[0].Значение;

    НомерВыбытия = "1";
	ДатаВыбытия = ТекущаяДата();   
	
	// ЕНС. Пока непонятно. Типы документов есть в файле "Описание True API", но они там указаны
	// в описаниях конкретных "документов" - напр.:
	//	4.2.8 Вывод из оборота.
	//	параметр document_type, колонка Комментарий:
	//	Возможные значения:
	//		«RECEIPT» — «Кассовый чек»;
	//		«SALES_RECEIPT» — «Товарный чек»;
	//		«CONSIGNMENT_NOTE» — «Товарная накладная»;
	//		«CUSTOMS_DECLARATION» — «Таможенная декларация»;
	//		«UTD» — «Универсальный передаточный документ»;
	//		«DESTRUCTION_ACT» — «Акт уничтожения(утраты/утилизации)»;
	//		«OTHER» — «Прочее».
	Элементы.ТипДокументаВыбытия.СписокВыбора.Добавить("DESTRUCTION_ACT", "Акт уничтожения");
	Элементы.ТипДокументаВыбытия.СписокВыбора.Добавить("OTHER", "Другой");
	//ЕНС
	Элементы.ТипДокументаВыбытия.СписокВыбора.Добавить("RECEIPT", "Кассовый чек");
	
	
	
	ТипДокументаВыбытия = Элементы.ТипДокументаВыбытия.СписокВыбора[1].Значение;
	ДругойДокументВыбытия = "Списание товаров";
	Элементы.ДругойДокументВыбытия.Видимость = Истина;
	ЧтоПеренестиВВыбытие = 1;              
	
	СтатусКМ = ЭтаФорма.Элементы.СтатусКМ.СписокВыбора[0].Значение; 
	ТипУпаковки = ЭтаФорма.Элементы.ТипУпаковки.СписокВыбора[0].Значение;
КонецПроцедуры  



#Область РаботаССертификатами


&НаСервере
Функция ПолучитьИНН_ИзСертификата(стрСертификата,Разделитель) 
	
	МассивЗначений = СтрРазделить(стрСертификата,Разделитель); 
	Для Каждого элемент Из МассивЗначений Цикл   
	  позиция_ИНН_ООО = СтрНайти(элемент,"ИНН ЮЛ=");
	  Если позиция_ИНН_ООО >0 Тогда  
		  Возврат Сред(СокрЛП(элемент),8);
	  КонецЕсли;
	КонецЦикла;        
		
	
	Для Каждого элемент Из МассивЗначений Цикл 
	  позиция_ИНН_ИП = СтрНайти(элемент,"ИНН="); 
	  Если позиция_ИНН_ИП >0 Тогда  
		  Возврат Сред(СокрЛП(элемент),5);
	  КонецЕсли;	  
	КонецЦикла;        
	
	//МассивЗначений = СтрРазделить(стрСертификата,Разделитель); 
	//Для Каждого элемент Из МассивЗначений Цикл 
	//  позиция = СтрНайти(элемент,"ИНН=");
	//  Если позиция >0 Тогда  
	//	  Возврат Сред(СокрЛП(элемент),5);
	//  КонецЕсли;
	//КонецЦикла;        
			
	Возврат Неопределено;		
КонецФункции  
 
&НаСервере
Функция НайтиИндексВМассивеПоСтроке(СтрокаПоиска,МассивЗначений)
	Индекс = 0;
	Для Каждого элемент Из МассивЗначений Цикл
	  позиция = СтрНайти(элемент,СтрокаПоиска); 
	  Если позиция >0 Тогда  
		  Возврат Индекс;
	  КонецЕсли;
	  Индекс = Индекс+1;
	КонецЦикла;        
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПолучитьИНН_ИзСертификатаКлиент(стрСертификата,Разделитель) 
	
	МассивЗначений = СтрРазделить(стрСертификата,Разделитель); 
	Для Каждого элемент Из МассивЗначений Цикл 
	  позиция = СтрНайти(элемент,"ИНН=");
	  Если позиция >0 Тогда  
		  Возврат Сред(СокрЛП(элемент),5);
	  КонецЕсли;
	КонецЦикла;        
			
	Возврат Неопределено;		
КонецФункции  

&НаСервере
Процедура ПолучитьТокенНаСервере()
	// Получение данных для получения токена
	HTTPСоединение =    Новый HTTPСоединение(Сервер,443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	//HTTPЗапрос = новый HTTPЗапрос("/api/v3/auth/cert/key"); 
	HTTPЗапрос = новый HTTPЗапрос("/api/v3/true-api/auth/key");
	Заголовки = Новый Соответствие;
	//Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
	//Заголовки.Вставить("Accept", "application/json");

	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("GET",HTTPЗапрос);
	ОтветСтрока = HTTPОтвет.ПолучитьТелоКакСтроку("UTF-8"); 
	Чтение_JSON = Новый ЧтениеJSON; 
	Чтение_JSON.УстановитьСтроку(ОтветСтрока); 
	ДанныеJSON = ПрочитатьJSON(Чтение_JSON); 
	Чтение_JSON.Закрыть();
	УИД = ДанныеJSON.uuid;
	ДанныеДляПолученияТокена = ДанныеJSON.data;
	//ЗаписатьВЖурнал("Получение данных /api/v4/auth/cert/key" + Символы.ПС + ДанныеДляПолученияТокена);
	
	// Подписание данных для получения токена
	ДанныеДляПолученияТокена = ПодписатьТекст(ЗашифроватьBase64(ДанныеДляПолученияТокена, КодировкаТекста.UTF8),Сертификат,Ложь);
	//ЗаписатьВЖурнал("Подписано сертификатом " + СертификатДляОбмена + Символы.ПС + ДанныеДляПолученияТокена);
	
	// Получение токена с использованием подписанных данных
	Соединение = Новый HTTPСоединение(Сервер,443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
	Заголовки.Вставить("Accept", "application/json");
	//HTTPЗапрос = Новый HTTPЗапрос("/api/v3/auth/cert/",Заголовки);   
	HTTPЗапрос = Новый HTTPЗапрос("/api/v3/true-api/auth/simpleSignIn",Заголовки);
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	ДанныеДляЗапроса = Новый Структура;
	ДанныеДляЗапроса.Вставить("uuid",УИД);
	ДанныеДляЗапроса.Вставить("data",ДанныеДляПолученияТокена);	
	ЗаписатьJSON(Запись_JSON,ДанныеДляЗапроса);
	СтрокаДляЗапроса = Запись_JSON.Закрыть();
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаДляЗапроса,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Чтение_JSON = Новый ЧтениеJSON;
	Чтение_JSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
	
	Токен = ПрочитатьJSON(Чтение_JSON, Ложь).token;	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокен(Команда)
	ПолучитьТокенНаСервере();
КонецПроцедуры   


#КонецОбласти


#Область Универсальные


&НаСервере
Функция ЗашифроватьBase64(Строка, Кодировка) Экспорт
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, Кодировка);
    ЗаписьТекста.Записать(Строка);
    ЗаписьТекста.Закрыть();
    Двоичные = Новый ДвоичныеДанные(ИмяВременногоФайла);
    Результат = Base64Строка(Двоичные);
	Если Лев(Результат, 4) = "77u/" Тогда
		Результат = Сред(Результат, 5);
	КонецЕсли; 
	Результат = СтрЗаменить(Результат, Символы.ПС, "");
    УдалитьФайлы(ИмяВременногоФайла);
    Возврат Результат;
КонецФункции


#КонецОбласти



#Область ПолучениеТокена


&НаСервере
// sThumbprint - отпечаток сертификата, используемого для подписи; строка,
// представляющая отпечаток в шестнадцатеричном виде
// пример 195934d72dcdf69149901d6632aca4562d8806d8
// ТекстДляПодписи должен быть в Base64
// bDetached - Истина/Ложь - откреплённая(для подписания документов)/прикреплённая(для получения токена авторизации) подпись
Функция ПодписатьТекст(ТекстДляПодписи, sThumbprint, bDetached)
	CADESCOM_BASE64_TO_BINARY = 1; // Входные данные пришли в Base64
	CADESCOM_CADES_TYPE = 1; // Тип усовершенствованной подписи
	CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0; // Атрибут штампа времени подписи
	oSigner = Новый COMОбъект("CAdESCOM.CPSigner");
	// Объект, задающий параметры создания и содержащий информацию об усовершенствованной подписи.
	oSigner.Certificate = ПолучитьСертификатПоОтпечатку(sThumbprint);
	oSigningTimeAttr = Новый COMОбъект("CAdESCOM.CPAttribute");
	oSigningTimeAttr.Name = CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME;
	oSigningTimeAttr.Value = ТекущаяДата();
	oSigner.AuthenticatedAttributes2.Add(oSigningTimeAttr);
	ТекстДляПодписи = СокрЛП(ТекстДляПодписи);
	oSignedData = Новый COMОбъект("CAdESCOM.CadesSignedData");
	// Объект CadesSignedData предоставляет свойства и методы для работы с усовершенствованной подписью.
	oSignedData.ContentEncoding = CADESCOM_BASE64_TO_BINARY;
	oSignedData.Content = СокрЛП(ТекстДляПодписи);
	EncodingType = 0;
	sSignedMessage = oSignedData.SignCades(oSigner, CADESCOM_CADES_TYPE,
	bDetached, EncodingType);
	// Метод добавляет к сообщению усовершенствованную подпись.
	Возврат sSignedMessage; // Подпись в формате Base64
КонецФункции    

//Отпечаток - строка HEX
Функция ПолучитьСертификатПоОтпечатку(ОтпечатокСтр)
	Рез = Неопределено; // Найденный сертификат (Com-объект)
	CAPICOM_CURRENT_USER_STORE = 2;
	//2 - Искать сертификат в ветке "Личное" хранилища.
	CAPICOM_MY_STORE = "My";
	// Указываем, что ветку "Личное" берем из хранилища текущего пользователя
	CAPICOM_STORE_OPEN_READ_ONLY = 0; // Открыть хранилище только на чтение
	oStore = Новый COMОбъект("CAdESCOM.Store"); // Объект описывает хранилище сертификатов
	
	oStore.Open(CAPICOM_CURRENT_USER_STORE, CAPICOM_MY_STORE,
	CAPICOM_STORE_OPEN_READ_ONLY); // Открыть хранилище сертификатов
	// 1 вариант: поиск сертификата по отпечатку
	//CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;
	//Certificates = oStore.Certificates.Find(CAPICOM_CERTIFICATE_FIND_SHA1_HASH, ОтпечатокСтр);
	//Рез = Certificates.Item(1);
	
	//2 вариант: обходом по коллекции и сравнение с отпечатком
	Для Каждого ТекСертификат Из oStore.Certificates Цикл
		ТекОтпечаток = ТекСертификат.Thumbprint; // возвращается отпечаток в шестнадцатеричном виде
		Если ВРЕГ(ТекОтпечаток) = ВРЕГ(ОтпечатокСтр) Тогда Рез = ТекСертификат;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	oStore.Close(); // Закрыть хранилище сертификатов и освободить объект 61
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура СертификатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) 
   стрВыбранныйСертификат = Элементы.Сертификат.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
   ИННУчастника = ПолучитьИНН_ИзСертификатаКлиент(стрВыбранныйСертификат,"|");	
КонецПроцедуры



#КонецОбласти




//----Раздел 1 ---- конец ---- Получение токена ---- конец    Раздел ---- Получение токена ---- конец    


//----Раздел 2 ---- Начало --- Запрос кодов маркировки по фильтру | Дата эмиссии От | Дата эмиссии До ---

#Область ЗапросКМ

// Получает коды маркировки с сервера ЦРПТ (те, что эмитированы для текущей организации)
&НаСервере
Процедура ОтправитьЗапросНаСервере()
	
	КМ.Очистить(); //это ТЗ на странице КодыМаркировки
	
	// Поддерживаемый запрос POST
	
	Соединение = Новый HTTPСоединение(Сервер,443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
	Заголовки.Вставить("Accept", "application/json");
	
	HTTPЗапрос = Новый HTTPЗапрос("/api/v4/true-api/cises/search",Заголовки);
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Токен);  
	
	//-- тело запроса
	
	ДанныеДляЗапроса = Новый Структура;    // собираем в структуру параметры тела POST запроса
	// далее записываем в JSON формат
	// далее JSON - в строку запроса
	// выполняем запроc
	
	//--- Используемые параметры тела запроса 
	//   filter - тип объект - параметры фильтрации - поиск КИ (кодов идентификации) по указанным значениям параметров КИ
	//        Вложенные параметры:
	//            *emissionDatePeriod - тип объект (структура) - период эмиссиии
	//               **from - тип - string (datetime) - дата эмиссии, от // пример "2023-06-20T00:00:00.000Z"
	//               **to   - тип - string (datetime) - дата эмиссии, до // пример "2023-06-29T23:59:59.000Z"  
	//            *states             - тип массив объектов (структур)
	//               **status - тип string - Код статуса КИ -  INTRODUCED - в обороте, WITHDRAWN - выбыл, только для табачных групп, RETIRED - выбыл, для остальных групп  
	//            *productGroups - тип массив строк - Список товарных групп // tobacco - табачная продукция 
	//
	//
	//   pagination - тип объект (структура) -  Параметры пагинации - Обеспечивает постраничный вывод результата поиска КИ
	//        Вложенные параметры:
	//            *perPage - тип целое число - Максимальное количество записей на странице результата поиска
	//                                         Значение по умолчанию: 100. Значение параметра не должно превышать 1000
	//            *lastEmissionDate - тип - string (datetime) - Дата эмиссии КИ, с которой требуется начать вывод результата поиска
	//            *sgtin - тип string - Идентификационный номер SGTIN (GTIN + индивидуальный серийный номер),с которого требуется начать вывод результата поиска                                              
	//             
	ДанныеДляЗапроса_filter = Новый Структура;    // структура внутреннего параметра filter
	
	
	//--- Параметр *emissionDatePeriod Период эмиссии
	ДатаЭмиссииОтСтр = ЗаписатьДатуJSON(ДатаЭмиссииОт,ФорматДатыJSON.ISO)+".000Z";
	ДатаЭмиссииДоСтр = ЗаписатьДатуJSON(КонецДня(ДатаЭмиссииДо),ФорматДатыJSON.ISO)+".000Z";
	
	//--- Параметр 
	emissionDatePeriod_Структура = Новый Структура;
	//ДатаЭмиссииОтСтр = "2023-06-20T00:00:00.000Z"; 
	//ДатаЭмиссииДоСтр = "2023-06-29T23:59:59.000Z";
	emissionDatePeriod_Структура.Вставить("from",ДатаЭмиссииОтСтр);
	emissionDatePeriod_Структура.Вставить("too",ДатаЭмиссииДоСтр);    		
	
	ДанныеДляЗапроса_filter.Вставить("emissionDatePeriod",emissionDatePeriod_Структура);    
	
	
	//--- Параметр *generalPackageTypes - Список видов упаковок (Например, UNIT - единица, GROUP - группа (пачка) и т.д. см. справочник документации)
	Если Не ТипУпаковки = "ANY" Тогда
		generalPackageTypes_Массив = Новый Массив;
		generalPackageTypes_Массив.Добавить(ТипУпаковки);       
		
		ДанныеДляЗапроса_filter.Вставить("generalPackageTypes",generalPackageTypes_Массив);       
		
		
	КонецЕсли;
	
	//--- Параметр *states - Список статусов КИ  (массив объектов)  
	Если НЕ СтатусКМ = "ANYSTATUS" ТОГДА 					
		СтатусыКМ_ДляФильтра = Новый Массив;  
		СтатусКМ_ДляФильтра = Новый Соответствие;
		СтатусКМ_ДляФильтра.Вставить("status",СтатусКМ);       // **status Код статуса КИ ( INTRODUCED - в обороте ) 
		СтатусыКМ_ДляФильтра.Добавить(СтатусКМ_ДляФильтра);    // *states массив статусов для вставки в тело фильтра
		
		ДанныеДляЗапроса_filter.Вставить("states",СтатусыКМ_ДляФильтра);			
		
	КонецЕсли;
	//--- 			
	
	
	//--- Параметр *productGroups - Список товарных групп
	МассивГруппТоваров = Новый Массив;
	//МассивГруппТоваров.Добавить("tobacco"); 
	МассивГруппТоваров.Добавить(ГруппаТоваров);
	
	
	ДанныеДляЗапроса_filter.Вставить("productGroups",МассивГруппТоваров); 
	
	//pagination - структура - пагинация - параметры пагинации - обеспечивает постраничный вывод результата поиска КИ
	
	//ДатаЭмиссииКИ = "2023-06-30T00:00:00.000Z";
	ДатаЭмиссииКИ = ЗаписатьДатуJSON(ДатаЭмиссииДо+86400,ФорматДатыJSON.ISO)+".000Z"; 
	ИдентификационныйНомерSGTIN = "0";  // номер кода маркировки, с которого требуется начать вывод 
	
	ДанныеДляЗапроса_pagination = Новый Структура;
	perPage = Формат(110,"ЧЦ=10"); 
	ДанныеДляЗапроса_pagination.Вставить("perPage",perPage);
	ДанныеДляЗапроса_pagination.Вставить("lastEmissionDate",ДатаЭмиссииКИ);
	ДанныеДляЗапроса_pagination.Вставить("sgtin",ИдентификационныйНомерSGTIN); 
	
	
	ДанныеДляЗапроса.Вставить("filter",ДанныеДляЗапроса_filter); 
	ДанныеДляЗапроса.Вставить("pagination",ДанныеДляЗапроса_pagination);
	
	ПоследняяСтраницаОтветаНаЗапрос = ложь; 
	
	Запись_JSON = Новый ЗаписьJSON;  //ЗаписьJSON
	
	Пока НЕ ПоследняяСтраницаОтветаНаЗапрос Цикл 
		
		Запись_JSON.УстановитьСтроку();
		ЗаписатьJSON(Запись_JSON,ДанныеДляЗапроса);
		СтрокаДляЗапроса = Запись_JSON.Закрыть();
		
		HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаДляЗапроса,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
		
		Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос); 
		
		Если Ответ.КодСостояния = 200 Тогда   
			Сообщить("Код ответа на запрос: "+Ответ.КодСостояния+ "  - выполнен успешно.");
			Чтение_JSON = Новый ЧтениеJSON;
			
			Чтение_JSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());	
			ОтветНаЗапрос = ПрочитатьJSON(Чтение_JSON, Ложь);	
			
			Сообщить("Эта последняя станица результатов: "+ОтветНаЗапрос.isLastPage); 
			ПоследняяСтраницаОтветаНаЗапрос = ОтветНаЗапрос.isLastPage;
			ОтветНаЗапросРезультат = ОтветНаЗапрос.result;
			n=0; 
			Для Каждого элемент Из ОтветНаЗапросРезультат  Цикл  
				строка = КМ.Добавить();  
				n=n+1;
				строка.n = n;
				строка.gtin = элемент.gtin;
				строка.sgtin = элемент.sgtin;  
				строка.status = элемент.status; 
				строка.emissionDate = элемент.emissionDate; 
				строка.applicationDate = элемент.applicationDate; 
				строка.generalPackageType = элемент.generalPackageType; 
				строка.ownerINN = элемент.ownerINN;
				строка.productGroup = элемент.productGroup; 
				Если элемент.Свойство("parent") Тогда
					строка.parent = элемент.parent; 
				КонецЕсли;
			КонецЦикла;        
			
			Если КМ.Количество()>0 Тогда
				
				ДанныеДляЗапроса.Удалить("pagination");
				ДанныеДляЗапроса_pagination.Удалить("lastEmissionDate");  
				ДанныеДляЗапроса_pagination.Удалить("sgtin");
				
				ДанныеДляЗапроса_pagination.Вставить("lastEmissionDate",строка.emissionDate);	
				ДанныеДляЗапроса_pagination.Вставить("sgtin",строка.sgtin);
				ДанныеДляЗапроса.Вставить("pagination",ДанныеДляЗапроса_pagination);
				
				
			Иначе
				Прервать;
			КонецЕсли; 
		ИначеЕсли Ответ.КодСостояния = 403 Тогда   
			ГруппаТоваровПредставление = Элементы.ГруппаТоваров.СписокВыбора.НайтиПоЗначению(ГруппаТоваров).Представление;
			Сообщить("Код ответа на запрос: "+Ответ.КодСостояния +" - ошибка! Отсутствует действующий договор по "+""""+ ГруппаТоваровПредставление+"""" );
			Прервать;	
		Иначе  
			Сообщить("Код ответа на запрос: "+Ответ.КодСостояния +" - ошибка!" );
			Прервать;	
		КонецЕсли; 
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапрос(Команда)
	ОтправитьЗапросНаСервере();
КонецПроцедуры


#КонецОбласти


//----Раздел 2 ---- конец ---- Запрос кодов маркировки по фильтру | Дата эмиссии От | Дата эмиссии До ---


//--- Блок списания КМ Табачной продукции  
//-    

//-  


#Область ВыбытиеКМ

// ЕНС. Переносит номенклатуру между таблицами на разных страницах формы
&НаСервере
Процедура ПеренестиВВыбытиеНаСервере() 
   ФильтрВыгрузки = Новый Структура;
   ФильтрВыгрузки.Вставить("status","INTRODUCED");
   ФильтрВыгрузки.Вставить("productGroup",ВРег(ГруппаТоваров)); // "TOBACCO", "otp",  "ncp" 
   
   Если ЧтоПеренестиВВыбытие=1 Тогда
	   ФильтрВыгрузки.Вставить("generalPackageType","GROUP"); 
   ИначеЕсли ЧтоПеренестиВВыбытие=2 Тогда 
	   ФильтрВыгрузки.Вставить("generalPackageType","UNIT");
   ИначеЕсли ЧтоПеренестиВВыбытие=3 Тогда 
	   //   
   КонецЕсли;

   ТаблицаДляВыбытия = КМ.Выгрузить(ФильтрВыгрузки,"sgtin,generalPackageType"); 
   Выбытие.Загрузить(ТаблицаДляВыбытия);  
   Элементы.ГруппаСтраницы.ТекущаяСтраница =  Элементы.Выбытие;
КонецПроцедуры

// ЕНС. Переносит номенклатуру между таблицами на разных страницах формы
&НаКлиенте
Процедура ПеренестиВВыбытие(Команда)
	ПеренестиВВыбытиеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтправитьЗапросСписанияНаСервере()       
	
	Соединение = Новый HTTPСоединение(Сервер,443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
	Заголовки.Вставить("Accept", "application/json");
	
	СтрокаЗапроса = "/api/v3/true-api/lk/documents/create?pg="+ГруппаТоваров; // tobacco 
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);  //tobacco - для группы Табачная продукция
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Токен);   
	      

	Запись_JSON = Новый ЗаписьJSON;            //-- JSON для тела запроса 
	Запись_JSON.УстановитьСтроку(); 

	Запись_JSON_Документ = Новый ЗаписьJSON;   //-- JSON для структуры документа
	Запись_JSON_Документ.УстановитьСтроку(); 
	
	
	//-- СТРУКТУРА ДОКУМЕНТА "Выбытие"  (по окончании формирования преобразуем в формат JSON, и вставляем параметром в тело запроса)  
	ВыбытиеДокументСтруктура = Новый Структура;
	ВыбытиеДокументСтруктура.Вставить("participantId",ИННУчастника);      // ИНН участника оборота товаров
	ВыбытиеДокументСтруктура.Вставить("dropoutReason",ПричинаСписания);   // Причина списания (Брак) "DEFECT"
	ВыбытиеДокументСтруктура.Вставить("address",      АдресСписания);     // адрес списания (адрес организации или магазина)
	ВыбытиеДокументСтруктура.Вставить("withChild",    "true");                   // Признак списания всех вложенных элементов (не обязательно, по-умолчанию "true")
	//ВыбытиеДокументСтруктура.Вставить("sourceDocType",ТипДокументаВыбытия);    // Тип первичного документа  (формируется далее)
																                 //	Возможные значения:
																	             //           «DESTRUCTION_ACT» — «Акт уничтожения (утраты / утилизации)»;
																	             //           «OTHER» — «Прочее»
        																	
	КМ_Массив = Новый Массив;                          
	Для Каждого элемент Из Выбытие Цикл  
		Если элемент.generalPackageType = "GROUP" Тогда     // Если это упаковка (Блок)
			Лев14 = Лев(элемент.Sgtin,14);                  // добавляем к КМ контрольные символы "(01)" и "(21)"
			gtin21 ="(01)"+Лев14+"(21)";
			элементSgtin = СтрЗаменить(элемент.Sgtin,Лев14,gtin21);
		ИначеЕсли элемент.generalPackageType = "UNIT" Тогда // если это единица товара,
			элементSgtin = элемент.Sgtin                    // оставляем без изменений
		КонецЕсли;
		КМ_Массив.Добавить(элементSgtin);	// формируем массив кодов маркировки 
	КонецЦикла; 
	
	
	ВыбытиеДокументСтруктура.Вставить("sntins",КМ_Массив);                       // вставляем массив кодов маркировки в структуру документа честного знака "Выбытие"
	// ВыбытиеДокументСтруктура.Вставить("sourceDocType","");                    // для табачной продукции параметр необязательный
	ДатаВыбытияСтр = Формат(ДатаВыбытия,"ДФ=""гггг-ММ-дд""");          // формат: yyyy-MM-dd   
	ВыбытиеДокументСтруктура.Вставить("sourceDocDate", ДатаВыбытияСтр);    	
	ВыбытиеДокументСтруктура.Вставить("sourceDocNum",  НомерВыбытия); 
	Если ТипДокументаВыбытия = "OTHER" Тогда
		ВыбытиеДокументСтруктура.Вставить("sourceDocType",ТипДокументаВыбытия); 
		ВыбытиеДокументСтруктура.Вставить("sourceDocName",ДругойДокументВыбытия);// для табачной продукции параметр необязательный (заполняется, когда тип документа "OTHER")
	КонецЕсли;
	ЗаписатьJSON(Запись_JSON_Документ,ВыбытиеДокументСтруктура);                 // преобразуем тело документа "Выбытие" в формат JSON
	ВыбытиеДокумент_JSON = Запись_JSON_Документ.Закрыть();                       // документ выбытия в формате JSON
	
		
	ВыбытиеДокумент_JSON_Base64 = ЗашифроватьBase64(ВыбытиеДокумент_JSON,КодировкаТекста.UTF8);  // шифруем   ВыбытиеДокумент_JSON в Base64 
	ОткрепленнаяПодпись = ПодписатьТекст(ВыбытиеДокумент_JSON_Base64,Сертификат,Истина);         // получаем откреплённую подпись (УКЭП)
	                                                                                                // в формате base64 

	//-- ФОРМИРУЕМ СТРУКТУРУ ТЕЛА ЗАПРОСА (далее преобразуем в формат JSON)
	
	ДанныеДляЗапроса = Новый Структура;   
    ДанныеДляЗапроса.Вставить("document_format", "MANUAL");                       // Параметр №1 : тип документа MANUAL - .json	
	ДанныеДляЗапроса.Вставить("product_document",ВыбытиеДокумент_JSON_Base64);    // Параметр №3 : ВыбытиеДокумент_JSON_Base64 
    ДанныеДляЗапроса.Вставить("type",            "WRITE_OFF");                    // Параметр №3 : код типа документа: Выбытие ( WRITE_OFF)
	ДанныеДляЗапроса.Вставить("signature",       ОткрепленнаяПодпись);            // Параметр №4 : откреплённая подпись (УКЭП) в формате base64 
	//--    
	
	ЗаписатьJSON(Запись_JSON,ДанныеДляЗапроса);
	ДанныеДляЗапроса_JSON = Запись_JSON.Закрыть();     // тело запроса записываем в формат JSON
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеДляЗапроса_JSON,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);     
	

	Если (Ответ.КодСостояния = 200) или (Ответ.КодСостояния = 201)  Тогда   
			Сообщить("Код ответа на запрос: "+Ответ.КодСостояния+ "  - выполнен успешно.");   
			
			//Чтение_JSON   = Новый ЧтениеJSON;	
			//Чтение_JSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());	
			//ОтветНаЗапрос = ПрочитатьJSON(Чтение_JSON, Истина);	
		    списание_id = Ответ.ПолучитьТелоКакСтроку();                          // id Документа, по документации он должен возвращаться в параметре
			Сообщить("id (номер) созданого документа: "+списание_id);             // но возвращается строкой в теле ответа

	Иначе  
			Сообщить("Код ответа на запрос: "+Ответ.КодСостояния +" - ошибка!" );
				
	КонецЕсли;        


КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросСписания(Команда)
	Если ПроверитьПараметрыЗапросаСписания() Тогда
	  ОтправитьЗапросСписанияНаСервере();   
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Функция ПроверитьПараметрыЗапросаСписания()   
	УспешнаяПроверка = Истина; 
	Если СтрДлина(АдресСписания) <30 Тогда 
		Сообщить("Заполните адрес списания."); УспешнаяПроверка = Ложь;
	КонецЕсли;
	Если СтрДлина(ДругойДокументВыбытия) <3 Тогда 
		Сообщить("Заполните название документа списания."); УспешнаяПроверка = Ложь;
	КонецЕсли;
	Если Выбытие.Количество()=0 Тогда  
		Сообщить("Заполните таблицу списания кодами маркировки."); УспешнаяПроверка = Ложь;
	КонецЕсли;
	
	Возврат УспешнаяПроверка;
КонецФункции


&НаКлиенте
Процедура ТипДокументаВыбытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = "OTHER" Тогда    
		элементы.ДругойДокументВыбытия.Видимость = Истина;
	Иначе
		элементы.ДругойДокументВыбытия.Видимость = Ложь;	
	КонецЕсли;
КонецПроцедуры



#КонецОбласти





