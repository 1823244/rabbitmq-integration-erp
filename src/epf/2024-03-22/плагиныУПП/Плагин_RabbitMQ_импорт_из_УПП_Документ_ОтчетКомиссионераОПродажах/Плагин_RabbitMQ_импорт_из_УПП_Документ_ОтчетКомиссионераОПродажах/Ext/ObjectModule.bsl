Перем мВнешняяСистема;
Перем мИмяСобытияЖР;
Перем СобиратьНенайденнуюНоменклатуру Экспорт;
Перем мНеНайденнаяНоменклатураМассив;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.5");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Документ_ОтчетКомиссионераОПродажах");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Документ_ОтчетКомиссионераОПродажах");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Документ_ОтчетКомиссионераОПродажах",
		"Форма_Плагин_RabbitMQ_импорт_из_УПП_Документ_ОтчетКомиссионераОПродажах",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	Если НЕ СтруктураОбъекта.Свойство("type") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.ОтчетКомиссионераОПродажах") Тогда
		Возврат Неопределено;
	КонецЕсли;

	

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаУПП = "ОтчетКомиссионераОПродажах № "+строка(деф.number)+"от "+Строка(деф.date);
	
	
	ВидОбъекта = "ОтчетКомиссионера";

	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(мИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;

	мНеНайденнаяНоменклатураМассив = Новый Массив;
	
	
	//------------------------------------- Заполнение реквизитов
	Попытка			
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText);		
		ЗафиксироватьТранзакцию();          		
		Рез =  ДанныеСсылка;		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(мИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Рез = Неопределено;
	КонецПопытки;
	
	ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовНоменклатуры( мНеНайденнаяНоменклатураМассив );

	Если НЕ РЕз = Неопределено Тогда
		
		//успешно
		
		ВидДокумента 		= СтруктураОбъекта.type;
		Склад 				= Неопределено;
		СкладОтправитель 	= Неопределено;
		СкладПолучатель 	= Неопределено;
		ТекстСообщения 		= "Успешно загружен (без субплагина)";
		ЛогикаПеремещения 	= Неопределено;
		ЛогикаСклад 		= Неопределено;
		Обработчик 			= Неопределено;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
							ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
		деф.Number,
		деф.date,
		Истина, // ошибки исправлены
		Id.ref,
		Рез);
		
	Иначе 
		//НЕ успешно
		
		ВидДокумента 		= СтруктураОбъекта.type;
		Склад 				= Неопределено;
		СкладОтправитель 	= Неопределено;
		СкладПолучатель 	= Неопределено;
		ТекстСообщения 		= "Ошибка загрзки (без субплагина): "+т;
		ЛогикаПеремещения 	= Неопределено;
		ЛогикаСклад 		= Неопределено;
		Обработчик 			= Неопределено;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
							ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП,
		деф.Number,
		деф.date,
		Ложь, // ошибки исправлены
		Id.ref);
		
		
	КонецЕсли;
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	//------------------------------------- Заполнение реквизитов
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
 	ОбъектДанных.Валюта = константы.ВалютаРегламентированногоУчета.Получить();
 	ОбъектДанных.ВидыЗапасовУказаныВручную = Ложь;
	ОбъектДанных.ДатаВходящегоДокумента = деф.ДатаВходящегоДокумента;
	ОбъектДанных.Договор = ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента, деф.Контрагент);
	ОбъектДанных.Комментарий = деф.Комментарий;
	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, МВнешняяСистема);
	ОбъектДанных.НалогообложениеНДС = перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ОбъектДанных.НомерВходящегоДокумента = деф.НомерВходящегоДокумента;
	ОбъектДанных.ОплатаВВалюте = Ложь;
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Партнер = ОбъектДанных.Контрагент.Партнер;//ксп_ИмпортСлужебный.НайтиПартнер(деф.Партнер);
	ОбъектДанных.ПоРезультатамИнвентаризации = Ложь;
	ОбъектДанных.ПорядокРасчетов = ОбъектДанных.Договор.ПорядокРасчетов;
	ОбъектДанных.ПроцентВознаграждения = деф.ПроцентКомиссионногоВознаграждения;
	ОбъектДанных.СпособРасчетаВознаграждения = деф.СпособРасчетаКомиссионногоВознаграждения;
	ОбъектДанных.СтавкаНДСВознаграждения = деф.СтавкаНДСВознаграждения;
	ОбъектДанных.СуммаВознаграждения = деф.СуммаВознаграждения;
	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	ОбъектДанных.СуммаНДСВознаграждения = деф.СуммаНДСВознаграждения;
	ОбъектДанных.УдержатьВознаграждение = деф.УдержатьКомиссионноеВознаграждение;// булево
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера;
	ОбъектДанных.ЦенаВключаетНДС = деф.НДСВключенВСтоимость;


	//------------------------------------------------------     ТЧ Товары



	ОбъектДанных.Товары.Очистить();

	
	Склад = Неопределено;
	
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();
		
		

		СтрокаТЧ.Количество = стрк.Количество;

		//СтрокаТЧ.КоличествоПоРНПТ = стрк.КоличествоПоРНПТ;

		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;

		СтрокаТЧ.КоличествоУпаковокУчет = стрк.Количество;

		СтрокаТЧ.КоличествоУпаковокФакт = стрк.Количество;

	
		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		
		Если СобиратьНенайденнуюНоменклатуру Тогда
			Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
				Если мНеНайденнаяНоменклатураМассив.Найти(стрк.Номенклатура.ref) = Неопределено Тогда
					мНеНайденнаяНоменклатураМассив.Добавить(стрк.Номенклатура.Ref);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = _Номенклатура;
		
		СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюУПП(стрк.СтавкаНДС);

		//СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
				//"Сумма": "1438",
				//"СуммаВознаграждения": "193.74",
				//"СуммаНДС": "239.67",
				//"СуммаНДСВознаграждения": "32.29",
				//"СуммаНДСПередачи": "3366.5",
				//"СуммаПередачи": "20199",

		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ.СуммаВознаграждения = стрк.СуммаВознаграждения;

		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

		СтрокаТЧ.СуммаНДСВознаграждения = стрк.СуммаНДСВознаграждения;

		СтрокаТЧ.СуммаПродажи = стрк.Сумма;

		СтрокаТЧ.СуммаПродажиНДС = стрк.СуммаНДС;

		СтрокаТЧ.СуммаСНДС = стрк.Сумма;

		СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.ЕдиницаИзмерения, стрк.Номенклатура);

        // ОК
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);

		СтрокаТЧ.Цена = стрк.ЦенаПередачи;

		СтрокаТЧ.ЦенаПродажи = стрк.Цена;

		// временно отключим, чтоы проверить внутренние механизмы заполнения
		//СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный
		//	.НайтиСоздатьКлючАналитикиНом(строкаТЧ.Номенклатура, Склад, строкаТЧ.Характеристика);

		
	КонецЦикла;

	////------------------------------------------------------     ТЧ ЭтапыГрафикаОплаты



	//ОбъектДанных.ЭтапыГрафикаОплаты.Очистить();


	//Для счТовары = 0 По деф.ТЧЭтапыГрафикаОплаты.Количество()-1 Цикл
	//	стрк = деф.ТЧЭтапыГрафикаОплаты[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ЭтапыГрафикаОплаты.Добавить();


	//	_знч = "";
	//	ЕстьЗначение = стрк.ВариантОплаты.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.ВариантОплаты = стрк.ВариантОплаты.Значение;
	//	Иначе
	//		СтрокаТЧ.ВариантОплаты = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВариантОплаты = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантОплаты(стрк.ВариантОплаты);

	//	_знч = "";
	//	ЕстьЗначение = стрк.ВариантОтсчета.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.ВариантОтсчета = стрк.ВариантОтсчета.Значение;
	//	Иначе
	//		СтрокаТЧ.ВариантОтсчета = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВариантОтсчета = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантОтсчета(стрк.ВариантОтсчета);

	//	СтрокаТЧ.ДатаПлатежа = стрк.ДатаПлатежа;

	//	СтрокаТЧ.ПроцентПлатежа = стрк.ПроцентПлатежа;

	//	СтрокаТЧ.Сдвиг = стрк.Сдвиг;

	//	СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

	//	СтрокаТЧ.СуммаПлатежа = стрк.СуммаПлатежа;

	//КонецЦикла;


	
	////------------------------------------------------------     ТЧ ВидыЗапасов



	//ОбъектДанных.ВидыЗапасов.Очистить();


	//Для счТовары = 0 По деф.ТЧВидыЗапасов.Количество()-1 Цикл
	//	стрк = деф.ТЧВидыЗапасов[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ВидыЗапасов.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.АналитикаУчетаНоменклатуры.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНоменклатуры.Ref ) );
	//	Иначе
	//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ВидЗапасов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ВидЗапасов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЗапасов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ВидЗапасов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВидЗапасов = ксп_ИмпортСлужебный.НайтиВидЗапасов(стрк.ВидЗапасов);

	//	СтрокаТЧ.ДатаСчетаФактурыКомиссионера = стрк.ДатаСчетаФактурыКомиссионера;

	//	СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;

	//	гуид="";
	//	ЕстьАтрибут = стрк.КодТНВЭД.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.КодТНВЭД = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.КодТНВЭД.Ref ) );
	//	Иначе
	//		СтрокаТЧ.КодТНВЭД = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.КодТНВЭД = ксп_ИмпортСлужебный.НайтиКодТНВЭД(стрк.КодТНВЭД);

	//	СтрокаТЧ.Количество = стрк.Количество;

	//	СтрокаТЧ.КоличествоПоРНПТ = стрк.КоличествоПоРНПТ;

	//	СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

	//	гуид="";
	//	ЕстьАтрибут = стрк.НомерГТД.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НомерГТД = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НомерГТД.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НомерГТД = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НомерГТД = ксп_ИмпортСлужебный.НайтиНомерГТД(стрк.НомерГТД);

	//	СтрокаТЧ.НомерСчетаФактурыКомиссионера = стрк.НомерСчетаФактурыКомиссионера;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Покупатель.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Покупатель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Покупатель.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Покупатель = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Покупатель = ксп_ИмпортСлужебный.НайтиПокупатель(стрк.Покупатель);

	//	гуид="";
	//	ЕстьАтрибут = стрк.СтавкаНДС.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.СтавкаНДС = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СтавкаНДС.Ref ) );
	//	Иначе
	//		СтрокаТЧ.СтавкаНДС = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.НайтиСтавкаНДС(стрк.СтавкаНДС);

	//	СтрокаТЧ.СуммаВознаграждения = стрк.СуммаВознаграждения;

	//	СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

	//	СтрокаТЧ.СуммаНДСВознаграждения = стрк.СуммаНДСВознаграждения;

	//	СтрокаТЧ.СуммаСНДС = стрк.СуммаСНДС;

	//	_знч = "";
	//	ЕстьЗначение = стрк.УдалитьСтавкаНДС.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.УдалитьСтавкаНДС = стрк.УдалитьСтавкаНДС.Значение;
	//	Иначе
	//		СтрокаТЧ.УдалитьСтавкаНДС = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.УдалитьСтавкаНДС = ксп_ИмпортСлужебный.НайтиПеречисление_УдалитьСтавкаНДС(стрк.УдалитьСтавкаНДС);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Упаковка = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);

	//КонецЦикла;

	////------------------------------------------------------     ТЧ ДополнительныеРеквизиты



	//ОбъектДанных.ДополнительныеРеквизиты.Очистить();


	//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
	//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ДополнительныеРеквизиты.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Значение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Свойство = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);

	//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

	//КонецЦикла;

	////------------------------------------------------------     ТЧ РасшифровкаПлатежаСКлиентом



	//ОбъектДанных.РасшифровкаПлатежаСКлиентом.Очистить();


	//Для счТовары = 0 По деф.ТЧРасшифровкаПлатежаСКлиентом.Количество()-1 Цикл
	//	стрк = деф.ТЧРасшифровкаПлатежаСКлиентом[счТовары];
	//	СтрокаТЧ = ОбъектДанных.РасшифровкаПлатежаСКлиентом.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.ОбъектРасчетов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ОбъектРасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ОбъектРасчетов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ОбъектРасчетов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ОбъектРасчетов = ксп_ИмпортСлужебный.НайтиОбъектРасчетов(стрк.ОбъектРасчетов);

	//	СтрокаТЧ.Сумма = стрк.Сумма;

	//	СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

	//	гуид="";
	//	ЕстьАтрибут = стрк.УдалитьЗаказ.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.УдалитьЗаказ = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.УдалитьЗаказ.Ref ) );
	//	Иначе
	//		СтрокаТЧ.УдалитьЗаказ = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.УдалитьЗаказ = ксп_ИмпортСлужебный.НайтиУдалитьЗаказ(стрк.УдалитьЗаказ);

	//КонецЦикла;

	////------------------------------------------------------     ТЧ РасшифровкаПлатежаСПоставщиком



	//ОбъектДанных.РасшифровкаПлатежаСПоставщиком.Очистить();


	//Для счТовары = 0 По деф.ТЧРасшифровкаПлатежаСПоставщиком.Количество()-1 Цикл
	//	стрк = деф.ТЧРасшифровкаПлатежаСПоставщиком[счТовары];
	//	СтрокаТЧ = ОбъектДанных.РасшифровкаПлатежаСПоставщиком.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.ОбъектРасчетов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ОбъектРасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ОбъектРасчетов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ОбъектРасчетов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ОбъектРасчетов = ксп_ИмпортСлужебный.НайтиОбъектРасчетов(стрк.ОбъектРасчетов);

	//	СтрокаТЧ.Сумма = стрк.Сумма;

	//	СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

	//	гуид="";
	//	ЕстьАтрибут = стрк.УдалитьЗаказ.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.УдалитьЗаказ = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.УдалитьЗаказ.Ref ) );
	//	Иначе
	//		СтрокаТЧ.УдалитьЗаказ = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.УдалитьЗаказ = ксп_ИмпортСлужебный.НайтиУдалитьЗаказ(стрк.УдалитьЗаказ);

	//КонецЦикла;

	////------------------------------------------------------     ТЧ Серии



	//ОбъектДанных.Серии.Очистить();


	//Для счТовары = 0 По деф.ТЧСерии.Количество()-1 Цикл
	//	стрк = деф.ТЧСерии[счТовары];
	//	СтрокаТЧ = ОбъектДанных.Серии.Добавить();


	//	СтрокаТЧ.Количество = стрк.Количество;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Номенклатура = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Характеристика = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);

	//КонецЦикла;

	
	
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	
	
	Попытка
		// ЕНС. Используем типовые механизны для дозаполнения документа
		Отказ = Ложь;                                     
		ТаблицыДокумента = Документы.ОтчетКомиссионера.КоллекцияТабличныхЧастейТоваров();
		ОбъектДанных.ЗаполнитьВидыЗапасовПриОбмене(Отказ, ТаблицыДокумента);
	Исключение
		т = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(мИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,,т);
	КонецПопытки;

КонецФункции






#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	Рез = Неопределено;
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
		
		Для каждого эл Из СтруктураОбъекта Цикл
			ЗагрузитьОбъект(эл);
		КонецЦикла;
		
	Иначе 
		//структура
		рез = ЗагрузитьОбъект(СтруктураОбъекта);
	КонецЕсли;

	
	
	Возврат рез;
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


 мВнешняяСистема = "retail";
 
 мИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
 
 СобиратьНенайденнуюНоменклатуру = Истина;
 мНеНайденнаяНоменклатураМассив = Новый Массив;
 
 
 