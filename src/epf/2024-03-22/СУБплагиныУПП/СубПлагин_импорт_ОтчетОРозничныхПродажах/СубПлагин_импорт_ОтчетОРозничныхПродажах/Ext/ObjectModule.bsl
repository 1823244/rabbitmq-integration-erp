Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем jsonText;

Перем мСкладОтправитель;
Перем мСкладПолучатель;
Перем мДоговор;

Перем СобиратьНенайденнуюНоменклатуру Экспорт; // дли интерактивного импорта
Перем НеНайденнаяНоменклатураМассив;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.2");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СубПлагин_импорт_ОтчетОРозничныхПродажах");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СубПлагин_импорт_ОтчетОРозничныхПродажах");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Импорт Отчет О РозничныхПродажах",
		"СубПлагин_импорт_ОтчетОРозничныхПродажах",
		ТипКоманды, 
		Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Возвращает структуру. Поля различаются в зависимости от режима загрузки.
// Это нужно для отладки, а не для обычного режима работы.
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, пjsonText = "") Экспорт

	Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.ОтчетОРозничныхПродажах") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	jsonText = пjsonText;
	
	ВидОперации = "";
	_знч = "";
	ЕстьЗначение = деф.ВидОперации.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ВидОперации = _знч;
	КонецЕсли;
	
	Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	УзелКонтрагента = Неопределено;
	
	//Сарычев
	Если деф.Склад.Свойство("Ref") Тогда 
		СкладУПП = Справочники.ксп_СкладыУПП.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.Склад.Ref));
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение, ,,"Нашли склад УПП: "+ строка(СкладУПП));
		мСкладОтправитель = Справочники.КСП_ВидыОперацийПоСкладамУПП.ПоМэппингу(СкладУПП);
	Иначе	                                 
		СкладУПП = Справочники.ксп_СкладыУПП.ПустаяСсылка();
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение, ,,"Склад УПП не заполнен ");
		мСкладОтправитель = Справочники.КСП_ВидыОперацийПоСкладамУПП.ПустаяСсылка();
	КонецЕсли; 
	//--

	////ЕНС. 2024-01-16. Договор теперь хранится в РС "КСП_КомиссионерыДляРеализацийУПП" для каждого контрагента
	//*ДоговорКонтрагента = ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента, УзелКонтрагента, Контрагент);
	//ЭтоКомиссионер = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.ЭтоКомиссионер(мВнешняяСистема, Контрагент, ДоговорКонтрагента, деф.date); 
	//*мСкладПолучатель = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.СкладПолучатель(мВнешняяСистема, Контрагент, ДоговорКонтрагента, деф.date);
	//мДоговор = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.Договор(мВнешняяСистема, Контрагент, деф.date);
	
	Рез = Схема_1_ПеремещениеНаФулфилмент(СтруктураОбъекта);	
	//*************************** Экспорт ненайденной номенклатуры **************** 
	Если НеНайденнаяНоменклатураМассив.Количество() >0 Тогда
	ЗаписьJson = Новый ЗаписьJson;
	ЗаписьJson.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJson, НеНайденнаяНоменклатураМассив);
	jsonGoods = ЗаписьJson.Закрыть();
	
	МассивОбъектовJson = Новый Массив;
	МассивОбъектовJson.Добавить(jsonGoods);
	
	Попытка
		ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_СписокJsonИзМассива( МассивОбъектовJson, "goods.guid" );
		Сообщить("Экспорт ненайденной номенклатуры: " + Строка(НеНайденнаяНоменклатураМассив.Количество()) + " записей");
	Исключение
	    т=ОписаниеОшибки();
		Сообщить("Ошибка экспорта ненайденной номенклатуры в УПП.");
        ЗаписьЖурналаРегистрации("ИмпортИзУПП", УровеньЖурналаРегистрации.Предупреждение,,,
		"Ошибка экспорта ненайденной номенклатуры в УПП. Подробности: "+т);
	КонецПопытки;  
	КонецЕсли;
	//***************************
	Возврат Рез;
	
	
КонецФункции


#Область Схема_1_Перемещения


Функция Схема_1_ПеремещениеНаФулфилмент(СтруктураОбъекта) Экспорт
    //Заказ на перемещение (склад Щепкин - склад PFS), Расходный ордер на товар, Перемещение.

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ДокументИзУПП = "Отчет о розничных продажах (УПП) № " + деф.Number + " от " + строка(деф.Date);
	
	//СуществующийЗаказСсылка 	   = СоздатьПолучитьСсылкуДокумента(id.Ref, "ЗаказКлиента");
	//РеализацияТоваровУслугСсылка = СоздатьПолучитьСсылкуДокумента(id.Ref, "РеализацияТоваровУслуг");
	//СуществующийРОСсылка 		   = СоздатьПолучитьСсылкуДокумента(id.Ref, "РасходныйОрдерНаТовары");
	СуществующийОтчетСсылка 	   = СоздатьПолучитьСсылкуДокумента(id.Ref, "ОтчетОРозничныхПродажах");
	
	МассивСсылок = Новый Массив;

	//МассивСсылок.Добавить(СуществующийЗаказСсылка);
	//МассивСсылок.Добавить(СуществующийРОСсылка);
	//МассивСсылок.Добавить(РеализацияТоваровУслугСсылка);
	МассивСсылок.Добавить(СуществующийОтчетСсылка);

	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	// не будем различать ситуации Новый/НеНовый
	//Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	//КонецЕсли;
	
	НачатьТранзакцию();
	
	//Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки цепочки документов для " + ДокументИзУПП + ". Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	//КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			
		//Сарычев
		//ЗаказКлиентаОбъект = СоздатьЗаказКлиента(СтруктураОбъекта, СуществующийЗаказСсылка);		
		//РООбъект = СоздатьРасходныйОрдер(СтруктураОбъекта, СуществующийРОСсылка, ЗаказКлиентаОбъект);
        //РеализацияОбъект = СоздатьРеализацию(СтруктураОбъекта, РеализацияТоваровУслугСсылка, РООбъект, ЗаказКлиентаОбъект);
		ЗаказОтчетОбъект = СоздатьОтчетКлиента(СтруктураОбъекта, СуществующийОтчетСсылка);		
		
		//РегистрыСведений.КСП_СвязьРеализацийУППиЦепочекПеремещений.ДобавитьЗапись(
		//	мВнешняяСистема, 
		//	id.Ref, 
		//	ЗаказКлиентаОбъект.Ссылка,
		//	РеализацияОбъект.Ссылка,
		//	РООбъект.Ссылка, 
		//	ДокументИзУПП,
		//	Комментарий);
		
		ЗафиксироватьТранзакцию();          		
		
		Рез = Новый Структура;
		//Рез.Вставить("ЗаказКлиента", ЗаказКлиентаОбъект.Ссылка);
		//Рез.Вставить("РО", РООбъект.Ссылка);
		//Рез.Вставить("РеализацияТоваровУслуг", РеализацияОбъект.Ссылка);
		Рез.Вставить("ОтчетОРОзничныхПродажах", ЗаказОтчетОбъект.Ссылка);
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа " + ДокументИзУПП + ". Подробности: " + т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	

	Возврат Рез;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
//Функция СоздатьЗаказНаПеремещение(СтруктураОбъекта, СуществующийЗаказСсылка)
Функция СоздатьОтчетКлиента(СтруктураОбъекта, СуществующийЗаказСсылка)
	
	ОбъектДанных = Неопределено;
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	Если ЗначениеЗаполнено(СуществующийЗаказСсылка.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийЗаказСсылка.ПолучитьОбъект();
		ПредставлениеОбъекта = Строка(СуществующийЗаказСсылка);
	Иначе   
		ОбъектДанных = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		СсылкаНового = Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов -----------------------------------
	ДокументИзУПП = "Отчет о розничных продажах (УПП) № " + деф.Number + " от " + строка(деф.Date);
	//ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;

	//ОбъектДанных.Валюта = ксп_ИмпортСлужебный.НайтиВалюту(деф.ВалютаДокумента.currencyCode);  
	ОбъектДанных.Валюта = сПРАВОЧНИКИ.Валюты.НайтиПоКоду("643");  	
	ОбъектДанных.КассаККМ = ксп_ИмпортСлужебный.НайтиКассу(деф.КассаККМ, мВнешняяСистема);   
	
	ОбъектДанных.Комментарий = деф.Комментарий + "[ №" + деф.Number + " от " + деф.Date + " ]";

	Если деф.УчитыватьНДС Тогда
		ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе
		ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	КонецЕсли;	
	ОбъектДанных.СуммаДокумента  = деф.СуммаДокумента;
	ОбъектДанных.ЦенаВключаетНДС = деф.СуммаВключаетНДС;
		
    ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Склад       = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);
 	Если НЕ ЗначениеЗаполнено(ОбъектДанных.Склад.Родитель) Тогда
		Сообщить(" не перенесли склад: " + деф.Склад.ref); 
		ОбъектДанных.Склад = Неопределено;  
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Отсутствует объект мэппинга склада для " + ДокументИзУПП + ". Подробности: " + деф.Склад.ref);

	КонецЕсли;	

	ОбъектДанных.ПоРезультатамИнвентаризации = Ложь;
	//ОбъектДанных.Руководитель = Справочники.ОтветственныеЛицаОрганизаций.;
	//ОбъектДанных.ГлавныйБухгалтер = Справочники.ОтветственныеЛицаОрганизаций.;
	ОбъектДанных.ВидыЗапасовУказаныВручную = Ложь;
	ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ = Ложь;
	//ОбъектДанных.КассоваяСмена = Документы.КассоваяСмена; 
	//ОбъектДанных.ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС    
	//ОбъектДанных.ИдентификаторДокумента
	ОбъектДанных.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	//ОбъектДанных.ГруппыФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов
	//ОбъектыДанных.НаправленияДеятельности = Справочники.НаправленияДеятельности	
	
	//гуид="";
	//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
	//Иначе
	//	ОбъектДанных.Ответственный = Неопределено;
	//КонецЕсли;	
	// на случай, если есть метод поиска ссылки:                                              
	//ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);     
	
    //ОбъектДанных.Ответственный = Пользователи.ТекущийПользователь();
    ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию();

	//гуид="";
	//ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Подразделение.Ref ) );
	//Иначе
	//	ОбъектДанных.Подразделение = Неопределено;
	//КонецЕсли;
	// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(деф.Подразделение);
			
	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	ОбъектДанных.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;

	//_знч = "";
	//ЕстьЗначение = деф.ХозяйственнаяОперация.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ХозяйственнаяОперация = деф.ХозяйственнаяОперация.Значение;
	//Иначе
	//	ОбъектДанных.ХозяйственнаяОперация = Неопределено;
	//КонецЕсли;

	//------------------------------------------------------     ТЧ Товары
	Если деф.ТЧТовары.Количество()> 0 Тогда

	ОбъектДанных.Товары.Очистить();  
	
//	СкидкаВсего = 0;
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();

		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		
		Если СобиратьНенайденнуюНоменклатуру Тогда
			Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
				Если НеНайденнаяНоменклатураМассив.Найти(стрк.Номенклатура.ref) = Неопределено Тогда
					НеНайденнаяНоменклатураМассив.Добавить(стрк.Номенклатура.Ref);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

        СтрокаТЧ.Номенклатура = _Номенклатура;
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
	    //СтрокаТЧ.Упаковка = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
        //СтрокаТЧ.Упаковка = СправочникСсылка.УпаковкиЕдиницыИзмерения;
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		
		АвтСкидка = 0;
		Если ЗначениеЗаполнено (стрк.ПроцентАвтоматическихСкидок) Тогда
			Если стрк.ПроцентАвтоматическихСкидок<>"" Тогда
				АвтСкидка = Число(стрк.ПроцентАвтоматическихСкидок);
			КонецЕсли;
		КонецЕсли;
				
		СтрокаТЧ.ПроцентРучнойСкидки = АвтСкидка;
		СтрокаТЧ.Цена = Число(стрк.Цена) * (100-АвтСкидка) / 100; 
		СтрокаТЧ.СуммаРучнойСкидки = Число(стрк.Цена) * АвтСкидка / 100;
//		СкидкаВсего = СкидкаВсего + СтрокаТЧ.СуммаРучнойСкидки;
		
		СтрокаТЧ.Сумма = стрк.Сумма ;      
		СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюУПП(стрк.СтавкаНДС);
		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
		
		//КоличествоУпаковокФакт
		//КоличествоУпаковокУчет 
		
		СтрокаТЧ.Партнер = Справочники.Партнеры.НайтиПоНаименованию(Строка(ОбъектДанных.Контрагент));   //клиент    
     КонецЦикла;	
	
 	КонецЕсли;
 
		
	// пока не надо
	//	СтрокаТЧ.КодСтроки = стрк.КодСтроки;
	
	//	гуид="";
	//	ЕстьАтрибут = стрк.НоменклатураНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НоменклатураНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НоменклатураНабора = Неопределено;
	//	КонецЕсли;
	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НоменклатураНабора = ксп_ИмпортСлужебный.НайтиНоменклатураНабора(стрк.НоменклатураНабора);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

	//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Упаковка = Неопределено;
	//	КонецЕсли;
	
	//	гуид="";
	//	ЕстьАтрибут = стрк.ХарактеристикаНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ХарактеристикаНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ХарактеристикаНабора = Неопределено;
	//	КонецЕсли;
	//  на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ХарактеристикаНабора = ксп_ИмпортСлужебный.НайтиХарактеристикаНабора(стрк.ХарактеристикаНабора);

	//КонецЦикла;

	//------------------------------------------------------     ТЧ Оплата платежными картами
		//	"ТЧОплатаПлатежнымиКартами": [
		//	{
		//		"ВидОплаты": {
		//			"type": "Справочник.ВидыОплатЧекаККМ",
		//			"Ref": "5e82ea7f-1da7-4b13-a423-b5459ba219ad"
		//		},
		//		"Сумма": "21494",
		//		"ПроцентТорговойУступки": "1.6",
		//		"СуммаТорговойУступки": "343.9"
		//	},
		//	{
		//		"ВидОплаты": {
		//			"type": "Справочник.ВидыОплатЧекаККМ",
		//			"Ref": "5e82ea7f-1da7-4b13-a423-b5459ba219ad"
		//		},
		//		"Сумма": "2999",
		//		"ПроцентТорговойУступки": "1.6",
		//		"СуммаТорговойУступки": "47.98"
		//	}
		//],
	
	Если деф.ТЧОплатаплатежнымикартами.Количество()> 0 Тогда

	ОбъектДанных.Оплатаплатежнымикартами.Очистить();

	Для счТовары = 0 По деф.ТЧОплатаплатежнымикартами.Количество()-1 Цикл
		стрк = деф.ТЧОплатаплатежнымикартами[счТовары];
		СтрокаТЧ = ОбъектДанных.Оплатаплатежнымикартами.Добавить();
		
		//СтрокаТЧ.НомерСтроки = счТовары + 1;      
		//СтрокаТЧ.ПроцентТорговойУступки = стрк.ПроцентТорговойУступки;
		//СтрокаТЧ.СуммаТорговойУступки = стрк.СуммаТорговойУступки;
		
		СтрокаТЧ.Сумма = стрк.Сумма;           
		//ВнешняяСистема = мВнешняяСистема;
		//Объект = стрк.ВидОплаты.type;
		//Значение =  стрк.ВидыОплаты.Ref;
		//СтрокаТЧ.ВидОплаты = ксп_ИмпортСлужебный.НайтиПеречисление(ВнешняяСистема, Объект, Значение);
		//СтрокаТЧ.ЭквайринговыйТерминал =
		//СтрокаТЧ.НомерПлатежнойКарты
		//СтрокаТЧ.ДоговорПодключения
		//СтрокаТЧ.КодАвторизации
		
		//СтрокаТЧ.ВидОплаты =    ПеречислениеСсылка.ТипыПлатежнойСистемыККТ - Справочник.ВидыОплатЧекаККМ
		//СтрокаТЧ.ВидОплаты = РегистрыСведений.ксп_МэппингПеречислениеТипыПлатежнойСистемыККТ.ПоМэппингу(стрк.ВидОплаты.Ref,мВнешняяСистема);
		СтрокаТЧ.ВидОплаты = РегистрыСведений.ксп_МэппингПеречислениеТипыПлатежнойСистемыККТ.ПоМэппингу(стрк.ВидОплаты.Ref,"retail");
		
     КонецЦикла;	
	
	КонецЕсли;	
		
	// пока не надо
	//	СтрокаТЧ.КодСтроки = стрк.КодСтроки;
	
	//	гуид="";
	//	ЕстьАтрибут = стрк.НоменклатураНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НоменклатураНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НоменклатураНабора = Неопределено;
	//	КонецЕсли;
	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НоменклатураНабора = ксп_ИмпортСлужебный.НайтиНоменклатураНабора(стрк.НоменклатураНабора);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

	//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Упаковка = Неопределено;
	//	КонецЕсли;
	
	//	гуид="";
	//	ЕстьАтрибут = стрк.ХарактеристикаНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ХарактеристикаНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ХарактеристикаНабора = Неопределено;
	//	КонецЕсли;
	//  на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ХарактеристикаНабора = ксп_ИмпортСлужебный.НайтиХарактеристикаНабора(стрк.ХарактеристикаНабора);

	//КонецЦикла;

	//------------------------------------------------------ ФИНАЛ	
	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь; 
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	Возврат ОбъектДанных;
	
КонецФункции
 
#КонецОбласти


#Область Тестирование

// вызывается из формы
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(JsonText) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(JsonText);	
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	//Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда  //Сарычев
	Если ТипЗнч(СтруктураОбъекта) = Тип("Структура") Тогда //Сарычев
		
		НеНайденнаяНоменклатураМассив = Новый Массив;
		
		//Для Каждого эл из СтруктураОбъекта Цикл
		//	ЗагрузитьОбъект(эл);
		//КонецЦикла;
		
		Рез = Новый Структура;		
	    Рез = ЗагрузитьОбъект(СтруктураОбъекта); //Сарычев
		Рез.Вставить("НеНайденнаяНоменклатураМассив", НеНайденнаяНоменклатураМассив);
		Возврат Рез; 
		
	Иначе       
		Рез = Новый Структура;
		Рез = ЗагрузитьОбъект(СтруктураОбъекта);
	    Возврат Рез;
	КонецЕсли;
	
	
КонецФункции 

#КонецОбласти 	

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)

	СуществующийОбъект = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе 
		
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);

		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;	
    
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

 мВнешняяСистема = "upp";        
 мВнутренняяСистема = "retail";
 ИмяСобытияЖР = "ИмпортИзУПП_ОтчетОРозничныхПродажах";
 СобиратьНенайденнуюНоменклатуру = Ложь;
 НеНайденнаяНоменклатураМассив = Новый Массив;
 