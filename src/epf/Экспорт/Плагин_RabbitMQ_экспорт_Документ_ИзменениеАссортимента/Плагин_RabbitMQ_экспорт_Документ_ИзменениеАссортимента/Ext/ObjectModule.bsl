#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Документ_ИзменениеАссортимента");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Документ_ИзменениеАссортимента");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_экспорт_Документ_ИзменениеАссортимента",
		"Форма_Плагин_RabbitMQ_экспорт_Документ_ИзменениеАссортимента",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	Номенклатура	- СправочникСсылка.Номенклатура / СправочникОбъект.Номенклатура - при чтении узла обмена сюда будут приходить именно объекты
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВыгрузитьОбъект(Ссылка) Экспорт
	
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ИзменениеАссортимента") Тогда
		Обк = Ссылка.ПолучитьОбъект(); 
	Иначе 
		Обк = Ссылка; 
	КонецЕсли;

	
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	
	СтруктураОбъекта.Вставить("source", "ERP");
	СтруктураОбъекта.Вставить("type", Обк.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	
	//	DEFINITION
	
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	
	//Таблица:	Шапка	
	
	definition.Вставить("ДатаЗапретаЗакупки", XMLСтрока(Обк.ДатаЗапретаЗакупки));
	definition.Вставить("ДатаЗапретаПродажи", XMLСтрока(Обк.ДатаЗапретаПродажи));
	definition.Вставить("ДатаНачалаДействия", XMLСтрока(Обк.ДатаНачалаДействия));
	definition.Вставить("ДатаНачалаЗакупок", XMLСтрока(Обк.ДатаНачалаЗакупок));
	definition.Вставить("ДатаНачалаПродаж", XMLСтрока(Обк.ДатаНачалаПродаж));
	definition.Вставить("КоллекцияНоменклатуры", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КоллекцияНоменклатуры));
	definition.Вставить("Комментарий", Обк.Комментарий);
	definition.Вставить("ОбъектПланирования", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ОбъектПланирования));
	definition.Вставить("Операция", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Операция));
	definition.Вставить("Ответственный", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ответственный));
	definition.Вставить("Стадия", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Стадия));
	definition.Вставить("Этап", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Этап));



	// Таблица: ТОВАРЫ
	
	ТЧТовары = Новый Массив;
	
	Для сч = 0 По обк.товары.Количество()-1 Цикл
		
		стрк = обк.товары[сч];
		
		НовСтр = Новый Структура;   
		
		НовСтр.Вставить("ВидЦены", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВидЦены));
		НовСтр.Вставить("Номенклатура", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Номенклатура));
		НовСтр.Вставить("РейтингПродаж", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.РейтингПродаж));
		НовСтр.Вставить("РольАссортимента", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.РольАссортимента));


		ТЧТовары.Добавить(НовСтр);
	КонецЦикла;
	
	definition.Вставить("ТЧТовары", ТЧТовары);

	
	//Таблица:	НаборыЗначенийДоступа	
	
	ТЧНаборыЗначенийДоступа = Новый Массив;
	
	Для сч = 0 По обк.НаборыЗначенийДоступа.Количество()-1 Цикл
		
		стрк = обк.НаборыЗначенийДоступа[сч];
		
		НовСтр = Новый Структура;   
				
		НовСтр.Вставить("ЗначениеДоступа", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ЗначениеДоступа));
		НовСтр.Вставить("Изменение", стрк.Изменение);
		НовСтр.Вставить("НомерНабора", стрк.НомерНабора);
		НовСтр.Вставить("Уточнение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Уточнение));
		НовСтр.Вставить("Чтение", стрк.Чтение);

				
		ТЧНаборыЗначенийДоступа.Добавить(НовСтр);
	КонецЦикла;
	
	definition.Вставить("ТЧНаборыЗначенийДоступа", ТЧНаборыЗначенийДоступа);


	 	
	
	//------------------------------------------------------
	
	СтруктураОбъекта.Вставить("definition", definition);
	
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	
	Возврат json;
	
	
	Возврат Неопределено;
	
КонецФункции




