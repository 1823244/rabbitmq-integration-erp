#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.5");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Справочник_Склады");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Справочник_Склады");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_экспорт_Справочник_Склады",
		"Форма_Плагин_RabbitMQ_экспорт_Справочник_Склады",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



// Точка входа.
// Версия2. Теперь ЭлементСпр может быть типом "Выборка из рез запроса"
//
Функция ВыгрузитьОбъект(ЭлементСпр) Экспорт
	Если ТипЗнч(ЭлементСпр) = Тип("СправочникСсылка.Склады") Тогда
		Обк = ЭлементСпр.ПолучитьОбъект(); 
	ИначеЕсли ТипЗнч(ЭлементСпр) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Обк = ЭлементСпр; 
	Иначе 
		Обк = ЭлементСпр; 
	КонецЕсли;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("source", "ERP");
	//версия2. добавлено обращение к Ссылке, т.к. теперь Обк - это Выборка из результата запроса, а не объект! для версии 1 тоже будет работать
	СтруктураОбъекта.Вставить("type", Обк.Ссылка.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	//	DEFINITION          
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	
	definition.Вставить("ВыборГруппы", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВыборГруппы));
	
	Если НЕ обк.ЭтоГруппа Тогда
		definition.Вставить("БизнесРегион", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.БизнесРегион));
		definition.Вставить("ВидПоклажедержателя", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВидПоклажедержателя));
		definition.Вставить("ВМагазинеПоддерживаетсяДоставкаСвоимиКурьерами", Обк.ВМагазинеПоддерживаетсяДоставкаСвоимиКурьерами);
		definition.Вставить("ВМагазинеПоддерживаетсяСборкаЗаказов", Обк.ВМагазинеПоддерживаетсяСборкаЗаказов);
		
		definition.Вставить("ГруппировкаТоваров", Обк.ГруппировкаТоваров);
		definition.Вставить("ДатаНачалаАдресногоХраненияОстатков", Обк.ДатаНачалаАдресногоХраненияОстатков);
		definition.Вставить("ДатаНачалаДоставкиСвоимиКурьерами", Обк.ДатаНачалаДоставкиСвоимиКурьерами);
		definition.Вставить("ДатаНачалаИспользованияСкладскихПомещений", Обк.ДатаНачалаИспользованияСкладскихПомещений);
		definition.Вставить("ДатаНачалаОрдернойСхемыПриОтгрузке", Обк.ДатаНачалаОрдернойСхемыПриОтгрузке);
		definition.Вставить("ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач", Обк.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач);
		definition.Вставить("ДатаНачалаОрдернойСхемыПриПоступлении", Обк.ДатаНачалаОрдернойСхемыПриПоступлении);
		definition.Вставить("ДатаНачалаСборкиЗаказов", Обк.ДатаНачалаСборкиЗаказов);
		definition.Вставить("ИндивидуальныйВидЦены", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ИндивидуальныйВидЦены));
		definition.Вставить("ИспользованиеРабочихУчастков", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ИспользованиеРабочихУчастков));
		definition.Вставить("ИспользоватьАдресноеХранение", Обк.ИспользоватьАдресноеХранение);
		definition.Вставить("ИспользоватьАдресноеХранениеСправочно", Обк.ИспользоватьАдресноеХранениеСправочно);
		definition.Вставить("ИспользоватьОрдернуюСхемуПриОтгрузке", Обк.ИспользоватьОрдернуюСхемуПриОтгрузке);
		definition.Вставить("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач", Обк.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач);
		definition.Вставить("ИспользоватьОрдернуюСхемуПриПоступлении", Обк.ИспользоватьОрдернуюСхемуПриПоступлении);
		definition.Вставить("ИспользоватьСерииНоменклатуры", Обк.ИспользоватьСерииНоменклатуры);
		definition.Вставить("ИспользоватьСкладскиеПомещения", Обк.ИспользоватьСкладскиеПомещения);
		definition.Вставить("ИспользоватьСтатусыПересчетовТоваров", Обк.ИспользоватьСтатусыПересчетовТоваров);
		definition.Вставить("ИспользоватьСтатусыПриходныхОрдеров", Обк.ИспользоватьСтатусыПриходныхОрдеров);
		definition.Вставить("ИспользоватьСтатусыРасходныхОрдеров", Обк.ИспользоватьСтатусыРасходныхОрдеров);
		definition.Вставить("ИсточникИнформацииОЦенахДляПечати", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ИсточникИнформацииОЦенахДляПечати));
		definition.Вставить("Календарь", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Календарь));
		definition.Вставить("КонтролироватьОперативныеОстатки", Обк.КонтролироватьОперативныеОстатки);
		definition.Вставить("КонтролироватьСвободныеОстатки", Обк.КонтролироватьСвободныеОстатки);
		definition.Вставить("КурьерыИспользуютАвтономныеККТ", Обк.КурьерыИспользуютАвтономныеККТ);
		definition.Вставить("КурьерыИспользуютЭквайринговыеТерминалы", Обк.КурьерыИспользуютЭквайринговыеТерминалы);
		definition.Вставить("КурьерыМогутНазначатьСебеЗаказы", Обк.КурьерыМогутНазначатьСебеЗаказы);
		definition.Вставить("НастройкаАдресногоХранения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.НастройкаАдресногоХранения));
		definition.Вставить("НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку", Обк.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку);
		definition.Вставить("НормативныйСрокДоставкиЗаказов", Обк.НормативныйСрокДоставкиЗаказов);
		definition.Вставить("ОсобыеОтметки", Обк.ОсобыеОтметки);
		definition.Вставить("ОтветственноеХранениеДоВостребования", Обк.ОтветственноеХранениеДоВостребования);
		definition.Вставить("Подразделение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Подразделение));
		definition.Вставить("Поклажедержатель", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Поклажедержатель));
		definition.Вставить("РозничныйВидЦены", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.РозничныйВидЦены));
		definition.Вставить("СборкаИДоставкаВыполняетсяОднимСотрудником", Обк.СборкаИДоставкаВыполняетсяОднимСотрудником);
		definition.Вставить("СборщикиМогутНазначатьСебеЗаказы", Обк.СборщикиМогутНазначатьСебеЗаказы);
		definition.Вставить("СкладОтветственногоХранения", Обк.СкладОтветственногоХранения);
		definition.Вставить("СпособСозданияРеализацииПриСборкеЗаказов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СпособСозданияРеализацииПриСборкеЗаказов));
		definition.Вставить("СпособФискализацииПриДоставке", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СпособФискализацииПриДоставке));
		definition.Вставить("СрокОтветственногоХранения", Обк.СрокОтветственногоХранения);
		definition.Вставить("ТекущаяДолжностьОтветственного", Обк.ТекущаяДолжностьОтветственного);
		definition.Вставить("ТекущийОтветственный", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ТекущийОтветственный));
		definition.Вставить("ТипСклада", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ТипСклада));
		definition.Вставить("УровеньОбслуживания", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.УровеньОбслуживания));
		definition.Вставить("УсловияХраненияТоваров", Обк.УсловияХраненияТоваров);
		definition.Вставить("УчетныйВидЦены", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.УчетныйВидЦены));
		definition.Вставить("УчитыватьСебестоимостьПоСериям", Обк.УчитыватьСебестоимостьПоСериям);
		definition.Вставить("ЦеховаяКладовая", Обк.ЦеховаяКладовая);
		
	КонецЕсли;

	//------------------------------------------------------     ТЧ КонтактнаяИнформация

	
	ТЧКонтактнаяИнформация = Новый Массив;
		
	Если НЕ обк.ЭтоГруппа Тогда
		//версия2. раскомментировать строку ниже
		//Выборка = обк.КонтактнаяИнформация.Выбрать();		
		//версия2. ЗАкомментировать строку ниже
		Для сч = 0 По обк.КонтактнаяИнформация.Количество()-1 Цикл
		//версия2. раскомментировать строку ниже
		//Пока Выборка.Следующий() Цикл
			//версия2. ЗАкомментировать строку ниже
			стрк = обк.КонтактнаяИнформация[сч]; 
			//версия2. раскомментировать строку ниже
			//стрк = Выборка;
			НовСтр = Новый Структура;

			НовСтр.Вставить("АдресЭП", стрк.АдресЭП);
			НовСтр.Вставить("Вид", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Вид));
			НовСтр.Вставить("ВидДляСписка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВидДляСписка));
			НовСтр.Вставить("Город", стрк.Город);
			НовСтр.Вставить("ДоменноеИмяСервера", стрк.ДоменноеИмяСервера);
			НовСтр.Вставить("Значение", стрк.Значение);
			НовСтр.Вставить("ЗначенияПолей", стрк.ЗначенияПолей);
			НовСтр.Вставить("НомерТелефона", стрк.НомерТелефона);
			НовСтр.Вставить("НомерТелефонаБезКодов", стрк.НомерТелефонаБезКодов);
			НовСтр.Вставить("Представление", стрк.Представление);
			НовСтр.Вставить("Регион", стрк.Регион);
			НовСтр.Вставить("Страна", стрк.Страна);
			НовСтр.Вставить("Тип", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Тип));
			ТЧКонтактнаяИнформация.Добавить(НовСтр);

		КонецЦикла;
	КонецЕсли;

	definition.Вставить("ТЧКонтактнаяИнформация", ТЧКонтактнаяИнформация);

	//------------------------------------------------------     ТЧ ДополнительныеРеквизиты

	ТЧДополнительныеРеквизиты = Новый Массив;
	Если НЕ обк.ЭтоГруппа Тогда
		//версия2. Раскомментировать строку ниже
	    //Выборка = обк.ДополнительныеРеквизиты.Выбрать();
		//версия2. ЗАкомментировать строку ниже
		Для сч = 0 По обк.ДополнительныеРеквизиты.Количество()-1 Цикл
		//версия2. Раскомментировать строку ниже
		//Пока Выборка.Следующий() Цикл
			//версия2. ЗАкомментировать строку ниже
			стрк = обк.ДополнительныеРеквизиты[сч];
			//версия2. Раскомментировать строку ниже
	        //стрк = Выборка;

			НовСтр = Новый Структура;

			НовСтр.Вставить("Значение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Значение));
			НовСтр.Вставить("Свойство", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Свойство));
			НовСтр.Вставить("ТекстоваяСтрока", стрк.ТекстоваяСтрока);
			ТЧДополнительныеРеквизиты.Добавить(НовСтр);

		КонецЦикла;
		
	КонецЕсли;

	definition.Вставить("ТЧДополнительныеРеквизиты", ТЧДополнительныеРеквизиты);


	//------------------------------------------------------ ФИНАЛ


	СтруктураОбъекта.Вставить("definition", definition);
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	Возврат json;
КонецФункции



// Версия2. Выбирает зарегистрированные к обмену объекты
// Вызывается из оркестратора
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	Тип: выборка из рез запроса
//
Функция ПолучитьОбъектыДляВыгрузки(Узел) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка,
		|	Склады.ВерсияДанных КАК ВерсияДанных,
		|	Склады.ПометкаУдаления КАК ПометкаУдаления,
		|	Склады.Родитель КАК Родитель,
		|	Склады.ЭтоГруппа КАК ЭтоГруппа,
		|	Склады.Наименование КАК Наименование,
		|	Склады.ВыборГруппы КАК ВыборГруппы,
		|	Склады.ИспользоватьАдресноеХранение КАК ИспользоватьАдресноеХранение,
		|	Склады.ИспользоватьАдресноеХранениеСправочно КАК ИспользоватьАдресноеХранениеСправочно,
		|	Склады.ИспользоватьОрдернуюСхемуПриОтгрузке КАК ИспользоватьОрдернуюСхемуПриОтгрузке,
		|	Склады.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач КАК ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач,
		|	Склады.ИспользоватьОрдернуюСхемуПриПоступлении КАК ИспользоватьОрдернуюСхемуПриПоступлении,
		|	Склады.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
		|	Склады.ИспользоватьСкладскиеПомещения КАК ИспользоватьСкладскиеПомещения,
		|	Склады.Календарь КАК Календарь,
		|	Склады.КонтролироватьОперативныеОстатки КАК КонтролироватьОперативныеОстатки,
		|	Склады.НастройкаАдресногоХранения КАК НастройкаАдресногоХранения,
		|	Склады.Подразделение КАК Подразделение,
		|	Склады.БизнесРегион КАК БизнесРегион,
		|	Склады.РозничныйВидЦены КАК РозничныйВидЦены,
		|	Склады.ТекущаяДолжностьОтветственного КАК ТекущаяДолжностьОтветственного,
		|	Склады.ТекущийОтветственный КАК ТекущийОтветственный,
		|	Склады.ТипСклада КАК ТипСклада,
		|	Склады.УровеньОбслуживания КАК УровеньОбслуживания,
		|	Склады.УчетныйВидЦены КАК УчетныйВидЦены,
		|	Склады.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку КАК НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку,
		|	Склады.ИспользованиеРабочихУчастков КАК ИспользованиеРабочихУчастков,
		|	Склады.ИсточникИнформацииОЦенахДляПечати КАК ИсточникИнформацииОЦенахДляПечати,
		|	Склады.ИспользоватьСтатусыРасходныхОрдеров КАК ИспользоватьСтатусыРасходныхОрдеров,
		|	Склады.ИспользоватьСтатусыПриходныхОрдеров КАК ИспользоватьСтатусыПриходныхОрдеров,
		|	Склады.ИспользоватьСтатусыПересчетовТоваров КАК ИспользоватьСтатусыПересчетовТоваров,
		|	Склады.ДатаНачалаОрдернойСхемыПриОтгрузке КАК ДатаНачалаОрдернойСхемыПриОтгрузке,
		|	Склады.ДатаНачалаОрдернойСхемыПриПоступлении КАК ДатаНачалаОрдернойСхемыПриПоступлении,
		|	Склады.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач КАК ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач,
		|	Склады.ДатаНачалаИспользованияСкладскихПомещений КАК ДатаНачалаИспользованияСкладскихПомещений,
		|	Склады.ДатаНачалаАдресногоХраненияОстатков КАК ДатаНачалаАдресногоХраненияОстатков,
		|	Склады.УчитыватьСебестоимостьПоСериям КАК УчитыватьСебестоимостьПоСериям,
		|	Склады.КонтролироватьСвободныеОстатки КАК КонтролироватьСвободныеОстатки,
		|	Склады.СкладОтветственногоХранения КАК СкладОтветственногоХранения,
		|	Склады.ВидПоклажедержателя КАК ВидПоклажедержателя,
		|	Склады.Поклажедержатель КАК Поклажедержатель,
		|	Склады.СрокОтветственногоХранения КАК СрокОтветственногоХранения,
		|	Склады.ОтветственноеХранениеДоВостребования КАК ОтветственноеХранениеДоВостребования,
		|	Склады.ОсобыеОтметки КАК ОсобыеОтметки,
		|	Склады.УсловияХраненияТоваров КАК УсловияХраненияТоваров,
		|	Склады.ЦеховаяКладовая КАК ЦеховаяКладовая,
		|	Склады.ВМагазинеПоддерживаетсяСборкаЗаказов КАК ВМагазинеПоддерживаетсяСборкаЗаказов,
		|	Склады.ВМагазинеПоддерживаетсяДоставкаСвоимиКурьерами КАК ВМагазинеПоддерживаетсяДоставкаСвоимиКурьерами,
		|	Склады.СпособСозданияРеализацииПриСборкеЗаказов КАК СпособСозданияРеализацииПриСборкеЗаказов,
		|	Склады.СпособФискализацииПриДоставке КАК СпособФискализацииПриДоставке,
		|	Склады.СборкаИДоставкаВыполняетсяОднимСотрудником КАК СборкаИДоставкаВыполняетсяОднимСотрудником,
		|	Склады.КурьерыМогутНазначатьСебеЗаказы КАК КурьерыМогутНазначатьСебеЗаказы,
		|	Склады.СборщикиМогутНазначатьСебеЗаказы КАК СборщикиМогутНазначатьСебеЗаказы,
		|	Склады.НормативныйСрокДоставкиЗаказов КАК НормативныйСрокДоставкиЗаказов,
		|	Склады.КурьерыИспользуютЭквайринговыеТерминалы КАК КурьерыИспользуютЭквайринговыеТерминалы,
		|	Склады.КурьерыИспользуютАвтономныеККТ КАК КурьерыИспользуютАвтономныеККТ,
		|	Склады.ДатаНачалаСборкиЗаказов КАК ДатаНачалаСборкиЗаказов,
		|	Склады.ДатаНачалаДоставкиСвоимиКурьерами КАК ДатаНачалаДоставкиСвоимиКурьерами,
		|	Склады.ГруппировкаТоваров КАК ГруппировкаТоваров,
		|	Склады.ИндивидуальныйВидЦены КАК ИндивидуальныйВидЦены,
		|	Склады.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Тип КАК Тип,
		|		Вид КАК Вид,
		|		Представление КАК Представление,
		|		ЗначенияПолей КАК ЗначенияПолей,
		|		Страна КАК Страна,
		|		Регион КАК Регион,
		|		Город КАК Город,
		|		АдресЭП КАК АдресЭП,
		|		ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|		НомерТелефона КАК НомерТелефона,
		|		НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|		ВидДляСписка КАК ВидДляСписка,
		|		Значение КАК Значение
		|	) КАК КонтактнаяИнформация,
		|	Склады.ДополнительныеРеквизиты.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Свойство КАК Свойство,
		|		Значение КАК Значение,
		|		ТекстоваяСтрока КАК ТекстоваяСтрока
		|	) КАК ДополнительныеРеквизиты,
		|	Склады.Предопределенный КАК Предопределенный,
		|	Склады.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.Склады.Изменения КАК СкладыИзменения
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО СкладыИзменения.Ссылка = Склады.Ссылка";
	
	
	Запрос.УстановитьПараметр("НужныйУзелПланаОбмена", Узел);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
	//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	//
	//Возврат ВыборкаДетальныеЗаписи;
	
КонецФункции


// Версия2. нужен для определения ключа маршрутизации в оркестраторе
Функция getRoutingKey() Export
	return "static";
КонецФункции
