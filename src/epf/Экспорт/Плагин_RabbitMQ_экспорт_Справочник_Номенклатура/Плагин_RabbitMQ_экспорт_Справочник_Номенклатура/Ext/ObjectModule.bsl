#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.2");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Справочник_Номенклатура");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Справочник_Номенклатура");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин спр. Номенклатура экспорт из ЕРП",
		"Форма_Плагин_RabbitMQ_экспорт_Справочник_Номенклатура",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	Номенклатура	- СправочникСсылка.Номенклатура / СправочникОбъект.Номенклатура - при чтении узла обмена сюда будут приходить именно объекты
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВыгрузитьОбъект(ДанныеСсылка) Экспорт
	Если ТипЗнч(ДанныеСсылка) = Тип("СправочникСсылка.Номенклатура") Тогда
		Обк = ДанныеСсылка.ПолучитьОбъект(); 
	Иначе 
		Обк = ДанныеСсылка; 
	КонецЕсли;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("source", "ERP");
	СтруктураОбъекта.Вставить("type", Обк.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	//	DEFINITION          
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	
	Если NOT definition.isFolder Тогда
		
		definition.Вставить("АлкогольнаяПродукция", Обк.АлкогольнаяПродукция);
		definition.Вставить("АлкогольнаяПродукцияВоВскрытойТаре", Обк.АлкогольнаяПродукцияВоВскрытойТаре);
		definition.Вставить("Артикул", Обк.Артикул);
		definition.Вставить("ВариантОформленияПродажи", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВариантОформленияПродажи));
		definition.Вставить("ВесЕдиницаИзмерения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВесЕдиницаИзмерения));
		definition.Вставить("ВесЗнаменатель", Обк.ВесЗнаменатель);
		definition.Вставить("ВесИспользовать", Обк.ВесИспользовать);
		definition.Вставить("ВесМожноУказыватьВДокументах", Обк.ВесМожноУказыватьВДокументах);
		definition.Вставить("ВестиУчетПоГТД", Обк.ВестиУчетПоГТД);
		definition.Вставить("ВестиУчетСертификатовНоменклатуры", Обк.ВестиУчетСертификатовНоменклатуры);
		definition.Вставить("ВесЧислитель", Обк.ВесЧислитель);
		definition.Вставить("ВидАлкогольнойПродукции", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВидАлкогольнойПродукции));
		definition.Вставить("ВидНоменклатуры", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВидНоменклатуры));
		definition.Вставить("ВладелецСерий", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВладелецСерий));
		definition.Вставить("ВладелецТоварныхКатегорий", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВладелецТоварныхКатегорий));
		definition.Вставить("ВладелецХарактеристик", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВладелецХарактеристик));
		definition.Вставить("ГруппаАналитическогоУчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ГруппаАналитическогоУчета));
		definition.Вставить("ГруппаДоступа", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ГруппаДоступа));
		definition.Вставить("ГруппаФинансовогоУчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ГруппаФинансовогоУчета));
		definition.Вставить("ДлинаЕдиницаИзмерения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ДлинаЕдиницаИзмерения));
		definition.Вставить("ДлинаЗнаменатель", Обк.ДлинаЗнаменатель);
		definition.Вставить("ДлинаИспользовать", Обк.ДлинаИспользовать);
		definition.Вставить("ДлинаМожноУказыватьВДокументах", Обк.ДлинаМожноУказыватьВДокументах);
		definition.Вставить("ДлинаЧислитель", Обк.ДлинаЧислитель);
		definition.Вставить("ЕдиницаДляОтчетов", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЕдиницаДляОтчетов));
		definition.Вставить("ЕдиницаИзмерения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЕдиницаИзмерения));
		definition.Вставить("ЕдиницаИзмеренияСрокаГодности", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЕдиницаИзмеренияСрокаГодности));
		definition.Вставить("ЕдиницаИзмеренияТНВЭД", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЕдиницаИзмеренияТНВЭД));
		definition.Вставить("ЕстьТоварыДругогоКачества", Обк.ЕстьТоварыДругогоКачества);
		definition.Вставить("ИмпортнаяАлкогольнаяПродукция", Обк.ИмпортнаяАлкогольнаяПродукция);
		definition.Вставить("ИспользованиеХарактеристик", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ИспользованиеХарактеристик));
		definition.Вставить("ИспользоватьИндивидуальныйШаблонЦенника", Обк.ИспользоватьИндивидуальныйШаблонЦенника);
		definition.Вставить("ИспользоватьИндивидуальныйШаблонЭтикетки", Обк.ИспользоватьИндивидуальныйШаблонЭтикетки);
		definition.Вставить("ИспользоватьУпаковки", Обк.ИспользоватьУпаковки);
		definition.Вставить("Качество", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Качество));
		definition.Вставить("КиЗГИСМ", Обк.КиЗГИСМ);
		definition.Вставить("КиЗГИСМGTIN", Обк.КиЗГИСМGTIN);
		definition.Вставить("КиЗГИСМВид", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КиЗГИСМВид));
		definition.Вставить("КиЗГИСМРазмер", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КиЗГИСМРазмер));
		definition.Вставить("КиЗГИСМСпособВыпускаВОборот", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КиЗГИСМСпособВыпускаВОборот));
		definition.Вставить("КодВидаНоменклатурнойКлассификации", Обк.КодВидаНоменклатурнойКлассификации);
		definition.Вставить("КодДляПоиска", Обк.КодДляПоиска);
		definition.Вставить("КодОКВЭД", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КодОКВЭД));
		definition.Вставить("КодОКВЭД2", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КодОКВЭД2));
		definition.Вставить("КодОКП", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КодОКП));
		definition.Вставить("КодОКПД2", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КодОКПД2));
		definition.Вставить("КодРаздел7ДекларацииНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КодРаздел7ДекларацииНДС));
		definition.Вставить("КодТНВЭД", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КодТНВЭД));
		definition.Вставить("КодТРУ", Обк.КодТРУ);
		definition.Вставить("КоллекцияНоменклатуры", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.КоллекцияНоменклатуры));
		definition.Вставить("Контрагент", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Контрагент));
		definition.Вставить("КоэффициентЕдиницыДляОтчетов", Обк.КоэффициентЕдиницыДляОтчетов);
		definition.Вставить("Крепость", Обк.Крепость);
		definition.Вставить("Марка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Марка));
		definition.Вставить("НаборУпаковок", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.НаборУпаковок));
		definition.Вставить("НаименованиеВидаНоменклатурнойКлассификации", Обк.НаименованиеВидаНоменклатурнойКлассификации);
		definition.Вставить("НаименованиеПолное", Обк.НаименованиеПолное);
		definition.Вставить("НоменклатураМногооборотнаяТара", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.НоменклатураМногооборотнаяТара));
		definition.Вставить("ОблагаетсяНДПИПоПроцентнойСтавке", Обк.ОблагаетсяНДПИПоПроцентнойСтавке);
		definition.Вставить("ОблагаетсяНДСУПокупателя", Обк.ОблагаетсяНДСУПокупателя);
		definition.Вставить("ОбособленнаяЗакупкаПродажа", Обк.ОбособленнаяЗакупкаПродажа);
		definition.Вставить("ОбъемДАЛ", Обк.ОбъемДАЛ);
		definition.Вставить("ОбъемЕдиницаИзмерения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ОбъемЕдиницаИзмерения));
		definition.Вставить("ОбъемЗнаменатель", Обк.ОбъемЗнаменатель);
		definition.Вставить("ОбъемИспользовать", Обк.ОбъемИспользовать);
		definition.Вставить("ОбъемМожноУказыватьВДокументах", Обк.ОбъемМожноУказыватьВДокументах);
		definition.Вставить("ОбъемЧислитель", Обк.ОбъемЧислитель);
		definition.Вставить("Описание", Обк.Описание);
		definition.Вставить("ОсобенностьУчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ОсобенностьУчета));
		definition.Вставить("ПлощадьЕдиницаИзмерения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПлощадьЕдиницаИзмерения));
		definition.Вставить("ПлощадьЗнаменатель", Обк.ПлощадьЗнаменатель);
		definition.Вставить("ПлощадьИспользовать", Обк.ПлощадьИспользовать);
		definition.Вставить("ПлощадьМожноУказыватьВДокументах", Обк.ПлощадьМожноУказыватьВДокументах);
		definition.Вставить("ПлощадьЧислитель", Обк.ПлощадьЧислитель);
		definition.Вставить("ПодакцизныйТовар", Обк.ПодакцизныйТовар);
		definition.Вставить("ПодконтрольнаяПродукцияВЕТИС", Обк.ПодконтрольнаяПродукцияВЕТИС);
		definition.Вставить("ПоставляетсяВМногооборотнойТаре", Обк.ПоставляетсяВМногооборотнойТаре);
		definition.Вставить("Принципал", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Принципал));
		definition.Вставить("ПродукцияМаркируемаяДляГИСМ", Обк.ПродукцияМаркируемаяДляГИСМ);
		definition.Вставить("Производитель", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Производитель));
		definition.Вставить("ПроизводительИмпортерКонтрагент", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПроизводительИмпортерКонтрагент));
		definition.Вставить("ПрослеживаемыйТовар", Обк.ПрослеживаемыйТовар);
		definition.Вставить("РейтингПродаж", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.РейтингПродаж));
		definition.Вставить("СезоннаяГруппа", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СезоннаяГруппа));
		definition.Вставить("СкладскаяГруппа", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СкладскаяГруппа));
		definition.Вставить("СпособОбеспеченияПотребностей", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СпособОбеспеченияПотребностей));
		definition.Вставить("СрокГодности", Обк.СрокГодности);
		definition.Вставить("СтавкаНДС", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СтавкаНДС));
		definition.Вставить("СтранаПроисхождения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СтранаПроисхождения));
		definition.Вставить("СхемаОбеспечения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СхемаОбеспечения));
		definition.Вставить("ТипНоменклатуры", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ТипНоменклатуры));
		definition.Вставить("ТоварнаяКатегория", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ТоварнаяКатегория));
		definition.Вставить("ФайлКартинки", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ФайлКартинки));
		definition.Вставить("ФайлОписанияДляСайта", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ФайлОписанияДляСайта));
		definition.Вставить("ХарактеристикаМногооборотнаяТара", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ХарактеристикаМногооборотнаяТара));
		definition.Вставить("ЦеноваяГруппа", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЦеноваяГруппа));
		definition.Вставить("ШаблонЦенника", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ШаблонЦенника));
		definition.Вставить("ШаблонЭтикетки", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ШаблонЭтикетки));	
	

		//------------------------------------------------------     ТЧ ДополнительныеРеквизиты

		ТЧДополнительныеРеквизиты = Новый Массив;

		Для сч = 0 По обк.ДополнительныеРеквизиты.Количество()-1 Цикл

			стрк = обк.ДополнительныеРеквизиты[сч];

			НовСтр = Новый Структура;

			НовСтр.Вставить("Значение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Значение));
			НовСтр.Вставить("Свойство", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Свойство));
			НовСтр.Вставить("ТекстоваяСтрока", стрк.ТекстоваяСтрока);
			ТЧДополнительныеРеквизиты.Добавить(НовСтр);

		КонецЦикла;

		definition.Вставить("ТЧДополнительныеРеквизиты", ТЧДополнительныеРеквизиты);

		//------------------------------------------------------     ТЧ ДрагоценныеМатериалы

		ТЧДрагоценныеМатериалы = Новый Массив;

		Для сч = 0 По обк.ДрагоценныеМатериалы.Количество()-1 Цикл

			стрк = обк.ДрагоценныеМатериалы[сч];

			НовСтр = Новый Структура;

			НовСтр.Вставить("ДрагоценныйМатериал", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ДрагоценныйМатериал));
			НовСтр.Вставить("ЕдиницаИзмерения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ЕдиницаИзмерения));
			НовСтр.Вставить("Количество", стрк.Количество);
			НовСтр.Вставить("Комментарий", стрк.Комментарий);
			НовСтр.Вставить("Расположение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Расположение));
			ТЧДрагоценныеМатериалы.Добавить(НовСтр);

		КонецЦикла;

		definition.Вставить("ТЧДрагоценныеМатериалы", ТЧДрагоценныеМатериалы);

		//------------------------------------------------------     ТЧ Представления

		ТЧПредставления = Новый Массив;

		Для сч = 0 По обк.Представления.Количество()-1 Цикл

			стрк = обк.Представления[сч];

			НовСтр = Новый Структура;

			НовСтр.Вставить("КодЯзыка", стрк.КодЯзыка);
			НовСтр.Вставить("Наименование", стрк.Наименование);
			НовСтр.Вставить("НаименованиеПолное", стрк.НаименованиеПолное);
			ТЧПредставления.Добавить(НовСтр);

		КонецЦикла;

		definition.Вставить("ТЧПредставления", ТЧПредставления);


    КонецЕсли;//не группа


	//------------------------------------------------------ ФИНАЛ


	СтруктураОбъекта.Вставить("definition", definition);
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	Возврат json;
КонецФункции

Функция ПолучитьОбъектыДляВыгрузки(Узел) Экспорт
	Возврат Неопределено;
КонецФункции

Функция getRoutingKey() Экспорт
	Возврат "static";
КонецФункции

