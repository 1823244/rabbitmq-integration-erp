
#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Вывод из оборота ИСМП");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Вывод из оборота ИСМП");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.7.306"); // ОБЯЗАТЕЛЬНО!!! //(https://forum.infostart.ru/forum9/topic179193/)
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, "Открыть форму : Вывод из оборота ИСМП","ВыполнитьОбменИнтерактивно",ТипКоманды, Ложь) ;
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, "Вывод из оборота ИСМП","ВыполнитьОбменРегламент",ТипКоманды, Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "ВыполнитьОбменРегламент" Тогда
		ВыполнитьОбмен();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 	




// 2024-01-10. Заглушка. Пока не реализована функция обхода документов и выгрузки их в Честный знак
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ВыполнитьОбмен() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка,
		|	Док.Дата КАК Дата,
		|	Док.Номер КАК Номер
		|ИЗ
		|	Документ.ДвиженияКМФулфилмент КАК Док
		|ГДЕ
		|	Док.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", "65465465465465465465465465465465");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Сервер = "todo доделать хранение адреса: markirovka.sandbox.crpt.ru";;
		ГруппаТоваров = "lp";
		ПричинаСписания = "RETAIL";
		Сертификат = "todo Доделать выбор и хранение отпечатка сертификата";
		Токен = ксп_Элис_ОбщегоНазначения.ПолучитьТокенНаСервере(Сервер, Сертификат);
		ИННУчастника = "";
		АдресСписания = "";

		
		Если Выборка.ВидОперации = Перечисления.ВидыДвиженийКМФулфилмент.ВыводИзОборота Тогда
			// todo Доделать заполнение на основании данных документа "ДвиженияКМ"
			ТаблицаКИ = Новый ТаблицаЗначений;
			ТаблицаКИ.Колонки.Добавить("КодМаркировкиСтрока");
			ТаблицаКИ.Колонки.Добавить("ЦенаСНДС");

			ДатаВыбытия = Выборка.Дата;
			НомерВыбытия = Выборка.Номер;
			ПричинаВыбытия_Action = "RETAIL";
			
			document_type = "SALES_RECEIPT";
			// 4.2.8 Вывод из оборота
			Документ_JSON = СформироватьВыводИзОборотаJson(ИННУчастника, ТаблицаКИ, ДатаВыбытия, НомерВыбытия, 
				ПричинаВыбытия_Action, document_type);
			
			// 4.1 Единый метод созд. документов
			КодТипаДокумента = "LK_RECEIPT";// Вывод из оборота json
			ДанныеДляЗапроса_JSON = СформироватьДокументДляОтправки(Документ_JSON, Сертификат, КодТипаДокумента);
			
			// Просто выполняем http-запрос
			ВыполнитьЗапросКЧестномуЗнаку(ДанныеДляЗапроса_JSON, Сервер, ГруппаТоваров, Токен)
			
					
		ИначеЕсли Выборка.ВидОперации = Перечисления.ВидыДвиженийКМФулфилмент.ВозвратВОборот Тогда
			
			// todo Доделать заполнение на основании данных документа "ДвиженияКМ"
			ТаблицаКИ = Новый ТаблицаЗначений;
			ТаблицаКИ.Колонки.Добавить("sgtin");
			ТаблицаКИ.Колонки.Добавить("generalPackageType");

			ДатаВыбытия = Неопределено;//ВыборкаДетальныеЗаписи.Дата;
			НомерВыбытия = Неопределено;//ВыборкаДетальныеЗаписи.Номер;
			ТипДокументаВыбытия = "RECEIPT";//это кассовый чек, но наверное надо подумать, что здесь указывать
			
			//ОтправитьЗапросВозвратаВОборотНаСервере(Сервер, ГруппаТоваров, ПричинаСписания, Сертификат, Токен,
			//	ИННУчастника, ТаблицаКИ, ДатаВыбытия, НомерВыбытия, "RETAIL");		
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
		
КонецПроцедуры



// Описание True API, глава 4.2.8 Вывод из оборота
//
// Параметры
//	Сервер - строка - адрес честного знака
//	ГруппаТоваров - строка - см. документ "Описание True API", раздел "Справочник поддерживаемых товарных групп"
//			"lp" - одежда
//	ПричинаСписания - строка - 	 Коды можно найти в файле Инструкция_по_формированию_выгрузок_данных_через_True_API-v74.0-14.12.2023-at-08-20-00.pdf
//		(c:\E\rabbitmq-integration-erp\GISMP\)
// 		Справочник "Причины выбытия"
//	Сертификат - строка - 
//	Токен - строка - 
//	ИННУчастника - строка - 
//	ТаблицаТоваров - таблица значений - колонки:
//		* sgtin 				- строка
//		* generalPackageType 	- строка, значения: GROUP, UNIT
//	ДатаВыбытия - дата
//	ПричинаВыбытия_Action - строка - см. в файле "Описание True API", справочник Причины выбытия
//
Функция СформироватьВыводИзОборотаJson(ИННУчастника, ТаблицаТоваров, ДатаВыбытия, НомерВыбытия, 
		ПричинаВыбытия_Action = "RETAIL", document_type = "SALES_RECEIPT") Экспорт
	
	//-- СТРУКТУРА ДОКУМЕНТА "ВыводИзОборота"  (по окончании формирования преобразуем в формат JSON, и вставляем параметром в тело запроса)  
	ВыбытиеДокументСтруктура = Новый Структура;
	ВыбытиеДокументСтруктура.Вставить("inn",ИННУчастника);      // ИНН участника оборота товаров  
	Если ПричинаВыбытия_Action = "DONATION" Тогда
		ВызватьИсключение "Не реализовано! Для action = DONATION нужно указать ИНН покупателя - тэг 'buyer_inn'!";
		ВыбытиеДокументСтруктура.Вставить("buyer_inn", "");
	КонецЕсли;
	
	ВыбытиеДокументСтруктура.Вставить("action_date",ДатаВыбытия);
	ВыбытиеДокументСтруктура.Вставить("action", ПричинаВыбытия_Action);
	Если ПричинаВыбытия_Action = "OTHER" Тогда
		ВызватьИсключение "Не реализовано! Для action = OTHER нужно указать тэг 'withdrawal_type_other'!";
    	ВыбытиеДокументСтруктура.Вставить("withdrawal_type_other", "");
	КонецЕсли;
	Если ПричинаВыбытия_Action = "STATE_SECRET" Тогда
		ВызватьИсключение "Не реализовано! Для action = STATE_SECRET нужно указать тэг 'state_contract_id'!";
		ВыбытиеДокументСтруктура.Вставить("state_contract_id", "");
	КонецЕсли;
	
	    																	
	КМ_Массив = Новый Массив;                          
	Для Каждого элемент Из ТаблицаТоваров Цикл
		
		//Если элемент.generalPackageType = "GROUP" Тогда     // Если это упаковка (Блок)
		//	Лев14 = Лев(элемент.Sgtin,14);                  // добавляем к КМ контрольные символы "(01)" и "(21)"
		//	gtin21 ="(01)"+Лев14+"(21)";
		//	элементSgtin = СтрЗаменить(элемент.Sgtin,Лев14,gtin21);
		//ИначеЕсли элемент.generalPackageType = "UNIT" Тогда // если это единица товара,
		//	элементSgtin = элемент.Sgtin                    // оставляем без изменений
		//КонецЕсли;
		//
		
		ЭлементМассива = Новый Структура;
		ЭлементМассива.Вставить("cis", элемент.КодМаркировкиСтрока);
		ЭлементМассива.Вставить("product_cost", элемент.ЦенаСНДС);// цена с НДС
		ЭлементМассива.Вставить("primary_document_type", Неопределено);
		ЭлементМассива.Вставить("primary_document_number", Неопределено);
		ЭлементМассива.Вставить("primary_document_date", Неопределено);
		ЭлементМассива.Вставить("primary_document_custom_name", Неопределено);
		
		КМ_Массив.Добавить(ЭлементМассива);	// формируем массив кодов маркировки 
	КонецЦикла; 
	
	ВыбытиеДокументСтруктура.Вставить("products",      КМ_Массив);
	
	Если ВМассивеТоваровНеЗаполнен_primary_document_type(КМ_Массив) Тогда 
		//ВызватьИсключение "Не реализовано! ВМассивеТоваровНеЗаполнен_primary_document_type() = Истина! Нужно указать тэг 'document_type' в шапке!";
		ВыбытиеДокументСтруктура.Вставить("document_type", document_type);
	КонецЕсли;
	
	// проверка условия из документации. todo - доделать для всех вариантов
	Если ПричинаВыбытия_Action = "RETAIL" Тогда
		ПравильныеТипыДокументов = Новый Массив;
		ПравильныеТипыДокументов.Добавить("RECEIPT");
		ПравильныеТипыДокументов.Добавить("SALES_RECEIPT");
		ПравильныеТипыДокументов.Добавить("OTHER");
		Если ПравильныеТипыДокументов.Найти(ВыбытиеДокументСтруктура.document_type) = Неопределено Тогда
			ВызватьИсключение "Тип документа "+ВыбытиеДокументСтруктура.document_type+" не соответствует причине выбытия (action) RETAIL! ";
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбытиеДокументСтруктура.Свойство("document_type") Тогда
		//ВызватьИсключение "Не реализовано! В шапке есть тэг 'document_type'! Нужно указать тэги 'document_number', 'document_date', 'primary_document_custom_name'";
		ВыбытиеДокументСтруктура.Вставить("document_number", НомерВыбытия);
		ВыбытиеДокументСтруктура.Вставить("document_date", ДатаВыбытия); 
		Если ВыбытиеДокументСтруктура.document_type = "OTHER" Тогда               
			ВызватьИсключение "Не реализовано! document_type = OTHER! Нужно указать тэг 'primary_document_custom_name' в шапке!";
			ВыбытиеДокументСтруктура.Вставить("primary_document_custom_name", "");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПричинаВыбытия_Action = "EAS_TRADE" Тогда
		ВызватьИсключение "Не реализовано! Для action = EAS_TRADE нужно указать тэг 'destination_country_code'!";
		ВыбытиеДокументСтруктура.Вставить("destination_country_code", "");
	КонецЕсли;
	
	Если ПричинаВыбытия_Action = "EAS_TRADE" Тогда
		ВызватьИсключение "Не реализовано! Для action = EAS_TRADE нужно указать тэг 'importer_id'!";
		ВыбытиеДокументСтруктура.Вставить("importer_id", "");
	КонецЕсли;
	
	//ВыбытиеДокументСтруктура.Вставить("fias_id // ЕНС. гуид, нам не нужен
	
	
	Запись_JSON_Документ = Новый ЗаписьJSON;   //-- JSON для структуры документа
	Запись_JSON_Документ.УстановитьСтроку(); 
	
	
	ЗаписатьJSON(Запись_JSON_Документ,ВыбытиеДокументСтруктура);                 // преобразуем тело документа в формат JSON
	Документ_JSON = Запись_JSON_Документ.Закрыть();                       // документ вывода в формате JSON
	
		
	Возврат Документ_JSON;
	
КонецФункции


// 4.1 Единый метод создания документов
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СформироватьДокументДляОтправки(Документ_JSON, Сертификат, type) Экспорт

	Документ_JSON_Base64 = ксп_Элис_ОбщегоНазначения.ЗашифроватьBase64(Документ_JSON,КодировкаТекста.UTF8);  // шифруем   ВыбытиеДокумент_JSON в Base64 
	
	ОткрепленнаяПодпись = ксп_Элис_ОбщегоНазначения.ПодписатьТекст(Документ_JSON_Base64,Сертификат,Истина);         // получаем откреплённую подпись (УКЭП)                                                                                                						// в формате base64 

	ДанныеДляЗапроса = Новый Структура;   
    ДанныеДляЗапроса.Вставить("document_format", "MANUAL");                // Параметр №1 : тип документа MANUAL - .json	
	ДанныеДляЗапроса.Вставить("product_document",Документ_JSON_Base64);    // Параметр №3 : ВыбытиеДокумент_JSON_Base64 
	//ЕНС См. "Справочник «Типы документов»" (файл - описание True API)
    ДанныеДляЗапроса.Вставить("type",            type);		               // Параметр №3 : код типа документа
	ДанныеДляЗапроса.Вставить("signature",       ОткрепленнаяПодпись);     // Параметр №4 : откреплённая подпись (УКЭП) в формате base64 
	//--    
	
	Запись_JSON = Новый ЗаписьJSON;
	Запись_JSON.УстановитьСтроку();
	ЗаписатьJSON(Запись_JSON,ДанныеДляЗапроса);
	ДанныеДляЗапроса_JSON = Запись_JSON.Закрыть();     // тело запроса записываем в формат JSON
		
	Возврат ДанныеДляЗапроса_JSON;
	
КонецФункции


// POST-запрос к Честному знаку к API 4.1 Единый метод создания документов
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВыполнитьЗапросКЧестномуЗнаку(ДанныеДляЗапроса_JSON, Сервер, ГруппаТоваров, Токен) Экспорт
	
	Соединение = Новый HTTPСоединение(Сервер,443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
	Заголовки.Вставить("Accept", "application/json");
	
	//ЕНС. 4.1. Единый метод создания документов (файл - описание True API)
	СтрокаЗапроса = "/api/v3/true-api/lk/documents/create?pg="+ГруппаТоваров;
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Токен);   
	      	
	HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеДляЗапроса_JSON,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);     
	
	Если (Ответ.КодСостояния = 200) или (Ответ.КодСостояния = 201)  Тогда   
		т = "Код ответа на запрос: "+Ответ.КодСостояния+ "  - выполнен успешно.";
		Сообщить(т);   
		ЗаписьЖурналаРегистрации("КСП_ОбменЧестныйЗнак", УровеньЖурналаРегистрации.Информация,,,т);
		
	    списание_id = Ответ.ПолучитьТелоКакСтроку();                          // id Документа, по документации он должен возвращаться в параметре

		т = "id (номер) созданого документа: "+списание_id;             // но возвращается строкой в теле ответа
		Сообщить(т);
		ЗаписьЖурналаРегистрации("КСП_ОбменЧестныйЗнак", УровеньЖурналаРегистрации.Информация,,,т);
	Иначе  
		
		т = "Код ответа на запрос: "+Ответ.КодСостояния +" - ошибка!";
		Сообщить(т);
			
		ЗаписьЖурналаРегистрации("КСП_ОбменЧестныйЗнак", УровеньЖурналаРегистрации.Ошибка,,,т);
				
	КонецЕсли;        

	
	Возврат Неопределено;
	
КонецФункции



// Возвращает ИСТИНА, если в массиве «products» («Массив,содержащий список КИ / КиЗ»)
//не заполнен параметр «primary_document_type» («Тип первичного документа»).
//
// Параметры:
//	КМ_Массив 	- массив - содержимое массива - структуры
//
// Возвращаемое значение:
//	Тип: булево
//
Функция ВМассивеТоваровНеЗаполнен_primary_document_type(КМ_Массив) Экспорт
	
	Для каждого ЭлементМассива Из КМ_Массив Цикл
		
		Если НЕ ЭлементМассива.Свойство("primary_document_type") Тогда
			Возврат Истина;
		Иначе 
			Если НЕ ЗначениеЗаполнено(ЭлементМассива.primary_document_type) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Ложь;
	
КонецФункции


// Описание True API, глава 4.2.5 Возврат в оборот
//
// Параметры
//	Сервер - строка - адрес честного знака
//	ГруппаТоваров - строка - см. документ "Описание True API", раздел "Справочник поддерживаемых товарных групп"
//			"lp" - одежда
//	ПричинаСписания - строка - 	 Коды можно найти в файле Инструкция_по_формированию_выгрузок_данных_через_True_API-v74.0-14.12.2023-at-08-20-00.pdf
//		(c:\E\rabbitmq-integration-erp\GISMP\)
// 		Справочник "Причины выбытия"
//	Сертификат - строка - 
//	Токен - строка - 
//	ИННУчастника - строка - 
//	АдресСписания - строка - адреса магазина или склада (физический)
//	ТаблицаТоваров - таблица значений - колонки:
//		* sgtin 				- строка
//		* generalPackageType 	- строка, значения: GROUP, UNIT
//	ДатаВыбытия - дата
//	ТипДокументаВыбытия - строка - см. 	Типы документов есть в файле "Описание True API", но они там указаны
// 		в описаниях конкретных "документов" - напр.:
//			4.2.8 Вывод из оборота.
//				параметр document_type, колонка Комментарий:
//				Возможные значения:
//					«RECEIPT» — «Кассовый чек»;
Процедура ОтправитьЗапросВозвратаВОборотНаСервере(Сервер, ГруппаТоваров, ПричинаСписания, Сертификат, Токен, 
		ИННУчастника, АдресСписания, ТаблицаТоваров, ДатаВыбытия, НомерВыбытия, ТипДокументаВыбытия ) Экспорт
	
	Соединение = Новый HTTPСоединение(Сервер,443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
	Заголовки.Вставить("Accept", "application/json");
	
	//ЕНС. 4.1. Единый метод создания документов (файл - описание True API)
	СтрокаЗапроса = "/api/v3/true-api/lk/documents/create?pg="+ГруппаТоваров;
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Токен);   
	      

	Запись_JSON = Новый ЗаписьJSON;            //-- JSON для тела запроса 
	Запись_JSON.УстановитьСтроку(); 

	Запись_JSON_Документ = Новый ЗаписьJSON;   //-- JSON для структуры документа
	Запись_JSON_Документ.УстановитьСтроку(); 
	
	
	//-- СТРУКТУРА ДОКУМЕНТА "Выбытие"  (по окончании формирования преобразуем в формат JSON, и вставляем параметром в тело запроса)  
	ВыбытиеДокументСтруктура = Новый Структура;
	ВыбытиеДокументСтруктура.Вставить("trade_participant_inn",ИННУчастника);      // ИНН участника оборота товаров
	
	ВыбытиеДокументСтруктура.Вставить("return_type",ПричинаСписания);   // Причина списания (Брак) "DEFECT"
	ВыбытиеДокументСтруктура.Вставить("address",      АдресСписания);     // адрес списания (адрес организации или магазина)
	ВыбытиеДокументСтруктура.Вставить("withChild",    "true");                   // Признак списания всех вложенных элементов (не обязательно, по-умолчанию "true")
	//ВыбытиеДокументСтруктура.Вставить("sourceDocType",ТипДокументаВыбытия);    // Тип первичного документа  (формируется далее)
																                 //	Возможные значения:
																	             //           «DESTRUCTION_ACT» — «Акт уничтожения (утраты / утилизации)»;
																	             //           «OTHER» — «Прочее»
        																	
	КМ_Массив = Новый Массив;                          
	Для Каждого элемент Из ТаблицаТоваров Цикл  
		Если элемент.generalPackageType = "GROUP" Тогда     // Если это упаковка (Блок)
			Лев14 = Лев(элемент.Sgtin,14);                  // добавляем к КМ контрольные символы "(01)" и "(21)"
			gtin21 ="(01)"+Лев14+"(21)";
			элементSgtin = СтрЗаменить(элемент.Sgtin,Лев14,gtin21);
		ИначеЕсли элемент.generalPackageType = "UNIT" Тогда // если это единица товара,
			элементSgtin = элемент.Sgtin                    // оставляем без изменений
		КонецЕсли;
		КМ_Массив.Добавить(элементSgtin);	// формируем массив кодов маркировки 
	КонецЦикла; 
	
	
	ВыбытиеДокументСтруктура.Вставить("sntins",КМ_Массив);                       // вставляем массив кодов маркировки в структуру документа честного знака "Выбытие"
	// ВыбытиеДокументСтруктура.Вставить("sourceDocType","");                    // для табачной продукции параметр необязательный
	ДатаВыбытияСтр = Формат(ДатаВыбытия,"ДФ=""гггг-ММ-дд""");          // формат: yyyy-MM-dd   
	ВыбытиеДокументСтруктура.Вставить("sourceDocDate", ДатаВыбытияСтр);    	
	ВыбытиеДокументСтруктура.Вставить("sourceDocNum",  НомерВыбытия); 
	//ЕНС пока отключу
	//Если ТипДокументаВыбытия = "OTHER" Тогда
	//	ВыбытиеДокументСтруктура.Вставить("sourceDocType",ТипДокументаВыбытия); 
	//	ВыбытиеДокументСтруктура.Вставить("sourceDocName",ДругойДокументВыбытия);// для табачной продукции параметр необязательный (заполняется, когда тип документа "OTHER")
	//КонецЕсли;
	ЗаписатьJSON(Запись_JSON_Документ,ВыбытиеДокументСтруктура);                 // преобразуем тело документа "Выбытие" в формат JSON
	ВыбытиеДокумент_JSON = Запись_JSON_Документ.Закрыть();                       // документ выбытия в формате JSON
	
		
	ВыбытиеДокумент_JSON_Base64 = ксп_Элис_ОбщегоНазначения.ЗашифроватьBase64(ВыбытиеДокумент_JSON,КодировкаТекста.UTF8);  // шифруем   ВыбытиеДокумент_JSON в Base64 
	ОткрепленнаяПодпись = ксп_Элис_ОбщегоНазначения.ПодписатьТекст(ВыбытиеДокумент_JSON_Base64,Сертификат,Истина);         // получаем откреплённую подпись (УКЭП)
	                                                                                                // в формате base64 

	//-- ФОРМИРУЕМ СТРУКТУРУ ТЕЛА ЗАПРОСА (далее преобразуем в формат JSON)
	
	ДанныеДляЗапроса = Новый Структура;   
    ДанныеДляЗапроса.Вставить("document_format", "MANUAL");                       // Параметр №1 : тип документа MANUAL - .json	
	ДанныеДляЗапроса.Вставить("product_document",ВыбытиеДокумент_JSON_Base64);    // Параметр №3 : ВыбытиеДокумент_JSON_Base64 
	//ЕНС См. "Справочник «Типы документов»" (файл - описание True API)
	//http://localhost:9090/pages/viewpage.action?pageId=62357514
    ДанныеДляЗапроса.Вставить("type",            "WRITE_OFF");                    // Параметр №3 : код типа документа: Выбытие ( WRITE_OFF)
	ДанныеДляЗапроса.Вставить("signature",       ОткрепленнаяПодпись);            // Параметр №4 : откреплённая подпись (УКЭП) в формате base64 
	//--    
	
	ЗаписатьJSON(Запись_JSON,ДанныеДляЗапроса);
	ДанныеДляЗапроса_JSON = Запись_JSON.Закрыть();     // тело запроса записываем в формат JSON
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеДляЗапроса_JSON,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);     
	

	Если (Ответ.КодСостояния = 200) или (Ответ.КодСостояния = 201)  Тогда   
		т = "Код ответа на запрос: "+Ответ.КодСостояния+ "  - выполнен успешно.";
		Сообщить(т);   
		ЗаписьЖурналаРегистрации("КСП_ОбменЧестныйЗнак", УровеньЖурналаРегистрации.Информация,,,т);
		
	    списание_id = Ответ.ПолучитьТелоКакСтроку();                          // id Документа, по документации он должен возвращаться в параметре

		т = "id (номер) созданого документа: "+списание_id;             // но возвращается строкой в теле ответа
		Сообщить(т);
		ЗаписьЖурналаРегистрации("КСП_ОбменЧестныйЗнак", УровеньЖурналаРегистрации.Информация,,,т);
	Иначе  
		
		т = "Код ответа на запрос: "+Ответ.КодСостояния +" - ошибка!";
		Сообщить(т);
			
		ЗаписьЖурналаРегистрации("КСП_ОбменЧестныйЗнак", УровеньЖурналаРегистрации.Ошибка,,,т);
				
	КонецЕсли;        


КонецПроцедуры



// Рабочий метод (было) для операции 4.2.11 Списание КИ. Сейчас надо проверять
//
// Параметры
//	Сервер - строка - адрес честного знака
//	ГруппаТоваров - строка - см. документ "Описание True API", раздел "Справочник поддерживаемых товарных групп"
//			"lp" - одежда
//	ПричинаСписания - строка - 	 Коды можно найти в файле Инструкция_по_формированию_выгрузок_данных_через_True_API-v74.0-14.12.2023-at-08-20-00.pdf
//		(c:\E\rabbitmq-integration-erp\GISMP\)
// 		Справочник "Причины выбытия"
//	Сертификат - строка - 
//	Токен - строка - 
//	ИННУчастника - строка - 
//	АдресСписания - строка - адреса магазина или склада (физический)
//	ТаблицаТоваров - таблица значений - колонки:
//		* sgtin 				- строка
//		* generalPackageType 	- строка, значения: GROUP, UNIT
//	ДатаВыбытия - дата
//	ТипДокументаВыбытия - строка - см. 	Типы документов есть в файле "Описание True API", но они там указаны
// 		в описаниях конкретных "документов" - напр.:
//			4.2.8 Вывод из оборота.
//				параметр document_type, колонка Комментарий:
//				Возможные значения:
//					«RECEIPT» — «Кассовый чек»;
//
Процедура ОтправитьЗапросСписаниеКИНаСервере(Сервер, ГруппаТоваров, ПричинаСписания, Сертификат, Токен, 
		ИННУчастника, АдресСписания, ТаблицаТоваров, ДатаВыбытия, НомерВыбытия, ТипДокументаВыбытия ) Экспорт
	
	Соединение = Новый HTTPСоединение(Сервер,443,,,,,Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
	Заголовки.Вставить("Accept", "application/json");
	
	//ЕНС. 4.1. Единый метод создания документов (файл - описание True API)
	СтрокаЗапроса = "/api/v3/true-api/lk/documents/create?pg="+ГруппаТоваров;
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса,Заголовки);
	HTTPЗапрос.Заголовки.Вставить("Authorization","Bearer "+Токен);   
	      

	Запись_JSON = Новый ЗаписьJSON;            //-- JSON для тела запроса 
	Запись_JSON.УстановитьСтроку(); 

	Запись_JSON_Документ = Новый ЗаписьJSON;   //-- JSON для структуры документа
	Запись_JSON_Документ.УстановитьСтроку(); 
	
	
	//-- СТРУКТУРА ДОКУМЕНТА "Выбытие"  (по окончании формирования преобразуем в формат JSON, и вставляем параметром в тело запроса)  
	ВыбытиеДокументСтруктура = Новый Структура;
	ВыбытиеДокументСтруктура.Вставить("participantId",ИННУчастника);      // ИНН участника оборота товаров
	ВыбытиеДокументСтруктура.Вставить("dropoutReason",ПричинаСписания);   // Причина списания (Брак) "DEFECT"
	ВыбытиеДокументСтруктура.Вставить("address",      АдресСписания);     // адрес списания (адрес организации или магазина)
	ВыбытиеДокументСтруктура.Вставить("withChild",    "true");                   // Признак списания всех вложенных элементов (не обязательно, по-умолчанию "true")
	//ВыбытиеДокументСтруктура.Вставить("sourceDocType",ТипДокументаВыбытия);    // Тип первичного документа  (формируется далее)
																                 //	Возможные значения:
																	             //           «DESTRUCTION_ACT» — «Акт уничтожения (утраты / утилизации)»;
																	             //           «OTHER» — «Прочее»
        																	
	КМ_Массив = Новый Массив;                          
	Для Каждого элемент Из ТаблицаТоваров Цикл  
		Если элемент.generalPackageType = "GROUP" Тогда     // Если это упаковка (Блок)
			Лев14 = Лев(элемент.Sgtin,14);                  // добавляем к КМ контрольные символы "(01)" и "(21)"
			gtin21 ="(01)"+Лев14+"(21)";
			элементSgtin = СтрЗаменить(элемент.Sgtin,Лев14,gtin21);
		ИначеЕсли элемент.generalPackageType = "UNIT" Тогда // если это единица товара,
			элементSgtin = элемент.Sgtin                    // оставляем без изменений
		КонецЕсли;
		КМ_Массив.Добавить(элементSgtin);	// формируем массив кодов маркировки 
	КонецЦикла; 
	
	
	ВыбытиеДокументСтруктура.Вставить("sntins",КМ_Массив);                       // вставляем массив кодов маркировки в структуру документа честного знака "Выбытие"
	// ВыбытиеДокументСтруктура.Вставить("sourceDocType","");                    // для табачной продукции параметр необязательный
	ДатаВыбытияСтр = Формат(ДатаВыбытия,"ДФ=""гггг-ММ-дд""");          // формат: yyyy-MM-dd   
	ВыбытиеДокументСтруктура.Вставить("sourceDocDate", ДатаВыбытияСтр);    	
	ВыбытиеДокументСтруктура.Вставить("sourceDocNum",  НомерВыбытия); 
	//ЕНС пока отключу
	//Если ТипДокументаВыбытия = "OTHER" Тогда
	//	ВыбытиеДокументСтруктура.Вставить("sourceDocType",ТипДокументаВыбытия); 
	//	ВыбытиеДокументСтруктура.Вставить("sourceDocName",ДругойДокументВыбытия);// для табачной продукции параметр необязательный (заполняется, когда тип документа "OTHER")
	//КонецЕсли;
	ЗаписатьJSON(Запись_JSON_Документ,ВыбытиеДокументСтруктура);                 // преобразуем тело документа "Выбытие" в формат JSON
	ВыбытиеДокумент_JSON = Запись_JSON_Документ.Закрыть();                       // документ выбытия в формате JSON
	
		
	ВыбытиеДокумент_JSON_Base64 = ксп_Элис_ОбщегоНазначения.ЗашифроватьBase64(ВыбытиеДокумент_JSON,КодировкаТекста.UTF8);  // шифруем   ВыбытиеДокумент_JSON в Base64 
	ОткрепленнаяПодпись = ксп_Элис_ОбщегоНазначения.ПодписатьТекст(ВыбытиеДокумент_JSON_Base64,Сертификат,Истина);         // получаем откреплённую подпись (УКЭП)
	                                                                                                // в формате base64 

	//-- ФОРМИРУЕМ СТРУКТУРУ ТЕЛА ЗАПРОСА (далее преобразуем в формат JSON)
	
	ДанныеДляЗапроса = Новый Структура;   
    ДанныеДляЗапроса.Вставить("document_format", "MANUAL");                       // Параметр №1 : тип документа MANUAL - .json	
	ДанныеДляЗапроса.Вставить("product_document",ВыбытиеДокумент_JSON_Base64);    // Параметр №3 : ВыбытиеДокумент_JSON_Base64 
	//ЕНС См. "Справочник «Типы документов»" (файл - описание True API)
    ДанныеДляЗапроса.Вставить("type",            "WRITE_OFF");                    // Параметр №3 : код типа документа: Выбытие ( WRITE_OFF)
	ДанныеДляЗапроса.Вставить("signature",       ОткрепленнаяПодпись);            // Параметр №4 : откреплённая подпись (УКЭП) в формате base64 
	//--    
	
	ЗаписатьJSON(Запись_JSON,ДанныеДляЗапроса);
	ДанныеДляЗапроса_JSON = Запись_JSON.Закрыть();     // тело запроса записываем в формат JSON
	
	HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеДляЗапроса_JSON,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос);     
	

	Если (Ответ.КодСостояния = 200) или (Ответ.КодСостояния = 201)  Тогда   
		т = "Код ответа на запрос: "+Ответ.КодСостояния+ "  - выполнен успешно.";
		Сообщить(т);   
		ЗаписьЖурналаРегистрации("КСП_ОбменЧестныйЗнак", УровеньЖурналаРегистрации.Информация,,,т);
		
	    списание_id = Ответ.ПолучитьТелоКакСтроку();                          // id Документа, по документации он должен возвращаться в параметре

		т = "id (номер) созданого документа: "+списание_id;             // но возвращается строкой в теле ответа
		Сообщить(т);
		ЗаписьЖурналаРегистрации("КСП_ОбменЧестныйЗнак", УровеньЖурналаРегистрации.Информация,,,т);
	Иначе  
		
		т = "Код ответа на запрос: "+Ответ.КодСостояния +" - ошибка!";
		Сообщить(т);
			
		ЗаписьЖурналаРегистрации("КСП_ОбменЧестныйЗнак", УровеньЖурналаРегистрации.Ошибка,,,т);
				
	КонецЕсли;        


КонецПроцедуры






