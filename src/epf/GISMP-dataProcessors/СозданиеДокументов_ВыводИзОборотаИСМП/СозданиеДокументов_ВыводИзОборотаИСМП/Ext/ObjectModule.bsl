
#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Создание документов Вывод из оборота ИС МП");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Создание документов Вывод из оборота ИС МП");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.7.306"); // ОБЯЗАТЕЛЬНО!!! //(https://forum.infostart.ru/forum9/topic179193/)
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, "Открыть форму : Создание документов Вывод из оборота ИС МП","Интерактивно",ТипКоманды, Ложь) ;
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, "Выполнить Создание документов Вывод из оборота ИС МП","Программно",ТипКоманды, Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "Программно" Тогда
		СформироватьДокументыВыводИзОборотаИСМП();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 	





Функция СформироватьДокументыВыводИзОборотаИСМП() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"Выбрать 
	|	ДвиженияКМФулфилмент КАК ДвиженияКМФулфилмент
	|из 
	|	регистрСведений.ксп_ВыводИзОборотаИСМП 
	|где 
	|	ВыводИзОборотаИСМП = значение(документ.ВыводИзОборотаИСМП.пустаяСсылка) 
	|	или ВыводИзОборотаИСМП = Неопределено";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СформироватьВыводИзОборотаИСМП(Выборка.ДвиженияКМФулфилмент);
	КонецЦикла;
	
КонецФункции

//формирует один (1) документ вывода из оборота
Функция СформироватьВыводИзОборотаИСМП(ДокОснование) Экспорт

	ОбъектДанных = Документы.ВыводИзОборотаИСМП.СоздатьДокумент();
	ОбъектДанных.Дата = ТекущаяДатаСеанса();


	//ОбъектДанных.АдресПлощадки = деф.АдресПлощадки;

	//ОбъектДанных.АдресПлощадкиСтрокой = деф.АдресПлощадкиСтрокой;

	ОбъектДанных.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументовИСМП.Прочее;

	ОбъектДанных.ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность;

	

	//гуид="";
	//ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ДокументОснование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДокументОснование.Ref ) );
	//Иначе
	//	ОбъектДанных.ДокументОснование = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ДокументОснование = ксп_ИмпортСлужебный.НайтиДокументОснование(деф.ДокументОснование);

	//ОбъектДанных.ИдентификаторГосударственногоКонтракта = деф.ИдентификаторГосударственногоКонтракта;

	//ОбъектДанных.ИдентификаторЗаявки = деф.ИдентификаторЗаявки;

	ОбъектДанных.Комментарий = Строка(ДокОснование);

	//гуид="";
	//ЕстьАтрибут = деф.Контрагент.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Контрагент = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Контрагент.Ref ) );
	//Иначе
	//	ОбъектДанных.Контрагент = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагент(деф.Контрагент);

	ОбъектДанных.НаименованиеПервичногоДокумента = "ДвиженияКМФулфилмент";

	ОбъектДанных.НомерПервичногоДокумента = ДокОснование.номер;
	ОбъектДанных.ДатаПервичногоДокумента = ДокОснование.дата;

	//ОбъектДанных.ОбъемноСортовойУчет = деф.ОбъемноСортовойУчет;

	//_знч = "";
	//ЕстьЗначение = деф.Операция.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.Операция = деф.Операция.Значение;
	//Иначе
	//	ОбъектДанных.Операция = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	ОбъектДанных.Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа;

	//ОбъектДанных.ОписаниеПричины = деф.ОписаниеПричины;

	ОбъектДанных.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();

	//гуид="";
	//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
	//Иначе
	//	ОбъектДанных.Ответственный = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);

	//гуид="";
	//ЕстьАтрибут = деф.СтранаНазначения.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.СтранаНазначения = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.СтранаНазначения.Ref ) );
	//Иначе
	//	ОбъектДанных.СтранаНазначения = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СтранаНазначения = ксп_ИмпортСлужебный.НайтиСтранаНазначения(деф.СтранаНазначения);




	////------------------------------------------------------     ТЧ Товары


	ОбъектДанных.ШтрихкодыУпаковок.Очистить();
	ОбъектДанных.Товары.Очистить();


	Для счТовары = 0 По ДокОснование.ДвиженияКодовМаркировки.Количество()-1 Цикл
		стрк = ДокОснование.ДвиженияКодовМаркировки[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();


		Если Лев(стрк.КодМаркировки, 2) = "01" Тогда
			СтрокаТЧ.GTIN = Сред(стрк.КодМаркировки, 3, 14);
		Иначе 
			СтрокаТЧ.GTIN = Лев(стрк.КодМаркировки, 14);
		КонецЕсли;
		
		ШК = Прав(СтрокаТЧ.GTIN,13);
		НовШК = ОбъектДанных.ШтрихкодыУпаковок.Добавить();		
		НовШК.ШтрихкодУпаковки = Справочники.ШтрихкодыУпаковокТоваров.НайтиПоРеквизиту("ЗначениеШтрихкода", ШК);
		

	//	СтрокаТЧ.КоличествоПотребительскихУпаковок = стрк.КоличествоПотребительскихУпаковок;

	СтрокаТЧ.КоличествоУпаковок = стрк.Количество;

	СтрокаТЧ.Номенклатура = стрк.Номенклатура;
	СтрокаТЧ.Характеристика = стрк.ХарактеристикаНоменклатуры;
	СтрокаТЧ.Количество = стрк.Количество;
	
	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

		СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;

	//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

		СтрокаТЧ.СуммаСНДС = стрк.СуммаСНДС;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Упаковка = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);

		СтрокаТЧ.Цена = стрк.Цена;

	КонецЦикла;

	////------------------------------------------------------     ТЧ ШтрихкодыУпаковок



	//ОбъектДанных.ШтрихкодыУпаковок.Очистить();


	//Для счТовары = 0 По деф.ТЧШтрихкодыУпаковок.Количество()-1 Цикл
	//	стрк = деф.ТЧШтрихкодыУпаковок[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ШтрихкодыУпаковок.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ШтрихкодУпаковки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ШтрихкодУпаковки.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ШтрихкодУпаковки = ксп_ИмпортСлужебный.НайтиШтрихкодУпаковки(стрк.ШтрихкодУпаковки);

	//КонецЦикла;




	////------------------------------------------------------ ФИНАЛ


	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.УстановитьНовыйНомер();
	ОбъектДанных.Записать();
	
	
	НЗ = РегистрыСведений.СтатусыДокументовИСМП.СоздатьНаборЗаписей();
	НЗ.Отбор.Документ.Установить(ОбъектДанных.Ссылка);
	НовСтр = НЗ.Добавить();
	НовСтр.Статус = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.Черновик;
	НовСтр.Документ = ОбъектДанных.Ссылка;
	НовСтр.ДальнейшееДействие1 = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	НЗ.Записать();
	
	РегистрыСведений.ксп_ВыводИзОборотаИСМП.ДобавитьВыводИзОборота(ДокОснование, ОбъектДанных.Ссылка);

	//Возврат ОбъектДанных.Ссылка;
	//
КонецФункции


