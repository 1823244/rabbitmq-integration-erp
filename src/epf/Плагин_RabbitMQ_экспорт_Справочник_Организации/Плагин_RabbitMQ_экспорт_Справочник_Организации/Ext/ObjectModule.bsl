#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Справочник_Организации");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Справочник_Организации");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_экспорт_Справочник_Организации",
		"Форма_Плагин_Плагин_RabbitMQ_экспорт_Справочник_Организации",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


Функция ВыгрузитьОбъект(ДанныеСсылка) Экспорт
	Если ТипЗнч(ДанныеСсылка) = Тип("СправочникСсылка.Организации") Тогда
		Обк = ДанныеСсылка.ПолучитьОбъект(); 
	Иначе 
		Обк = ДанныеСсылка; 
	КонецЕсли;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	СтруктураОбъекта.Вставить("source", "ERP");
	СтруктураОбъекта.Вставить("type", Обк.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	//	DEFINITION          
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	definition.Вставить("ВалютаРегламентированногоУчета", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВалютаРегламентированногоУчета));
	definition.Вставить("ВидОбменаСКонтролирующимиОрганами", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВидОбменаСКонтролирующимиОрганами));
	definition.Вставить("Военкомат", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Военкомат));
	definition.Вставить("ГоловнаяОрганизация", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ГоловнаяОрганизация));
	definition.Вставить("ГрафикРаботы", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ГрафикРаботы));
	definition.Вставить("ГрафикРаботыСотрудников", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ГрафикРаботыСотрудников));
	definition.Вставить("ДатаРегистрации", Обк.ДатаРегистрации);
	definition.Вставить("ДополнительныйКодФСС", Обк.ДополнительныйКодФСС);
	definition.Вставить("ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию", Обк.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию);
	definition.Вставить("ЕстьОбособленныеПодразделения", Обк.ЕстьОбособленныеПодразделения);
	definition.Вставить("ЗарегистрированВОЭЗ", Обк.ЗарегистрированВОЭЗ);
	definition.Вставить("ИндивидуальныйПредприниматель", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ИндивидуальныйПредприниматель));
	definition.Вставить("ИНН", Обк.ИНН);
	definition.Вставить("ИПКодПодчиненностиФСС", Обк.ИПКодПодчиненностиФСС);
	definition.Вставить("ИПРегистрационныйНомерПФР", Обк.ИПРегистрационныйНомерПФР);
	definition.Вставить("ИПРегистрационныйНомерТФОМС", Обк.ИПРегистрационныйНомерТФОМС);
	definition.Вставить("ИПРегистрационныйНомерФСС", Обк.ИПРегистрационныйНомерФСС);
	definition.Вставить("КодВСтранеРегистрации", Обк.КодВСтранеРегистрации);
	definition.Вставить("КодНалоговогоОргана", Обк.КодНалоговогоОргана);
	definition.Вставить("КодНалоговогоОрганаПолучателя", Обк.КодНалоговогоОрганаПолучателя);
	definition.Вставить("КодОКВЭД", Обк.КодОКВЭД);
	definition.Вставить("КодОКВЭД2", Обк.КодОКВЭД2);
	definition.Вставить("КодОКОНХ", Обк.КодОКОНХ);
	definition.Вставить("КодОКОПФ", Обк.КодОКОПФ);
	definition.Вставить("КодОКФС", Обк.КодОКФС);
	definition.Вставить("КодОрганаПФР", Обк.КодОрганаПФР);
	definition.Вставить("КодОрганаФСГС", Обк.КодОрганаФСГС);
	definition.Вставить("КодПодчиненностиФСС", Обк.КодПодчиненностиФСС);
	definition.Вставить("КодПоОКАТО", Обк.КодПоОКАТО);
	definition.Вставить("КодПоОКПО", Обк.КодПоОКПО);
	definition.Вставить("КПП", Обк.КПП);
	definition.Вставить("КрупнейшийНалогоплательщик", Обк.КрупнейшийНалогоплательщик);
	definition.Вставить("НаименованиеИнострОрганизации", Обк.НаименованиеИнострОрганизации);
	definition.Вставить("НаименованиеМеждународное", Обк.НаименованиеМеждународное);
	definition.Вставить("НаименованиеНалоговогоОргана", Обк.НаименованиеНалоговогоОргана);
	definition.Вставить("НаименованиеОКВЭД", Обк.НаименованиеОКВЭД);
	definition.Вставить("НаименованиеОКВЭД2", Обк.НаименованиеОКВЭД2);
	definition.Вставить("НаименованиеОКОПФ", Обк.НаименованиеОКОПФ);
	definition.Вставить("НаименованиеОКФС", Обк.НаименованиеОКФС);
	definition.Вставить("НаименованиеПолное", Обк.НаименованиеПолное);
	definition.Вставить("НаименованиеСокращенное", Обк.НаименованиеСокращенное);
	definition.Вставить("НаименованиеТерриториальногоОрганаПФР", Обк.НаименованиеТерриториальногоОрганаПФР);
	definition.Вставить("НаименованиеТерриториальногоОрганаФСС", Обк.НаименованиеТерриториальногоОрганаФСС);
	definition.Вставить("НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности", Обк.НеЗаполнятьПодразделенияВМероприятияхТрудовойДеятельности);
	definition.Вставить("ОбменКаталогОтправкиДанныхОтчетности", Обк.ОбменКаталогОтправкиДанныхОтчетности);
	definition.Вставить("ОбменКаталогПрограммыЭлектроннойПочты", Обк.ОбменКаталогПрограммыЭлектроннойПочты);
	definition.Вставить("ОбменКодАбонента", Обк.ОбменКодАбонента);
	definition.Вставить("ОбособленноеПодразделение", Обк.ОбособленноеПодразделение);
	definition.Вставить("ОГРН", Обк.ОГРН);
	definition.Вставить("ОтделениеИностраннойОрганизации", Обк.ОтделениеИностраннойОрганизации);
	definition.Вставить("Префикс", Обк.Префикс);
	definition.Вставить("ПрименятьРайонныйКоэффициент", Обк.ПрименятьРайонныйКоэффициент);
	definition.Вставить("ПрименятьСевернуюНадбавку", Обк.ПрименятьСевернуюНадбавку);
	definition.Вставить("ПроцентСевернойНадбавки", Обк.ПроцентСевернойНадбавки);
	definition.Вставить("РайонныйКоэффициент", Обк.РайонныйКоэффициент);
	definition.Вставить("РайонныйКоэффициентРФ", Обк.РайонныйКоэффициентРФ);
	definition.Вставить("РегистрационныйНомерПФР", Обк.РегистрационныйНомерПФР);
	definition.Вставить("РегистрационныйНомерТФОМС", Обк.РегистрационныйНомерТФОМС);
	definition.Вставить("РегистрационныйНомерФСС", Обк.РегистрационныйНомерФСС);
	definition.Вставить("РегистрацияВНалоговомОргане", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.РегистрацияВНалоговомОргане));
	definition.Вставить("СвидетельствоДатаВыдачи", Обк.СвидетельствоДатаВыдачи);
	definition.Вставить("СвидетельствоСерияНомер", Обк.СвидетельствоСерияНомер);
	definition.Вставить("СтранаПостоянногоМестонахождения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СтранаПостоянногоМестонахождения));
	definition.Вставить("СтранаРегистрации", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СтранаРегистрации));
	definition.Вставить("СтранаРегистрацииИностраннойОрганизации", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СтранаРегистрацииИностраннойОрганизации));
	definition.Вставить("УчетнаяЗаписьОбмена", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.УчетнаяЗаписьОбмена));
	definition.Вставить("ФайлЛоготип", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ФайлЛоготип));
	definition.Вставить("ФайлФаксимильнаяПечать", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ФайлФаксимильнаяПечать));
	definition.Вставить("ЦифровойИндексОбособленногоПодразделения", Обк.ЦифровойИндексОбособленногоПодразделения);
	definition.Вставить("ЮридическоеФизическоеЛицо", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЮридическоеФизическоеЛицо));
	definition.Вставить("ЮрФизЛицо", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЮрФизЛицо));

	//------------------------------------------------------     ТЧ КонтактнаяИнформация

	ТЧКонтактнаяИнформация = Новый Массив;

	Для сч = 0 По обк.КонтактнаяИнформация.Количество()-1 Цикл

		стрк = обк.КонтактнаяИнформация[сч];

		НовСтр = Новый Структура;

		НовСтр.Вставить("АдресЭП", стрк.АдресЭП);
		НовСтр.Вставить("Вид", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Вид));
		НовСтр.Вставить("ВидДляСписка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВидДляСписка));
		НовСтр.Вставить("Город", стрк.Город);
		НовСтр.Вставить("ДействуетС", стрк.ДействуетС);
		НовСтр.Вставить("ДоменноеИмяСервера", стрк.ДоменноеИмяСервера);
		НовСтр.Вставить("Значение", стрк.Значение);
		НовСтр.Вставить("ЗначенияПолей", стрк.ЗначенияПолей);
		НовСтр.Вставить("НомерТелефона", стрк.НомерТелефона);
		НовСтр.Вставить("НомерТелефонаБезКодов", стрк.НомерТелефонаБезКодов);
		НовСтр.Вставить("Представление", стрк.Представление);
		НовСтр.Вставить("Регион", стрк.Регион);
		НовСтр.Вставить("Страна", стрк.Страна);
		НовСтр.Вставить("Тип", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Тип));
		ТЧКонтактнаяИнформация.Добавить(НовСтр);

	КонецЦикла;

	definition.Вставить("ТЧКонтактнаяИнформация", ТЧКонтактнаяИнформация);

	//------------------------------------------------------     ТЧ ДополнительныеРеквизиты

	ТЧДополнительныеРеквизиты = Новый Массив;

	Для сч = 0 По обк.ДополнительныеРеквизиты.Количество()-1 Цикл

		стрк = обк.ДополнительныеРеквизиты[сч];

		НовСтр = Новый Структура;

		НовСтр.Вставить("Значение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Значение));
		НовСтр.Вставить("Свойство", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Свойство));
		НовСтр.Вставить("ТекстоваяСтрока", стрк.ТекстоваяСтрока);
		ТЧДополнительныеРеквизиты.Добавить(НовСтр);

	КонецЦикла;

	definition.Вставить("ТЧДополнительныеРеквизиты", ТЧДополнительныеРеквизиты);




	//------------------------------------------------------ ФИНАЛ


	СтруктураОбъекта.Вставить("definition", definition);
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	Возврат json;
КонецФункции


