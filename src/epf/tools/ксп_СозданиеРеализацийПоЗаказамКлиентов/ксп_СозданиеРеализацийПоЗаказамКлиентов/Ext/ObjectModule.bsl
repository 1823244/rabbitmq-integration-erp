
#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.11");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Создание реализация по заказам клиентов");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Создание реализация по заказам клиентов");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.7.306"); // ОБЯЗАТЕЛЬНО!!! //(https://forum.infostart.ru/forum9/topic179193/)
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, "Открыть форму : Создание реализаций","ксп_СозданиеРеализацийПоЗаказамКлиентовИнтерактивно",ТипКоманды, Ложь) ;
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, "Выполнить создание реализаций","СоздатьРеализацииНаОснованииЗаказовКлиентов",ТипКоманды, Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "СоздатьРеализацииНаОснованииЗаказовКлиентов" Тогда
		
		СоздатьРеализацииНаОснованииЗаказовКлиентов();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 	



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура СоздатьРеализацииНаОснованииЗаказовКлиентов(ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Рег.ЗаказКлиента КАК ЗаказКлиента,
		|	Рег.id КАК id,
		|	Рег.site КАК site
		|ИЗ
		|	РегистрСведений.ксп_ИсходныеДанныеЗаказов КАК Рег    
		|	left join Документ.РеализацияТоваровУслуг как докР
		|	по докр.ссылка = рег.реализация
		|ГДЕ
		|	выразить(Рег.status как строка(50)) В (&status)
		|	И докр.ссылка is null
		|	И &УсловиеДатаНачала
		|	И &УсловиеДатаОкончания
		|
		|
		|";
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить("complete");
	МассивСтатусов.Добавить("partially-completed");
	Запрос.УстановитьПараметр("status", МассивСтатусов);   
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала); 
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания); 
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДатаНачала", "Рег.ЗаказКлиента.Дата >= &ДатаНачала");	
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДатаНачала", "ИСТИНА");	
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДатаОкончания", "Рег.ЗаказКлиента.Дата <= &ДатаОкончания");	
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДатаОкончания", "ИСТИНА");	
	КонецЕсли;
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СоздатьОднуРеализацию(ВыборкаДетальныеЗаписи.ЗаказКлиента, ВыборкаДетальныеЗаписи.id, ВыборкаДетальныеЗаписи.site);
		
	КонецЦикла;
	

КонецПроцедуры



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьОднуРеализацию(ЗаказКлиентаСсылка, id, site) Экспорт
	
	//Если Не ЗаказКлиентаСсылка.Проведен Тогда 
	//	Возврат Неопределено;
	//КонецЕсли;
	
	докР = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	
	докР.Товары.Очистить();
	
	Попытка
		ЗаполнитьЗначенияСвойств(ДокР, ЗаказКлиентаСсылка,,"Номер");     
		
		ДокР.ВалютаВзаиморасчетов = константы.ВалютаРегламентированногоУчета.Получить();
		
		Для каждого стрк Из ЗаказКлиентаСсылка.Товары Цикл
			НовСтр = ДокР.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, стрк);
		КонецЦикла;
	Исключение
		т = ОписаниеОшибки();
		Сообщить("Не удалось заполнить: " + докР + " " + т, СтатусСообщения.Важное);
		ВызватьИсключение т;
	КонецПопытки;

	
	докР.Дата				= ТекущаяДата();
	
	докР.Статус 			= Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	докР.ЗаказКлиента 		= ЗаказКлиентаСсылка;
	докР.РеализацияПоЗаказам = Истина; 
	докР.СкидкиРассчитаны 	= Истина;
	
	Успешно = Ложь;
	Попытка
		докР.Записать(РежимЗаписиДокумента.Запись);
		Сообщить("Проведен: " + докР , СтатусСообщения.Информация);

		НЗ = РегистрыСведений.ксп_ОтложенноеПроведение.СоздатьНаборЗаписей();
		НЗ.Отбор.ДокументСсылка.Установить(докР.Ссылка);
		
		стрк = НЗ.Добавить();
		стрк.ДокументСсылка = докР.Ссылка;
		
		стрк.СтатусОбъекта = Перечисления.ксп_СтатусыКачестваДокументов.ОК;
		стрк.СтатусПроведения = Неопределено;
		
		стрк.ДатаОбработки = ТекущаяДатаСеанса();
		
		НЗ.Записать();
		
		Успешно = Истина;           
		
	Исключение
		Сообщить("Не удалось записать: " + докР + " " + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;  

	
	Если Успешно Тогда    
		
		//--------------------- РС     ксп_ИсходныеДанныеЗаказов
		
		НЗ = РегистрыСведений.ксп_ИсходныеДанныеЗаказов.СоздатьНаборЗаписей();
		НЗ.Отбор.id.Установить(id);
		НЗ.Отбор.site.Установить(site);
		
		НЗ.Прочитать();
		Для каждого стрк Из НЗ Цикл
			Если НЕ ЗначениеЗаполнено(стрк.Реализация) Тогда
				стрк.Реализация = ДокР.Ссылка;
			КонецЕсли;
		КонецЦикла;
		НЗ.Записать();
		
		
		Попытка
			докР.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить("Проведен: " + докР , СтатусСообщения.Информация);
			
			НЗ = РегистрыСведений.ксп_ОтложенноеПроведение.СоздатьНаборЗаписей();
			НЗ.Отбор.ДокументСсылка.Установить(докР.Ссылка);
			
			стрк = НЗ.Добавить();
			стрк.ДокументСсылка = докР.Ссылка;
			
			стрк.СтатусОбъекта = Перечисления.ксп_СтатусыКачестваДокументов.ОК;
			стрк.СтатусПроведения = Перечисления.КСП_СтатусыОтложенногоПроведения.Проведен;
			
			стрк.ДатаОбработки = ТекущаяДатаСеанса();    
			
			НЗ.Записать();
			
		Исключение
			
			т = ОписаниеОшибки();
			
			Сообщить("Не удалось провести: " + докР + ". Ошибка: " + т, СтатусСообщения.Важное); 
			
			НЗ = РегистрыСведений.ксп_ОтложенноеПроведение.СоздатьНаборЗаписей();
			НЗ.Отбор.ДокументСсылка.Установить(докР.Ссылка);
			
			стрк = НЗ.Добавить();
			стрк.ДокументСсылка = докР.Ссылка;
			
			стрк.СтатусОбъекта = Перечисления.ксп_СтатусыКачестваДокументов.ОК;
			стрк.СтатусПроведения = Перечисления.КСП_СтатусыОтложенногоПроведения.НеПроведен;
			
			стрк.ОшибкаПроведения = т;
			
			стрк.ДатаОбработки = ТекущаяДатаСеанса();    
			
			НЗ.Записать();

		КонецПопытки;  
	КонецЕсли;

	
	Возврат ДокР.Ссылка;
	
КонецФункции



