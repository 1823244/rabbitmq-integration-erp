#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УТ_Справочник_ДоговорыКонтрагентов");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УТ_Справочник_ДоговорыКонтрагентов");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УТ_Справочник_ДоговорыКонтрагентов",
		"Плагин_RabbitMQ_импорт_из_УТ_Справочник_ДоговорыКонтрагентов",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта) Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = "справочник.договорыконтрагентов" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	id = СтруктураОбъекта.identification;
	def = СтруктураОбъекта.definition;
	
	СуществующийОбъект = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		
	Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		ОбъектДанных = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		СсылкаНового = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ОбъектДанных.УстановитьНовыйКод();
	Иначе 
		ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
	КонецЕсли;
		
	//ОбъектДанных.Код = id.code;
	
	ОбъектДанных.Наименование = def.description;  
		
	//ParentRef = "";
	//Если def.parent.Свойство("Ref", ParentRef) Тогда
	//	ОбъектДанных.Родитель = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(ParentRef));
	//КонецЕсли;
	
	
		ОбъектДанных.ПометкаУдаления = def.DeletionMark;       
		
		Если def.УчетАгентскогоНДС = true Тогда
			ОбъектДанных.УчетАгентскогоНДС = ИСТИНА;
		Иначе
			ОбъектДанных.УчетАгентскогоНДС = ЛОЖЬ;
		КонецЕсли;
		
		объектДанных.Дата = def.Date;
		
		ОбъектДанных.Номер = def.Номер;
		
		ОбъектДанных.ДатаНачалаДействия = def.Date;
		
		ОбъектДанных.ДатаОкончанияДействия = def.Период;
				
		Попытка
			Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(def.Контрагент.ref)); 	
		Исключение
		КонецПопытки;
		Если Контрагент <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Контрагент.ВерсияДанных) Тогда
				ОбъектДанныхКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
				СсылкаНовогоКонтрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(def.Контрагент.ref));
				ОбъектДанныхКонтрагент.УстановитьСсылкуНового(СсылкаНовогоКонтрагент);
				ОбъектДанныхКонтрагент.Наименование = def.Контрагент.description;
				ОбъектДанныхКонтрагент.ОбменДанными.Загрузка = Истина;
				ОбъектДанныхКонтрагент.Записать();
			Иначе 
				ОбъектДанныхКонтрагент = Контрагент.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;      
		
		Если Контрагент <> неопределено Тогда	
			ОбъектДанных.Контрагент = Контрагент;
			ОбъектДанных.Партнер = Контрагент.Партнер;
		КонецЕсли; 
			
		Попытка
			Организация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(def.Организация.ref));
		Исключение
		КонецПопытки;
		   Если Организация <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Организация.ВерсияДанных) Тогда
				ОбъектДанныхОрганизация = Справочники.Организации.СоздатьЭлемент();
				СсылкаНовогоОрганизация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(def.Организация.ref));
				ОбъектДанныхОрганизация.УстановитьСсылкуНового(СсылкаНовогоОрганизация);
				ОбъектДанныхОрганизация.Наименование = def.Организация.description;
				ОбъектДанныхОрганизация.ОбменДанными.Загрузка = Истина;
				ОбъектДанныхОрганизация.Записать();
			Иначе 
				ОбъектДанныхОрганизация = Организация.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;    
		
		Если Организация <> Неопределено Тогда
			ОбъектДанных.Организация = Организация;
		КонецЕсли;
		
		ОбъектДанных.ВалютаВзаиморасчетов = def.ВалютаВзаиморасчетов;
		
		_знч = "";
		ЕстьЗначение = def.ТипДоговора.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			ОбъектДанных.ТипДоговора = def.ТипДоговора.Значение;
		Иначе
			ОбъектДанных.ТипДоговора = Неопределено;
		КонецЕсли;	
		
		Попытка
			ВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(def.ТипЦен.ref));
			
			Если НЕ ЗначениеЗаполнено(ВидЦены.ВерсияДанных) Тогда
				ОбъектДанныхВидЦены = Справочники.ВидыЦен.СоздатьЭлемент();
				СсылкаНовогоВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(def.ТипЦен.ref));
				ОбъектДанныхВидЦены.УстановитьСсылкуНового(СсылкаНовогоВидЦены);
				ОбъектДанныхВидЦены.Наименование = def.ТипЦены.discription;
				ОбъектДанныхВидЦены.ОбменДанными.Загрузка = Истина;
				ОбъектДанныхВидЦены.Записать();
			Иначе 
				ОбъектДанныхВидЦены = ВидЦены.ПолучитьОбъект();
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ОбъектДанныхВидЦены <> Справочники.ВидыЦен.ПустаяСсылка() Тогда
			ОбъектДанных.ВидЦенПродажи = ОбъектДанныхВидЦены;
			
			ОбъектДанных.ВидЦенУчетный = ОбъектДанныхВидЦены;
		КонецЕсли;            
		
		Если Не ОбъектДанных.ДатаОкончанияДействия = Дата(1,1,1) Тогда
			Если ОбъектДанных.ДатаОкончанияДействия < НачалоДня(ТекущаяДата()) Тогда
				ОбъектДанных.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Закрыт;
			Иначе
				ОбъектДанных.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
			КонецЕсли;
		Иначе 
			ОбъектДанных.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
		КонецЕсли;
		
		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		
		ОбъектДанных.Записать();
		
	Возврат ОбъектДанных.Ссылка;
	
КонецФункции


#Область Тестирование


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	//Если Свойство = "Сумма" Тогда
	//	Возврат XMLЗначение(Тип("Число"),Значение);
	//КонецЕсли;
	Если Свойство = "ВалютаВзаиморасчетов" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции


#КонецОбласти 	