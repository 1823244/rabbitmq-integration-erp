Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;

Перем мЛоггер;
Перем мИдВызова;


Перем мВнешняяСистема;
Перем ИмяСобытияЖР;

Перем СобиратьНенайденнуюНоменклатуру Экспорт;
Перем НеНайденнаяНоменклатураМассив;   

Перем СобиратьНенайденныхКонтрагентов Экспорт;
Перем НеНайденныеКонтрагентыМассив;   

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УТ_Документ_ВзаимозачетЗадолженности");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УТ_Документ_ВзаимозачетЗадолженности");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УТ_Документ_ВзаимозачетЗадолженности",
		"Плагин_RabbitMQ_импорт_из_УТ_Документ_ВзаимозачетЗадолженности",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из УТ: ВзаимозачетЗадолженности");
	
    Попытка
		
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			мЛоггер.ерр("Неверный тип входящего объекта. сообщение пропущено.");
			Возврат Неопределено;
		КонецЕсли;
	
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.ВзаимозачетЗадолженности") Тогда
			Возврат Неопределено;
		КонецЕсли;

		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;

		Рез = СоздатьОбновитьДокумент(СтруктураОбъекта);   	

		Возврат Рез;
		
    Исключение
        ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,,
		"Импорт из УТ. Плагин: Импорт Документ.ВзаимозачетЗадолженности. Подробности: "+ОписаниеОшибки());
		ВызватьИсключение;// для помещения в retry
	КонецПопытки;	
			
КонецФункции

Функция СоздатьОбновитьДокумент(СтруктураОбъекта) Экспорт
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;   
	
	ПустойДокумент = Документы.ВзаимозачетЗадолженности.ПустаяСсылка();
	
	ДокументИзУТ = "ВзаимозачетЗадолженности (УТ) № " + деф.Number + " от " + строка(деф.Date);
		
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы.ВзаимозачетЗадолженности.ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки документа для " + ДокументИзУТ+ ". Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка			
		
		Действие = ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы.ВзаимозачетЗадолженности.СоздатьДокумент();
			СсылкаНового = Документы.ВзаимозачетЗадолженности.ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		Иначе 
			ОтменитьТранзакцию();
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных);		

		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.ОбменДанными.Загрузка = Истина;
			ОбъектДанных.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли; 
		
        jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		

		ЗафиксироватьТранзакцию();
		
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Информация,,,"Записан Документ : "+строка(ОбъектДанных)+". Исходный док. УТ "+строка(ДокументИзУТ));
		
		Рез = ОбъектДанных.ССылка;
		
	
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа " + ДокументИзУТ + ". Подробности: " + т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение; //отправляем в retry-очередь
	КонецПопытки;	
	
	Возврат Рез;
	
КонецФункции


// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных) Экспорт

	
	ЗаполнитьРеквизитыШапки(СтруктураОбъекта, ОбъектДанных);
	ЗаполнитьРеквизитыДебиторскаяЗадолженность(СтруктураОбъекта, ОбъектДанных);
	ЗаполнитьРеквизитыКредиторскаяЗадолженность(СтруктураОбъекта, ОбъектДанных);




КонецФункции


Функция ЗаполнитьРеквизитыШапки(СтруктураОбъекта, ОбъектДанных) Экспорт


	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


 	ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = id.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;


	ОбъектДанных.Валюта = ксп_ИмпортСлужебный.НайтиВалютуИзУзла(деф.Валюта);

	_знч = "";
	ЕстьЗначение = деф.ВидОперации.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ВидОперации = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ВидыОперацийВзаимозачетаЗадолженности", _знч);
	Иначе
		ОбъектДанных.ВидОперации = Неопределено;
	КонецЕсли;

	ОбъектДанных.ДатаВходящегоДокумента = деф.ДатаВходящегоДокумента;

	ОбъектДанных.Комментарий = деф.Комментарий;
	
	ОбъектДанных.КонтрагентДебитор = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.КонтрагентДебитор, мВнешняяСистема);
	ОбъектДанных.КонтрагентКредитор = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.КонтрагентКредитор, мВнешняяСистема);

	ОбъектДанных.НомерВходящегоДокумента = деф.НомерВходящегоДокумента;

	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

	гуид="";
	ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Подразделение = Справочники.СтруктураПредприятия.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Подразделение.Ref ) );
	Иначе
		ОбъектДанных.Подразделение = Неопределено;
	КонецЕсли;

	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;

	ОбъектДанных.СуммаРегл = деф.СуммаРегл;

	ОбъектДанных.СуммаУпр = деф.СуммаУпр;

	_знч = "";
	ЕстьЗначение = деф.ТипДебитора.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ТипДебитора = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ТипыУчастниковВзаимозачета", _знч);
	Иначе
		ОбъектДанных.ТипДебитора = Неопределено;
	КонецЕсли;

	_знч = "";
	ЕстьЗначение = деф.ТипКредитора.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ТипКредитора = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ТипыУчастниковВзаимозачета", _знч);
	Иначе
		ОбъектДанных.ТипКредитора = Неопределено;
	КонецЕсли;



КонецФункции

Функция ЗаполнитьРеквизитыДебиторскаяЗадолженность(СтруктураОбъекта, ОбъектДанных) Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	ОбъектДанных.ДебиторскаяЗадолженность.Очистить();


	Для счТовары = 0 По деф.ТЧДебиторскаяЗадолженность.Количество()-1 Цикл
		стрк = деф.ТЧДебиторскаяЗадолженность[счТовары];
		СтрокаТЧ = ОбъектДанных.ДебиторскаяЗадолженность.Добавить();


		СтрокаТЧ.ВалютаВзаиморасчетов = ксп_ИмпортСлужебный.НайтиВалютуИзУзла(деф.ВалютаВзаиморасчетов);

		СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;

		СтрокаТЧ.Организация = ОбъектДанных.Организация;

		гуид="";
		ЕстьАтрибут = стрк.Партнер.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Партнер = Справочники.Партнеры.ПолучитьСсылку( Новый УникальныйИдентификатор( гуид ) );
		Иначе
			СтрокаТЧ.Партнер = Неопределено;
		КонецЕсли;

		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

		СтрокаТЧ.СуммаРегл = стрк.СуммаРегл;

		СтрокаТЧ.СуммаУпр = стрк.СуммаУпр;

		_знч = "";
		ЕстьЗначение = стрк.ТипРасчетов.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			ОбъектДанных.ТипРасчетов = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ТипыРасчетовСПартнерами", _знч);
		Иначе
			СтрокаТЧ.ТипРасчетов = Неопределено;
		КонецЕсли;

	КонецЦикла;


КонецФункции

Функция ЗаполнитьРеквизитыКредиторскаяЗадолженность(СтруктураОбъекта, ОбъектДанных) Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;



	ОбъектДанных.КредиторскаяЗадолженность.Очистить();


	Для счТовары = 0 По деф.ТЧКредиторскаяЗадолженность.Количество()-1 Цикл
		стрк = деф.ТЧКредиторскаяЗадолженность[счТовары];
		СтрокаТЧ = ОбъектДанных.КредиторскаяЗадолженность.Добавить();



		СтрокаТЧ.ВалютаВзаиморасчетов = ксп_ИмпортСлужебный.НайтиВалютуИзУзла(деф.ВалютаВзаиморасчетов);

		СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;

		СтрокаТЧ.Организация = ОбъектДанных.Организация;

		гуид="";
		ЕстьАтрибут = стрк.Партнер.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
			СтрокаТЧ.Партнер = Справочники.Партнеры.ПолучитьСсылку( Новый УникальныйИдентификатор( гуид ) );
		Иначе
			СтрокаТЧ.Партнер = Неопределено;
		КонецЕсли;

		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

		СтрокаТЧ.СуммаРегл = стрк.СуммаРегл;

		СтрокаТЧ.СуммаУпр = стрк.СуммаУпр;

		_знч = "";
		ЕстьЗначение = стрк.ТипРасчетов.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			ОбъектДанных.ТипРасчетов = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ТипыРасчетовСПартнерами", _знч);
		Иначе
			СтрокаТЧ.ТипРасчетов = Неопределено;
		КонецЕсли;

	КонецЦикла;


КонецФункции






#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции



// Описание_метода
//
// Параметры:
//  Параметр1   - Тип1 -
//
Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
    Возврат ЭтотОбъект;
     
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф) Экспорт
	
	
	Если НЕ ЭтоНовый Тогда	
		
		Если СуществующийДокСсылка.ПометкаУдаления Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;		
			
		ИначеЕсли НЕ СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		ИначеЕсли СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;

		КонецЕсли;
		
	Иначе // новый документ
		
		Если деф.DeletionMark = Истина Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли НЕ деф.isPosted Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли деф.isPosted Тогда
			Возврат СОЗДАТЬ;
		КонецЕсли;		

	КонецЕсли;
		
	Возврат НЕ_ЗАГРУЖАТЬ;
	
КонецФункции



мВнешняяСистема = "ut";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_УТ";

СобиратьНенайденнуюНоменклатуру = Истина;

НеНайденнаяНоменклатураМассив = Новый Массив;   
 
СобиратьНенайденныхКонтрагентов = Истина;
НеНайденныеКонтрагентыМассив = Новый Массив;   



НЕ_ЗАГРУЖАТЬ = 1;
СОЗДАТЬ = 2;
ОБНОВИТЬ = 3;
ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;


