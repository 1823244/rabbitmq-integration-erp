
#Область СобытияДокументов
//https://wiki.elis.ru/pages/viewpage.action?pageId=362100
Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
Перем ПОМЕТИТЬ; //добавлено 2024-07-03
#КонецОбласти


Перем мЛоггер;
Перем мИдВызова;


Перем мВнешняяСистема;
Перем ИмяСобытияЖР;

Перем СобиратьНенайденнуюНоменклатуру Экспорт;
Перем НеНайденнаяНоменклатураМассив;   

Перем СобиратьНенайденныхКонтрагентов Экспорт;
Перем НеНайденныеКонтрагентыМассив;   

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.23");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УТ_Документ_ВзаимозачетЗадолженности");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УТ_Документ_ВзаимозачетЗадолженности");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УТ_Документ_ВзаимозачетЗадолженности",
		"Плагин_RabbitMQ_импорт_из_УТ_Документ_ВзаимозачетЗадолженности",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
	
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	_мИдВызова = мИдВызова ;
	
	ref = "";
	id = СтруктураОбъекта.identification;
	Если ТипЗнч(id) = Тип("Структура") Тогда
		Если id.свойство("ref") Тогда
			ref = id.ref;
		КонецЕсли;
	КонецЕсли;
	
	мИдВызова = мис_ЛоггерСервер.СоздатьИдВызова(мИдВызова, "Импорт одного документа ВзаимозачетЗадолженности "+ref, ТекущаяДатаСеанса(),
		"", Неопределено, Неопределено);
	
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из УТ: ВзаимозачетЗадолженности");
	
	
	
	
    Попытка
		
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			мЛоггер.ерр("Неверный тип входящего объекта. сообщение пропущено.");
			Возврат Неопределено;
		КонецЕсли;
	
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.ВзаимозачетЗадолженности") Тогда
			Возврат Неопределено;
		КонецЕсли;

		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;

		Рез = СоздатьОбновитьДокумент(СтруктураОбъекта);   	
		
		мИдВызова = _мИдВызова ;
		
		Возврат Рез;
		
	Исключение
		мИдВызова = _мИдВызова ;
		
        ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,,
		"Импорт из УТ. Плагин: Импорт Документ.ВзаимозачетЗадолженности. Подробности: "+ОписаниеОшибки());
		ВызватьИсключение;// для помещения в retry
	КонецПопытки;	
			
КонецФункции

Функция СоздатьОбновитьДокумент(СтруктураОбъекта) Экспорт
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;   
	
	ПустойДокумент = Документы.ВзаимозачетЗадолженности.ПустаяСсылка();
	
	ДокументИзУТ = "ВзаимозачетЗадолженности (УТ) № " + деф.Number + " от " + строка(деф.Date);
		
	УИД = Новый УникальныйИдентификатор(id.Ref);
	СуществующийДокСсылка = Документы.ВзаимозачетЗадолженности.ПолучитьСсылку(УИД);
	
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ЭтоНовый = Ложь;
	Иначе   
		ЭтоНовый = Истина;
	КонецЕсли;
	
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если НЕ ЭтоНовый Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийДокСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки документа для " + ДокументИзУТ+ ". Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Рез = Неопределено;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка			
		
		Действие = ксп_ИмпортСлужебный.ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф);
		
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			РегистрыСведений.ксп_ОтложенноеПроведение.УдалитьОтложенноеПроведение(СуществующийДокСсылка);//добавлено 2024-07-03
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
        // добавлено 2024-07-03
        Если Действие = ПОМЕТИТЬ Тогда
            ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
            ОбъектДанных.УстановитьПометкуУдаления(Истина);
            РегистрыСведений.ксп_ОтложенноеПроведение.УдалитьОтложенноеПроведение(СуществующийДокСсылка);//добавлено 2024-07-03
            ЗафиксироватьТранзакцию();
            Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			РегистрыСведений.ксп_ОтложенноеПроведение.УдалитьОтложенноеПроведение(СуществующийДокСсылка);//добавлено 2024-07-03
			ЗафиксироватьТранзакцию();
			Возврат СуществующийДокСсылка;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ОбъектДанных = Документы.ВзаимозачетЗадолженности.СоздатьДокумент();
			СсылкаНового = Документы.ВзаимозачетЗадолженности.ПолучитьСсылку(УИД);
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		Иначе 
			ОтменитьТранзакцию();
			Возврат ПустойДокумент;
		КонецЕсли;
		
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
		ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных);		

		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ОбъектДанных.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли; 
		
        jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
		// ЕНС. Новый код для обмена через Рэббит
		ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(ОбъектДанных.Ссылка, "РеестрДокументов");
		РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, ОбъектДанных.Ссылка,  Неопределено, Ложь);

		ЗафиксироватьТранзакцию();
		
		мЛоггер.инфо("Записан документ "+строка(ОбъектДанных.Ссылка));
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Информация,,,"Записан Документ : "+строка(ОбъектДанных)+". Исходный док. УТ "+строка(ДокументИзУТ));
		
		Рез = ОбъектДанных.ССылка;
		
	
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа " + ДокументИзУТ + ". Подробности: " + т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение; //отправляем в retry-очередь
	КонецПопытки;	
	
	Возврат Рез;
	
КонецФункции


// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных) Экспорт

	
	ЗаполнитьРеквизитыШапки(СтруктураОбъекта, ОбъектДанных);
	ЗаполнитьРеквизитыДебиторскаяЗадолженность(СтруктураОбъекта, ОбъектДанных);
	ЗаполнитьРеквизитыКредиторскаяЗадолженность(СтруктураОбъекта, ОбъектДанных);

    // пересчитать валюты относительно USD
	
	ВалютаUSD = ксп_ИмпортСлужебный.НайтиВалюту("840"); 
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	
	
	Если ЗначениеЗаполнено(ВалютаUSD) Тогда
		// где у нас доллары?
		ДолларыВдебете = ЛОжь;
		Для каждого СтрокаТЧ Из ОбъектДАнных.ДебиторскаяЗадолженность Цикл
			Если СтрокаТЧ.ВалютаВзаиморасчетов = ВалютаUSD Тогда
				ДолларыВдебете = Истина;   
				прервать;
			КонецЕсли;
		КонецЦикла;
		
		ИтоговаяСуммаUSD = 0;
		Если ДолларыВдебете Тогда
			
			Для каждого СтрокаТЧ Из ОбъектДАнных.ДебиторскаяЗадолженность Цикл
				ИтоговаяСуммаUSD = ИтоговаяСуммаUSD + СтрокаТЧ.СуммаВзаиморасчетов;
			КонецЦикла;
			
			Для каждого СтрокаТЧ Из ОбъектДАнных.ДебиторскаяЗадолженность Цикл
				
				СтрокаТЧ.СуммаРегл = РаботаСКурсамиВалют.ПересчитатьВВалюту(СтрокаТЧ.СуммаВзаиморасчетов, ВалютаUSD,ВалютаРегл,ОбъектДанных.Дата);
    			СтрокаТЧ.СуммаУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(СтрокаТЧ.СуммаВзаиморасчетов, ВалютаUSD,ВалютаУпр,ОбъектДанных.Дата);
				
			КонецЦикла;
			
			
			
			// если в другой ТЧ несколько строк, надо вычисленную сумму по долларам распределить на них
			
			ИтоговаяСуммаПоДругойТЧ = 0;
			Для каждого СтрокаТЧ Из ОбъектДанных.КредиторскаяЗадолженность Цикл
				ИтоговаяСуммаПоДругойТЧ = ИтоговаяСуммаПоДругойТЧ + СтрокаТЧ.СуммаВзаиморасчетов;
			КонецЦикла;
			
			Для каждого СтрокаТЧ Из ОбъектДанных.КредиторскаяЗадолженность Цикл
				
				Если СтрокаТЧ.СуммаВзаиморасчетов = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Доля = ИтоговаяСуммаПоДругойТЧ / СтрокаТЧ.СуммаВзаиморасчетов;
				
				СтрокаТЧ.СуммаРегл = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИтоговаяСуммаUSD * Доля, ВалютаUSD, ВалютаРегл,ОбъектДанных.Дата);
				СтрокаТЧ.СуммаУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИтоговаяСуммаUSD * Доля, ВалютаUSD, ВалютаРегл,ОбъектДанных.Дата);
				
			КонецЦикла;
			
		Иначе 
			
			Для каждого СтрокаТЧ Из ОбъектДанных.КредиторскаяЗадолженность Цикл
				ИтоговаяСуммаUSD = ИтоговаяСуммаUSD + СтрокаТЧ.СуммаВзаиморасчетов;
			КонецЦикла;

			Для каждого СтрокаТЧ Из ОбъектДАнных.КредиторскаяЗадолженность Цикл
				
				Если СтрокаТЧ.СуммаВзаиморасчетов = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТЧ.СуммаРегл = РаботаСКурсамиВалют.ПересчитатьВВалюту(СтрокаТЧ.СуммаВзаиморасчетов, ВалютаUSD,ВалютаРегл,ОбъектДанных.Дата);
    			СтрокаТЧ.СуммаУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(СтрокаТЧ.СуммаВзаиморасчетов, ВалютаUSD,ВалютаУпр,ОбъектДанных.Дата);
				
			КонецЦикла;
			
			
			// если в другой ТЧ несколько строк, надо вычисленную сумму по долларам распределить на них
			
			ИтоговаяСуммаПоДругойТЧ = 0;
			Для каждого СтрокаТЧ Из ОбъектДанных.ДебиторскаяЗадолженность Цикл
				ИтоговаяСуммаПоДругойТЧ = ИтоговаяСуммаПоДругойТЧ + СтрокаТЧ.СуммаВзаиморасчетов;
			КонецЦикла;
			
			Для каждого СтрокаТЧ Из ОбъектДанных.ДебиторскаяЗадолженность Цикл
				
				Доля = ИтоговаяСуммаПоДругойТЧ / СтрокаТЧ.СуммаВзаиморасчетов;
				
				СтрокаТЧ.СуммаРегл = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИтоговаяСуммаUSD * Доля, ВалютаUSD, ВалютаРегл,ОбъектДанных.Дата);
				СтрокаТЧ.СуммаУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИтоговаяСуммаUSD * Доля, ВалютаUSD, ВалютаРегл,ОбъектДанных.Дата);
				
			КонецЦикла;
			
			
		КонецЕсли;
		
	Иначе 
		мЛоггер.варн("Не нашли валюту USD в справочнике по коду 840! Сумма упр и регл не могут быть вычислены");
		
	КонецЕсли;
	

КонецФункции


Функция ЗаполнитьРеквизитыШапки(СтруктураОбъекта, ОбъектДанных) Экспорт


	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


 	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;


	ОбъектДанных.Валюта = ксп_ИмпортСлужебный.НайтиВалютуИзУзла(деф.Валюта);

	_знч = "";
	ЕстьЗначение = деф.ВидОперации.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ВидОперации = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ВидыОперацийВзаимозачетаЗадолженности", _знч);
	Иначе
		ОбъектДанных.ВидОперации = Неопределено;
	КонецЕсли;

	ОбъектДанных.ДатаВходящегоДокумента = деф.ДатаВходящегоДокумента;

	ОбъектДанных.Комментарий = деф.Комментарий;
	
	ОбъектДанных.КонтрагентДебитор = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.КонтрагентДебитор, мВнешняяСистема);
	ОбъектДанных.КонтрагентКредитор = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.КонтрагентКредитор, мВнешняяСистема);

	ОбъектДанных.НомерВходящегоДокумента = деф.НомерВходящегоДокумента;

	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

	гуид="";
	ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.Подразделение = Справочники.СтруктураПредприятия.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Подразделение.Ref ) );
	Иначе
		ОбъектДанных.Подразделение = Неопределено;
	КонецЕсли;

	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	
	//ОбъектДанных.СуммаРегл = РаботаСКурсамиВалют.ПересчитатьВВалюту(деф.СуммаДокумента,ОбъектДанных.Валюта,ВалютаРегл,ОбъектДанных.Дата);

	//ОбъектДанных.СуммаУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(деф.СуммаДокумента,ОбъектДанных.Валюта,ВалютаУпр,ОбъектДанных.Дата);


	_знч = "";
	ЕстьЗначение = деф.ТипДебитора.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ТипДебитора = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ТипыУчастниковВзаимозачета", _знч);
	Иначе
		ОбъектДанных.ТипДебитора = Неопределено;
	КонецЕсли;

	_знч = "";
	ЕстьЗначение = деф.ТипКредитора.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ТипКредитора = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ТипыУчастниковВзаимозачета", _знч);
	Иначе
		ОбъектДанных.ТипКредитора = Неопределено;
	КонецЕсли;

КонецФункции

Функция ЗаполнитьРеквизитыДебиторскаяЗадолженность(СтруктураОбъекта, ОбъектДанных) Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	
	
	ОбъектДанных.ДебиторскаяЗадолженность.Очистить();

	Для счТовары = 0 По деф.ТЧДебиторскаяЗадолженность.Количество()-1 Цикл
		стрк = деф.ТЧДебиторскаяЗадолженность[счТовары];
		СтрокаТЧ = ОбъектДанных.ДебиторскаяЗадолженность.Добавить();

		СтрокаТЧ.ВалютаВзаиморасчетов = ксп_ИмпортСлужебный.НайтиВалютуИзУзла(стрк.ВалютаВзаиморасчетов);

		СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;

		СтрокаТЧ.Организация = ОбъектДанных.Организация;

		СтрокаТЧ.Партнер = ОбъектДанных.КонтрагентДебитор.Партнер;
		
		//СсылкаДоговор = ПолучитьСсылкуСправочникаПоДаннымID(стрк.ОбъектРасчетов, "ДоговорыКонтрагентов");
		
		ТипМетаданных = "";
		Если стрк.Свойство("Объект") и стрк.Объект.Свойство("type", ТипМетаданных) Тогда
			
			мМногострочныйТекст = СтрЗаменить(ТипМетаданных, ".", Символы.ПС);
			СправочникИлиДокумент = СтрПолучитьСтроку(мМногострочныйТекст, 1);
			ВидОбъекта = СтрПолучитьСтроку(мМногострочныйТекст, 2);
			
			Если СправочникИлиДокумент = "Справочник" Тогда
				СсылкаНаОбъект = ПолучитьСсылкуСправочникаПоДаннымID(стрк.ОбъектРасчетов, ВидОбъекта);
			ИначеЕсли СправочникИлиДокумент = "Документ" Тогда
				СсылкаНаОбъект = ПолучитьСсылкуДокументаПоДаннымID(стрк.ОбъектРасчетов, ВидОбъекта);
			КонецЕсли;
			
		КонецЕсли;
		
		СсылкаДоговор = Неопределено;
		//СтрокаТЧ.ОбъектРасчетов = НайтиОбъектРасчетов(СсылкаНаОбъект, СтрокаТЧ.Партнер, СтрокаТЧ.Организация, ОбъектДанных.КонтрагентДебитор, СсылкаДоговор);
		Если стрк.Свойство("ОбъектДоговор") Тогда
			мЛоггер.инфо("ТЧ ДебиторскаяЗадолженность: ЕСТЬ свойство ОбъектДоговор в строке");
			СсылкаДоговор = ПолучитьСсылкуСправочникаПоДаннымID(стрк.ОбъектДоговор, "ДоговорыКонтрагентов");
			мЛоггер.инфо("ТЧ ДебиторскаяЗадолженность: СсылкаДоговор = "+строка(СсылкаДоговор)+", гуид "+строка(СсылкаДоговор.УникальныйИдентификатор()));
		Иначе 
			мЛоггер.инфо("ТЧ ДебиторскаяЗадолженность: НЕТ свойства ОбъектДоговор в строке. ССылку на договор контрагента определить невозможно. Найти объект расчетов невозможно!");
		КонецЕсли;
		
		//СтрокаТЧ.ОбъектРасчетов = НайтиОбъектРасчетов(СсылкаНаОбъект, СтрокаТЧ.Партнер, СтрокаТЧ.Организация, ОбъектДанных.Контрагент, СсылкаДоговор);
		//ЕНС
		_ОбъектРасчетов = НайтиОбъектРасчетов(СсылкаДоговор, 
			Неопределено, 
			ОбъектДанных.Организация, 
			Неопределено, 
			СсылкаДоговор);
			
		мЛоггер.инфо("ТЧ ДебиторскаяЗадолженность: Нашли объект расчетов: %1", строка(_ОбъектРасчетов));
		
		СтрокаТЧ.ОбъектРасчетов = _ОбъектРасчетов;
		
		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

		ИсходнаяВалюта = СтрокаТЧ.ВалютаВзаиморасчетов;
		
		СтрокаТЧ.СуммаРегл = РаботаСКурсамиВалют.ПересчитатьВВалюту(стрк.СуммаВзаиморасчетов,ИсходнаяВалюта,ВалютаРегл,ОбъектДанных.Дата);

		СтрокаТЧ.СуммаУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(стрк.СуммаВзаиморасчетов,ИсходнаяВалюта,ВалютаУпр,ОбъектДанных.Дата);

		_знч = "";
		ЕстьЗначение = стрк.ТипРасчетов.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			СтрокаТЧ.ТипРасчетов = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ТипыРасчетовСПартнерами", _знч);
		Иначе
			СтрокаТЧ.ТипРасчетов = Неопределено;
		КонецЕсли;  
		
	КонецЦикла;

КонецФункции

Функция ЗаполнитьРеквизитыКредиторскаяЗадолженность(СтруктураОбъекта, ОбъектДанных) Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;

	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	
	ОбъектДанных.КредиторскаяЗадолженность.Очистить();

	Для счТовары = 0 По деф.ТЧКредиторскаяЗадолженность.Количество()-1 Цикл
		стрк = деф.ТЧКредиторскаяЗадолженность[счТовары];
		СтрокаТЧ = ОбъектДанных.КредиторскаяЗадолженность.Добавить();

		СтрокаТЧ.ВалютаВзаиморасчетов = ксп_ИмпортСлужебный.НайтиВалютуИзУзла(стрк.ВалютаВзаиморасчетов);

		СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;

		СтрокаТЧ.Организация = ОбъектДанных.Организация;

		СтрокаТЧ.Партнер = ОбъектДанных.КонтрагентКредитор.Партнер;
		
		//СсылкаДоговор = ПолучитьСсылкуСправочникаПоДаннымID(стрк.ОбъектРасчетов, "ДоговорыКонтрагентов");
		
		ТипМетаданных = "";
		Если стрк.Свойство("Объект") и стрк.Объект.Свойство("type", ТипМетаданных) Тогда

			мМногострочныйТекст = СтрЗаменить(ТипМетаданных, ".", Символы.ПС);
			СправочникИлиДокумент = СтрПолучитьСтроку(мМногострочныйТекст, 1);
			ВидОбъекта = СтрПолучитьСтроку(мМногострочныйТекст, 2);
	
			Если СправочникИлиДокумент = "Справочник" Тогда
				СсылкаНаОбъект = ПолучитьСсылкуСправочникаПоДаннымID(стрк.ОбъектРасчетов, ВидОбъекта);
			ИначеЕсли СправочникИлиДокумент = "Документ" Тогда
				СсылкаНаОбъект = ПолучитьСсылкуДокументаПоДаннымID(стрк.ОбъектРасчетов, ВидОбъекта);
			КонецЕсли;
			
		КонецЕсли;
		
		//СтрокаТЧ.ОбъектРасчетов = НайтиОбъектРасчетов(СсылкаНаОбъект, СтрокаТЧ.Партнер, СтрокаТЧ.Организация, ОбъектДанных.КонтрагентКредитор, СсылкаДоговор);
		
		
		СсылкаДоговор = Неопределено;
		//СтрокаТЧ.ОбъектРасчетов = НайтиОбъектРасчетов(СсылкаНаОбъект, СтрокаТЧ.Партнер, СтрокаТЧ.Организация, ОбъектДанных.КонтрагентДебитор, СсылкаДоговор);
		Если стрк.Свойство("ОбъектДоговор") Тогда
			мЛоггер.инфо("ТЧ КредиторскаяЗадолженность: ЕСТЬ свойство ОбъектДоговор в строке");
			СсылкаДоговор = ПолучитьСсылкуСправочникаПоДаннымID(стрк.ОбъектДоговор, "ДоговорыКонтрагентов");
			мЛоггер.инфо("ТЧ КредиторскаяЗадолженность: СсылкаДоговор = "+строка(СсылкаДоговор)+", гуид "+строка(СсылкаДоговор.УникальныйИдентификатор()));
		Иначе 
			мЛоггер.инфо("ТЧ КредиторскаяЗадолженность: НЕТ свойства ОбъектДоговор в строке. ССылку на договор контрагента определить невозможно. Найти объект расчетов невозможно!");
		КонецЕсли;
		
		//СтрокаТЧ.ОбъектРасчетов = НайтиОбъектРасчетов(СсылкаНаОбъект, СтрокаТЧ.Партнер, СтрокаТЧ.Организация, ОбъектДанных.Контрагент, СсылкаДоговор);
		//ЕНС
		_ОбъектРасчетов = НайтиОбъектРасчетов(СсылкаДоговор, 
			Неопределено, 
			ОбъектДанных.Организация, 
			Неопределено, 
			СсылкаДоговор);
			
		мЛоггер.инфо("ТЧ КредиторскаяЗадолженность: Нашли объект расчетов: %1", строка(_ОбъектРасчетов));
		
		СтрокаТЧ.ОбъектРасчетов = _ОбъектРасчетов;
			
		

		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

		ИсходнаяВалюта = СтрокаТЧ.ВалютаВзаиморасчетов;
		
		СтрокаТЧ.СуммаРегл = РаботаСКурсамиВалют.ПересчитатьВВалюту(стрк.СуммаВзаиморасчетов,ИсходнаяВалюта,ВалютаРегл,ОбъектДанных.Дата);

		СтрокаТЧ.СуммаУпр = РаботаСКурсамиВалют.ПересчитатьВВалюту(стрк.СуммаВзаиморасчетов,ИсходнаяВалюта,ВалютаУпр,ОбъектДанных.Дата);


		_знч = "";
		ЕстьЗначение = стрк.ТипРасчетов.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			СтрокаТЧ.ТипРасчетов = ксп_ИмпортСлужебный.НайтиЗначениеПеречисления("ТипыРасчетовСПартнерами", _знч);
		Иначе
			СтрокаТЧ.ТипРасчетов = Неопределено;
		КонецЕсли;

	КонецЦикла;

КонецФункции


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

// Используется в  ксп_ИмпортСлужебный.ПроверитьКачествоДанных()
//
// Параметры:
//  ДокументОбъект  - ДокументСсылка - <описание параметра>
//
// Возвращаемое значение:
//  ТЗ, Колонки:
//   * ИмяТЧ
//   * ИмяКолонки
//
Функция ТабличныеЧастиДляПроверки(ДокументСсылка = Неопределено) Экспорт
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ИмяТЧ");
	ТЗ.Колонки.Добавить("ИмяКолонки");
	
	//НовСтр = ТЗ.Добавить();
	//НовСтр.ИмяТЧ = "Товары";
	//НовСтр.ИмяКолонки = "Номенклатура";
	//НовСтр = ТЗ.Добавить();
	//НовСтр.ИмяТЧ = "Товары";
	//НовСтр.ИмяКолонки = "Характеристика";
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьСсылкуСправочникаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если Не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
	ГУИД = "";
	Если СтруктураID.Свойство("Ref", ГУИД) Тогда
		Если НЕ ЗначениеЗаполнено(ГУИД) ИЛИ ГУИД="00000000-0000-0000-0000-000000000000" Тогда
			Возврат Справочники[ВидОбъекта].ПустаяСсылка();
		КонецЕсли;
		Возврат Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Иначе
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуДокументаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если Не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Документы[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
	ГУИД = "";
	Если СтруктураID.Свойство("Ref", ГУИД) Тогда
		Если НЕ ЗначениеЗаполнено(ГУИД) ИЛИ ГУИД="00000000-0000-0000-0000-000000000000" Тогда
			Возврат Документы[ВидОбъекта].ПустаяСсылка();
		КонецЕсли;
		Возврат Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Иначе
		Возврат Документы[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция НайтиОбъектРасчетов(СсылкаНаОбъект, СсылкаПартнер, СсылкаОрганизация, СсылкаКонтрагент, СсылкаДоговор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыРасчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект = &Объект
		//|	И ОбъектыРасчетов.Партнер = &Партнер
		|	И ОбъектыРасчетов.Организация = &Организация
		//|	И ОбъектыРасчетов.Контрагент = &Контрагент
		|	И ОбъектыРасчетов.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
	//Запрос.УстановитьПараметр("Партнер", СсылкаПартнер);
	Запрос.УстановитьПараметр("Организация", СсылкаОрганизация);
	//Запрос.УстановитьПараметр("Контрагент", СсылкаКонтрагент);
	Запрос.УстановитьПараметр("Договор", СсылкаДоговор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		мЛоггер.варн("НЕ Найден объект расчетов по параметрам: Объект = <"+строка(СсылкаДоговор)+"> и Организация = <"+строка(СсылкаОрганизация)+"> и Договор = <"+строка(СсылкаДоговор)+">");

		Возврат Справочники.ОбъектыРасчетов.ПустаяСсылка();
	Иначе
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		мЛоггер.Инфо("Найден объект расчетов по параметрам: Объект = <"+строка(СсылкаДоговор)+"> и Организация = <"+строка(СсылкаОрганизация)+"> и Договор = <"+строка(СсылкаДоговор)+">");
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//  Параметр1   - Тип1 -
//
Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
    Возврат ЭтотОбъект;
     
КонецФункции



мВнешняяСистема = "ut";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_УТ";

СобиратьНенайденнуюНоменклатуру = Истина;

НеНайденнаяНоменклатураМассив = Новый Массив;   
 
СобиратьНенайденныхКонтрагентов = Истина;
НеНайденныеКонтрагентыМассив = Новый Массив;   



НЕ_ЗАГРУЖАТЬ = 1;
СОЗДАТЬ = 2;
ОБНОВИТЬ = 3;
ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;
ПОМЕТИТЬ = 5;

