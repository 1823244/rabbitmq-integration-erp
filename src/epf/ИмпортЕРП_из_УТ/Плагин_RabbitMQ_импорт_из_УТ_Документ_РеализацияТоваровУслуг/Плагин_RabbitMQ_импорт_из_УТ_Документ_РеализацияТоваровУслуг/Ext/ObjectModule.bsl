Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.6");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УТ_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УТ_Документ_РеализацияТоваровУслуг");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УТ_Документ_РеализацияТоваровУслуг",
		"Форма_Плагин_RabbitMQ_импорт_из_УТ_Документ_РеализацияТоваровУслуг",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.реализациятоваровуслуг") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_ЕРП";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта = "РеализацияТоваровУслуг";

	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText);		
		ЗафиксироватьТранзакцию();          		
		Возврат ДанныеСсылка;		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;


    ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	
	
	
	//гуид="";
	//ЕстьАтрибут = деф.Автор.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Автор = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Автор.Ref ) );
	//Иначе
	//	ОбъектДанных.Автор = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Автор = ксп_ИмпортСлужебный.НайтиАвтор(деф.Автор);

	ОбъектДанных.АдресДоставки = деф.АдресДоставки;

	//ОбъектДанных.АдресДоставкиЗначение = деф.АдресДоставкиЗначение;

	//ОбъектДанных.АдресДоставкиЗначенияПолей = деф.АдресДоставкиЗначенияПолей;

	ОбъектДанных.АдресДоставкиПеревозчика = деф.АдресДоставкиПеревозчика;

	//ОбъектДанных.АдресДоставкиПеревозчикаЗначение = деф.АдресДоставкиПеревозчикаЗначение;

	ОбъектДанных.АдресДоставкиПеревозчикаЗначенияПолей = деф.АдресДоставкиПеревозчикаЗначенияПолей;

	//гуид="";
	//ЕстьАтрибут = деф.БанковскийСчетГрузоотправителя.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.БанковскийСчетГрузоотправителя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.БанковскийСчетГрузоотправителя.Ref ) );
	//Иначе
	//	ОбъектДанных.БанковскийСчетГрузоотправителя = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.БанковскийСчетГрузоотправителя = ксп_ИмпортСлужебный.НайтиБанковскийСчетГрузоотправителя(деф.БанковскийСчетГрузоотправителя);

	//гуид="";
	//ЕстьАтрибут = деф.БанковскийСчетГрузополучателя.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.БанковскийСчетГрузополучателя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.БанковскийСчетГрузополучателя.Ref ) );
	//Иначе
	//	ОбъектДанных.БанковскийСчетГрузополучателя = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.БанковскийСчетГрузополучателя = ксп_ИмпортСлужебный.НайтиБанковскийСчетГрузополучателя(деф.БанковскийСчетГрузополучателя);

	//гуид="";
	//ЕстьАтрибут = деф.БанковскийСчетКонтрагента.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.БанковскийСчетКонтрагента = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.БанковскийСчетКонтрагента.Ref ) );
	//Иначе
	//	ОбъектДанных.БанковскийСчетКонтрагента = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.БанковскийСчетКонтрагента = ксп_ИмпортСлужебный.НайтиБанковскийСчетКонтрагента(деф.БанковскийСчетКонтрагента);

	//гуид="";
	//ЕстьАтрибут = деф.БанковскийСчетОрганизации.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.БанковскийСчетОрганизации = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.БанковскийСчетОрганизации.Ref ) );
	//Иначе
	//	ОбъектДанных.БанковскийСчетОрганизации = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	Если деф.БанковскийСчетОрганизации.свойство("БИК") И 
		деф.БанковскийСчетОрганизации.свойство("НомерСчета") Тогда
		ОбъектДанных.БанковскийСчетОрганизации = ксп_ИмпортСлужебный.НайтиБанковскийСчет(деф.БанковскийСчетОрганизации.НомерСчета, деф.БанковскийСчетОрганизации.БИК);
	КонецЕсли;
	
	ОбъектДанных.Валюта = Справочники.Валюты.НайтиПоКоду(деф.Валюта.currencyCode);

	ОбъектДанных.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();

	//_знч = "";
	//ЕстьЗначение = деф.ВариантВыбытияМаркируемойПродукции.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ВариантВыбытияМаркируемойПродукции = деф.ВариантВыбытияМаркируемойПродукции.Значение;
	//Иначе
	//	ОбъектДанных.ВариантВыбытияМаркируемойПродукции = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ВариантВыбытияМаркируемойПродукции = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантВыбытияМаркируемойПродукции(деф.ВариантВыбытияМаркируемойПродукции);

	ОбъектДанных.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	
	ОбъектДанных.ВернутьМногооборотнуюТару = деф.ВернутьМногооборотнуюТару;

	ОбъектДанных.ВидыЗапасовУказаныВручную = деф.ВидыЗапасовУказаныВручную;

	//ОбъектДанных.ВремяДоставкиПо = деф.ВремяДоставкиПо;

	//ОбъектДанных.ВремяДоставкиС = деф.ВремяДоставкиС;

	//гуид="";
	//ЕстьАтрибут = деф.ГлавныйБухгалтер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ГлавныйБухгалтер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ГлавныйБухгалтер.Ref ) );
	//Иначе
	//	ОбъектДанных.ГлавныйБухгалтер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ГлавныйБухгалтер = ксп_ИмпортСлужебный.НайтиГлавныйБухгалтер(деф.ГлавныйБухгалтер);

	//гуид="";
	//ЕстьАтрибут = деф.Грузоотправитель.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Грузоотправитель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Грузоотправитель.Ref ) );
	//Иначе
	//	ОбъектДанных.Грузоотправитель = Неопределено;
	//КонецЕсли;
	// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Грузоотправитель = ксп_ИмпортСлужебный.НайтиГрузоотправитель(деф.Грузоотправитель);

//	гуид="";
//	ЕстьАтрибут = деф.Грузополучатель.свойство("Ref",гуид);
//	Если ЕстьАтрибут Тогда
//		ОбъектДанных.Грузополучатель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Грузополучатель.Ref ) );
//	Иначе
//		ОбъектДанных.Грузополучатель = Неопределено;
//	КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Грузополучатель = ксп_ИмпортСлужебный.НайтиГрузополучатель(деф.Грузополучатель);

	//гуид="";
	//ЕстьАтрибут = деф.ГруппаФинансовогоУчета.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ГруппаФинансовогоУчета = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ГруппаФинансовогоУчета.Ref ) );
	//Иначе
	//	ОбъектДанных.ГруппаФинансовогоУчета = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ГруппаФинансовогоУчета = ксп_ИмпортСлужебный.НайтиГруппаФинансовогоУчета(деф.ГруппаФинансовогоУчета);

	ОбъектДанных.ДатаВозвратаМногооборотнойТары = деф.ДатаВозвратаМногооборотнойТары;

	//ОбъектДанных.ДатаПереходаПраваСобственности = деф.ДатаПереходаПраваСобственности;

	ОбъектДанных.ДоверенностьВыдана = деф.ДоверенностьВыдана;

	ОбъектДанных.ДоверенностьДата = деф.ДоверенностьДата;

	ОбъектДанных.ДоверенностьЛицо = деф.ДоверенностьЛицо;

	ОбъектДанных.ДоверенностьНомер = деф.ДоверенностьНомер;


	ОбъектДанных.ДополнительнаяИнформацияПоДоставке = деф.ДополнительнаяИнформацияПоДоставке;

	//гуид="";
	//ЕстьАтрибут = деф.ДопоставкаПоРеализации.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ДопоставкаПоРеализации = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДопоставкаПоРеализации.Ref ) );
	//Иначе
	//	ОбъектДанных.ДопоставкаПоРеализации = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ДопоставкаПоРеализации = ксп_ИмпортСлужебный.НайтиДопоставкаПоРеализации(деф.ДопоставкаПоРеализации);

	//ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ = деф.ЕстьМаркируемаяПродукцияГИСМ;

	гуид="";
	ЕстьАтрибут = деф.ЗаказКлиента.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ЗаказКлиента = Документы.ЗаказКлиента.ПолучитьСсылку( Новый УникальныйИдентификатор( гуид ) );
		ОбъектДанных.РеализацияПоЗаказам = Истина;
	Иначе
		ОбъектДанных.ЗаказКлиента = Неопределено;
		ОбъектДанных.РеализацияПоЗаказам = Ложь;
	КонецЕсли;
	
	
	//гуид="";
	//ЕстьАтрибут = деф.ЗонаДоставки.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ЗонаДоставки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗонаДоставки.Ref ) );
	//Иначе
	//	ОбъектДанных.ЗонаДоставки = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ЗонаДоставки = ксп_ИмпортСлужебный.НайтиЗонаДоставки(деф.ЗонаДоставки);

	ОбъектДанных.ИдентификаторПлатежа = Строка(Новый УникальныйИдентификатор);

	//гуид="";
	//ЕстьАтрибут = деф.КартаЛояльности.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.КартаЛояльности = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КартаЛояльности.Ref ) );
	//Иначе
	//	ОбъектДанных.КартаЛояльности = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.КартаЛояльности = ксп_ИмпортСлужебный.НайтиКартаЛояльности(деф.КартаЛояльности);

	//гуид="";
	//ЕстьАтрибут = деф.Касса.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Касса = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Касса.Ref ) );
	//Иначе
	//	ОбъектДанных.Касса = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Касса = ксп_ИмпортСлужебный.НайтиКасса(деф.Касса);

	//гуид="";
	//ЕстьАтрибут = деф.КлиентДоговор.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.КлиентДоговор = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КлиентДоговор.Ref ) );
	//Иначе
	//	ОбъектДанных.КлиентДоговор = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.КлиентДоговор = ксп_ИмпортСлужебный.НайтиКлиентДоговор(деф.КлиентДоговор);

	//гуид="";
	//ЕстьАтрибут = деф.КлиентКонтрагент.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.КлиентКонтрагент = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КлиентКонтрагент.Ref ) );
	//Иначе
	//	ОбъектДанных.КлиентКонтрагент = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.КлиентКонтрагент = ксп_ИмпортСлужебный.НайтиКлиентКонтрагент(деф.КлиентКонтрагент);

	//гуид="";
	//ЕстьАтрибут = деф.КлиентПартнер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.КлиентПартнер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КлиентПартнер.Ref ) );
	//Иначе
	//	ОбъектДанных.КлиентПартнер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.КлиентПартнер = ксп_ИмпортСлужебный.НайтиКлиентПартнер(деф.КлиентПартнер);

	ОбъектДанных.Комментарий = деф.Комментарий;

	//гуид="";
	//ЕстьАтрибут = деф.КонтактноеЛицо.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.КонтактноеЛицо = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КонтактноеЛицо.Ref ) );
	//Иначе
	//	ОбъектДанных.КонтактноеЛицо = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.КонтактноеЛицо = ксп_ИмпортСлужебный.НайтиКонтактноеЛицо(деф.КонтактноеЛицо);

	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	
	// ЕНС. Пока отключим
	ОбъектДанных.Договор = ксп_ИмпортСлужебный.НайтиДоговор(деф.Договор); //по гуид
	Если НЕ ЗначениеЗаполнено(ОбъектДанных.Договор) Тогда
		ОбъектДанных.Договор = НайтиДоговорРеализации(ОбъектДанных.Контрагент, ОбъектДанных.Организация);  //первый попавшийся "СПокупателем"
	КонецЕсли;

	ОбъектДанных.КурсЗнаменатель = 1;

	ОбъектДанных.КурсЧислитель = 1;

	//гуид="";
	//ЕстьАтрибут = деф.Курьер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Курьер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Курьер.Ref ) );
	//Иначе
	//	ОбъектДанных.Курьер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Курьер = ксп_ИмпортСлужебный.НайтиКурьер(деф.Курьер);

	//гуид="";
	//ЕстьАтрибут = деф.Менеджер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Менеджер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Менеджер.Ref ) );
	//Иначе
	//	ОбъектДанных.Менеджер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Менеджер = ксп_ИмпортСлужебный.НайтиМенеджер(деф.Менеджер);

	_знч = "";
	ЕстьЗначение = деф.НалогообложениеНДС.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.НалогообложениеНДС = деф.НалогообложениеНДС.Значение;
	Иначе
		ОбъектДанных.НалогообложениеНДС = Неопределено;
	КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;

	ОбъектДанных.НаправлениеДеятельности = 
		РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("НаправлениеДеятельностиДляРеализацяТоваровУслугИзРозница", мВнешняяСистема);

	//гуид="";
	//ЕстьАтрибут = деф.ОбъектРасчетовУпр.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ОбъектРасчетовУпр = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ОбъектРасчетовУпр.Ref ) );
	//Иначе
	//	ОбъектДанных.ОбъектРасчетовУпр = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ОбъектРасчетовУпр = ксп_ИмпортСлужебный.НайтиОбъектРасчетовУпр(деф.ОбъектРасчетовУпр);

	ОбъектДанных.ОплатаВВалюте = деф.ОплатаВВалюте;

	

	ОбъектДанных.Основание = деф.Основание;

	ОбъектДанных.ОснованиеДата = деф.ОснованиеДата;

	ОбъектДанных.ОснованиеНомер = деф.ОснованиеНомер;

	ОбъектДанных.ОсобыеУсловияПеревозки = деф.ОсобыеУсловияПеревозки;

	ОбъектДанных.ОсобыеУсловияПеревозкиОписание = деф.ОсобыеУсловияПеревозкиОписание;

	//гуид="";
	//ЕстьАтрибут = деф.Отпустил.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Отпустил = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Отпустил.Ref ) );
	//Иначе
	//	ОбъектДанных.Отпустил = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Отпустил = ксп_ИмпортСлужебный.НайтиОтпустил(деф.Отпустил);

	//ОбъектДанных.ОтпустилДолжность = деф.ОтпустилДолжность;

	Если ЗначениеЗаполнено(ОбъектДанных.Контрагент) Тогда
		ОбъектДанных.Партнер = ОбъектДанных.Контрагент.Партнер;
	Иначе 
		ОбъектДанных.Партнер = Неопределено;
	КонецЕсли;

	//гуид="";
	//ЕстьАтрибут = деф.ПеревозчикПартнер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ПеревозчикПартнер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ПеревозчикПартнер.Ref ) );
	//Иначе
	//	ОбъектДанных.ПеревозчикПартнер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ПеревозчикПартнер = ксп_ИмпортСлужебный.НайтиПеревозчикПартнер(деф.ПеревозчикПартнер);

	//гуид="";
	//ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Подразделение.Ref ) );
	//Иначе
	//	ОбъектДанных.Подразделение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(деф.Подразделение);

	//_знч = "";
	//ЕстьЗначение = деф.ПорядокРасчетов.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ПорядокРасчетов = деф.ПорядокРасчетов.Значение;
	//Иначе
	//	ОбъектДанных.ПорядокРасчетов = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	ОбъектДанных.ПорядокРасчетов = 
		РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ПорядокРасчетовДляРеализацяТоваровУслугИзРозница", мВнешняяСистема);
	
	//гуид="";
	//ЕстьАтрибут = деф.Руководитель.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Руководитель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Руководитель.Ref ) );
	//Иначе
	//	ОбъектДанных.Руководитель = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Руководитель = ксп_ИмпортСлужебный.НайтиРуководитель(деф.Руководитель);

	//гуид="";
	//ЕстьАтрибут = деф.Сборщик.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Сборщик = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Сборщик.Ref ) );
	//Иначе
	//	ОбъектДанных.Сборщик = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Сборщик = ксп_ИмпортСлужебный.НайтиСборщик(деф.Сборщик);

	//гуид="";
	//ЕстьАтрибут = деф.Сделка.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Сделка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Сделка.Ref ) );
	//Иначе
	//	ОбъектДанных.Сделка = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Сделка = ксп_ИмпортСлужебный.НайтиСделка(деф.Сделка);

	ОбъектДанных.СкидкиРассчитаны = деф.СкидкиРассчитаны;

	ОбъектДанных.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);

	ОбъектДанных.Согласован = Истина;

	//гуид="";
	//ЕстьАтрибут = деф.Соглашение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Соглашение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Соглашение.Ref ) );
	//Иначе
	//	ОбъектДанных.Соглашение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	ОбъектДанных.Соглашение = 
		РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("СоглашениеСКлиентамиДляРеализацяТоваровУслугИзРозница", мВнешняяСистема);

	_знч = "";
	ЕстьЗначение = деф.СостояниеЗаполненияМногооборотнойТары.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = деф.СостояниеЗаполненияМногооборотнойТары.Значение;
	Иначе
		ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = Неопределено;
	КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = ксп_ИмпортСлужебный.НайтиПеречисление_СостояниеЗаполненияМногооборотнойТары(деф.СостояниеЗаполненияМногооборотнойТары);

	_знч = "";
	ЕстьЗначение = деф.СпособДоставки.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.СпособДоставки = деф.СпособДоставки.Значение;
	Иначе
		ОбъектДанных.СпособДоставки = Неопределено;
	КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;

	//_знч = "";
	//ЕстьЗначение = деф.Статус.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.Статус = деф.Статус.Значение;
	//Иначе
	//	ОбъектДанных.Статус = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	ОбъектДанных.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;

	ОбъектДанных.СуммаВзаиморасчетов = деф.СуммаДокумента;

	ОбъектДанных.СуммаВзаиморасчетовПоТаре = деф.СуммаВзаиморасчетовПоТаре;

	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;

	ОбъектДанных.ТребуетсяЗалогЗаТару = деф.ТребуетсяЗалогЗаТару;

	//ОбъектДанных.УдалитьДатаРаспоряжения = деф.УдалитьДатаРаспоряжения;

	//ОбъектДанных.УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС = деф.УдалитьЕстьАлкогольнаяПродукцияДляРеализацииРозницаЕГАИС;

	//_знч = "";
	//ЕстьЗначение = деф.УдалитьПорядокОплаты.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.УдалитьПорядокОплаты = деф.УдалитьПорядокОплаты.Значение;
	//Иначе
	//	ОбъектДанных.УдалитьПорядокОплаты = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.УдалитьПорядокОплаты = ксп_ИмпортСлужебный.НайтиПеречисление_УдалитьПорядокОплаты(деф.УдалитьПорядокОплаты);

	_знч = "";
	ЕстьЗначение = деф.ФормаОплаты.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.ФормаОплаты = деф.ФормаОплаты.Значение;
	Иначе
		ОбъектДанных.ФормаОплаты = Неопределено;
	КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта;

	//_знч = "";
	//ЕстьЗначение = деф.ХозяйственнаяОперация.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ХозяйственнаяОперация = деф.ХозяйственнаяОперация.Значение;
	//Иначе
	//	ОбъектДанных.ХозяйственнаяОперация = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;

	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;

	//ОбъектДанных.ЭтапГосконтрактаЕИС = деф.ЭтапГосконтрактаЕИС;




	////------------------------------------------------------     ТЧ Товары



	ОбъектДанных.Товары.Очистить();


	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.АналитикаУчетаНаборов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.АналитикаУчетаНаборов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНаборов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.АналитикаУчетаНаборов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.АналитикаУчетаНаборов = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНаборов(стрк.АналитикаУчетаНаборов);


	//	гуид="";
	//	ЕстьАтрибут = стрк.ВидЦены.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ВидЦены = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЦены.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ВидЦены = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(стрк.ВидЦены);

		СтрокаТЧ.ЗаказКлиента = Неопределено;

		СтрокаТЧ.ИдентификаторСтроки = строка(Новый УникальныйИдентификатор);

		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

		СтрокаТЧ.КодСтроки = стрк.КодСтроки;

	//	гуид="";
	//	ЕстьАтрибут = стрк.КодТНВЭД.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.КодТНВЭД = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.КодТНВЭД.Ref ) );
	//	Иначе
	//		СтрокаТЧ.КодТНВЭД = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.КодТНВЭД = ксп_ИмпортСлужебный.НайтиКодТНВЭД(стрк.КодТНВЭД);

		СтрокаТЧ.Количество = стрк.Количество;

		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Назначение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);

	//	гуид="";
	//	ЕстьАтрибут = стрк.НоменклатураНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НоменклатураНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НоменклатураНабора = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НоменклатураНабора = ксп_ИмпортСлужебный.НайтиНоменклатураНабора(стрк.НоменклатураНабора);

	//	гуид="";
	//	ЕстьАтрибут = стрк.НоменклатураПартнера.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НоменклатураПартнера = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураПартнера.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НоменклатураПартнера = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НоменклатураПартнера = ксп_ИмпортСлужебный.НайтиНоменклатураПартнера(стрк.НоменклатураПартнера);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ОбъектРасчетов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ОбъектРасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ОбъектРасчетов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ОбъектРасчетов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ОбъектРасчетов = ксп_ИмпортСлужебный.НайтиОбъектРасчетов(стрк.ОбъектРасчетов);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Подразделение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Подразделение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Подразделение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(стрк.Подразделение);

		СтрокаТЧ.ПроцентАвтоматическойСкидки = стрк.ПроцентАвтоматическойСкидки;

		СтрокаТЧ.ПроцентРучнойСкидки = стрк.ПроцентРучнойСкидки;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

		СтрокаТЧ.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);

	//	СтрокаТЧ.СрокПоставки = стрк.СрокПоставки;

		СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюРозницы(стрк.СтавкаНДС);

		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ.СуммаАвтоматическойСкидки = стрк.СуммаАвтоматическойСкидки;

	//	СтрокаТЧ.СуммаБонусныхБалловКСписанию = стрк.СуммаБонусныхБалловКСписанию;

	//	СтрокаТЧ.СуммаБонусныхБалловКСписаниюВВалюте = стрк.СуммаБонусныхБалловКСписаниюВВалюте;

	//	СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

	//	СтрокаТЧ.СуммаНачисленныхБонусныхБалловВВалюте = стрк.СуммаНачисленныхБонусныхБалловВВалюте;

		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

		СтрокаТЧ.СуммаРучнойСкидки = стрк.СуммаРучнойСкидки;

		СтрокаТЧ.СуммаСНДС = стрк.Сумма+стрк.СуммаНДС;

	//	_знч = "";
	//	ЕстьЗначение = стрк.УдалитьСтавкаНДС.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.УдалитьСтавкаНДС = стрк.УдалитьСтавкаНДС.Значение;
	//	Иначе
	//		СтрокаТЧ.УдалитьСтавкаНДС = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.УдалитьСтавкаНДС = ксп_ИмпортСлужебный.НайтиПеречисление_УдалитьСтавкаНДС(стрк.УдалитьСтавкаНДС);

		СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);

		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ХарактеристикаНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ХарактеристикаНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ХарактеристикаНабора = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ХарактеристикаНабора = ксп_ИмпортСлужебный.НайтиХарактеристикаНабора(стрк.ХарактеристикаНабора);

		СтрокаТЧ.Цена = стрк.Цена;

		СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиСоздатьКлючАналитикиНом(СтрокаТЧ.Номенклатура, ОбъектДанных.Склад, СтрокаТЧ.Характеристика);
	
	КонецЦикла;

	////------------------------------------------------------     ТЧ СкидкиНаценки



	ОбъектДанных.СкидкиНаценки.Очистить();


	Для счТовары = 0 По деф.ТЧСкидкиНаценки.Количество()-1 Цикл
		стрк = деф.ТЧСкидкиНаценки[счТовары];
		СтрокаТЧ = ОбъектДанных.СкидкиНаценки.Добавить();


		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

	//	СтрокаТЧ.НапомнитьПозже = стрк.НапомнитьПозже;

		СтрокаТЧ.СкидкаНаценка = ксп_ИмпортСлужебный.НайтиСкидкуНаценку(стрк.СкидкаНаценка, мВнешняяСистема);

		СтрокаТЧ.Сумма = стрк.Сумма;

	КонецЦикла;

	////------------------------------------------------------     ТЧ ВидыЗапасов



	//ОбъектДанных.ВидыЗапасов.Очистить();


	//Для счТовары = 0 По деф.ТЧВидыЗапасов.Количество()-1 Цикл
	//	стрк = деф.ТЧВидыЗапасов[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ВидыЗапасов.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.АналитикаУчетаНаборов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.АналитикаУчетаНаборов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНаборов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.АналитикаУчетаНаборов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.АналитикаУчетаНаборов = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНаборов(стрк.АналитикаУчетаНаборов);

	//	гуид="";
	//	ЕстьАтрибут = стрк.АналитикаУчетаНоменклатуры.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНоменклатуры.Ref ) );
	//	Иначе
	//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ВидЗапасов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ВидЗапасов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЗапасов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ВидЗапасов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВидЗапасов = ксп_ИмпортСлужебный.НайтиВидЗапасов(стрк.ВидЗапасов);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ВидЗапасовПолучателя.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ВидЗапасовПолучателя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЗапасовПолучателя.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ВидЗапасовПолучателя = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВидЗапасовПолучателя = ксп_ИмпортСлужебный.НайтиВидЗапасовПолучателя(стрк.ВидЗапасовПолучателя);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ЗаказКлиента.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ЗаказКлиента = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЗаказКлиента.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ЗаказКлиента = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ЗаказКлиента = ксп_ИмпортСлужебный.НайтиЗаказКлиента(стрк.ЗаказКлиента);

	//	СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;

	//	гуид="";
	//	ЕстьАтрибут = стрк.КодТНВЭД.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.КодТНВЭД = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.КодТНВЭД.Ref ) );
	//	Иначе
	//		СтрокаТЧ.КодТНВЭД = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.КодТНВЭД = ксп_ИмпортСлужебный.НайтиКодТНВЭД(стрк.КодТНВЭД);

	//	СтрокаТЧ.Количество = стрк.Количество;

	//	СтрокаТЧ.КоличествоПоРНПТ = стрк.КоличествоПоРНПТ;

	//	СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

	//	гуид="";
	//	ЕстьАтрибут = стрк.НомерГТД.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НомерГТД = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НомерГТД.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НомерГТД = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НомерГТД = ксп_ИмпортСлужебный.НайтиНомерГТД(стрк.НомерГТД);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ОбъектРасчетов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ОбъектРасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ОбъектРасчетов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ОбъектРасчетов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ОбъектРасчетов = ксп_ИмпортСлужебный.НайтиОбъектРасчетов(стрк.ОбъектРасчетов);

	//	гуид="";
	//	ЕстьАтрибут = стрк.СтавкаНДС.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.СтавкаНДС = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СтавкаНДС.Ref ) );
	//	Иначе
	//		СтрокаТЧ.СтавкаНДС = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.НайтиСтавкаНДС(стрк.СтавкаНДС);

	//	СтрокаТЧ.СуммаАвтоматическойСкидки = стрк.СуммаАвтоматическойСкидки;

	//	СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

	//	СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

	//	СтрокаТЧ.СуммаРучнойСкидки = стрк.СуммаРучнойСкидки;

	//	СтрокаТЧ.СуммаСНДС = стрк.СуммаСНДС;

	//	_знч = "";
	//	ЕстьЗначение = стрк.УдалитьСтавкаНДС.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.УдалитьСтавкаНДС = стрк.УдалитьСтавкаНДС.Значение;
	//	Иначе
	//		СтрокаТЧ.УдалитьСтавкаНДС = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.УдалитьСтавкаНДС = ксп_ИмпортСлужебный.НайтиПеречисление_УдалитьСтавкаНДС(стрк.УдалитьСтавкаНДС);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Упаковка = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);

	//	СтрокаТЧ.Цена = стрк.Цена;

	//КонецЦикла;

	////------------------------------------------------------     ТЧ ДополнительныеРеквизиты



	//ОбъектДанных.ДополнительныеРеквизиты.Очистить();


	//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
	//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ДополнительныеРеквизиты.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Значение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Свойство = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);

	//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

	//КонецЦикла;

	////------------------------------------------------------     ТЧ РасшифровкаПлатежа



	//ОбъектДанных.РасшифровкаПлатежа.Очистить();


	//Для счТовары = 0 По деф.ТЧРасшифровкаПлатежа.Количество()-1 Цикл
	//	стрк = деф.ТЧРасшифровкаПлатежа[счТовары];
	//	СтрокаТЧ = ОбъектДанных.РасшифровкаПлатежа.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.ВалютаВзаиморасчетов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ВалютаВзаиморасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВалютаВзаиморасчетов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ВалютаВзаиморасчетов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВалютаВзаиморасчетов = ксп_ИмпортСлужебный.НайтиВалютаВзаиморасчетов(стрк.ВалютаВзаиморасчетов);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ОбъектРасчетов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ОбъектРасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ОбъектРасчетов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ОбъектРасчетов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ОбъектРасчетов = ксп_ИмпортСлужебный.НайтиОбъектРасчетов(стрк.ОбъектРасчетов);

	//	СтрокаТЧ.Сумма = стрк.Сумма;

	//	СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;


	//КонецЦикла;

	////------------------------------------------------------     ТЧ Серии



	ОбъектДанных.Серии.Очистить();


	//Для счТовары = 0 По деф.ТЧСерии.Количество()-1 Цикл
	//	стрк = деф.ТЧСерии[счТовары];
	//	СтрокаТЧ = ОбъектДанных.Серии.Добавить();


	//	СтрокаТЧ.Количество = стрк.Количество;

	////	гуид="";
	////	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
	////	Если ЕстьАтрибут Тогда
	////		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
	////	Иначе
	////		СтрокаТЧ.Назначение = Неопределено;
	////	КонецЕсли;
	////	// на случай, если есть метод поиска ссылки:
	////	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

	//	СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);

	////	гуид="";
	////	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	////	Если ЕстьАтрибут Тогда
	////		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	////	Иначе
	////		СтрокаТЧ.Серия = Неопределено;
	////	КонецЕсли;
	////	// на случай, если есть метод поиска ссылки:
	////	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

	//	СтрокаТЧ.Склад = ОбъектДанных.Склад;

	//	СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);

	//КонецЦикла;

	////------------------------------------------------------     ТЧ ЭтапыГрафикаОплаты



	ОбъектДанных.ЭтапыГрафикаОплаты.Очистить();


	Для счТовары = 0 По деф.ТЧЭтапыГрафикаОплаты.Количество()-1 Цикл
		стрк = деф.ТЧЭтапыГрафикаОплаты[счТовары];
		СтрокаТЧ = ОбъектДанных.ЭтапыГрафикаОплаты.Добавить();


		_знч = "";
		ЕстьЗначение = стрк.ВариантОплаты.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			СтрокаТЧ.ВариантОплаты = стрк.ВариантОплаты.Значение;
		Иначе
			СтрокаТЧ.ВариантОплаты = Неопределено;
		КонецЕсли;
		// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.ВариантОплаты = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантОплаты(стрк.ВариантОплаты);

		_знч = "";
		ЕстьЗначение = стрк.ВариантОтсчета.свойство("Значение",_знч);
		Если ЕстьЗначение Тогда
			СтрокаТЧ.ВариантОтсчета = стрк.ВариантОтсчета.Значение;
		Иначе
			СтрокаТЧ.ВариантОтсчета = Неопределено;
		КонецЕсли;
		// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.ВариантОтсчета = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантОтсчета(стрк.ВариантОтсчета);

		СтрокаТЧ.ДатаПлатежа = стрк.ДатаПлатежа;

		//гуид="";
		//ЕстьАтрибут = стрк.Заказ.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Заказ = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Заказ.Ref ) );
		//Иначе
		//	СтрокаТЧ.Заказ = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Заказ = ксп_ИмпортСлужебный.НайтиЗаказ(стрк.Заказ);

		//гуид="";
		//ЕстьАтрибут = стрк.ОбъектРасчетов.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.ОбъектРасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ОбъектРасчетов.Ref ) );
		//Иначе
		//	СтрокаТЧ.ОбъектРасчетов = Неопределено;
		//КонецЕсли;
		// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.ОбъектРасчетов = ксп_ИмпортСлужебный.НайтиОбъектРасчетов(стрк.ОбъектРасчетов);

		СтрокаТЧ.ПроцентЗалогаЗаТару = стрк.ПроцентЗалогаЗаТару;

		СтрокаТЧ.ПроцентПлатежа = стрк.ПроцентПлатежа;

		СтрокаТЧ.СверхЗаказа = стрк.СверхЗаказа;

		СтрокаТЧ.Сдвиг = стрк.Сдвиг;

		СтрокаТЧ.СуммаВзаиморасчетов = стрк.СуммаВзаиморасчетов;

		СтрокаТЧ.СуммаВзаиморасчетовПоТаре = стрк.СуммаВзаиморасчетовПоТаре;

		СтрокаТЧ.СуммаЗалогаЗаТару = стрк.СуммаЗалогаЗаТару;

		СтрокаТЧ.СуммаПлатежа = стрк.СуммаПлатежа;

	КонецЦикла;

	////------------------------------------------------------     ТЧ ШтрихкодыУпаковок



	//ОбъектДанных.ШтрихкодыУпаковок.Очистить();


	//Для счТовары = 0 По деф.ТЧШтрихкодыУпаковок.Количество()-1 Цикл
	//	стрк = деф.ТЧШтрихкодыУпаковок[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ШтрихкодыУпаковок.Добавить();


	//	_знч = "";
	//	ЕстьЗначение = стрк.ЧастичноеВыбытиеВариантУчета.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.ЧастичноеВыбытиеВариантУчета = стрк.ЧастичноеВыбытиеВариантУчета.Значение;
	//	Иначе
	//		СтрокаТЧ.ЧастичноеВыбытиеВариантУчета = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ЧастичноеВыбытиеВариантУчета = ксп_ИмпортСлужебный.НайтиПеречисление_ЧастичноеВыбытиеВариантУчета(стрк.ЧастичноеВыбытиеВариантУчета);

	//	СтрокаТЧ.ЧастичноеВыбытиеКоличество = стрк.ЧастичноеВыбытиеКоличество;

	//	гуид="";
	//	ЕстьАтрибут = стрк.ЧастичноеВыбытиеНоменклатура.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ЧастичноеВыбытиеНоменклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЧастичноеВыбытиеНоменклатура.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ЧастичноеВыбытиеНоменклатура = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ЧастичноеВыбытиеНоменклатура = ксп_ИмпортСлужебный.НайтиЧастичноеВыбытиеНоменклатура(стрк.ЧастичноеВыбытиеНоменклатура);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ЧастичноеВыбытиеХарактеристика.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ЧастичноеВыбытиеХарактеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЧастичноеВыбытиеХарактеристика.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ЧастичноеВыбытиеХарактеристика = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ЧастичноеВыбытиеХарактеристика = ксп_ИмпортСлужебный.НайтиЧастичноеВыбытиеХарактеристика(стрк.ЧастичноеВыбытиеХарактеристика);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ШтрихкодУпаковки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ШтрихкодУпаковки.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ШтрихкодУпаковки = ксп_ИмпортСлужебный.НайтиШтрихкодУпаковки(стрк.ШтрихкодУпаковки);

	//КонецЦикла;

	////------------------------------------------------------     ТЧ НачислениеБонусныхБаллов



//	ОбъектДанных.НачислениеБонусныхБаллов.Очистить();


//	Для счТовары = 0 По деф.ТЧБонусныеБаллыКНачислению.Количество()-1 Цикл
//		стрк = деф.ТЧБонусныеБаллыКНачислению[счТовары];
//		СтрокаТЧ = ОбъектДанных.НачислениеБонусныхБаллов.Добавить();


//		СтрокаТЧ.БонуснаяПрограммаЛояльности = ксп_ИмпортСлужебный.НайтиБонуснуюПрограмму(стрк.БонуснаяПрограммаЛояльности, мВнешняяСистема);

//		СтрокаТЧ.ДатаНачисления = стрк.ДатаНачисления;

//		СтрокаТЧ.ДатаСписания = стрк.ДатаСписания;

//		СтрокаТЧ.КлючСвязи = стрк.КлючСвязи;

//		СтрокаТЧ.СуммаБонусныхБаллов = стрк.КоличествоБонусныхБаллов;

//	КонецЦикла;




	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции








#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиДоговорРеализации(Контрагент, Организация) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ТипДоговора = &ТипДоговора
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Контрагент = &Контрагент";
	
	
	ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
	
	Запрос.УстановитьПараметр("ТипДоговора", ТипДоговора);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Договор;
	КонецЦикла;
		
	Возврат Неопределено;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиСоздатьОбъектРасчетов(ДокСсылка) Экспорт
	
	
		
	Возврат Неопределено;
	
КонецФункции


 мВнешняяСистема = "ut";
 
 