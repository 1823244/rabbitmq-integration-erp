Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.4");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ВозвратТоваровОтПокупателя");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_Розницы_Документ_ВозвратТоваровОтПокупателя");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_Розницы_Документ_ВозвратТоваровОтПокупателя",
		"Форма_Плагин_RabbitMQ_импорт_из_Розницы_Документ_ВозвратТоваровОтПокупателя",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.возвраттоваровотпокупателя") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_Розница";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
    ВидОбъекта = "ВозвратТоваровОтКлиента";

	//------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
				"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			
		ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText);		
		ЗафиксироватьТранзакцию();          		
		Возврат ДанныеСсылка;		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	
			
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



	//гуид="";
	//ЕстьАтрибут = деф.Автор.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Автор = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Автор.Ref ) );
	//Иначе
	//	ОбъектДанных.Автор = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Автор = ксп_ИмпортСлужебный.НайтиАвтор(деф.Автор);

	ОбъектДанных.Валюта = константы.ВалютаРегламентированногоУчета.Получить();

	ОбъектДанных.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;

	//гуид="";
	//ЕстьАтрибут = деф.ВидДокументаПокупателя.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ВидДокументаПокупателя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ВидДокументаПокупателя.Ref ) );
	//Иначе
	//	ОбъектДанных.ВидДокументаПокупателя = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ВидДокументаПокупателя = ксп_ИмпортСлужебный.НайтиВидДокументаПокупателя(деф.ВидДокументаПокупателя);

	//ОбъектДанных.ВидыЗапасовУказаныВручную = деф.ВидыЗапасовУказаныВручную;

	//ОбъектДанных.ВозвратПереданнойМногооборотнойТары = деф.ВозвратПереданнойМногооборотнойТары;

	ОбъектДанных.ВозвратПорчи = деф.ВозвратПорчи;

	//ОбъектДанных.ВыданыДенежныеСредства = деф.ВыданыДенежныеСредства;

	//гуид="";
	//ЕстьАтрибут = деф.ГруппаФинансовогоУчета.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ГруппаФинансовогоУчета = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ГруппаФинансовогоУчета.Ref ) );
	//Иначе
	//	ОбъектДанных.ГруппаФинансовогоУчета = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ГруппаФинансовогоУчета = ксп_ИмпортСлужебный.НайтиГруппаФинансовогоУчета(деф.ГруппаФинансовогоУчета);

	//ОбъектДанных.ДатаВходящегоДокумента = деф.ДатаВходящегоДокумента;

	//ОбъектДанных.ДатаВыдачиДокументаПокупателя = деф.ДатаВыдачиДокументаПокупателя;

	//ОбъектДанных.ДатаПоступления = деф.ДатаПоступления;

	//ОбъектДанных.ДатаРасходногоКассовогоОрдера = деф.ДатаРасходногоКассовогоОрдера;

	ОбъектДанных.ДатаРожденияПокупателя = деф.ДатаРождения;

	//гуид="";
	//ЕстьАтрибут = деф.ДовозвратПоВозврату.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ДовозвратПоВозврату = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДовозвратПоВозврату.Ref ) );
	//Иначе
	//	ОбъектДанных.ДовозвратПоВозврату = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ДовозвратПоВозврату = ксп_ИмпортСлужебный.НайтиДовозвратПоВозврату(деф.ДовозвратПоВозврату);

	ОбъектДанных.Договор = ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента);

	гуид="";
	ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
	Если ЕстьАтрибут Тогда
		ОбъектДанных.ДокументРеализации = Документы.РеализацияТоваровУслуг.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДокументОснование.Ref ) );
	Иначе
		ОбъектДанных.ДокументРеализации = Неопределено;
	КонецЕсли;

	//ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ = деф.ЕстьМаркируемаяПродукцияГИСМ;

	//гуид="";
	//ЕстьАтрибут = деф.ЗаявкаНаВозвратТоваровОтКлиента.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ЗаявкаНаВозвратТоваровОтКлиента = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗаявкаНаВозвратТоваровОтКлиента.Ref ) );
	//Иначе
	//	ОбъектДанных.ЗаявкаНаВозвратТоваровОтКлиента = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ЗаявкаНаВозвратТоваровОтКлиента = ксп_ИмпортСлужебный.НайтиЗаявкаНаВозвратТоваровОтКлиента(деф.ЗаявкаНаВозвратТоваровОтКлиента);

	//ОбъектДанных.КемВыданДокументПокупателя = деф.КемВыданДокументПокупателя;

	//гуид="";
	//ЕстьАтрибут = деф.КлиентДоговор.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.КлиентДоговор = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КлиентДоговор.Ref ) );
	//Иначе
	//	ОбъектДанных.КлиентДоговор = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.КлиентДоговор = ксп_ИмпортСлужебный.НайтиКлиентДоговор(деф.КлиентДоговор);

	//гуид="";
	//ЕстьАтрибут = деф.КлиентКонтрагент.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.КлиентКонтрагент = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КлиентКонтрагент.Ref ) );
	//Иначе
	//	ОбъектДанных.КлиентКонтрагент = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.КлиентКонтрагент = ксп_ИмпортСлужебный.НайтиКлиентКонтрагент(деф.КлиентКонтрагент);

	//гуид="";
	//ЕстьАтрибут = деф.КлиентПартнер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.КлиентПартнер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КлиентПартнер.Ref ) );
	//Иначе
	//	ОбъектДанных.КлиентПартнер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.КлиентПартнер = ксп_ИмпортСлужебный.НайтиКлиентПартнер(деф.КлиентПартнер);

	//ОбъектДанных.КодПодразделенияДокументаПокупателя = деф.КодПодразделенияДокументаПокупателя;

	ОбъектДанных.Комментарий = деф.Комментарий;

	//гуид="";
	//ЕстьАтрибут = деф.КонтактноеЛицо.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.КонтактноеЛицо = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.КонтактноеЛицо.Ref ) );
	//Иначе
	//	ОбъектДанных.КонтактноеЛицо = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.КонтактноеЛицо = ксп_ИмпортСлужебный.НайтиКонтактноеЛицо(деф.КонтактноеЛицо);

	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);

	//гуид="";
	//ЕстьАтрибут = деф.Менеджер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Менеджер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Менеджер.Ref ) );
	//Иначе
	//	ОбъектДанных.Менеджер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Менеджер = ксп_ИмпортСлужебный.НайтиМенеджер(деф.Менеджер);

	//ОбъектДанных.НаименованиеВходящегоДокумента = деф.НаименованиеВходящегоДокумента;

	_знч = "";
	ЕстьЗначение = деф.НалогообложениеНДС.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ОбъектДанных.НалогообложениеНДС = деф.НалогообложениеНДС.Значение;
	Иначе
		ОбъектДанных.НалогообложениеНДС = Неопределено;
	КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;

	ОбъектДанных.НаправлениеДеятельности = 
		РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("НаправлениеДеятельностиДляРеализацяТоваровУслугИзРозница", мВнешняяСистема);

	ОбъектДанных.НомерВходящегоДокумента = деф.НомерВходящегоДокумента;

	ОбъектДанных.НомерДокументаПокупателя = деф.НомерДокументаПокупателя;

	//ОбъектДанных.НомерРасходногоКассовогоОрдера = деф.НомерРасходногоКассовогоОрдера;

	//гуид="";
	//ЕстьАтрибут = деф.ОбъектРасчетов.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ОбъектРасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ОбъектРасчетов.Ref ) );
	//Иначе
	//	ОбъектДанных.ОбъектРасчетов = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	ОбъектДанных.ОбъектРасчетов = ксп_ИмпортСлужебный.НайтиСоздатьОбъектРасчетовСКлиентом(
		ОбъектДанных, ОбъектДанных.Организация);

	ОбъектДанных.ОплатаВВалюте = деф.ОплатаВВалюте;

	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

	//гуид="";
	//ЕстьАтрибут = деф.Партнер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Партнер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Партнер.Ref ) );
	//Иначе
	//	ОбъектДанных.Партнер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	Если ЗначениеЗаполнено(ОбъектДанных.Контрагент) Тогда
		ОбъектДанных.Партнер = ОбъектДанных.Контрагент.Партнер;
	Иначе
		ОбъектДанных.Партнер = Неопределено;
	КонецЕсли;

	//гуид="";
	//ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Подразделение.Ref ) );
	//Иначе
	//	ОбъектДанных.Подразделение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	ОбъектДанных.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(деф.Подразделение);

	ОбъектДанных.Покупатель = деф.Покупатель;

	//ОбъектДанных.ПокупательНеПлательщикНДС = деф.ПокупательНеПлательщикНДС;

	ОбъектДанных.ПорядокРасчетов = 
		РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("ПорядокРасчетовДляРеализацяТоваровУслугИзРозница", мВнешняяСистема);

	//ОбъектДанных.ПредусмотренЗалогЗаТару = деф.ПредусмотренЗалогЗаТару;

	ОбъектДанных.ПричинаВозврата = деф.ПричинаВозврата;

	//гуид="";
	//ЕстьАтрибут = деф.Сделка.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Сделка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Сделка.Ref ) );
	//Иначе
	//	ОбъектДанных.Сделка = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Сделка = ксп_ИмпортСлужебный.НайтиСделка(деф.Сделка);

	//ОбъектДанных.СерияДокументаПокупателя = деф.СерияДокументаПокупателя;

	ОбъектДанных.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);

	//гуид="";
	//ЕстьАтрибут = деф.Соглашение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Соглашение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Соглашение.Ref ) );
	//Иначе
	//	ОбъектДанных.Соглашение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	ОбъектДанных.Соглашение = 
		РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("СоглашениеСКлиентамиДляРеализацяТоваровУслугИзРозница", мВнешняяСистема);

	//_знч = "";
	//ЕстьЗначение = деф.СостояниеЗаполненияМногооборотнойТары.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = деф.СостояниеЗаполненияМногооборотнойТары.Значение;
	//Иначе
	//	ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = ксп_ИмпортСлужебный.НайтиПеречисление_СостояниеЗаполненияМногооборотнойТары(деф.СостояниеЗаполненияМногооборотнойТары);

	ОбъектДанных.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства;

	//ОбъектДанных.СрокДействияДокументаПокупателя = деф.СрокДействияДокументаПокупателя;

	ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;

	//_знч = "";
	//ЕстьЗначение = деф.УдалитьПорядокОплаты.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.УдалитьПорядокОплаты = деф.УдалитьПорядокОплаты.Значение;
	//Иначе
	//	ОбъектДанных.УдалитьПорядокОплаты = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.УдалитьПорядокОплаты = ксп_ИмпортСлужебный.НайтиПеречисление_УдалитьПорядокОплаты(деф.УдалитьПорядокОплаты);

	//гуид="";
	//ЕстьАтрибут = деф.УдалитьРуководитель.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.УдалитьРуководитель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.УдалитьРуководитель.Ref ) );
	//Иначе
	//	ОбъектДанных.УдалитьРуководитель = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.УдалитьРуководитель = ксп_ИмпортСлужебный.НайтиУдалитьРуководитель(деф.УдалитьРуководитель);

	//_знч = "";
	//ЕстьЗначение = деф.ХозяйственнаяОперация.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ХозяйственнаяОперация = деф.ХозяйственнаяОперация.Значение;
	//Иначе
	//	ОбъектДанных.ХозяйственнаяОперация = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;

	ОбъектДанных.ЦенаВключаетНДС = деф.ЦенаВключаетНДС;

	Если деф.ПробитЧек Тогда
		//гуид="";
		//ЕстьАтрибут = деф.ЧекККМ.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ОбъектДанных.ЧекККМ = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЧекККМ.Ref ) );
		//Иначе
		//	ОбъектДанных.ЧекККМ = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ОбъектДанных.ЧекККМ = ксп_ИмпортСлужебный.НайтиЧекККМ(деф.ЧекККМ);
		
		ЧекККМ = Документы.ЧекККМ.НайтиПоНомеру(деф.ЧекНомер, деф.ЧекДата);
		Если ЗначениеЗаполнено(ЧекККМ) Тогда
			ОбъектДанных.ЧекККМ = ЧекККМ;
		КонецЕсли;
	КонецЕсли;




	////------------------------------------------------------     ТЧ Товары



	ОбъектДанных.Товары.Очистить();


	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.АналитикаУчетаНаборов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.АналитикаУчетаНаборов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНаборов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.АналитикаУчетаНаборов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.АналитикаУчетаНаборов = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНаборов(стрк.АналитикаУчетаНаборов);


	//	гуид="";
	//	ЕстьАтрибут = стрк.ВидЦеныСебестоимости.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ВидЦеныСебестоимости = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЦеныСебестоимости.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ВидЦеныСебестоимости = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВидЦеныСебестоимости = ксп_ИмпортСлужебный.НайтиВидЦеныСебестоимости(стрк.ВидЦеныСебестоимости);

	//	СтрокаТЧ.ДатаЗаполненияСебестоимостиПоВидуЦены = стрк.ДатаЗаполненияСебестоимостиПоВидуЦены;

		гуид="";
		ЕстьАтрибут = стрк.ДокументПродажи.свойство("Ref",гуид);
		Если ЕстьАтрибут Тогда
		СтрокаТЧ.ДокументРеализации = Документы.РеализацияТоваровУслуг.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ДокументПродажи.Ref ) );
		Иначе
			СтрокаТЧ.ДокументРеализации = Неопределено;
		КонецЕсли;

		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);

	//	СтрокаТЧ.КодСтроки = стрк.КодСтроки;

		СтрокаТЧ.Количество = стрк.Количество;

	//	СтрокаТЧ.КоличествоПоРНПТ = стрк.КоличествоПоРНПТ;

		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Назначение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);

	//	гуид="";
	//	ЕстьАтрибут = стрк.НоменклатураНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НоменклатураНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НоменклатураНабора = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НоменклатураНабора = ксп_ИмпортСлужебный.НайтиНоменклатураНабора(стрк.НоменклатураНабора);

	//	гуид="";
	//	ЕстьАтрибут = стрк.НоменклатураОприходование.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НоменклатураОприходование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураОприходование.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НоменклатураОприходование = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НоменклатураОприходование = ксп_ИмпортСлужебный.НайтиНоменклатураОприходование(стрк.НоменклатураОприходование);

	//	гуид="";
	//	ЕстьАтрибут = стрк.НомерГТД.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НомерГТД = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НомерГТД.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НомерГТД = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НомерГТД = ксп_ИмпортСлужебный.НайтиНомерГТД(стрк.НомерГТД);

	//	СтрокаТЧ.Порча = стрк.Порча;

	//	СтрокаТЧ.Себестоимость = стрк.Себестоимость;

	//	СтрокаТЧ.СебестоимостьБезНДС = стрк.СебестоимостьБезНДС;

	//	СтрокаТЧ.СебестоимостьВР = стрк.СебестоимостьВР;

	//	СтрокаТЧ.СебестоимостьПР = стрк.СебестоимостьПР;

	//	СтрокаТЧ.СебестоимостьРегл = стрк.СебестоимостьРегл;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

		СтрокаТЧ.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи;

		СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.ОпределитьСтавкуНДСПоПеречислениюРозницы(стрк.СтавкаНДС);

		СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		СтрокаТЧ.Сумма = стрк.Сумма;

		СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

		Если ОбъектДанных.ЦенаВключаетНДС Тогда
			СтрокаТЧ.СуммаСНДС = стрк.Сумма;
		Иначе 
			СтрокаТЧ.СуммаСНДС = стрк.Сумма+стрк.СуммаНДС;
		КонецЕсли;
		

	//	_знч = "";
	//	ЕстьЗначение = стрк.УдалитьСтавкаНДС.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.УдалитьСтавкаНДС = стрк.УдалитьСтавкаНДС.Значение;
	//	Иначе
	//		СтрокаТЧ.УдалитьСтавкаНДС = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.УдалитьСтавкаНДС = ксп_ИмпортСлужебный.НайтиПеречисление_УдалитьСтавкаНДС(стрк.УдалитьСтавкаНДС);

		СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиЕдиницуИзмерения(стрк.Упаковка, стрк.Номенклатура);

		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.Характеристика);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ХарактеристикаНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ХарактеристикаНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ХарактеристикаНабора = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ХарактеристикаНабора = ксп_ИмпортСлужебный.НайтиХарактеристикаНабора(стрк.ХарактеристикаНабора);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ХарактеристикаОприходование.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ХарактеристикаОприходование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаОприходование.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ХарактеристикаОприходование = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ХарактеристикаОприходование = ксп_ИмпортСлужебный.НайтиХарактеристикаОприходование(стрк.ХарактеристикаОприходование);

		СтрокаТЧ.Цена = стрк.Цена;

		СтрокаТЧ.Штрихкод = стрк.Штрихкод;
	
		СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиСоздатьКлючАналитикиНом(
			СтрокаТЧ.Номенклатура, ОбъектДанных.Склад, СтрокаТЧ.Характеристика);
	

	КонецЦикла;

	////------------------------------------------------------     ТЧ ВидыЗапасов



	ОбъектДанных.ВидыЗапасов.Очистить();


	Для счТовары = 0 По ОбъектДанных.Товары.Количество()-1 Цикл
		стрк = ОбъектДанных.Товары[счТовары];
		СтрокаТЧ = ОбъектДанных.ВидыЗапасов.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.АналитикаУчетаНаборов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.АналитикаУчетаНаборов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНаборов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.АналитикаУчетаНаборов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.АналитикаУчетаНаборов = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНаборов(стрк.АналитикаУчетаНаборов);

	// Справочник.ВидыЗапасов - todo нужна настройка импорта
		СтрокаТЧ.ВидЗапасов = ксп_ИмпортСлужебный.НайтиВидЗапасовСобственныйТовар(ОбъектДанных.Организация);
		СтрокаТЧ.ВидЗапасовОтгрузки = ксп_ИмпортСлужебный.НайтиВидЗапасовСобственныйТовар(ОбъектДанных.Организация);

		СтрокаТЧ.ДокументРеализации = ОбъектДанных.ДокументРеализации;

		СтрокаТЧ.ИдентификаторСтроки = строка(Новый УникальныйИдентификатор);

		СтрокаТЧ.Количество = стрк.Количество;

	//	СтрокаТЧ.КоличествоПоРНПТ = стрк.КоличествоПоРНПТ;

		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

	//	гуид="";
	//	ЕстьАтрибут = стрк.НоменклатураОприходование.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НоменклатураОприходование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураОприходование.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НоменклатураОприходование = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НоменклатураОприходование = ксп_ИмпортСлужебный.НайтиНоменклатураОприходование(стрк.НоменклатураОприходование);

	//	гуид="";
	//	ЕстьАтрибут = стрк.НомерГТД.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НомерГТД = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НомерГТД.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НомерГТД = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НомерГТД = ксп_ИмпортСлужебный.НайтиНомерГТД(стрк.НомерГТД);

	//	СтрокаТЧ.Себестоимость = стрк.Себестоимость;

	//	СтрокаТЧ.СебестоимостьБезНДС = стрк.СебестоимостьБезНДС;

	//	СтрокаТЧ.СебестоимостьВР = стрк.СебестоимостьВР;

	//	СтрокаТЧ.СебестоимостьПР = стрк.СебестоимостьПР;

	//	СтрокаТЧ.СебестоимостьРегл = стрк.СебестоимостьРегл;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

	СтрокаТЧ.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимости.ИзДокументаПродажи;

	//	гуид="";
	//	ЕстьАтрибут = стрк.СтавкаНДС.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.СтавкаНДС = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СтавкаНДС.Ref ) );
	//	Иначе
	//		СтрокаТЧ.СтавкаНДС = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.СтавкаНДС = ксп_ИмпортСлужебный.НайтиСтавкаНДС(стрк.СтавкаНДС);

	//	СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;

	//	СтрокаТЧ.СуммаСНДС = стрк.СуммаСНДС;

	//	_знч = "";
	//	ЕстьЗначение = стрк.УдалитьСтавкаНДС.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.УдалитьСтавкаНДС = стрк.УдалитьСтавкаНДС.Значение;
	//	Иначе
	//		СтрокаТЧ.УдалитьСтавкаНДС = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.УдалитьСтавкаНДС = ксп_ИмпортСлужебный.НайтиПеречисление_УдалитьСтавкаНДС(стрк.УдалитьСтавкаНДС);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Упаковка = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ХарактеристикаОприходование.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ХарактеристикаОприходование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаОприходование.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ХарактеристикаОприходование = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ХарактеристикаОприходование = ксп_ИмпортСлужебный.НайтиХарактеристикаОприходование(стрк.ХарактеристикаОприходование);
	
		СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиСоздатьКлючАналитикиНом(
			стрк.Номенклатура, ОбъектДанных.Склад, стрк.Характеристика);
		СтрокаТЧ.АналитикаУчетаНоменклатурыОтгрузки = СтрокаТЧ.АналитикаУчетаНоменклатуры;

		
	КонецЦикла;

	////------------------------------------------------------     ТЧ Серии



	//ОбъектДанных.Серии.Очистить();


	//Для счТовары = 0 По деф.ТЧСерии.Количество()-1 Цикл
	//	стрк = деф.ТЧСерии[счТовары];
	//	СтрокаТЧ = ОбъектДанных.Серии.Добавить();


	//	СтрокаТЧ.Количество = стрк.Количество;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Назначение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Номенклатура = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

	//	гуид="";
	//	ЕстьАтрибут = стрк.НоменклатураОприходование.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НоменклатураОприходование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураОприходование.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НоменклатураОприходование = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НоменклатураОприходование = ксп_ИмпортСлужебный.НайтиНоменклатураОприходование(стрк.НоменклатураОприходование);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Характеристика = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ХарактеристикаОприходование.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ХарактеристикаОприходование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаОприходование.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ХарактеристикаОприходование = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ХарактеристикаОприходование = ксп_ИмпортСлужебный.НайтиХарактеристикаОприходование(стрк.ХарактеристикаОприходование);

	//КонецЦикла;

	////------------------------------------------------------     ТЧ НачислениеБонусныхБаллов



	//ОбъектДанных.НачислениеБонусныхБаллов.Очистить();


	//Для счТовары = 0 По деф.ТЧНачислениеБонусныхБаллов.Количество()-1 Цикл
	//	стрк = деф.ТЧНачислениеБонусныхБаллов[счТовары];
	//	СтрокаТЧ = ОбъектДанных.НачислениеБонусныхБаллов.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.БонуснаяПрограммаЛояльности.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.БонуснаяПрограммаЛояльности = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.БонуснаяПрограммаЛояльности.Ref ) );
	//	Иначе
	//		СтрокаТЧ.БонуснаяПрограммаЛояльности = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.БонуснаяПрограммаЛояльности = ксп_ИмпортСлужебный.НайтиБонуснаяПрограммаЛояльности(стрк.БонуснаяПрограммаЛояльности);

	//	СтрокаТЧ.ДатаНачисления = стрк.ДатаНачисления;

	//	СтрокаТЧ.ДатаСписания = стрк.ДатаСписания;

	//	СтрокаТЧ.СуммаБонусныхБаллов = стрк.СуммаБонусныхБаллов;

	//КонецЦикла;

	////------------------------------------------------------     ТЧ ОплатаБонуснымиБаллами



	//ОбъектДанных.ОплатаБонуснымиБаллами.Очистить();


	//Для счТовары = 0 По деф.ТЧОплатаБонуснымиБаллами.Количество()-1 Цикл
	//	стрк = деф.ТЧОплатаБонуснымиБаллами[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ОплатаБонуснымиБаллами.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.БонуснаяПрограммаЛояльности.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.БонуснаяПрограммаЛояльности = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.БонуснаяПрограммаЛояльности.Ref ) );
	//	Иначе
	//		СтрокаТЧ.БонуснаяПрограммаЛояльности = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.БонуснаяПрограммаЛояльности = ксп_ИмпортСлужебный.НайтиБонуснаяПрограммаЛояльности(стрк.БонуснаяПрограммаЛояльности);

	//	СтрокаТЧ.ДатаОплаты = стрк.ДатаОплаты;

	//	СтрокаТЧ.СуммаБонусныхБаллов = стрк.СуммаБонусныхБаллов;

	//КонецЦикла;

	////------------------------------------------------------     ТЧ ШтрихкодыУпаковок



	//ОбъектДанных.ШтрихкодыУпаковок.Очистить();


	//Для счТовары = 0 По деф.ТЧШтрихкодыУпаковок.Количество()-1 Цикл
	//	стрк = деф.ТЧШтрихкодыУпаковок[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ШтрихкодыУпаковок.Добавить();


	//	СтрокаТЧ.ЗначениеШтрихкода = стрк.ЗначениеШтрихкода;

	//	_знч = "";
	//	ЕстьЗначение = стрк.ЧастичноеВыбытиеВариантУчета.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.ЧастичноеВыбытиеВариантУчета = стрк.ЧастичноеВыбытиеВариантУчета.Значение;
	//	Иначе
	//		СтрокаТЧ.ЧастичноеВыбытиеВариантУчета = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ЧастичноеВыбытиеВариантУчета = ксп_ИмпортСлужебный.НайтиПеречисление_ЧастичноеВыбытиеВариантУчета(стрк.ЧастичноеВыбытиеВариантУчета);

	//	СтрокаТЧ.ЧастичноеВыбытиеКоличество = стрк.ЧастичноеВыбытиеКоличество;

	//	гуид="";
	//	ЕстьАтрибут = стрк.ЧастичноеВыбытиеНоменклатура.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ЧастичноеВыбытиеНоменклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЧастичноеВыбытиеНоменклатура.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ЧастичноеВыбытиеНоменклатура = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ЧастичноеВыбытиеНоменклатура = ксп_ИмпортСлужебный.НайтиЧастичноеВыбытиеНоменклатура(стрк.ЧастичноеВыбытиеНоменклатура);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ЧастичноеВыбытиеХарактеристика.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ЧастичноеВыбытиеХарактеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЧастичноеВыбытиеХарактеристика.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ЧастичноеВыбытиеХарактеристика = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ЧастичноеВыбытиеХарактеристика = ксп_ИмпортСлужебный.НайтиЧастичноеВыбытиеХарактеристика(стрк.ЧастичноеВыбытиеХарактеристика);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ШтрихкодУпаковки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ШтрихкодУпаковки.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ШтрихкодУпаковки = ксп_ИмпортСлужебный.НайтиШтрихкодУпаковки(стрк.ШтрихкодУпаковки);

	//КонецЦикла;

	////------------------------------------------------------     ТЧ РасшифровкаПлатежа



	ОбъектДанных.РасшифровкаПлатежа.Очистить();


	//Для счТовары = 0 По деф.ТЧРасшифровкаПлатежа.Количество()-1 Цикл
	//	стрк = деф.ТЧРасшифровкаПлатежа[счТовары];
		СтрокаТЧ = ОбъектДанных.РасшифровкаПлатежа.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.ВалютаВзаиморасчетов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ВалютаВзаиморасчетов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВалютаВзаиморасчетов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ВалютаВзаиморасчетов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
		СтрокаТЧ.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		
		// todo Вернуться
		//СтрокаТЧ.ОбъектРасчетов = ОбъектДанных.ДокументРеализации;

		СтрокаТЧ.Сумма = ОбъектДанных.СуммаДокумента;

		СтрокаТЧ.СуммаВзаиморасчетов = ОбъектДанных.СуммаДокумента;

	//КонецЦикла;

	////------------------------------------------------------     ТЧ ДополнительныеРеквизиты



	//ОбъектДанных.ДополнительныеРеквизиты.Очистить();


	//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
	//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ДополнительныеРеквизиты.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Значение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Свойство = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);

	//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

	//КонецЦикла;

	////------------------------------------------------------     ТЧ УдалитьДополнительныеРеквизиты




	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции









#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


 мВнешняяСистема = "retail";
 
 