#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_экспорт_Документ_ЗаказНаПеремещение");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_экспорт_Документ_ЗаказНаПеремещение");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_экспорт_Документ_ЗаказНаПеремещение",
		"Форма_Плагин_RabbitMQ_экспорт_Документ_ЗаказНаПеремещение",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	Номенклатура	- СправочникСсылка.Номенклатура / СправочникОбъект.Номенклатура - при чтении узла обмена сюда будут приходить именно объекты
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ВыгрузитьОбъект(Ссылка) Экспорт
	
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		Обк = Ссылка.ПолучитьОбъект(); 
	Иначе 
		Обк = Ссылка; 
	КонецЕсли;

	
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьJson = Новый ЗаписьJSON;
	ЗаписьJson.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	// Это основной объект json-сообщения
	СтруктураОбъекта = Новый Структура;
	
	СтруктураОбъекта.Вставить("source", "ERP");
	СтруктураОбъекта.Вставить("type", Обк.метаданные().ПолноеИмя());
	СтруктураОбъекта.Вставить("datetime", XMLСтрока(ТекущаяДатаСеанса()));
	
	identification = ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ссылка);
	СтруктураОбъекта.Вставить("identification", identification);
	
	//	DEFINITION
	
	definition = ксп_ЭкспортСлужебный.СоздатьУзелDefinition(Обк.Ссылка);
	
	//Таблица:	Шапка	

	
	definition.Вставить("Автор", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Автор));
	definition.Вставить("АдресДоставки", Обк.АдресДоставки);
	definition.Вставить("АдресДоставкиЗначение", Обк.АдресДоставкиЗначение);
	definition.Вставить("АдресДоставкиЗначенияПолей", Обк.АдресДоставкиЗначенияПолей);
	definition.Вставить("АдресДоставкиПеревозчика", Обк.АдресДоставкиПеревозчика);
	definition.Вставить("АдресДоставкиПеревозчикаЗначение", Обк.АдресДоставкиПеревозчикаЗначение);
	definition.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", Обк.АдресДоставкиПеревозчикаЗначенияПолей);
	definition.Вставить("ВариантПриемкиТоваров", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ВариантПриемкиТоваров));
	definition.Вставить("ВремяДоставкиПо", Обк.ВремяДоставкиПо);
	definition.Вставить("ВремяДоставкиС", Обк.ВремяДоставкиС);
	definition.Вставить("ДлительностьПеремещения", Обк.ДлительностьПеремещения);
	definition.Вставить("ДокументОснование", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ДокументОснование));
	definition.Вставить("ДополнительнаяИнформацияПоДоставке", Обк.ДополнительнаяИнформацияПоДоставке);
	definition.Вставить("ЖелаемаяДатаПоступления", Обк.ЖелаемаяДатаПоступления);
	definition.Вставить("ЗонаДоставки", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ЗонаДоставки));
	definition.Вставить("ИспользоватьДлительностьПеремещения", Обк.ИспользоватьДлительностьПеремещения);
	definition.Вставить("Комментарий", Обк.Комментарий);
	definition.Вставить("МаксимальныйКодСтроки", Обк.МаксимальныйКодСтроки);
	definition.Вставить("Назначение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Назначение));
	definition.Вставить("НаправлениеДеятельности", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.НаправлениеДеятельности));
	definition.Вставить("ОбосабливатьПоНазначениюЗаказа", Обк.ОбосабливатьПоНазначениюЗаказа);
	definition.Вставить("Организация", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Организация));
	definition.Вставить("ОрганизацияПолучатель", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ОрганизацияПолучатель));
	definition.Вставить("ОсобыеУсловияПеревозки", Обк.ОсобыеУсловияПеревозки);
	definition.Вставить("ОсобыеУсловияПеревозкиОписание", Обк.ОсобыеУсловияПеревозкиОписание);
	definition.Вставить("Ответственный", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Ответственный));
	definition.Вставить("ПеревозчикПартнер", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПеревозчикПартнер));
	definition.Вставить("ПеремещениеПодДеятельность", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ПеремещениеПодДеятельность));
	definition.Вставить("Подразделение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Подразделение));
	definition.Вставить("Приоритет", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Приоритет));
	definition.Вставить("Сделка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Сделка));
	definition.Вставить("СкладОтправитель", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СкладОтправитель));
	definition.Вставить("СкладПолучатель", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СкладПолучатель));
	definition.Вставить("СостояниеЗаполненияМногооборотнойТары", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СостояниеЗаполненияМногооборотнойТары));
	definition.Вставить("СпособДоставки", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.СпособДоставки));
	definition.Вставить("Статус", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.Статус));
	definition.Вставить("ХозяйственнаяОперация", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(Обк.ХозяйственнаяОперация));


	// Таблица: ТОВАРЫ
	
	ТЧТовары = Новый Массив;
	
	Для сч = 0 По обк.товары.Количество()-1 Цикл
		
		стрк = обк.товары[сч];
		
		НовСтр = Новый Структура;   
		
		НовСтр.Вставить("ВариантОбеспечения", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВариантОбеспечения));
		НовСтр.Вставить("ВариантОбеспеченияДоИзмененияОбновлениемИБ", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ВариантОбеспеченияДоИзмененияОбновлениемИБ));
		НовСтр.Вставить("КодСтроки", стрк.КодСтроки);
		НовСтр.Вставить("Количество", стрк.Количество);
		НовСтр.Вставить("КоличествоУпаковок", стрк.КоличествоУпаковок);
		НовСтр.Вставить("Назначение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Назначение));
		НовСтр.Вставить("НачалоОтгрузки", стрк.НачалоОтгрузки);
		НовСтр.Вставить("Номенклатура", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Номенклатура));
		НовСтр.Вставить("НоменклатураНабора", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.НоменклатураНабора));
		НовСтр.Вставить("Обособленно", стрк.Обособленно);
		НовСтр.Вставить("ОкончаниеПоступления", стрк.ОкончаниеПоступления);
		НовСтр.Вставить("Отменено", стрк.Отменено);
		НовСтр.Вставить("Серия", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Серия));
		НовСтр.Вставить("СтатусУказанияСерий", стрк.СтатусУказанияСерий);
		НовСтр.Вставить("Упаковка", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Упаковка));
		НовСтр.Вставить("Характеристика", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Характеристика));
		НовСтр.Вставить("ХарактеристикаНабора", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.ХарактеристикаНабора));

		ТЧТовары.Добавить(НовСтр);
	КонецЦикла;
	
	definition.Вставить("ТЧТовары", ТЧТовары);
	
	//Таблица:	ДополнительныеРеквизиты	

	ТЧДополнительныеРеквизиты = Новый Массив;
	
    Для сч = 0 По обк.ДополнительныеРеквизиты.Количество()-1 Цикл
		
		стрк = обк.ДополнительныеРеквизиты[сч];
		
		СтрокаТовары = Новый Структура;

		СтрокаТовары.Вставить("Значение", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Значение)); 	
		СтрокаТовары.Вставить("Свойство", ксп_ЭкспортСлужебный.СоздатьУзелIdentification(стрк.Свойство)); 	
		СтрокаТовары.Вставить("ТекстоваяСтрока", стрк.ТекстоваяСтрока); 	

		ТЧДополнительныеРеквизиты.Добавить(СтрокаТовары);
	КонецЦикла;
	
	definition.Вставить("ТЧДополнительныеРеквизиты", ТЧДополнительныеРеквизиты);

	
	
	
	
	
	
	//------------------------------------------------------
	
	СтруктураОбъекта.Вставить("definition", definition);
	
	ЗаписатьJSON(ЗаписьJson, СтруктураОбъекта);
	json = ЗаписьJson.Закрыть();
	
	Возврат json;
	
	
	Возврат Неопределено;
	
КонецФункции




