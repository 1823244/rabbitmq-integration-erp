Перем НЕ_ЗАГРУЖАТЬ;
Перем СОЗДАТЬ;
Перем ОБНОВИТЬ;
Перем ОТМЕНИТЬ_ПРОВЕДЕНИЕ;

Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем jsonText;
Перем СобиратьНенайденнуюНоменклатуру Экспорт;
Перем НеНайденнаяНоменклатураМассив;

Перем мЛоггер;
Перем мИдВызова;
Перем мСкладОтправитель;
Перем мСкладПолучатель;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.2");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СубПлагин_док_ПеремещениеТоваров_В_Магазин_ч1");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СубПлагин_док_ПеремещениеТоваров_В_Магазин_ч1");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : СубПлагин_док_ПеремещениеТоваров_В_Магазин_ч1",
		"Форма_СубПлагин_док_ПеремещениеТоваров_В_Магазин_ч1",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти 	


#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "", СкладЕРП = Неопределено ) Экспорт
	
	мЛоггер = Вычислить("мис_ЛоггерСервер.getLogger(мИдВызова, ""Субплагин Импорт документов из УПП: ПеремещениеТоваров_В_Магазин_ч1"")");
	
	мЛоггер.Инфо("Субплагин. Версия "+строка(СведенияОВнешнейОбработке().Версия)+". Импорт док. УПП ПеремещениеТоваров_В_Магазин_ч1 №"+СтруктураОбъекта.definition.Number);
	
	Попытка
		
		Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
			Возврат Неопределено;
		КонецЕсли;
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.ПеремещениеТоваров") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		def = СтруктураОбъекта.definition;
		
		Рез = СоздатьДокументыПоСхемеПеремещения_1(СтруктураОбъекта, СкладЕРП);
		
		//*************************** Экспорт ненайденной номенклатуры ****************
		Попытка
			ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_ГуидовНоменклатуры(НеНайденнаяНоменклатураМассив);
			Сообщить("Выполнен экспорт ненайденной номенклатуры - " + Строка(НеНайденнаяНоменклатураМассив.Количество()) + " позиций");
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Сообщить("Ошибка экспорта ненайденной номенклатуры в УПП.");
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Предупреждение,,,
				"Ошибка экспорта ненайденной номенклатуры в УПП. Подробности: " + ТекстОшибки);
		КонецПопытки;
		//***************************
		
		Возврат Рез;
		
	Исключение
		
		мЛоггер.ерр("Субплагин ПеремещениеТоваров_В_Магазин_ч1 - Ошибка. Номер "+строка(def.Номер)+". Подробности: "+ОписаниеОшибки());
		ВызватьИсключение;// для помещения в retry
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти 	


#Область Схема_Перемещение_1

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: структура
//
Функция СоздатьДокументыПоСхемеПеремещения_1(СтруктураОбъекта, СкладЕРП)
	
	Рез = Новый Структура;
	Рез.Вставить("ЗаказНаПеремещение", Неопределено);
	Рез.Вставить("РО", Неопределено);
	Рез.Вставить("Перемещение", Неопределено);

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "ПеремещениеТоваров (УПП) № "+деф.Number+" от "+строка(деф.Date);
	
	НачатьТранзакцию();
	
	//------------------------------------- СуществующийЗаказСсылка
	СуществующийЗаказСсылка 		= СоздатьПолучитьСсылкуДокумента(id.Ref, "ЗаказНаПеремещение");
	ЗаказНаПеремещениеОбъект = СоздатьЗаказНаПеремещение(СтруктураОбъекта, СуществующийЗаказСсылка, Рез);
	//ЗаполнитьРеквизиты(СтруктураОбъекта, ЗаказНаПеремещениеОбъект, СкладЕРП);
	
	//------------------------------------- СуществующийРОСсылка
	СуществующийРОСсылка 			= СоздатьПолучитьСсылкуДокумента(id.Ref, "РасходныйОрдерНаТовары");
	РООбъект = СоздатьРасходныйОрдер(СтруктураОбъекта, СуществующийРОСсылка, ЗаказНаПеремещениеОбъект, Рез);
	//ЗаполнитьРеквизиты(СтруктураОбъекта, РООбъект, СкладЕРП);
	
	//------------------------------------- СуществующийПеремещениеСсылка
	СуществующийПеремещениеСсылка	= СоздатьПолучитьСсылкуДокумента(id.Ref, "ПеремещениеТоваров");
	ПеремещениеОбъект = СоздатьПеремещение(СтруктураОбъекта, СуществующийПеремещениеСсылка, РООбъект, ЗаказНаПеремещениеОбъект, Рез);
	//ЗаполнитьРеквизиты(СтруктураОбъекта, ПеремещениеОбъект, СкладЕРП);
	
	ЗафиксироватьТранзакцию();
	
	мЛоггер.инфо("Записан Документ : %1. Исходный док. УПП: %2", ЗаказНаПеремещениеОбъект, ПредставлениеДокументаИзУПП);
	мЛоггер.инфо("Записан Документ : %1. Исходный док. УПП: %2", РООбъект, ПредставлениеДокументаИзУПП);
	мЛоггер.инфо("Записан Документ : %1. Исходный док. УПП: %2", ПеремещениеОбъект, ПредставлениеДокументаИзУПП);
	
	Рез.Вставить("ЗаказНаПеремещение", ЗаказНаПеремещениеОбъект.Ссылка);
	Рез.Вставить("РО", РООбъект.Ссылка);
	Рез.Вставить("Перемещение", ПеремещениеОбъект.Ссылка);
	
	Возврат Рез;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьЗаказНаПеремещение(СтруктураОбъекта, СуществующийЗаказСсылка, Рез)
	
	ЗаказНаПеремещениеОбъект = Неопределено;
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "ЗаказНаПеремещение (УПП) № "+деф.Number+" от "+строка(деф.Date);
	
	МассивСсылок = Новый Массив;
	ЭтоНеНовыйЗаказ = ЗначениеЗаполнено(СуществующийЗаказСсылка.ВерсияДанных);
	Если ЭтоНеНовыйЗаказ Тогда
		МассивСсылок.Добавить(СуществующийЗаказСсылка);
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	КонецЕсли;
	Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если ЭтоНеНовыйЗаказ Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка блокировки цепочки документов для "+ПредставлениеДокументаИзУПП+". Подробности: "+СообщениеОбОшибке);
			ОтменитьТранзакцию();
			
			мЛоггер.ерр("Ошибка загрузки документа (УПП): %1. Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
			
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		
		Действие = ДействиеСДокументом(ЭтоНеНовыйЗаказ, СуществующийЗаказСсылка, деф);
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ПредставлениеДокументаИзУПП);
			Рез.Вставить("ЗаказНаПеремещение", СуществующийЗаказСсылка);
			Возврат СуществующийЗаказСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			ЗаказНаПеремещениеОбъект = СуществующийЗаказСсылка.ПолучитьОбъект();
			ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ПредставлениеДокументаИзУПП);
			Рез.Вставить("ЗаказНаПеремещение", СуществующийЗаказСсылка);
			Возврат ЗаказНаПеремещениеОбъект;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			ЗаказНаПеремещениеОбъект = СуществующийЗаказСсылка.ПолучитьОбъект();
			мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ПредставлениеДокументаИзУПП);
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			ЗаказНаПеремещениеОбъект = Документы.СборкаТоваров.СоздатьДокумент();
			СсылкаНового = Документы.СборкаТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			ЗаказНаПеремещениеОбъект.УстановитьСсылкуНового(СсылкаНового);
			мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ПредставлениеДокументаИзУПП);
		Иначе 
			ОтменитьТранзакцию();
			ТекстСообщения = "Действие = Неизвестое действие: "+Строка(Действие)+". Документ: " + ПредставлениеДокументаИзУПП;
			мЛоггер.ерр(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
		//------------------------------------- Заполнение реквизитов
		
		ЗаказНаПеремещениеОбъект.Номер = деф.Number;
		ЗаказНаПеремещениеОбъект.Дата = деф.Date;
		ЗаказНаПеремещениеОбъект.ПометкаУдаления = деф.DeletionMark;
		ЗаказНаПеремещениеОбъект.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
		ЗаказНаПеремещениеОбъект.СкладОтправитель = мСкладОтправитель;
		ЗаказНаПеремещениеОбъект.СкладПолучатель = мСкладПолучатель;
		ЗаказНаПеремещениеОбъект.ЖелаемаяДатаПоступления = ЗаказНаПеремещениеОбъект.Дата;
		ЗаказНаПеремещениеОбъект.ВариантПриемкиТоваров = перечисления.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных;
		
		//гуид="";
		//ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ЗаказНаПеремещениеОбъект.ДокументОснование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДокументОснование.Ref ) );
		//Иначе
		//	ЗаказНаПеремещениеОбъект.ДокументОснование = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.ДокументОснование = ксп_ИмпортСлужебный.НайтиДокументОснование(деф.ДокументОснование);
		
		//ЗаказНаПеремещениеОбъект.ДополнительнаяИнформацияПоДоставке = деф.ДополнительнаяИнформацияПоДоставке;
		
		//гуид="";
		//ЕстьАтрибут = деф.ЗонаДоставки.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ЗаказНаПеремещениеОбъект.ЗонаДоставки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗонаДоставки.Ref ) );
		//Иначе
		//	ЗаказНаПеремещениеОбъект.ЗонаДоставки = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.ЗонаДоставки = ксп_ИмпортСлужебный.НайтиЗонаДоставки(деф.ЗонаДоставки);
		
		//ЗаказНаПеремещениеОбъект.ИспользоватьДлительностьПеремещения = деф.ИспользоватьДлительностьПеремещения;
		
		//ЗаказНаПеремещениеОбъект.Комментарий = деф.Комментарий;
		
		//ЗаказНаПеремещениеОбъект.МаксимальныйКодСтроки = деф.МаксимальныйКодСтроки;
		
		//гуид="";
		//ЕстьАтрибут = деф.Назначение.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ЗаказНаПеремещениеОбъект.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Назначение.Ref ) );
		//Иначе
		//	ЗаказНаПеремещениеОбъект.Назначение = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(деф.Назначение);
		
		//гуид="";
		//ЕстьАтрибут = деф.НаправлениеДеятельности.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ЗаказНаПеремещениеОбъект.НаправлениеДеятельности = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.НаправлениеДеятельности.Ref ) );
		//Иначе
		//	ЗаказНаПеремещениеОбъект.НаправлениеДеятельности = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.НаправлениеДеятельности = ксп_ИмпортСлужебный.НайтиНаправлениеДеятельности(деф.НаправлениеДеятельности);
		
		//ЗаказНаПеремещениеОбъект.ОбосабливатьПоНазначениюЗаказа = деф.ОбосабливатьПоНазначениюЗаказа;
		
		//гуид="";
		//ЕстьАтрибут = деф.ОрганизацияПолучатель.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ЗаказНаПеремещениеОбъект.ОрганизацияПолучатель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ОрганизацияПолучатель.Ref ) );
		//Иначе
		//	ЗаказНаПеремещениеОбъект.ОрганизацияПолучатель = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.ОрганизацияПолучатель = ксп_ИмпортСлужебный.НайтиОрганизацияПолучатель(деф.ОрганизацияПолучатель);
		
		//ЗаказНаПеремещениеОбъект.ОсобыеУсловияПеревозки = деф.ОсобыеУсловияПеревозки;
		
		//ЗаказНаПеремещениеОбъект.ОсобыеУсловияПеревозкиОписание = деф.ОсобыеУсловияПеревозкиОписание;
		
		//гуид="";
		//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ЗаказНаПеремещениеОбъект.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
		//Иначе
		//	ЗаказНаПеремещениеОбъект.Ответственный = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);
		
		//гуид="";
		//ЕстьАтрибут = деф.ПеревозчикПартнер.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ЗаказНаПеремещениеОбъект.ПеревозчикПартнер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ПеревозчикПартнер.Ref ) );
		//Иначе
		//	ЗаказНаПеремещениеОбъект.ПеревозчикПартнер = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.ПеревозчикПартнер = ксп_ИмпортСлужебный.НайтиПеревозчикПартнер(деф.ПеревозчикПартнер);
		
		//_знч = "";
		//ЕстьЗначение = деф.ПеремещениеПодДеятельность.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ЗаказНаПеремещениеОбъект.ПеремещениеПодДеятельность = деф.ПеремещениеПодДеятельность.Значение;
		//Иначе
		//	ЗаказНаПеремещениеОбъект.ПеремещениеПодДеятельность = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.ПеремещениеПодДеятельность = ксп_ИмпортСлужебный.НайтиПеречисление_ПеремещениеПодДеятельность(деф.ПеремещениеПодДеятельность);
		
		//гуид="";
		//ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ЗаказНаПеремещениеОбъект.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Подразделение.Ref ) );
		//Иначе
		//	ЗаказНаПеремещениеОбъект.Подразделение = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(деф.Подразделение);
		
		//гуид="";
		//ЕстьАтрибут = деф.Приоритет.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ЗаказНаПеремещениеОбъект.Приоритет = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Приоритет.Ref ) );
		//Иначе
		//	ЗаказНаПеремещениеОбъект.Приоритет = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.Приоритет = ксп_ИмпортСлужебный.НайтиПриоритет(деф.Приоритет);
		
		ЗаказНаПеремещениеОбъект.Приоритет = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка(
		"ПриоритетДляРТУ_схема1_УПП", мВнешняяСистема);
		
		//гуид="";
		//ЕстьАтрибут = деф.Сделка.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ЗаказНаПеремещениеОбъект.Сделка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Сделка.Ref ) );
		//Иначе
		//	ЗаказНаПеремещениеОбъект.Сделка = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.Сделка = ксп_ИмпортСлужебный.НайтиСделка(деф.Сделка);
		
		//_знч = "";
		//ЕстьЗначение = деф.СостояниеЗаполненияМногооборотнойТары.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ЗаказНаПеремещениеОбъект.СостояниеЗаполненияМногооборотнойТары = деф.СостояниеЗаполненияМногооборотнойТары.Значение;
		//Иначе
		//	ЗаказНаПеремещениеОбъект.СостояниеЗаполненияМногооборотнойТары = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.СостояниеЗаполненияМногооборотнойТары = ксп_ИмпортСлужебный.НайтиПеречисление_СостояниеЗаполненияМногооборотнойТары(деф.СостояниеЗаполненияМногооборотнойТары);
		
		//_знч = "";
		//ЕстьЗначение = деф.СпособДоставки.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ЗаказНаПеремещениеОбъект.СпособДоставки = деф.СпособДоставки.Значение;
		//Иначе
		//	ЗаказНаПеремещениеОбъект.СпособДоставки = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.СпособДоставки = ксп_ИмпортСлужебный.НайтиПеречисление_СпособДоставки(деф.СпособДоставки);
		
		//_знч = "";
		//ЕстьЗначение = деф.Статус.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ЗаказНаПеремещениеОбъект.Статус = деф.Статус.Значение;
		//Иначе
		//	ЗаказНаПеремещениеОбъект.Статус = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.Статус = ксп_ИмпортСлужебный.НайтиПеречисление_Статус(деф.Статус);
		ЗаказНаПеремещениеОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
		
		//_знч = "";
		//ЕстьЗначение = деф.ХозяйственнаяОперация.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ЗаказНаПеремещениеОбъект.ХозяйственнаяОперация = деф.ХозяйственнаяОперация.Значение;
		//Иначе
		//	ЗаказНаПеремещениеОбъект.ХозяйственнаяОперация = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ЗаказНаПеремещениеОбъект.ХозяйственнаяОперация = ксп_ИмпортСлужебный.НайтиПеречисление_ХозяйственнаяОперация(деф.ХозяйственнаяОперация);
		ЗаказНаПеремещениеОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		
		
		////------------------------------------------------------     ТЧ Товары
		
		
		ЗаказНаПеремещениеОбъект.Товары.Очистить();
		
		Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
			стрк = деф.ТЧТовары[счТовары];
			СтрокаТЧ = ЗаказНаПеремещениеОбъект.Товары.Добавить();
			
			//////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
			
			Если стрк.Номенклатура.Свойство("identification") Тогда
				// это полный объект номенклатуры.
				ТэгНоменклатуры = стрк.Номенклатура.identification;
			Иначе 
				ТэгНоменклатуры = стрк.Номенклатура;
			КонецЕсли;
			
			_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
			
			Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
				НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
				
				НомГУИД = "";
				Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
					Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
						НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТЧ.Номенклатура = _Номенклатура;
			
			///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)
			
			СтрокаТЧ.Количество = стрк.Количество;
			СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
			СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
			СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			СтрокаТЧ.НачалоОтгрузки = ЗаказНаПеремещениеОбъект.Дата;
			// пока не надо
			//СтрокаТЧ.Упаковка = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
			
			//	СтрокаТЧ.КодСтроки = стрк.КодСтроки;
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Назначение = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);
			
			//	СтрокаТЧ.НачалоОтгрузки = стрк.НачалоОтгрузки;
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.НоменклатураНабора.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.НоменклатураНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураНабора.Ref ) );
			//	Иначе
			//		СтрокаТЧ.НоменклатураНабора = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.НоменклатураНабора = ксп_ИмпортСлужебный.НайтиНоменклатураНабора(стрк.НоменклатураНабора);
			
			//	СтрокаТЧ.Обособленно = стрк.Обособленно;
			
			//	СтрокаТЧ.ОкончаниеПоступления = стрк.ОкончаниеПоступления;
			
			//	СтрокаТЧ.Отменено = стрк.Отменено;
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Серия = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);
			
			//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Упаковка = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.ХарактеристикаНабора.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.ХарактеристикаНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаНабора.Ref ) );
			//	Иначе
			//		СтрокаТЧ.ХарактеристикаНабора = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.ХарактеристикаНабора = ксп_ИмпортСлужебный.НайтиХарактеристикаНабора(стрк.ХарактеристикаНабора);
			
		КонецЦикла;
		
		////------------------------------------------------------     ТЧ ДополнительныеРеквизиты
		
		
		
		//ЗаказНаПеремещениеОбъект.ДополнительныеРеквизиты.Очистить();
		
		
		//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
		//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
		//	СтрокаТЧ = ЗаказНаПеремещениеОбъект.ДополнительныеРеквизиты.Добавить();
		
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Значение = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Свойство = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);
		
		//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;
		
		//КонецЦикла;
		
		
		//------------------------------------------------------ ФИНАЛ	
		
		
		ЗаказНаПеремещениеОбъект.ОбменДанными.Загрузка = Ложь;
		
		Если ЗаказНаПеремещениеОбъект.Проведен Тогда
			ЗаказНаПеремещениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ЗаказНаПеремещениеОбъект.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ЗаказНаПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ЗаказНаПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ЗаказНаПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ЗаказНаПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ЗаказНаПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
		
	Исключение
		
		СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
		"Объект не загружен! Ошибка в процессе загрузки документа "+ПредставлениеДокументаИзУПП+". Подробности: "+СообщениеОбОшибке);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка загрузки документа (УПП): %1. Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ЗаказНаПеремещениеОбъект;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьРасходныйОрдер(СтруктураОбъекта, СуществующийРОСсылка, ЗаказНаПеремещениеОбъект, Рез)
	
	РООбъект = Неопределено;
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "РасходныйОрдер (УПП) № "+деф.Number+" от "+строка(деф.Date);
	
	МассивСсылок = Новый Массив;
	ЭтоНеНовыйРО = НЕ ЗначениеЗаполнено(СуществующийРОСсылка.ВерсияДанных);
	Если ЭтоНеНовыйРО Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийРОСсылка);
	КонецЕсли;
	Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если ЭтоНеНовыйРО Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка блокировки цепочки документов для "+ПредставлениеДокументаИзУПП+". Подробности: "+СообщениеОбОшибке);
			ОтменитьТранзакцию();
			
			мЛоггер.ерр("Ошибка загрузки документа (УПП): %1. Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
			
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	Попытка
		
		Действие = ДействиеСДокументом(ЭтоНеНовыйРО, СуществующийРОСсылка, деф);
		Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
			ОтменитьТранзакцию();                                             
			мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ПредставлениеДокументаИзУПП);
			Рез.Вставить("РО", СуществующийРОСсылка);
			Возврат СуществующийРОСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
			РООбъект = СуществующийРОСсылка.ПолучитьОбъект();
			РООбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ПредставлениеДокументаИзУПП);
			Рез.Вставить("РО", СуществующийРОСсылка);
			Возврат РООбъект;
		КонецЕсли;
		
		Если Действие = ОБНОВИТЬ Тогда
			РООбъект = СуществующийРОСсылка.ПолучитьОбъект();
			мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ПредставлениеДокументаИзУПП);
		ИначеЕсли Действие = СОЗДАТЬ Тогда
			РООбъект = Документы.СборкаТоваров.СоздатьДокумент();
			СсылкаНового = Документы.СборкаТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			РООбъект.УстановитьСсылкуНового(СсылкаНового);
			мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ПредставлениеДокументаИзУПП);
		Иначе 
			ОтменитьТранзакцию();
			ТекстСообщения = "Действие = Неизвестое действие: "+Строка(Действие)+". Документ: " + ПредставлениеДокументаИзУПП;
			мЛоггер.ерр(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
		//РООбъект.Номер = деф.Number;
		РООбъект.Дата = деф.Date;
		РООбъект.ПометкаУдаления = деф.DeletionMark;
		
		РООбъект.Склад = мСкладОтправитель;
		РООбъект.Получатель = мСкладПолучатель;
		
		РООбъект.СкладскаяОперация = перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
		РООбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
		
		//РООбъект.ВсегоМест = деф.ВсегоМест;
		
		РООбъект.ДатаОтгрузки = деф.Date;
		
		РООбъект.Приоритет = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("ПриоритетДляРТУ_схема1_УПП", мВнешняяСистема);
		
		//гуид="";
		//ЕстьАтрибут = деф.ЗаданиеНаПеревозку.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	РООбъект.ЗаданиеНаПеревозку = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗаданиеНаПеревозку.Ref ) );
		//Иначе
		//	РООбъект.ЗаданиеНаПеревозку = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//РООбъект.ЗаданиеНаПеревозку = ксп_ИмпортСлужебный.НайтиЗаданиеНаПеревозку(деф.ЗаданиеНаПеревозку);
		
		//гуид="";
		//ЕстьАтрибут = деф.ЗонаОтгрузки.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	РООбъект.ЗонаОтгрузки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗонаОтгрузки.Ref ) );
		//Иначе
		//	РООбъект.ЗонаОтгрузки = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//РООбъект.ЗонаОтгрузки = ксп_ИмпортСлужебный.НайтиЗонаОтгрузки(деф.ЗонаОтгрузки);
		
		//РООбъект.Комментарий = деф.Комментарий;
		
		//гуид="";
		//ЕстьАтрибут = деф.Контролер.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	РООбъект.Контролер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Контролер.Ref ) );
		//Иначе
		//	РООбъект.Контролер = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//РООбъект.Контролер = ксп_ИмпортСлужебный.НайтиКонтролер(деф.Контролер);
		
		//гуид="";
		//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	РООбъект.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
		//Иначе
		//	РООбъект.Ответственный = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//РООбъект.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);
		
		//РООбъект.ОтгрузкаПоЗаданиюНаПеревозку = деф.ОтгрузкаПоЗаданиюНаПеревозку;
		
		//гуид="";
		//ЕстьАтрибут = деф.Получатель.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	РООбъект.Получатель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Получатель.Ref ) );
		//Иначе
		//	РООбъект.Получатель = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		
		
		//гуид="";
		//ЕстьАтрибут = деф.Помещение.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	РООбъект.Помещение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Помещение.Ref ) );
		//Иначе
		//	РООбъект.Помещение = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//РООбъект.Помещение = ксп_ИмпортСлужебный.НайтиПомещение(деф.Помещение);
		
		//РООбъект.ПорядокДоставки = деф.ПорядокДоставки;
		
		//РООбъект.РежимПросмотраПоТоварам = деф.РежимПросмотраПоТоварам;
		
		
		
		
		
		////------------------------------------------------------     ТЧ ТоварыПоРаспоряжениям
		
		
		
		РООбъект.ТоварыПоРаспоряжениям.Очистить();
		
		
		Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
			стрк = деф.ТЧТовары[счТовары];
			СтрокаТЧ = РООбъект.ТоварыПоРаспоряжениям.Добавить();
			
			//////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
			
			Если стрк.Номенклатура.Свойство("identification") Тогда
				// это полный объект номенклатуры.
				ТэгНоменклатуры = стрк.Номенклатура.identification;
			Иначе 
				ТэгНоменклатуры = стрк.Номенклатура;
			КонецЕсли;
			
			_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
			
			Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
				НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
				
				НомГУИД = "";
				Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
					Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
						НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТЧ.Номенклатура = _Номенклатура;
			
			///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)
			
			СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
			СтрокаТЧ.Количество = стрк.Количество;
			СтрокаТЧ.Распоряжение = ЗаказНаПеремещениеОбъект.Ссылка;
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Назначение = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Номенклатура = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Распоряжение.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Распоряжение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Распоряжение.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Распоряжение = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Серия = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);
			
			//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Характеристика = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	
			
		КонецЦикла;
		
		////------------------------------------------------------     ТЧ ОтгружаемыеТовары
		
		
		
		РООбъект.ОтгружаемыеТовары.Очистить();
		
		
		Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
			стрк = деф.ТЧТовары[счТовары];
			СтрокаТЧ = РООбъект.ОтгружаемыеТовары.Добавить();
			
			СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
			СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
			СтрокаТЧ.Количество = стрк.Количество;
			СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
			СтрокаТЧ.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
			
			
			//	_знч = "";
			//	ЕстьЗначение = стрк.Действие.свойство("Значение",_знч);
			//	Если ЕстьЗначение Тогда
			//		СтрокаТЧ.Действие = стрк.Действие.Значение;
			//	Иначе
			//		СтрокаТЧ.Действие = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			
			
			//	СтрокаТЧ.Количество = стрк.Количество;
			
			//	СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Назначение = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Номенклатура = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Серия = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);
			
			//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Упаковка = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.УпаковочныйЛист.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.УпаковочныйЛист = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.УпаковочныйЛист.Ref ) );
			//	Иначе
			//		СтрокаТЧ.УпаковочныйЛист = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.УпаковочныйЛист = ксп_ИмпортСлужебный.НайтиУпаковочныйЛист(стрк.УпаковочныйЛист);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.УпаковочныйЛистРодитель.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.УпаковочныйЛистРодитель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.УпаковочныйЛистРодитель.Ref ) );
			//	Иначе
			//		СтрокаТЧ.УпаковочныйЛистРодитель = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.УпаковочныйЛистРодитель = ксп_ИмпортСлужебный.НайтиУпаковочныйЛистРодитель(стрк.УпаковочныйЛистРодитель);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Характеристика = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);
			
			//	СтрокаТЧ.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста = стрк.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста;
			
			//	СтрокаТЧ.ЭтоУпаковочныйЛист = стрк.ЭтоУпаковочныйЛист;
			
		КонецЦикла;
		
		////------------------------------------------------------     ТЧ ДополнительныеРеквизиты
		
		
		
		//РООбъект.ДополнительныеРеквизиты.Очистить();
		
		
		//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
		//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
		//	СтрокаТЧ = РООбъект.ДополнительныеРеквизиты.Добавить();
		
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Значение = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Свойство = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);
		
		//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;
		
		//КонецЦикла;
		
		////------------------------------------------------------     ТЧ ШтрихкодыУпаковок
		
		
		
		//РООбъект.ШтрихкодыУпаковок.Очистить();
		
		
		//Для счТовары = 0 По деф.ТЧШтрихкодыУпаковок.Количество()-1 Цикл
		//	стрк = деф.ТЧШтрихкодыУпаковок[счТовары];
		//	СтрокаТЧ = РООбъект.ШтрихкодыУпаковок.Добавить();
		
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.ШтрихкодУпаковки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ШтрихкодУпаковки.Ref ) );
		//	Иначе
		//		СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.ШтрихкодУпаковки = ксп_ИмпортСлужебный.НайтиШтрихкодУпаковки(стрк.ШтрихкодУпаковки);
		
		//КонецЦикла;
		
		
		
		
		//------------------------------------------------------ ФИНАЛ
		
		РООбъект.ОбменДанными.Загрузка = Ложь;
		
		Если РООбъект.Проведен Тогда
			РООбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			РООбъект.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(РООбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(РООбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(РООбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(РООбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(РООбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
	Исключение
		
		СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
		"Объект не загружен! Ошибка в процессе загрузки документа "+ПредставлениеДокументаИзУПП+". Подробности: "+СообщениеОбОшибке);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка загрузки документа (УПП): %1. Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат РООбъект;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПеремещение(СтруктураОбъекта, СуществующийПеремещениеСсылка, РООбъект, ЗаказНаПеремещениеОбъект, Рез)
	
	ПеремещениеОбъект = Неопределено;
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаИзУПП = "Перемещение (УПП) № "+деф.Number+" от "+строка(деф.Date);
	
	МассивСсылок = Новый Массив;
	ЭтоНеНовыйПеремещение = НЕ ЗначениеЗаполнено(СуществующийПеремещениеСсылка.ВерсияДанных);
	Если ЭтоНеНовыйПеремещение Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(СуществующийПеремещениеСсылка);
	КонецЕсли;
	Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	
	// -------------------------------------------- БЛОКИРОВКА
	
	Если ЭтоНеНовыйПеремещение Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка блокировки цепочки документов для "+ПредставлениеДокументаИзУПП+". Подробности: "+СообщениеОбОшибке);
			ОтменитьТранзакцию();
			
			мЛоггер.ерр("Ошибка загрузки документа (УПП): %1. Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
			
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	Действие = ДействиеСДокументом(ЭтоНеНовыйПеремещение, СуществующийПеремещениеСсылка, деф);
	Если Действие = НЕ_ЗАГРУЖАТЬ Тогда
		ОтменитьТранзакцию();                                             
		мЛоггер.инфо("Действие = НЕ Загружать. Документ пропущен: %1", ПредставлениеДокументаИзУПП);
		Рез.Вставить("Перемещение", СуществующийПеремещениеСсылка);
		Возврат СуществующийПеремещениеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	Если Действие = ОТМЕНИТЬ_ПРОВЕДЕНИЕ Тогда
		ПеремещениеОбъект = СуществующийПеремещениеСсылка.ПолучитьОбъект();
		ПеремещениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		ЗафиксироватьТранзакцию();
		мЛоггер.инфо("Действие = Отменить проведение. Документ: %1", ПредставлениеДокументаИзУПП);
		Рез.Вставить("Перемещение", СуществующийПеремещениеСсылка);
		Возврат ПеремещениеОбъект;
	КонецЕсли;
	
	Если Действие = ОБНОВИТЬ Тогда
		ПеремещениеОбъект = СуществующийПеремещениеСсылка.ПолучитьОбъект();
		мЛоггер.инфо("Действие = Обновить. Документ будет обновлен: %1", ПредставлениеДокументаИзУПП);
	ИначеЕсли Действие = СОЗДАТЬ Тогда
		ПеремещениеОбъект = Документы.СборкаТоваров.СоздатьДокумент();
		СсылкаНового = Документы.СборкаТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ПеремещениеОбъект.УстановитьСсылкуНового(СсылкаНового);
		мЛоггер.инфо("Действие = Создать. Документ будет создан: %1", ПредставлениеДокументаИзУПП);
	Иначе 
		ОтменитьТранзакцию();
		ТекстСообщения = "Действие = Неизвестое действие: "+Строка(Действие)+". Документ: " + ПредставлениеДокументаИзУПП;
		мЛоггер.ерр(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	Попытка
		
		//ПеремещениеОбъект.Номер = деф.Number;
		ПеремещениеОбъект.Дата = деф.Date;
		ПеремещениеОбъект.ПометкаУдаления = деф.DeletionMark;
		
		ПеремещениеОбъект.ПеремещениеПоЗаказам = Истина;
		ПеремещениеОбъект.ЗаказНаПеремещение = ЗаказНаПеремещениеОбъект.Ссылка;
		
		ПеремещениеОбъект.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
		
		ПеремещениеОбъект.СкладОтправитель = мСкладОтправитель;
		
		ПеремещениеОбъект.СкладПолучатель = мСкладПолучатель;
		
		ПеремещениеОбъект.ПеремещениеПоЗаказам = Истина;
		
		// ЕНС пока не заполняем. Нужно изучить поведение документов в режиме отладки
		//ПеремещениеОбъект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
		
		ПеремещениеОбъект.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		
		//гуид="";
		//ЕстьАтрибут = деф.Автор.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.Автор = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Автор.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.Автор = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.Автор = ксп_ИмпортСлужебный.НайтиАвтор(деф.Автор);
		
		//ПеремещениеОбъект.АдресДоставки = деф.АдресДоставки;
		
		//ПеремещениеОбъект.АдресДоставкиЗначение = деф.АдресДоставкиЗначение;
		
		//ПеремещениеОбъект.АдресДоставкиЗначенияПолей = деф.АдресДоставкиЗначенияПолей;
		
		//ПеремещениеОбъект.АдресДоставкиПеревозчика = деф.АдресДоставкиПеревозчика;
		
		//ПеремещениеОбъект.АдресДоставкиПеревозчикаЗначение = деф.АдресДоставкиПеревозчикаЗначение;
		
		//ПеремещениеОбъект.АдресДоставкиПеревозчикаЗначенияПолей = деф.АдресДоставкиПеревозчикаЗначенияПолей;
		
		//гуид="";
		//ЕстьАтрибут = деф.БанковскийСчетОрганизации.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.БанковскийСчетОрганизации = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.БанковскийСчетОрганизации.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.БанковскийСчетОрганизации = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.БанковскийСчетОрганизации = ксп_ИмпортСлужебный.НайтиБанковскийСчетОрганизации(деф.БанковскийСчетОрганизации);
		
		//_знч = "";
		//ЕстьЗначение = деф.ВариантПриемкиТоваров.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ПеремещениеОбъект.ВариантПриемкиТоваров = деф.ВариантПриемкиТоваров.Значение;
		//Иначе
		//	ПеремещениеОбъект.ВариантПриемкиТоваров = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.ВариантПриемкиТоваров = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантПриемкиТоваров(деф.ВариантПриемкиТоваров);
		
		//гуид="";
		//ЕстьАтрибут = деф.ВидЦены.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.ВидЦены = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ВидЦены.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.ВидЦены = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(деф.ВидЦены);
		
		//ПеремещениеОбъект.ВидыЗапасовУказаныВручную = деф.ВидыЗапасовУказаныВручную;
		
		//ПеремещениеОбъект.ВремяДоставкиПо = деф.ВремяДоставкиПо;
		
		//ПеремещениеОбъект.ВремяДоставкиС = деф.ВремяДоставкиС;
		
		//гуид="";
		//ЕстьАтрибут = деф.ГлавныйБухгалтер.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.ГлавныйБухгалтер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ГлавныйБухгалтер.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.ГлавныйБухгалтер = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.ГлавныйБухгалтер = ксп_ИмпортСлужебный.НайтиГлавныйБухгалтер(деф.ГлавныйБухгалтер);
		
		//ПеремещениеОбъект.ДатаПоступления = деф.ДатаПоступления;
		
		//гуид="";
		//ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.ДокументОснование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДокументОснование.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.ДокументОснование = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.ДокументОснование = ксп_ИмпортСлужебный.НайтиДокументОснование(деф.ДокументОснование);
		
		//ПеремещениеОбъект.ДополнительнаяИнформацияПоДоставке = деф.ДополнительнаяИнформацияПоДоставке;
		
		//гуид="";
		//ЕстьАтрибут = деф.ЗонаДоставки.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.ЗонаДоставки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗонаДоставки.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.ЗонаДоставки = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.ЗонаДоставки = ксп_ИмпортСлужебный.НайтиЗонаДоставки(деф.ЗонаДоставки);
		
		//ПеремещениеОбъект.Исправление = деф.Исправление;
		
		//гуид="";
		//ЕстьАтрибут = деф.ИсправляемыйДокумент.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.ИсправляемыйДокумент = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ИсправляемыйДокумент.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.ИсправляемыйДокумент = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.ИсправляемыйДокумент = ксп_ИмпортСлужебный.НайтиИсправляемыйДокумент(деф.ИсправляемыйДокумент);
		
		//ПеремещениеОбъект.Комментарий = деф.Комментарий;
		
		//гуид="";
		//ЕстьАтрибут = деф.НаправлениеДеятельности.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.НаправлениеДеятельности = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.НаправлениеДеятельности.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.НаправлениеДеятельности = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.НаправлениеДеятельности = ксп_ИмпортСлужебный.НайтиНаправлениеДеятельности(деф.НаправлениеДеятельности);
		
		//гуид="";
		//ЕстьАтрибут = деф.ОрганизацияПолучатель.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.ОрганизацияПолучатель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ОрганизацияПолучатель.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.ОрганизацияПолучатель = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.ОрганизацияПолучатель = ксп_ИмпортСлужебный.НайтиОрганизацияПолучатель(деф.ОрганизацияПолучатель);
		
		//ПеремещениеОбъект.ОсобыеУсловияПеревозки = деф.ОсобыеУсловияПеревозки;
		
		//ПеремещениеОбъект.ОсобыеУсловияПеревозкиОписание = деф.ОсобыеУсловияПеревозкиОписание;
		
		//гуид="";
		//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.Ответственный = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);
		
		//гуид="";
		//ЕстьАтрибут = деф.ПеревозчикПартнер.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.ПеревозчикПартнер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ПеревозчикПартнер.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.ПеревозчикПартнер = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.ПеревозчикПартнер = ксп_ИмпортСлужебный.НайтиПеревозчикПартнер(деф.ПеревозчикПартнер);
		
		//гуид="";
		//ЕстьАтрибут = деф.ПеремещениеАктаОРасхождениях.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.ПеремещениеАктаОРасхождениях = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ПеремещениеАктаОРасхождениях.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.ПеремещениеАктаОРасхождениях = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.ПеремещениеАктаОРасхождениях = ксп_ИмпортСлужебный.НайтиПеремещениеАктаОРасхождениях(деф.ПеремещениеАктаОРасхождениях);
		
		//_знч = "";
		//ЕстьЗначение = деф.ПеремещениеПодДеятельность.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ПеремещениеОбъект.ПеремещениеПодДеятельность = деф.ПеремещениеПодДеятельность.Значение;
		//Иначе
		//	ПеремещениеОбъект.ПеремещениеПодДеятельность = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.ПеремещениеПодДеятельность = ксп_ИмпортСлужебный.НайтиПеречисление_ПеремещениеПодДеятельность(деф.ПеремещениеПодДеятельность);
		
		//гуид="";
		//ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Подразделение.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.Подразделение = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(деф.Подразделение);
		
		//гуид="";
		//ЕстьАтрибут = деф.Руководитель.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.Руководитель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Руководитель.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.Руководитель = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.Руководитель = ксп_ИмпортСлужебный.НайтиРуководитель(деф.Руководитель);
		
		//гуид="";
		//ЕстьАтрибут = деф.Сделка.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.Сделка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Сделка.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.Сделка = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.Сделка = ксп_ИмпортСлужебный.НайтиСделка(деф.Сделка);
		
		//_знч = "";
		//ЕстьЗначение = деф.СостояниеЗаполненияМногооборотнойТары.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ПеремещениеОбъект.СостояниеЗаполненияМногооборотнойТары = деф.СостояниеЗаполненияМногооборотнойТары.Значение;
		//Иначе
		//	ПеремещениеОбъект.СостояниеЗаполненияМногооборотнойТары = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.СостояниеЗаполненияМногооборотнойТары = ксп_ИмпортСлужебный.НайтиПеречисление_СостояниеЗаполненияМногооборотнойТары(деф.СостояниеЗаполненияМногооборотнойТары);
		
		//_знч = "";
		//ЕстьЗначение = деф.СпособДоставки.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ПеремещениеОбъект.СпособДоставки = деф.СпособДоставки.Значение;
		//Иначе
		//	ПеремещениеОбъект.СпособДоставки = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.СпособДоставки = ксп_ИмпортСлужебный.НайтиПеречисление_СпособДоставки(деф.СпособДоставки);
		
		//гуид="";
		//ЕстьАтрибут = деф.СторнируемыйДокумент.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	ПеремещениеОбъект.СторнируемыйДокумент = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.СторнируемыйДокумент.Ref ) );
		//Иначе
		//	ПеремещениеОбъект.СторнируемыйДокумент = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//ПеремещениеОбъект.СторнируемыйДокумент = ксп_ИмпортСлужебный.НайтиСторнируемыйДокумент(деф.СторнируемыйДокумент);
		
		//_знч = "";
		//ЕстьЗначение = деф.ХозяйственнаяОперация.свойство("Значение",_знч);
		//Если ЕстьЗначение Тогда
		//	ПеремещениеОбъект.ХозяйственнаяОперация = деф.ХозяйственнаяОперация.Значение;
		//Иначе
		//	ПеремещениеОбъект.ХозяйственнаяОперация = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		
		
		//------------------------------------------------------     ТЧ Товары
		ПеремещениеОбъект.Товары.Очистить();
		
		
		Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
			стрк = деф.ТЧТовары[счТовары];
			СтрокаТЧ = ПеремещениеОбъект.Товары.Добавить();
			
			//////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
			
			Если стрк.Номенклатура.Свойство("identification") Тогда
				// это полный объект номенклатуры.
				ТэгНоменклатуры = стрк.Номенклатура.identification;
			Иначе 
				ТэгНоменклатуры = стрк.Номенклатура;
			КонецЕсли;
			
			_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
			
			Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
				НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
				
				НомГУИД = "";
				Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
					Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
						НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТЧ.Номенклатура = _Номенклатура;
			
			///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)
			
			СтрокаТЧ.Количество = стрк.Количество;
			СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
			СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
			СтрокаТЧ.ЗаказНаПеремещение = ЗаказНаПеремещениеОбъект.Ссылка;	
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.АналитикаУчетаНаборов.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.АналитикаУчетаНаборов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНаборов.Ref ) );
			//	Иначе
			//		СтрокаТЧ.АналитикаУчетаНаборов = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.АналитикаУчетаНаборов = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНаборов(стрк.АналитикаУчетаНаборов);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.АналитикаУчетаНоменклатуры.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНоменклатуры.Ref ) );
			//	Иначе
			//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.ЗаказНаПеремещение.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.ЗаказНаПеремещение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЗаказНаПеремещение.Ref ) );
			//	Иначе
			//		СтрокаТЧ.ЗаказНаПеремещение = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.ЗаказНаПеремещение = ксп_ИмпортСлужебный.НайтиЗаказНаПеремещение(стрк.ЗаказНаПеремещение);
			
			//	СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;
			
			//	СтрокаТЧ.КодСтроки = стрк.КодСтроки;
			
			//	СтрокаТЧ.Количество = стрк.Количество;
			
			//	СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Назначение = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.НазначениеОтправителя.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.НазначениеОтправителя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НазначениеОтправителя.Ref ) );
			//	Иначе
			//		СтрокаТЧ.НазначениеОтправителя = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.НазначениеОтправителя = ксп_ИмпортСлужебный.НайтиНазначениеОтправителя(стрк.НазначениеОтправителя);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Номенклатура = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.НоменклатураНабора.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.НоменклатураНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураНабора.Ref ) );
			//	Иначе
			//		СтрокаТЧ.НоменклатураНабора = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.НоменклатураНабора = ксп_ИмпортСлужебный.НайтиНоменклатураНабора(стрк.НоменклатураНабора);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Сделка.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Сделка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Сделка.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Сделка = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Сделка = ксп_ИмпортСлужебный.НайтиСделка(стрк.Сделка);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Серия = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);
			
			//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;
			
			//	СтрокаТЧ.СтатусУказанияСерийОтправитель = стрк.СтатусУказанияСерийОтправитель;
			
			//	СтрокаТЧ.СтатусУказанияСерийПолучатель = стрк.СтатусУказанияСерийПолучатель;
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
			//	Иначе
			//		СтрокаТЧ.Упаковка = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);
			
			//	гуид="";
			//	ЕстьАтрибут = стрк.ХарактеристикаНабора.свойство("Ref",гуид);
			//	Если ЕстьАтрибут Тогда
			//		СтрокаТЧ.ХарактеристикаНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаНабора.Ref ) );
			//	Иначе
			//		СтрокаТЧ.ХарактеристикаНабора = Неопределено;
			//	КонецЕсли;
			//	// на случай, если есть метод поиска ссылки:
			//	СтрокаТЧ.ХарактеристикаНабора = ксп_ИмпортСлужебный.НайтиХарактеристикаНабора(стрк.ХарактеристикаНабора);
			
		КонецЦикла;
		
		////------------------------------------------------------     ТЧ ВидыЗапасов
		
		
		//ПеремещениеОбъект.ВидыЗапасов.Очистить();
		
		
		//Для счТовары = 0 По деф.ТЧВидыЗапасов.Количество()-1 Цикл
		//	стрк = деф.ТЧВидыЗапасов[счТовары];
		//	СтрокаТЧ = ПеремещениеОбъект.ВидыЗапасов.Добавить();
		
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.АналитикаУчетаНоменклатуры.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНоменклатуры.Ref ) );
		//	Иначе
		//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.ВидЗапасов.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.ВидЗапасов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЗапасов.Ref ) );
		//	Иначе
		//		СтрокаТЧ.ВидЗапасов = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.ВидЗапасов = ксп_ИмпортСлужебный.НайтиВидЗапасов(стрк.ВидЗапасов);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.ВидЗапасовПолучателя.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.ВидЗапасовПолучателя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ВидЗапасовПолучателя.Ref ) );
		//	Иначе
		//		СтрокаТЧ.ВидЗапасовПолучателя = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.ВидЗапасовПолучателя = ксп_ИмпортСлужебный.НайтиВидЗапасовПолучателя(стрк.ВидЗапасовПолучателя);
		
		//	СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;
		
		//	СтрокаТЧ.Количество = стрк.Количество;
		
		//	СтрокаТЧ.КоличествоПоРНПТ = стрк.КоличествоПоРНПТ;
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Назначение = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.НомерГТД.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.НомерГТД = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НомерГТД.Ref ) );
		//	Иначе
		//		СтрокаТЧ.НомерГТД = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.НомерГТД = ксп_ИмпортСлужебный.НайтиНомерГТД(стрк.НомерГТД);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Сделка.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Сделка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Сделка.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Сделка = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Сделка = ксп_ИмпортСлужебный.НайтиСделка(стрк.Сделка);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Серия = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);
		
		//КонецЦикла;
		
		////------------------------------------------------------     ТЧ Серии
		
		
		//ПеремещениеОбъект.Серии.Очистить();
		
		
		//Для счТовары = 0 По деф.ТЧСерии.Количество()-1 Цикл
		//	стрк = деф.ТЧСерии[счТовары];
		//	СтрокаТЧ = ПеремещениеОбъект.Серии.Добавить();
		
		
		//	СтрокаТЧ.Количество = стрк.Количество;
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Назначение = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.НазначениеОтправителя.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.НазначениеОтправителя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НазначениеОтправителя.Ref ) );
		//	Иначе
		//		СтрокаТЧ.НазначениеОтправителя = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.НазначениеОтправителя = ксп_ИмпортСлужебный.НайтиНазначениеОтправителя(стрк.НазначениеОтправителя);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Номенклатура = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Серия = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Характеристика = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);
		
		//КонецЦикла;
		
		////------------------------------------------------------     ТЧ ДополнительныеРеквизиты
		
		
		//ПеремещениеОбъект.ДополнительныеРеквизиты.Очистить();
		
		
		//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
		//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
		//	СтрокаТЧ = ПеремещениеОбъект.ДополнительныеРеквизиты.Добавить();
		
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Значение = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);
		
		//	гуид="";
		//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
		//	Если ЕстьАтрибут Тогда
		//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
		//	Иначе
		//		СтрокаТЧ.Свойство = Неопределено;
		//	КонецЕсли;
		//	// на случай, если есть метод поиска ссылки:
		//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);
		
		//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;
		
		//КонецЦикла;
		
		
		//------------------------------------------------------ ФИНАЛ
		
		
		ПеремещениеОбъект.ОбменДанными.Загрузка = Ложь;
		
		Если ПеремещениеОбъект.Проведен Тогда
			ПеремещениеОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе 
			ПеремещениеОбъект.Записать();
		КонецЕсли;
		
		// Документ будет помещен в Отложенное проведение
		jsonText = "";
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ПеремещениеОбъект, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
		
		
	Исключение
		
		СообщениеОбОшибке=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
		"Объект не загружен! Ошибка в процессе загрузки документа "+ПредставлениеДокументаИзУПП+". Подробности: "+СообщениеОбОшибке);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		мЛоггер.ерр("Ошибка загрузки документа (УПП): %1. Подробности: %2", ПредставлениеДокументаИзУПП, СообщениеОбОшибке);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ПеремещениеОбъект;
	
КонецФункции

#КонецОбласти


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти


#Область Служебные

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗаполнитьРеквизиты(СтруктураОбъекта, ОбъектДанных, СкладЕРП)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition; 
	
	//------------------------------------- Заполнение реквизитов -----------------------------------
	
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ДатаПоступления = ОбъектДанных.Дата;
	ОбъектДанных.Количество = деф.Количество;
	ОбъектДанных.КоличествоУпаковок = деф.Количество;
	ОбъектДанных.Склад = СкладЕРП;
	ОбъектДанных.Комментарий = "[УПП № "+Строка(деф.Number)+" от "+Строка(ОбъектДанных.Дата)+"]"+деф.Комментарий;
	
	///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
	
	Если деф.Номенклатура.Свойство("identification") Тогда
		// это полный объект номенклатуры.
		ТэгНоменклатуры = деф.Номенклатура.identification;
	Иначе 
		ТэгНоменклатуры = деф.Номенклатура;
	КонецЕсли;
	
	_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
	
	Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
		НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
		
		НомГУИД = "";
		Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
			Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
				НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектДанных.Номенклатура = _Номенклатура;
	
	///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)	
	
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);
	ОбъектДанных.Статус = Перечисления.СтатусыСборокТоваров.СобраноРазобрано;
	ОбъектДанных.СтатусУказанияСерий = 0;	
	ОбъектДанных.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(деф.ХарактеристикаНоменклатуры);
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
	
	//------------------------------------------------------     ТЧ Товары
	
	ОбъектДанных.Товары.Очистить();
	
	Для счТовары = 0 По деф.ТЧКомплектующие.Количество()-1 Цикл
		стрк = деф.ТЧКомплектующие[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();
		
		
		//СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);
		
		СтрокаТЧ.ДоляСтоимости = стрк.ДоляСтоимости;
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
		СтрокаТЧ.КодСтроки = счТовары + 1;
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		
		//////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (НАЧАЛО)
		
		Если стрк.Номенклатура.Свойство("identification") Тогда
			// это полный объект номенклатуры.
			ТэгНоменклатуры = стрк.Номенклатура.identification;
		Иначе 
			ТэгНоменклатуры = стрк.Номенклатура;
		КонецЕсли;
		
		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(ТэгНоменклатуры);
		
		Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И
			НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
			
			НомГУИД = "";
			Если ТэгНоменклатуры.Свойство("Ref", НомГУИД) Тогда
				Если НеНайденнаяНоменклатураМассив.Найти(НомГУИД) = Неопределено Тогда
					НеНайденнаяНоменклатураМассив.Добавить(НомГУИД);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = _Номенклатура;
		
		///////////////////////////////////////////         НЕНАЙДЕННАЯ НОМЕНКЛАТУРА (КОНЕЦ)
		
		СтрокаТЧ.СтатусУказанияСерий = 0;
		
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		
	КонецЦикла;
	
	//------------------------------------------------------ ФИНАЛ
	
	Возврат ОбъектДанных;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ДействиеСДокументом(ЭтоНовый, СуществующийДокСсылка, деф) Экспорт
	
	
	Если НЕ ЭтоНовый Тогда	
		
		Если СуществующийДокСсылка.ПометкаУдаления Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;		
			
		ИначеЕсли НЕ СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат НЕ_ЗАГРУЖАТЬ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		ИначеЕсли СуществующийДокСсылка.Проведен Тогда
			
			Если деф.DeletionMark = Истина Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли НЕ деф.isPosted Тогда
				Возврат ОТМЕНИТЬ_ПРОВЕДЕНИЕ;
			ИначеЕсли деф.isPosted Тогда
				Возврат ОБНОВИТЬ;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // новый документ
		
		Если деф.DeletionMark = Истина Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли НЕ деф.isPosted Тогда
			Возврат НЕ_ЗАГРУЖАТЬ;
		ИначеЕсли деф.isPosted Тогда
			Возврат СОЗДАТЬ;
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат НЕ_ЗАГРУЖАТЬ;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("Номенклатура");
	мРеквизиты.Добавить("Характеристика");
	мРеквизиты.Добавить("Склад");
	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: ДокументСсылка
//
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)
	
	СуществующийОбъект 		= Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе 
		
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		
		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;	
	
КонецФункции

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)
	
	СуществующийОбъект 		= Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Возврат СуществующийОбъект;
	
КонецФункции

// Описание_метода
//
// Параметры:
//  Параметр1   - Тип1 -
//
Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти


мВнешняяСистема = "UPP";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
СобиратьНенайденнуюНоменклатуру = Истина;
НеНайденнаяНоменклатураМассив = Новый Массив;

НЕ_ЗАГРУЖАТЬ = 1;
СОЗДАТЬ = 2;
ОБНОВИТЬ = 3;
ОТМЕНИТЬ_ПРОВЕДЕНИЕ = 4;
