Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем jsonText;
Перем мСкладПолучатель;
Перем мСкладОтправитель;
Перем мДоговор;
Перем СобиратьНенайденнуюНоменклатуру Экспорт; // дли интерактивного импорта
Перем НеНайденнаяНоменклатураМассив;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.3");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Документ_РеализацияТоваровУслуг_дСубплагин");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Документ_РеализацияТоваровУслуг_дСубплагин");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Документ_РеализацияТоваровУслуг_дСубплагин",
		"Форма_Плагин_RabbitMQ_импорт_из_УПП_Документ_РеализацияТоваровУслуг_дСубплагин",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Возвращает структуру. Поля различаются в зависимости от режима загрузки.
// Это нужно для отладки, а не для обычного режима работы.
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, пjsonText = "") Экспорт

	Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.РеализацияТоваровУслуг") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	// поиск ссылки на эл спр "Доп отчеты и обработки"
	Рез = ксп_ИмпортСлужебный.ПолучитьСсылкаНаДопОбработкуПоВидуДокумента( деф, СтруктураОбъекта.type );
	
	Если ТипЗнч(Рез) <> Тип("Структура") Тогда
		ВидДокумента = СтруктураОбъекта.type;
		Склад = Неопределено;
		СкладОтправитель = Неопределено;
		СкладПолучатель = Неопределено;
		ТекстСообщения = "Не найден субплагин! Метод ПолучитьСсылкаНаДопОбработкуПоВидуДокумента() вернул пустое значение!";
		ЛогикаСклад = Неопределено;
		ЛогикаПеремещения = Неопределено;
		Обработчик = Неопределено;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
														ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик);
		Возврат Неопределено;
		
	КонецЕсли;	
	
	Субплагин = Рез.Субплагин;
	
	Если НЕ ЗначениеЗаполнено(Субплагин) Тогда
		ВидДокумента = СтруктураОбъекта.type;
		Склад = Рез.СкладУПП;
		СкладОтправитель = Неопределено;
		СкладПолучатель = Неопределено;
		ТекстСообщения = "Не найден субПлагин. В структуре возврата метода ПолучитьСсылкаНаДопОбработкуПоВидуДокумента() поле субплагин - пустое!";
		ЛогикаСклад = Рез.ЛогикаРаботыПоСкладу;
		ЛогикаПеремещения = Неопределено;
		Обработчик = Субплагин;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
														ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик);
		Возврат Неопределено;
	КонецЕсли;
	
	// создание объекта из эл спр "Доп отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(Субплагин);
	ОбъектОбработчика = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(Субплагин);	
	
	// запуск импорта
	СозданныйОбъектСсылка = ОбъектОбработчика.ЗагрузитьОбъект(СтруктураОбъекта);
	
	Возврат  СозданныйОбъектСсылка;

		
КонецФункции


#Область Тестирование

// вызывается из формы
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(JsonText) export

	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(JsonText);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
		
		НеНайденнаяНоменклатураМассив = Новый Массив;
		
		Для Каждого эл из СтруктураОбъекта Цикл
			ЗагрузитьОбъект(эл);
		КонецЦикла;                       
		
		Рез = Новый Структура;
		Рез.Вставить("НеНайденнаяНоменклатураМассив", НеНайденнаяНоменклатураМассив);
		
		Возврат Рез;
		
	Иначе
	    Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	КонецЕсли;
	
	
КонецФункции 

// вызывается из формы
Функция Тест_Схема_1_ПеремещениеНаФулфилмент(JsonText) Экспорт
	
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция Тест_Схема_2_ПередачаНаКомиссию(JsonText) Экспорт
		
	
КонецФункции

#КонецОбласти 	

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)

	СуществующийОбъект 		= Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе 
		
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);

		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;	
    
КонецФункции



Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


 мВнешняяСистема = "upp";
 
 ИмяСобытияЖР = "ИмпортИзУПП_РеализацияТоваровУслуг";
 
 СобиратьНенайденнуюНоменклатуру = Ложь;
 
 НеНайденнаяНоменклатураМассив = Новый Массив;
 