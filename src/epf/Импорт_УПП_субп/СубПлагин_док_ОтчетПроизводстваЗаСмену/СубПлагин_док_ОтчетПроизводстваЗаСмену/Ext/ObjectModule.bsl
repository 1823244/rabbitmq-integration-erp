Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем мТаблицаПартийЗаказа;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.22");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СубПлагин_док_ОтчетПроизводстваЗаСмену");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СубПлагин_док_ОтчетПроизводстваЗаСмену");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : СубПлагин_док_ОтчетПроизводстваЗаСмену",
		"Форма_СубПлагин_док_ОтчетПроизводстваЗаСмену",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти 	


#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "", СкладЕРП = Неопределено ) Экспорт
		
	Рез = СоздатьДокументыПоСхеме(СтруктураОбъекта, СкладЕРП);
	
	Возврат Рез;
		
КонецФункции

Функция  СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка) 
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ПеремещениеТоваров"); 
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка",ДанныеСсылка);
	Возврат Блокировка;
КонецФункции
	
#КонецОбласти 	


#Область Схема_1


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: структура
//
Функция СоздатьДокументыПоСхеме(СтруктураОбъекта, СкладЕРП)
	
	Рез = Новый Структура;
	Рез.Вставить("ЗаказНаПроизводство", Неопределено);
	Рез.Вставить("ЗаказНаПеремещение", Неопределено);
	Рез.Вставить("ПО", Неопределено);
	Рез.Вставить("Перемещение", Неопределено);
	Рез.Вставить("ЭтапПроизводства", Неопределено);
	Рез.Вставить("ДвиженияПродукции", Неопределено);

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ДокументИзУПП = "ОтчетПроизводстваЗаСмену (УПП) № "+деф.Number+" от "+строка(деф.Date);
	
	// если это загружается новый объект, то ЗначениеЗаполнено(СуществующийЗаказНаПроизводство) = ЛОЖЬ
	СуществующийЗаказНаПроизводство 		= СоздатьПолучитьСсылкуДокумента(id.Ref, "ЗаказНаПроизводство2_2");
	СуществующийЭтапСсылка 					= СоздатьПолучитьСсылкуДокумента(id.Ref, "ЭтапПроизводства2_2");
	СуществующийДвижениеПродукцииСсылка 	= СоздатьПолучитьСсылкуДокумента(id.Ref, "ДвижениеПродукцииИМатериалов");
	СуществующийЗаказНаПеремещение 			= СоздатьПолучитьСсылкуДокумента(id.Ref, "ЗаказНаПеремещение");
	СуществующийПеремещение 				= СоздатьПолучитьСсылкуДокумента(id.Ref, "ПеремещениеТоваров");
	СуществующийПО 							= СоздатьПолучитьСсылкуДокумента(id.Ref, "ПриходныйОрдерНаТовары");
	
	МассивСсылок = Новый Массив;
	Если ЗначениеЗаполнено(СуществующийЗаказНаПроизводство) Тогда
		МассивСсылок.Добавить(СуществующийЗаказНаПроизводство);
	КонецЕсли;
	Если ЗначениеЗаполнено(СуществующийЭтапСсылка) Тогда
		МассивСсылок.Добавить(СуществующийЭтапСсылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(СуществующийДвижениеПродукцииСсылка) Тогда
		МассивСсылок.Добавить(СуществующийДвижениеПродукцииСсылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(СуществующийЗаказНаПеремещение) Тогда
		МассивСсылок.Добавить(СуществующийЗаказНаПеремещение);
	КонецЕсли;
	Если ЗначениеЗаполнено(СуществующийПеремещение) Тогда
		МассивСсылок.Добавить(СуществующийПеремещение);
	КонецЕсли;
	Если ЗначениеЗаполнено(СуществующийПО) Тогда
		МассивСсылок.Добавить(СуществующийПО);
	КонецЕсли;
	
	Комментарий = "";    
	
	СкладПолучательЕРП = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("УПП-ЗаказНаПроизводство-СкладПолучатель", мВнешняяСистема);
	
	// -------------------------------------------- БЛОКИРОВКА
	НачатьТранзакцию();
	
	Если МассивСсылок.Количество() >0 Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
		
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки цепочки документов для "+ДокументИзУПП+". Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			
		
		Если СуществующийДвижениеПродукцииСсылка.Проведен Тогда
			обк = СуществующийДвижениеПродукцииСсылка.ПолучитьОбъект();
			обк.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;  
		Если СуществующийЭтапСсылка.Проведен Тогда
			обк= СуществующийЭтапСсылка.ПолучитьОбъект();
			обк.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;  
		Если СуществующийЗаказНаПроизводство.Проведен Тогда
			обк= СуществующийЗаказНаПроизводство.ПолучитьОбъект();
			обк.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		Если СуществующийПО.Проведен Тогда
			обк = СуществующийПО.ПолучитьОбъект();
			обк.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;  
		Если СуществующийПеремещение.Проведен Тогда
			обк= СуществующийПеремещение.ПолучитьОбъект();
			обк.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;  
		Если СуществующийЗаказНаПеремещение.Проведен Тогда
			обк= СуществующийЗаказНаПеремещение.ПолучитьОбъект();
			обк.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		обк = Неопределено;
		
		// создание
		
		ЗаказНаПроизводствоОбъект = СоздатьЗаказНаПроизводство(СтруктураОбъекта, 
			СуществующийЗаказНаПроизводство, СкладЕРП);
			
			
		мТаблицаПартийЗаказа = НайтиВсеПартииЗаказа(ЗаказНаПроизводствоОбъект.Ссылка);
		
		
		ЭтапОбъект = СоздатьЭтап(СтруктураОбъекта, 
			ЗаказНаПроизводствоОбъект, СуществующийЭтапСсылка);
		
		ДвПродОбъект = СоздатьДвижениеПродукцииИМатериалов(СтруктураОбъекта, 
			ЗаказНаПроизводствоОбъект, ЭтапОбъект, СуществующийДвижениеПродукцииСсылка, СкладПолучательЕРП);
			
			
		ЗаказНаПеремещениеОбъект = СоздатьЗаказНаПеремещение(СтруктураОбъекта, 
			СуществующийЗаказНаПеремещение, СкладЕРП, СкладПолучательЕРП, ЗаказНаПроизводствоОбъект);
			
		ПеремещениеОбъект = СоздатьПеремещение(СтруктураОбъекта, 
			СуществующийПеремещение, СкладЕРП, СкладПолучательЕРП, ЗаказНаПроизводствоОбъект, ЗаказНаПеремещениеОбъект);
			
		ПООбъект = СоздатьПО(СтруктураОбъекта, 
			СуществующийПО, СкладПолучательЕРП, ЗаказНаПеремещениеОбъект, ПеремещениеОбъект, СкладЕРП);

		ЗафиксироватьТранзакцию();          		

		ТЗДокументов = Новый ТаблицаЗначений;
		ТЗДокументов.Колонки.Добавить("ДокументСсылка");
		
		Рез.Вставить("ЗаказНаПроизводство", ЗаказНаПроизводствоОбъект.Ссылка); 
		ТЗДокументов.Добавить().ДокументСсылка = ЗаказНаПроизводствоОбъект.Ссылка;
		Рез.Вставить("ЗаказНаПеремещение", ЗаказНаПеремещениеОбъект.Ссылка);
		ТЗДокументов.Добавить().ДокументСсылка = ЗаказНаПеремещениеОбъект.Ссылка;
		Рез.Вставить("Перемещение", ПеремещениеОбъект.Ссылка);
		ТЗДокументов.Добавить().ДокументСсылка = ПеремещениеОбъект.Ссылка;
		Рез.Вставить("ПО", ПООбъект.Ссылка);
		ТЗДокументов.Добавить().ДокументСсылка = ПООбъект.Ссылка;
		Рез.Вставить("ЭтапПроизводства", ЭтапОбъект.Ссылка);
		ТЗДокументов.Добавить().ДокументСсылка = ЭтапОбъект.Ссылка;
		Рез.Вставить("ДвиженияПродукции", ДвПродОбъект.Ссылка);  
		ТЗДокументов.Добавить().ДокументСсылка = ДвПродОбъект.Ссылка;
		
		Ключ = Строка(Новый УникальныйИдентификатор());
		ПараметрыПроведения = Новый Массив;
		ПараметрыПроведения.Добавить(ТЗДокументов);
		
		//ФоновыеЗадания.Выполнить("ксп_ИмпортСлужебный.ПровестиПакетДокументов", ПараметрыПроведения, Ключ, 
		//	"Проведение пакета документов: Импорт из УПП 'Отчет производства за смену'");
			
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа "+ДокументИзУПП+". Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	

	Возврат Рез;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьЗаказНаПроизводство(СтруктураОбъекта, СуществующийЗаказСсылка, СкладЕРП)
	
	ОбъектДанных = Неопределено;
	
	деф = СтруктураОбъекта.definition;
		
	Если ЗначениеЗаполнено(СуществующийЗаказСсылка.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийЗаказСсылка.ПолучитьОбъект();
		ПредставлениеОбъекта = Строка(СуществующийЗаказСсылка);
	Иначе 
		ОбъектДанных = Документы.ЗаказНаПроизводство2_2.СоздатьДокумент();
		СсылкаНового = Документы.ЗаказНаПроизводство2_2.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.identification.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
    ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Дата = деф.Date;
	
    //Склад = ксп_ИмпортСлужебный.НайтиСклад(деф.Склад, мВнешняяСистема);


	//_знч = "";
	//ЕстьЗначение = деф.ВариантОбособления.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ВариантОбособления = деф.ВариантОбособления.Значение;
	//Иначе
	//	ОбъектДанных.ВариантОбособления = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ВариантОбособления = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантОбособления(деф.ВариантОбособления);

	ОбъектДанных.ДатаПотребности = деф.Date;

	//ОбъектДанных.ДинамическаяСтруктура = деф.ДинамическаяСтруктура;

	//гуид="";
	//ЕстьАтрибут = деф.Договор.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Договор = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Договор.Ref ) );
	//Иначе
	//	ОбъектДанных.Договор = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Договор = ксп_ИмпортСлужебный.НайтиДоговор(деф.Договор);

	ОбъектДанных.ДоговорНеОбязателен = Истина;

	//гуид="";
	//ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ДокументОснование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДокументОснование.Ref ) );
	//Иначе
	//	ОбъектДанных.ДокументОснование = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ДокументОснование = ксп_ИмпортСлужебный.НайтиДокументОснование(деф.ДокументОснование);

	//_знч = "";
	//ЕстьЗначение = деф.ЗаказПодДеятельность.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ЗаказПодДеятельность = деф.ЗаказПодДеятельность.Значение;
	//Иначе
	//	ОбъектДанных.ЗаказПодДеятельность = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ЗаказПодДеятельность = ксп_ИмпортСлужебный.НайтиПеречисление_ЗаказПодДеятельность(деф.ЗаказПодДеятельность);

	//ОбъектДанных.Комментарий = деф.Комментарий;

	//ОбъектДанных.МаксимальныйКодСтроки = деф.МаксимальныйКодСтроки;

	//гуид="";
	//ЕстьАтрибут = деф.Назначение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Назначение.Ref ) );
	//Иначе
	//	ОбъектДанных.Назначение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(деф.Назначение);

	//гуид="";
	//ЕстьАтрибут = деф.НазначениеПродукция.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.НазначениеПродукция = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.НазначениеПродукция.Ref ) );
	//Иначе
	//	ОбъектДанных.НазначениеПродукция = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.НазначениеПродукция = ксп_ИмпортСлужебный.НайтиНазначениеПродукция(деф.НазначениеПродукция);

	//гуид="";
	//ЕстьАтрибут = деф.НаправлениеДеятельности.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.НаправлениеДеятельности = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.НаправлениеДеятельности.Ref ) );
	//Иначе
	//	ОбъектДанных.НаправлениеДеятельности = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.НаправлениеДеятельности = ксп_ИмпортСлужебный.НайтиНаправлениеДеятельности(деф.НаправлениеДеятельности);

	ОбъектДанных.НачатьНеРанее = деф.Date;

	//ОбъектДанных.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется = деф.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеИспользуется;

	//ОбъектДанных.ОбособленноеОбеспечениеМатериаловИРабот = деф.ОбособленноеОбеспечениеМатериаловИРабот;

	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

	//гуид="";
	//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
	//Иначе
	//	ОбъектДанных.Ответственный = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);

	//ОбъектДанных.Очередь = деф.Очередь;

	//гуид="";
	//ЕстьАтрибут = деф.ПартияПроизводства.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ПартияПроизводства = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ПартияПроизводства.Ref ) );
	//Иначе
	//	ОбъектДанных.ПартияПроизводства = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ПартияПроизводства = ксп_ИмпортСлужебный.НайтиПартияПроизводства(деф.ПартияПроизводства);

	//гуид="";
	//ЕстьАтрибут = деф.Партнер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Партнер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Партнер.Ref ) );
	//Иначе
	//	ОбъектДанных.Партнер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Партнер = ксп_ИмпортСлужебный.НайтиПартнер(деф.Партнер);

	ОбъектДанных.Подразделение = 
		РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("УПП-ЗаказНаПроизводство-Подразделение-диспетчер", мВнешняяСистема);

	ОбъектДанных.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний", Истина);

	ОбъектДанных.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;

	ОбъектДанных.СпособРаспределенияЗатратНаВыходныеИзделия = 
		РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("УПП-ЗаказНаПроизводство-СпособРаспределенияЗатратНаВыходныеИзделия", мВнешняяСистема);
	

	ОбъектДанных.Статус = Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству;
	
	ОбъектДанных.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций;

	//ОбъектДанных.УкрупненныйЗаказПоНазначениямПродукции = деф.УкрупненныйЗаказПоНазначениямПродукции;


	//ОбъектДанных.УникальныйИдентификаторСтрока = деф.УникальныйИдентификаторСтрока;

	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство;



	//------------------------------------------------------     ТЧ Продукция



	ОбъектДанных.Продукция.Очистить();


	Для счТовары = 0 По деф.ТЧПродукция.Количество()-1 Цикл
		стрк = деф.ТЧПродукция[счТовары];
		СтрокаТЧ = ОбъектДанных.Продукция.Добавить();
		
		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		Если НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
			Сообщить(стрк.Номенклатура.ref);
		КонецЕсли;
        СтрокаТЧ.Номенклатура = _Номенклатура;
		
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		
		СтрокаТЧ.Склад = СкладЕРП; // это параметр метода

		//гуид="";
		//ЕстьАтрибут = стрк.АналитикаАктивовПассивов.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.АналитикаАктивовПассивов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаАктивовПассивов.Ref ) );
		//Иначе
		//	СтрокаТЧ.АналитикаАктивовПассивов = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.АналитикаАктивовПассивов = ксп_ИмпортСлужебный.НайтиАналитикаАктивовПассивов(стрк.АналитикаАктивовПассивов);

		//гуид="";
		//ЕстьАтрибут = стрк.АналитикаРасходов.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.АналитикаРасходов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаРасходов.Ref ) );
		//Иначе
		//	СтрокаТЧ.АналитикаРасходов = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.АналитикаРасходов = ксп_ИмпортСлужебный.НайтиАналитикаРасходов(стрк.АналитикаРасходов);

		//СтрокаТЧ.ДоляСтоимости = стрк.ДоляСтоимости;

		//СтрокаТЧ.ДоляСтоимостиНаЕдиницу = стрк.ДоляСтоимостиНаЕдиницу;

 
		//гуид="";
		//ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
		//Иначе
		//	СтрокаТЧ.Назначение = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

		//гуид="";
		//ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
		//Иначе
		//	СтрокаТЧ.Номенклатура = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

		//СтрокаТЧ.Отменено = стрк.Отменено;

		//гуид="";
		//ЕстьАтрибут = стрк.Подразделение.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Подразделение.Ref ) );
		//Иначе
		//	СтрокаТЧ.Подразделение = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(стрк.Подразделение);

		//гуид="";
		//ЕстьАтрибут = стрк.ПричинаОтмены.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.ПричинаОтмены = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ПричинаОтмены.Ref ) );
		//Иначе
		//	СтрокаТЧ.ПричинаОтмены = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.ПричинаОтмены = ксп_ИмпортСлужебный.НайтиПричинаОтмены(стрк.ПричинаОтмены);

		//гуид="";
		//ЕстьАтрибут = стрк.Спецификация.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Спецификация = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Спецификация.Ref ) );
		//Иначе
		//	СтрокаТЧ.Спецификация = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Спецификация = ксп_ИмпортСлужебный.НайтиСпецификация(стрк.Спецификация);

		//СтрокаТЧ.СписатьНаРасходы = стрк.СписатьНаРасходы;

		//гуид="";
		//ЕстьАтрибут = стрк.СтатьяРасходов.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.СтатьяРасходов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.СтатьяРасходов.Ref ) );
		//Иначе
		//	СтрокаТЧ.СтатьяРасходов = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.СтатьяРасходов = ксп_ИмпортСлужебный.НайтиСтатьяРасходов(стрк.СтатьяРасходов);


	КонецЦикла;

	//------------------------------------------------------     ТЧ ДополнительныеРеквизиты



//	ОбъектДанных.ДополнительныеРеквизиты.Очистить();


//	Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
//		стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
//		СтрокаТЧ = ОбъектДанных.ДополнительныеРеквизиты.Добавить();


//		//гуид="";
//		//ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
//		//Если ЕстьАтрибут Тогда
//		//	СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
//		//Иначе
//		//	СтрокаТЧ.Значение = Неопределено;
//		//КонецЕсли;
//		//// на случай, если есть метод поиска ссылки:
//		//СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);

//		//гуид="";
//		//ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
//		//Если ЕстьАтрибут Тогда
//		//	СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
//		//Иначе
//		//	СтрокаТЧ.Свойство = Неопределено;
//		//КонецЕсли;
//		//// на случай, если есть метод поиска ссылки:
//		//СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);

//		//СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

//	КонецЦикла;




	//------------------------------------------------------ ФИНАЛ
	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();
	
	jsonText = "";
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	Возврат ОбъектДанных;
	
КонецФункции

// Создает документ "ЭтапПроизводства2_2"
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьЭтап(СтруктураОбъекта, ЗаказНаПроизводствоОбъект, СуществующийЭтапСсылка)
	ОбъектДанных = Неопределено;
	
	деф = СтруктураОбъекта.definition;
		
	Если ЗначениеЗаполнено(СуществующийЭтапСсылка.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийЭтапСсылка.ПолучитьОбъект();
		ПредставлениеОбъекта = Строка(СуществующийЭтапСсылка);
	Иначе 
		ОбъектДанных = Документы.ЭтапПроизводства2_2.СоздатьДокумент();
		СсылкаНового = Документы.ЭтапПроизводства2_2.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.identification.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ОбъектДанных.УстановитьНовыйНомер();
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	//ОбъектДанных.Номер = id.Number;
	ОбъектДанных.УстановитьНовыйНомер();
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



	ОбъектДанных.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ОбъектДанных.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	//ОбъектДанных.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(деф.ВидЦены);
	//ОбъектДанных.ВыполнениеРаботОднойДатой = деф.ВыполнениеРаботОднойДатой;
	ОбъектДанных.ВыпускПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	//ОбъектДанных.ДатаВыполненияРабот = деф.ДатаВыполненияРабот;
	//ОбъектДанных.ДатаОтгрузки = деф.ДатаОтгрузки;
	ОбъектДанных.ДатаПроизводства = ТекущаяДатаСеанса();
	//ОбъектДанных.ДатаРасхода = деф.ДатаРасхода;
	//ОбъектДанных.ДатаРеестраДокументов = ТекущаяДатаСеанса();
	//ОбъектДанных.ДинамическаяСтруктура = деф.ДинамическаяСтруктура;
	//ОбъектДанных.ДлительностьДоВыпуска = деф.ДлительностьДоВыпуска;
	//ОбъектДанных.ДлительностьЭтапа = деф.ДлительностьЭтапа;
	//ОбъектДанных.Договор = ксп_ИмпортСлужебный.НайтиДоговор(деф.Договор);
	ОбъектДанных.ЕдиницаИзмеренияДлительностиЭтапа = Перечисления.ЕдиницыИзмеренияВремени.День;
	ОбъектДанных.ЕдиницаИзмеренияЗавершающегоБуфера = Перечисления.ЕдиницыИзмеренияВремени.День;
	ОбъектДанных.ЕдиницаИзмеренияПредварительногоБуфера = Перечисления.ЕдиницыИзмеренияВремени.День;
	
	//ВАЖНО!
	ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ = Истина;

	//ОбъектДанных.ЗавершающийБуфер = деф.ЗавершающийБуфер;
	//ОбъектДанных.ЗаказПереработчику = ксп_ИмпортСлужебный.НайтиЗаказПереработчику(деф.ЗаказПереработчику);
	//ОбъектДанных.Исполнитель = ксп_ИмпортСлужебный.НайтиИсполнитель(деф.Исполнитель);
	//ОбъектДанных.КоличествоНаЕдиницуПартииВыпуска = деф.КоличествоНаЕдиницуПартииВыпуска;
	//ОбъектДанных.КоличествоУпаковокОтменено = деф.КоличествоУпаковокОтменено;

	//ОбъектДанных.КоличествоУпаковокПлан = ; //ПОД ВОПРОСОМ! КАК посчитать? сложить по всем строкам? в примере - кол. из одной строки

	//ОбъектДанных.КоличествоУпаковокФакт = деф.КоличествоУпаковокФакт;
	//ОбъектДанных.Комментарий = деф.Комментарий;
	//ОбъектДанных.КомментарийПриКонвертации = деф.КомментарийПриКонвертации;
	//ОбъектДанных.КоэффициентМаршрутнойКарты = деф.КоэффициентМаршрутнойКарты;
	//ОбъектДанных.МаршрутнаяКарта = ксп_ИмпортСлужебный.НайтиМаршрутнаяКарта(деф.МаршрутнаяКарта);
	//ОбъектДанных.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(деф.Назначение);
	//ОбъектДанных.НазначениеПродукция = ксп_ИмпортСлужебный.НайтиНазначениеПродукция(деф.НазначениеПродукция);

	ОбъектДанных.НаименованиеЭтапа = "Этап 1";

	//ОбъектДанных.НаправлениеДеятельности = ксп_ИмпортСлужебный.НайтиНаправлениеДеятельности(деф.НаправлениеДеятельности);
	//ОбъектДанных.НеОтгружатьЧастями = деф.НеОтгружатьЧастями;
	//ОбъектДанных.Непрерывный = деф.Непрерывный;

	ОбъектДанных.НомерНаПечать = ОбъектДанных.Номер;
	ОбъектДанных.НомерПартииЗапуска = 1;
	ОбъектДанных.НомерСледующегоЭтапа = 0;
	ОбъектДанных.НомерЭтапа = 1;
	ОбъектДанных.НомерЭтапаВПартииЗапуска = 1;

	//ОбъектДанных.ОперацияКакРаспоряжениеВыработки = деф.ОперацияКакРаспоряжениеВыработки;
	ОбъектДанных.ОперацияРеестраДокументов = Перечисления.ХозяйственныеОперации.ВыпускПродукции;
	ОбъектДанных.Организация = ЗаказНаПроизводствоОбъект.Организация;
	//ОбъектДанных.ОставитьИзделияУПереработчика = деф.ОставитьИзделияУПереработчика;
	//ОбъектДанных.ОтветственноеПодразделение = ксп_ИмпортСлужебный.НайтиОтветственноеПодразделение(деф.ОтветственноеПодразделение);
	//ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);

	//ОбъектДанных.Партнер = ксп_ИмпортСлужебный.НайтиПартнер(деф.Партнер);
	//ОбъектДанных.ПланироватьНеРанее = ксп_ИмпортСлужебный.НайтиПланироватьНеРанее(деф.ПланироватьНеРанее);
	//ОбъектДанных.ПланироватьРаботуВидовРабочихЦентров = деф.ПланироватьРаботуВидовРабочихЦентров;
	ОбъектДанных.Подразделение = ЗаказНаПроизводствоОбъект.Подразделение;
	//ОбъектДанных.ПорядокРаботыВидовРабочихЦентров = ксп_ИмпортСлужебный.НайтиПеречисление_ПорядокРаботыВидовРабочихЦентров(деф.ПорядокРаботыВидовРабочихЦентров);
	//ОбъектДанных.ПредварительныйБуфер = деф.ПредварительныйБуфер;
	//ОбъектДанных.ПричинаЗадержкиВыполненияЭтапа = ксп_ИмпортСлужебный.НайтиПричинаЗадержкиВыполненияЭтапа(деф.ПричинаЗадержкиВыполненияЭтапа);
	//ОбъектДанных.ПроизводствоНаСтороне = деф.ПроизводствоНаСтороне;
	//ОбъектДанных.ПроизводствоНаСтороне2_5 = деф.ПроизводствоНаСтороне2_5;
	ОбъектДанных.ПроизводствоОднойДатой = Истина;
	ОбъектДанных.Распоряжение = ЗаказНаПроизводствоОбъект.Ссылка;
	//ОбъектДанных.РасходОднойДатой = деф.РасходОднойДатой;
	//ОбъектДанных.РучноеРазмещениеВГрафике = деф.РучноеРазмещениеВГрафике;
	//ОбъектДанных.Спецификация = ксп_ИмпортСлужебный.НайтиСпецификация(деф.Спецификация);
	ОбъектДанных.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	ОбъектДанных.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат;
	//ОбъектДанных.СтатьяКалькуляции = ксп_ИмпортСлужебный.НайтиСтатьяКалькуляции(деф.СтатьяКалькуляции);
	ОбъектДанных.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций;
	//ОбъектДанных.ТребуетсяЗаполнитьПоОперациям = деф.ТребуетсяЗаполнитьПоОперациям;
	//ОбъектДанных.УпаковкаОтменено = ксп_ИмпортСлужебный.НайтиУпаковкаОтменено(деф.УпаковкаОтменено);
	//ОбъектДанных.УпаковкаПлан = ксп_ИмпортСлужебный.НайтиУпаковкаПлан(деф.УпаковкаПлан);
	//ОбъектДанных.УпаковкаФакт = ксп_ИмпортСлужебный.НайтиУпаковкаФакт(деф.УпаковкаФакт);
	ОбъектДанных.ФактическоеНачалоЭтапа = ТекущаяДатаСеанса();
	//ОбъектДанных.ФактическоеОкончаниеЭтапа = деф.ФактическоеОкончаниеЭтапа;
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство;
	//ОбъектДанных.Этап = ксп_ИмпортСлужебный.НайтиЭтап(деф.Этап);
	//ОбъектДанных.ЯвляетсяНазначениемПродукции = деф.ЯвляетсяНазначениемПродукции;




	//------------------------------------------------------     ТЧ ВыходныеИзделия



	ОбъектДанных.ВыходныеИзделия.Очистить();


	Для счТовары = 0 По ЗаказНаПроизводствоОбъект.Продукция.Количество()-1 Цикл
		стрк = ЗаказНаПроизводствоОбъект.Продукция[счТовары];
		СтрокаТЧ = ОбъектДанных.ВыходныеИзделия.Добавить();

		//СтрокаТЧ.АналитикаАктивовПассивов = ксп_ИмпортСлужебный.НайтиАналитикаАктивовПассивов(стрк.АналитикаАктивовПассивов);
		//СтрокаТЧ.АналитикаРасходов = ксп_ИмпортСлужебный.НайтиАналитикаРасходов(стрк.АналитикаРасходов);

		//ВАЖНО! Заполнять надо, но пока оставим, должно заполниться при записи
		//СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);

		СтрокаТЧ.ДатаПроизводства = ТекущаяДатаСеанса();
		СтрокаТЧ.ДоляСтоимости = 1;
		СтрокаТЧ.ДоляСтоимостиНаЕдиницу = 0;
		СтрокаТЧ.ИдентификаторСтроки = СТрока(Новый УникальныйИдентификатор());
		СтрокаТЧ.ИспользуетсяАвтовыбор = Ложь;
		СтрокаТЧ.КодСтроки = счТовары + 1;
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;
		//СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);
		//СтрокаТЧ.НастройкаСчетовУчета = ксп_ИмпортСлужебный.НайтиНастройкаСчетовУчета(стрк.НастройкаСчетовУчета);
		СтрокаТЧ.Номенклатура = стрк.Номенклатура;
		//СтрокаТЧ.ОбработатьПоСпецификации = стрк.ОбработатьПоСпецификации;
		//СтрокаТЧ.Отменено = стрк.Отменено;
		//СтрокаТЧ.ОформитьОтчетДавальцу = стрк.ОформитьОтчетДавальцу;
		СтрокаТЧ.Период = КонецМесяца(ОбъектДанных.Дата);
		СтрокаТЧ.Подразделение = ЗаказНаПроизводствоОбъект.Подразделение;
		СтрокаТЧ.Получатель = стрк.Склад;
		//СтрокаТЧ.ПричинаОтмены = ксп_ИмпортСлужебный.НайтиПричинаОтмены(стрк.ПричинаОтмены);

		//ВАЖНО! Должна быть Истина!
		СтрокаТЧ.Произведено = Истина;

		//СтрокаТЧ.СведенияАвтовыбора = стрк.СведенияАвтовыбора;
		//СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);
		//СтрокаТЧ.Спецификация = ксп_ИмпортСлужебный.НайтиСпецификация(стрк.Спецификация);
		//СтрокаТЧ.СписатьНаРасходы = стрк.СписатьНаРасходы;
		СтрокаТЧ.СтатусУказанияСерий = 0;
		СтрокаТЧ.СтатусУказанияСерийОтправитель = 0;
		СтрокаТЧ.СтатусУказанияСерийПолучатель = 0;
		//СтрокаТЧ.СтатьяРасходов = ксп_ИмпортСлужебный.НайтиСтатьяРасходов(стрк.СтатьяРасходов);
		СтрокаТЧ.Сумма = 0;
		СтрокаТЧ.Упаковка = стрк.Упаковка;
		СтрокаТЧ.Характеристика = стрк.Характеристика;
		СтрокаТЧ.Цена = 0;
		//СтрокаТЧ.ЭтапПотребитель = ксп_ИмпортСлужебный.НайтиЭтапПотребитель(стрк.ЭтапПотребитель);

	КонецЦикла;

	
 	//ВАЖНО! Нужно создать партию! По первой строке в документе.
	ОбъектДанных.ПартияПроизводства = НайтиСоздатьПартию(ЗаказНаПроизводствоОбъект.Продукция[0].Номенклатура
		,ЗаказНаПроизводствоОбъект.Продукция[0].Характеристика, ЗаказНаПроизводствоОбъект); 



	ОбъектДанных.МаксимальныйКодСтрокиИзделия = ОбъектДанных.ВыходныеИзделия.Количество();
	ОбъектДанных.МаксимальныйКодСтрокиОбеспечение = ОбъектДанных.ОбеспечениеМатериаламиИРаботами.Количество();
	ОбъектДанных.МаксимальныйКодСтрокиТрудозатраты = ОбъектДанных.Трудозатраты.Количество();
	ОбъектДанных.МаксимальныйКодСтрокиЭкономия = ОбъектДанных.ЭкономияМатериалов.Количество();	

	
	//------------------------------------------------------ ФИНАЛ
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();
	
	jsonText = "";
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	Возврат ОбъектДанных;
	
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьДвижениеПродукцииИМатериалов(СтруктураОбъекта, ЗаказНаПроизводствоОбъект, ЭтапОбъект, СуществующийДвижениеПродукцииСсылка, СкладПолучательЕРП)
	ОбъектДанных = Неопределено;
	
	деф = СтруктураОбъекта.definition;
		
	Если ЗначениеЗаполнено(СуществующийДвижениеПродукцииСсылка.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийДвижениеПродукцииСсылка.ПолучитьОбъект();
		ПредставлениеОбъекта = Строка(СуществующийДвижениеПродукцииСсылка);
	Иначе 
		ОбъектДанных = Документы.ДвижениеПродукцииИМатериалов.СоздатьДокумент();
		СсылкаНового = Документы.ДвижениеПродукцииИМатериалов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.identification.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ОбъектДанных.УстановитьНовыйНомер();
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	//ОбъектДанных.Номер = id.Number;
	ОбъектДанных.УстановитьНовыйНомер();
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	


	ОбъектДанных.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ОбъектДанных.ВариантПриемкиТоваров = 
		Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	//ОбъектДанных.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(деф.ВидЦены);
	//ОбъектДанных.ВидыЗапасовУказаныВручную = деф.ВидыЗапасовУказаныВручную;
	//ОбъектДанных.ДатаПоступления = деф.ДатаПоступления;
	//ОбъектДанных.ДокументОснование = ксп_ИмпортСлужебный.НайтиДокументОснование(деф.ДокументОснование);
	ОбъектДанных.ЕстьМаркируемаяПродукцияГИСМ = Истина;
	//ОбъектДанных.Исправление = деф.Исправление;
	//ОбъектДанных.ИсправляемыйДокумент = ксп_ИмпортСлужебный.НайтиИсправляемыйДокумент(деф.ИсправляемыйДокумент);
	//ОбъектДанных.Комментарий = деф.Комментарий;
	ОбъектДанных.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	//ОбъектДанных.НаправлениеДеятельности = ксп_ИмпортСлужебный.НайтиНаправлениеДеятельности(деф.НаправлениеДеятельности);
	ОбъектДанных.Организация = ЗаказНаПроизводствоОбъект.Организация;
	//ОбъектДанных.ОрганизацияПолучатель = ксп_ИмпортСлужебный.НайтиОрганизацияПолучатель(деф.ОрганизацияПолучатель);
	//ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);
	ОбъектДанных.Отправитель = ЗаказНаПроизводствоОбъект.Подразделение;
	ОбъектДанных.Получатель = СкладПолучательЕРП;
	ОбъектДанных.ПоРаспоряжениям = Истина;
	//ОбъектДанных.ПоТоварамКОформлениюОтчетовКомитенту = деф.ПоТоварамКОформлениюОтчетовКомитенту;
	ОбъектДанных.Распоряжение = ЭтапОбъект.Ссылка;
	//ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = ксп_ИмпортСлужебный.НайтиПеречисление_СостояниеЗаполненияМногооборотнойТары(деф.СостояниеЗаполненияМногооборотнойТары);
	ОбъектДанных.Статус = Перечисления.СтатусыДвиженияПродукцииИМатериалов.Принято;
	//ОбъектДанных.СторнируемыйДокумент = ксп_ИмпортСлужебный.НайтиСторнируемыйДокумент(деф.СторнируемыйДокумент);
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства;




	//------------------------------------------------------     ТЧ Товары



	ОбъектДанных.Товары.Очистить();


	Для счТовары = 0 По ЗаказНаПроизводствоОбъект.Продукция.Количество()-1 Цикл
		стрк = ЗаказНаПроизводствоОбъект.Продукция[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();


		//СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);
		//СтрокаТЧ.ГруппаПродукции = ксп_ИмпортСлужебный.НайтиГруппаПродукции(стрк.ГруппаПродукции);

		СтрокаТЧ.ИдентификаторСтроки = строка(Новый УникальныйИдентификатор());
		СтрокаТЧ.КодСтроки = счТовары + 1;
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;
		//СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);
		//СтрокаТЧ.НазначениеОтправителя = ксп_ИмпортСлужебный.НайтиНазначениеОтправителя(стрк.НазначениеОтправителя);
		СтрокаТЧ.Номенклатура = стрк.Номенклатура;
		//СтрокаТЧ.ПобочноеИзделие = стрк.ПобочноеИзделие;
		СтрокаТЧ.Распоряжение = ЭтапОбъект.Ссылка;
		//СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);
		СтрокаТЧ.СтатусУказанияСерий = 0;
		СтрокаТЧ.СтатусУказанияСерийОтправитель = 0;
		СтрокаТЧ.СтатусУказанияСерийПолучатель = 0;
		СтрокаТЧ.Сумма = 0;
		СтрокаТЧ.Упаковка = стрк.Упаковка;
		СтрокаТЧ.Характеристика = стрк.Характеристика;
		СтрокаТЧ.Цена = 0;

	КонецЦикла;

		

	//------------------------------------------------------ ФИНАЛ
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();
	
	jsonText = "";
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	Возврат ОбъектДанных;
	
	
КонецФункции

Функция СоздатьЗаказНаПеремещение(СтруктураОбъекта, 
			СуществующийЗаказНаПеремещениеСсылка, СкладЕРП, СкладПолучательЕРП, ЗаказНаПроизводствоОбъект)
	ОбъектДанных = Неопределено;
	
	деф = СтруктураОбъекта.definition;
		
	Если ЗначениеЗаполнено(СуществующийЗаказНаПеремещениеСсылка.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийЗаказНаПеремещениеСсылка.ПолучитьОбъект();
		ПредставлениеОбъекта = Строка(СуществующийЗаказНаПеремещениеСсылка);
	Иначе 
		ОбъектДанных = Документы.ЗаказНаПеремещение.СоздатьДокумент();
		СсылкаНового = Документы.ЗаказНаПеремещение.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.identification.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
    
	//ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.СкладОтправитель = СкладЕРП;
	ОбъектДанных.СкладПолучатель = СкладПолучательЕРП;
	ОбъектДанных.Организация 		= ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Статус 			= Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
    ОбъектДанных.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ОбъектДанных.ЖелаемаяДатаПоступления = ОбъектДанных.Дата;
	ОбъектДанных.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний", Истина);
	ОбъектДанных.Подразделение = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("УПП-ЗаказНаПроизводство-Подразделение-диспетчер", мВнешняяСистема);
	ОбъектДанных.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	
	//------------------------------------------------------     ТЧ Товары
    ОбъектДанных.Товары.Очистить();


	Для счТовары = 0 По деф.ТЧПродукция.Количество()-1 Цикл
		стрк = деф.ТЧПродукция[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();

		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		СтрокаТЧ.НачалоОтгрузки = ОбъектДанных.Дата;
		СтрокаТЧ.КодСтроки = счТовары + 1;
		
	КонецЦикла;

	//------------------------------------------------------ ФИНАЛ
	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();
	
	jsonText = "";
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	Возврат ОбъектДанных;
КонецФункции
			
Функция СоздатьПеремещение(СтруктураОбъекта, 
			СуществующийПеремещениеСсылка, СкладЕРП, СкладПолучательЕРП, ЗаказНаПроизводствоОбъект, ЗаказНаПеремещениеОбъект)
	ОбъектДанных = Неопределено;
	
	деф = СтруктураОбъекта.definition;
		
	Если ЗначениеЗаполнено(СуществующийПеремещениеСсылка.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийПеремещениеСсылка.ПолучитьОбъект();
		ПредставлениеОбъекта = Строка(СуществующийПеремещениеСсылка);
	Иначе 
		ОбъектДанных = Документы.ПеремещениеТоваров.СоздатьДокумент();
		СсылкаНового = Документы.ПеремещениеТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.identification.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
    //ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.СкладОтправитель = СкладЕРП;
	ОбъектДанных.СкладПолучатель = СкладПолучательЕРП;
	ОбъектДанных.ЗаказНаПеремещение = ЗаказНаПеремещениеОбъект.Ссылка;
	ОбъектДанных.ПеремещениеПоЗаказам = Истина;
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Статус = Перечисления.СтатусыПеремещенийТоваров.Отгружено;
    ОбъектДанных.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ОбъектДанных.Подразделение = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("УПП-ЗаказНаПроизводство-Подразделение-диспетчер", мВнешняяСистема);
	ОбъектДанных.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	

	//------------------------------------------------------     ТЧ Товары
    ОбъектДанных.Товары.Очистить();

	Для счТовары = 0 По ЗаказНаПеремещениеОбъект.Товары.Количество()-1 Цикл
		стрк = ЗаказНаПеремещениеОбъект.Товары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();

		СтрокаТЧ.Номенклатура = стрк.Номенклатура;
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;
		СтрокаТЧ.Характеристика = стрк.Характеристика;
		СтрокаТЧ.ЗаказНаПеремещение = ЗаказНаПеремещениеОбъект.Ссылка;	
		СтрокаТЧ.КодСтроки = стрк.КодСтроки;
		
	//	гуид="";
	//	ЕстьАтрибут = стрк.АналитикаУчетаНаборов.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.АналитикаУчетаНаборов = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНаборов.Ref ) );
	//	Иначе
	//		СтрокаТЧ.АналитикаУчетаНаборов = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.АналитикаУчетаНаборов = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНаборов(стрк.АналитикаУчетаНаборов);

	//	гуид="";
	//	ЕстьАтрибут = стрк.АналитикаУчетаНоменклатуры.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.АналитикаУчетаНоменклатуры.Ref ) );
	//	Иначе
	//		СтрокаТЧ.АналитикаУчетаНоменклатуры = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.АналитикаУчетаНоменклатуры = ксп_ИмпортСлужебный.НайтиАналитикаУчетаНоменклатуры(стрк.АналитикаУчетаНоменклатуры);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ЗаказНаПеремещение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ЗаказНаПеремещение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ЗаказНаПеремещение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ЗаказНаПеремещение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ЗаказНаПеремещение = ксп_ИмпортСлужебный.НайтиЗаказНаПеремещение(стрк.ЗаказНаПеремещение);

	//	СтрокаТЧ.ИдентификаторСтроки = стрк.ИдентификаторСтроки;

	//	СтрокаТЧ.КодСтроки = стрк.КодСтроки;

	//	СтрокаТЧ.Количество = стрк.Количество;

	//	СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Назначение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.НазначениеОтправителя.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НазначениеОтправителя = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НазначениеОтправителя.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НазначениеОтправителя = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НазначениеОтправителя = ксп_ИмпортСлужебный.НайтиНазначениеОтправителя(стрк.НазначениеОтправителя);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Номенклатура = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

	//	гуид="";
	//	ЕстьАтрибут = стрк.НоменклатураНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НоменклатураНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НоменклатураНабора = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НоменклатураНабора = ксп_ИмпортСлужебный.НайтиНоменклатураНабора(стрк.НоменклатураНабора);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Сделка.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Сделка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Сделка.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Сделка = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Сделка = ксп_ИмпортСлужебный.НайтиСделка(стрк.Сделка);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

	//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

	//	СтрокаТЧ.СтатусУказанияСерийОтправитель = стрк.СтатусУказанияСерийОтправитель;

	//	СтрокаТЧ.СтатусУказанияСерийПолучатель = стрк.СтатусУказанияСерийПолучатель;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Упаковка = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);

		//	гуид="";
	//	ЕстьАтрибут = стрк.ХарактеристикаНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ХарактеристикаНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ХарактеристикаНабора = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ХарактеристикаНабора = ксп_ИмпортСлужебный.НайтиХарактеристикаНабора(стрк.ХарактеристикаНабора);

	КонецЦикла;
	
	
	//------------------------------------------------------ ФИНАЛ
	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();
	
	jsonText = "";
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	Возврат ОбъектДанных;
	
КонецФункции
		
Функция СоздатьПО(СтруктураОбъекта, 
			СуществующийПОСсылка, СкладПолучательЕРП, ЗаказНаПеремещениеОбъект, ПеремещениеОбъект, СкладЕРП)
			
	ОбъектДанных = Неопределено;
	
	деф = СтруктураОбъекта.definition;
		
	Если ЗначениеЗаполнено(СуществующийПОСсылка.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийПОСсылка.ПолучитьОбъект();
		ПредставлениеОбъекта = Строка(СуществующийПОСсылка);
	Иначе 
		ОбъектДанных = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		СсылкаНового = Документы.ПриходныйОрдерНаТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураОбъекта.identification.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
    //ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	ОбъектДанных.Дата = деф.Date;
    ОбъектДанных.Распоряжение = ЗаказНаПеремещениеОбъект.Ссылка;

	
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



	//ОбъектДанных.ВсегоМест = деф.ВсегоМест;

	ОбъектДанных.ДатаВходящегоДокумента = ПеремещениеОбъект.Дата;

	//гуид="";
	//ЕстьАтрибут = деф.ЗонаПриемки.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ЗонаПриемки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗонаПриемки.Ref ) );
	//Иначе
	//	ОбъектДанных.ЗонаПриемки = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ЗонаПриемки = ксп_ИмпортСлужебный.НайтиЗонаПриемки(деф.ЗонаПриемки);

	//гуид="";
	//ЕстьАтрибут = деф.Исполнитель.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Исполнитель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Исполнитель.Ref ) );
	//Иначе
	//	ОбъектДанных.Исполнитель = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Исполнитель = ксп_ИмпортСлужебный.НайтиИсполнитель(деф.Исполнитель);

	//ОбъектДанных.Комментарий = деф.Комментарий;

	ОбъектДанных.НомерВходящегоДокумента = ПеремещениеОбъект.Номер;

	//гуид="";
	//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
	//Иначе
	//	ОбъектДанных.Ответственный = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);

	ОбъектДанных.Отправитель = СкладЕРП;

	ОбъектДанных.Распоряжение = ПеремещениеОбъект.ссылка;

	ОбъектДанных.РаспоряжениеНаНесколькоСкладов = Ложь;

	ОбъектДанных.РежимПросмотраПоТоварам = 0;

	ОбъектДанных.Склад = СкладПолучательЕРП;

	ОбъектДанных.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;

	//_знч = "";
	//ЕстьЗначение = деф.СостояниеЗаполненияМногооборотнойТары.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = деф.СостояниеЗаполненияМногооборотнойТары.Значение;
	//Иначе
	//	ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = ксп_ИмпортСлужебный.НайтиПеречисление_СостояниеЗаполненияМногооборотнойТары(деф.СостояниеЗаполненияМногооборотнойТары);

	ОбъектДанных.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;

	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров; //todo. уточнить




	//------------------------------------------------------     ТЧ Товары

	ОбъектДанных.Товары.Очистить();


	Для счТовары = 0 По ЗаказНаПеремещениеОбъект.Товары.Количество()-1 Цикл
		стрк = ЗаказНаПеремещениеОбъект.Товары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();

		СтрокаТЧ.Номенклатура = стрк.Номенклатура;
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;
		СтрокаТЧ.Характеристика = стрк.Характеристика;
		СтрокаТЧ.Упаковка = стрк.Упаковка;

		//гуид="";
		//ЕстьАтрибут = стрк.ДокументОтгрузки.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.ДокументОтгрузки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ДокументОтгрузки.Ref ) );
		//Иначе
		//	СтрокаТЧ.ДокументОтгрузки = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.ДокументОтгрузки = ксп_ИмпортСлужебный.НайтиДокументОтгрузки(стрк.ДокументОтгрузки);

		//СтрокаТЧ.Количество = стрк.Количество;

		//СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

		//СтрокаТЧ.Комментарий = стрк.Комментарий;

		//гуид="";
		//ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
		//Иначе
		//	СтрокаТЧ.Назначение = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

		//гуид="";
		//ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
		//Иначе
		//	СтрокаТЧ.Номенклатура = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

		//гуид="";
		//ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
		//Иначе
		//	СтрокаТЧ.Серия = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

		//СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

		//гуид="";
		//ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
		//Иначе
		//	СтрокаТЧ.Упаковка = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);

		//гуид="";
		//ЕстьАтрибут = стрк.УпаковочныйЛист.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.УпаковочныйЛист = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.УпаковочныйЛист.Ref ) );
		//Иначе
		//	СтрокаТЧ.УпаковочныйЛист = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.УпаковочныйЛист = ксп_ИмпортСлужебный.НайтиУпаковочныйЛист(стрк.УпаковочныйЛист);

		//гуид="";
		//ЕстьАтрибут = стрк.УпаковочныйЛистРодитель.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.УпаковочныйЛистРодитель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.УпаковочныйЛистРодитель.Ref ) );
		//Иначе
		//	СтрокаТЧ.УпаковочныйЛистРодитель = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.УпаковочныйЛистРодитель = ксп_ИмпортСлужебный.НайтиУпаковочныйЛистРодитель(стрк.УпаковочныйЛистРодитель);

		//гуид="";
		//ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
		//Если ЕстьАтрибут Тогда
		//	СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
		//Иначе
		//	СтрокаТЧ.Характеристика = Неопределено;
		//КонецЕсли;
		//// на случай, если есть метод поиска ссылки:
		//СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);

		//СтрокаТЧ.Штрихкод = стрк.Штрихкод;

		//СтрокаТЧ.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста = стрк.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста;

		//СтрокаТЧ.ЭтоУпаковочныйЛист = стрк.ЭтоУпаковочныйЛист;

	КонецЦикла;
	
	//------------------------------------------------------ ФИНАЛ
	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();
	
	jsonText = "";
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	Возврат ОбъектДанных;
	
КонецФункции
		
#КонецОбласти 	


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json, СкладЕРП) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	Возврат ЗагрузитьОбъект(СтруктураОбъекта, , СкладЕРП);
	
КонецФункции

#КонецОбласти 	


#Область Служебные

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("СкладОтправитель");
	//мРеквизиты.Добавить("СкладПолучатель");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции



 // Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)

	СуществующаяСсылка 		= Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующаяСсылка.ВерсияДанных) Тогда
		Возврат СуществующаяСсылка;
	Иначе 
		
		
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);

		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;	
    
КонецФункции



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиСоздатьПартию(Номенклатура,Характеристика,ЗаказНаПроизводствоОбъект)
	
	Отбор = Новый Структура("Номенклатура,Характеристика", Номенклатура,Характеристика);
	МассивСтрок = мТаблицаПартийЗаказа.НайтиСтроки(Отбор);//должна быть одна строка
	Если МассивСтрок.Количество() = 0 Тогда
		ОбъектДанных = Справочники.ПартииПроизводства.СоздатьЭлемент();
	Иначе 
		
		Возврат МассивСтрок[0].ПартияСсылка;
		
	КонецЕсли;
	
	ОбъектДанных.Документ = ЗаказНаПроизводствоОбъект.Ссылка;
	ОбъектДанных.Номенклатура = Номенклатура;
	ОбъектДанных.Характеристика = Характеристика;
	ОбъектДанных.Записать();
		
	Возврат ОбъектДанных.Ссылка;
	
КонецФункции 


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Таблица значений
//
Функция НайтиВсеПартииЗаказа(ЗаказНаПроизводствоОбъект)
	ЗапросПоискаПартии = Новый Запрос;
	ЗапросПоискаПартии.Текст = "
	 |ВЫБРАТЬ
	 |	Спр.Ссылка КАК ПартияСсылка,
	 |  Спр.Номенклатура КАК Номенклатура,
	 |  Спр.Характеристика КАК Характеристика
	 |ИЗ
	 |	Справочник.ПартииПроизводства как Спр
	 |ГДЕ
	 |	Спр.Документ = &Док_
	 |";
	 		
	ЗапросПоискаПартии.УстановитьПараметр("Док_", ЗаказНаПроизводствоОбъект.Ссылка);
	ТЗ = ЗапросПоискаПартии.Выполнить().Выгрузить();
	ТЗ.Индексы.Добавить("Номенклатура, Характеристика");

	Возврат ТЗ;
	
КонецФункции



#КонецОбласти 	

 мВнешняяСистема = "UPP";
 
 ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
 
 