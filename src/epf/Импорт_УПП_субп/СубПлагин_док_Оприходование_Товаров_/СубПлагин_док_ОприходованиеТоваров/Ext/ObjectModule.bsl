Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем мСкладОтправитель;
Перем мСкладПолучатель;
Перем мСклад;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","2.0");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СубПлагин_док_ОприходованиеТоваров");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СубПлагин_док_ОприходованиеТоваров");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
	"Открыть форму : СубПлагин_док_ОприходованиеТоваров",
	"Форма_СубПлагин_док_ОприходованиеТоваров",
	ТипКоманды, 
	Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции


Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
	
КонецПроцедуры

#КонецОбласти 	


#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "", СкладЕРП = Неопределено) Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.ОприходованиеТоваров") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаУПП = "ОприходованиеТоваров (УПП) №"+деф.Number+" от "+строка(деф.Date);
	
	НачатьТранзакцию();
	
	Попытка
		
		ОбъектДанных = СоздатьПолучитьСсылкуДокумента(id, "ОрдерНаОтражениеИзлишковТоваров");
		
		Блокировка = СоздатьБлокировкуОдногоОбъекта(id); 
		
		
		//------------------------------------- Заполнение реквизитов 
		
		ОбъектДанных.Номер = деф.Number;
		ОбъектДанных.Дата = деф.Date;
		ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
		
		ОбъектДанных.Склад = СкладЕРП;
		ОбъектДанных.Комментарий = деф.Комментарий;
		ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию(); //деф.Ответственный.Ref;
		//ОбъектДанных.Помещение = ;
		
		ОбъектДанных.Товары.Очистить();
		
		Для счТовары = 0 По деф.ТабличнаяЧасть_Товары.Количество()-1 Цикл
			стрк = деф.ТабличнаяЧасть_Товары[счТовары];
			СтрокаТЧ = ОбъектДанных.Товары.Добавить();
			
			_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
			
			//Если СобиратьНенайденнуюНоменклатуру = Истина Тогда
			//	
			//	Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И 
			//		НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
			//		
			//		Если НеНайденнаяНоменклатураМассив.Найти(стрк.Номенклатура.ref) = Неопределено Тогда
			
			//			НеНайденнаяНоменклатураМассив.Добавить(стрк.Номенклатура.Ref);
			//			
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли;
			
			СтрокаТЧ.Номенклатура = _Номенклатура;
			СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
			//СтрокаТЧ.Назначение = ; // Выяснить назначение 
			//СтрокаТЧ.Серия = ;  
			//СтрокаТЧ.Упаковка = ;
			СтрокаТЧ.Количество = стрк.Количество;
			СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
			//СтрокаТЧ.Ячейка = ;
			//СтрокаТЧ.СтатусУказанияСерий = ;
			// пока не надо
			//СтрокаТЧ.Упаковка = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
			
		КонецЦикла;
		//------------------------------------------------------ ФИНАЛ	
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		ОбъектДанных.Записать(РежимЗаписиДокумента.Запись);
		
		
		ЗафиксироватьТранзакцию();
		
	Исключение                	
		
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
		"Объект не загружен! Ошибка в процессе загрузки документа "+ПредставлениеДокументаУПП+". Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
	КонецПопытки;
	
	jsonText = "";
	
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	
	
	Возврат Истина;
	
КонецФункции

Функция  СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка) 
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ОрдерНаОтражениеИзлишковТоваров"); 
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка",ДанныеСсылка);
	Возврат Блокировка;
	
КонецФункции

#КонецОбласти 	


#Область СлужебныеЗаполненияИПолученияСсылок

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)
	
	СуществующийОбъект = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД.Ref)); 
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект.ПолучитьОбъект();
	Иначе 
		
		ОбъектДанныхСсылка = Документы[ВидОбъекта].СоздатьДокумент();
		ОбъектДанныхСсылка.УстановитьСсылкуНового(СуществующийОбъект);
		
		Возврат ОбъектДанныхСсылка;
	КонецЕсли;	
	
КонецФункции


Функция ЗаполненаСсылка(СтруктураID)
	
	Если не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	Попытка
		Ref = СтруктураID.Ref;	
		Если ЗначениеЗаполнено(Ref) Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиВидДокументаУПП(ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТТ.Ссылка КАК ВидДок
	|ИЗ
	|	Справочник.КСП_ВидыДокументовУПП КАК ТТ
	|ГДЕ
	|	
	|	ТТ.Наименование = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Не найден вид документа УПП в спр. видов документов: "+Строка(ВидДокумента);
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВидДок = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВидДок = ВыборкаДетальныеЗаписи.ВидДок;
	КонецЦикла;
	
	Возврат ВидДок;
	
КонецФункции

#КонецОбласти

  
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("Склад");
	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции




#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export
	
	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти


мВнешняяСистема = "UPP";

ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
