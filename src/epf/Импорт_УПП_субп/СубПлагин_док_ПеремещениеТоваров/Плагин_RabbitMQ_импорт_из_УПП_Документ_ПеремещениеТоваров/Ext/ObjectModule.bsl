Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СубПлагин_импорт_из_УПП_Документ_ПеремещениеТоваров1");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СубПлагин_импорт_из_УПП_Документ_ПеремещениеТоваров1");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : СубПлагин_Плагин_RabbitMQ_импорт_из_УПП_Документ_ПеремещениеТоваров1",
		"Форма_СубПлагин__импорт_из_УПП_Документ_ПеремещениеТоваров1",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти 	

#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.ПеремещениеТоваров") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	Схема = ПолучитьСхемуСозданияДокумента(id,деф,СтруктураОбъекта,jsonText);
	Если Схема.Логика = "Заказ+ПеремещениеТоваров" Тогда
		ЗаказСсылка_ = ЗагрузитьЗаказНаПеремещение(id,деф,СтруктураОбъекта,jsonText,Схема,ИмяСобытияЖР);
		ПеремещениеСсылка_ = ЗагрузитьПеремещениеТоваров(id,деф,СтруктураОбъекта,jsonText,Схема,ИмяСобытияЖР,ЗаказСсылка_);
		СсылкаПеремещение = ПеремещениеСсылка_;
		//СсылкаПеремещение = ЗагрузитьПеремещениеТоваровВариант1(id,деф,СтруктураОбъекта,Схема,jsonText,ИмяСобытияЖР,ПеремещениеСсылка_,ЗаказСсылка_);
		Возврат СсылкаПеремещение;
	КонецЕсли;
КонецФункции

Функция  СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка) 
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ПеремещениеТоваров"); 
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка",ДанныеСсылка);
	Возврат Блокировка;
КонецФункции
	
#КонецОбласти 	

#Область СхемыСозданияДокументов

//ПриходныйОрдер
Функция ЗагрузитьПеремещениеТоваровВариант2(id,деф,СтруктураОбъекта,Схема,jsonText,ИмяСобытияЖР)
	ВидОбъекта = "ПриходныйОрдерНаТовары";

	////------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если (НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных)) и ЗначениеЗаполнено(ДанныеСсылка.Номер) = Ложь и ЗначениеЗаполнено(ДанныеСсылка.Дата) = Ложь Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	Иначе
		ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		//Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
		Блокировка = СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	//Если НЕ ЭтоНовый Тогда
	//	Попытка
	//		Блокировка.Заблокировать();
	//		ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
	//	Исключение
	//		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
	//			"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
	//		ОтменитьТранзакцию();
	//		ВызватьИсключение;
	//	КонецПопытки;
	//КонецЕсли;
	//	
	//------------------------------------- Заполнение реквизитов
	Провести = ложь;
	Попытка			
		ЗаполнитьРеквизитыПриходныйОрдерНаТовары(ОбъектДанных, СтруктураОбъекта, Схема, jsonText);		
		ЗафиксироватьТранзакцию();          		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если Провести Тогда
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		Попытка
			ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный); 
			
		Исключение
			
		КонецПопытки;
	КонецЕсли;	
	Возврат ДанныеСсылка;	
	//		
КонецФункции

Функция ЗаполнитьРеквизитыПриходныйОрдерНаТовары(ОбъектДанных, СтруктураОбъекта, Схема, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	ОбъектДанных.Комментарий	= деф.Комментарий;
	ОбъектДанных.Распоряжение = ПолучитьСсылкуДокументаПоДаннымID(деф.ДокументОснование,"ЗаказНаПеремещение");
	ОбъектДанных.Склад = Схема.СкладПолучатель;
	ОбъектДанных.Отправитель = Схема.СкладОтправитель;
	ОбъектДанных.Исполнитель = ПолучитьСсылкуСправочникаПоДаннымID(деф.Ответственный,"Пользователи");
	ОбъектДанных.Ответственный = ОбъектДанных.Исполнитель;
	ОбъектДанных.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ОбъектДанных.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	ОбъектДанных.Товары.Очистить();
	Товары = деф.ТабличнаяЧасть_Товары;
	Для каждого СтрокаТовара из Товары Цикл
		НС = ОбъектДанных.Товары.Добавить();
		НС.Количество = СтрокаТовара.Количество;
		НС.КоличествоУпаковок = СтрокаТовара.Количество;
		НС.Номенклатура = ПолучитьСсылкуСправочникаПоДаннымID(СтрокаТовара.Номенклатура,"Номенклатура");
		НС.Характеристика = ПолучитьСсылкуСправочникаПоДаннымID(СтрокаТовара.ХарактеристикаНоменклатуры,"ХарактеристикиНоменклатуры"); 
	КонецЦикла;
	Провести = деф.isPosted;
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции

//РасходныйОрдерНаТовары
Функция ЗагрузитьПеремещениеТоваровВариант1(id,деф,СтруктураОбъекта,Схема,jsonText,ИмяСобытияЖР, Распоряжение, Заказ)
	ВидОбъекта = "РасходныйОрдерНаТовары";

	////------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если (НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных)) и ЗначениеЗаполнено(ДанныеСсылка.Номер) = Ложь и ЗначениеЗаполнено(ДанныеСсылка.Дата) = Ложь Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	Иначе
		ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		//Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
		Блокировка = СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	//------------------------------------- Заполнение реквизитов
	Провести = ложь;
	Попытка			
		ЗаполнитьРеквизитыРасходныйОрдерНаТовары(ОбъектДанных, СтруктураОбъекта, Схема, jsonText, Заказ);		
		ЗафиксироватьТранзакцию();          		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если Провести Тогда
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		Попытка
			ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный); 
			
		Исключение
			
		КонецПопытки;
	КонецЕсли;	
	Возврат ДанныеСсылка;	
КонецФункции

Функция ЗаполнитьРеквизитыРасходныйОрдерНаТовары(ОбъектДанных, СтруктураОбъекта, Схема, jsonText = "", Распоряжение) Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	ОбъектДанных.Комментарий	= деф.Комментарий;
	//ОбъектДанных.Приоритет	= Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	ОбъектДанных.Склад = Схема.СкладОтправитель;
	ОбъектДанных.Получатель = Схема.СкладПолучатель;
	ОбъектДанных.Контролер = ПолучитьСсылкуСправочникаПоДаннымID(деф.Ответственный,"Пользователи");
	ОбъектДанных.Ответственный = ОбъектДанных.Контролер;
	ОбъектДанных.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	ОбъектДанных.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
	ОбъектДанных.ДатаОтгрузки = ОбъектДанных.Дата;
	ОбъектДанных.ТоварыПоРаспоряжениям.Очистить();
	ОбъектДанных.ОтгружаемыеТовары.Очистить();
	Товары = деф.ТабличнаяЧасть_Товары;
	Для каждого СтрокаТовара из Товары Цикл
		НС = ОбъектДанных.ОтгружаемыеТовары.Добавить();
		НС.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		НС.Количество = СтрокаТовара.Количество;
		НС.КоличествоУпаковок = СтрокаТовара.Количество;
		НС.Номенклатура = ПолучитьСсылкуСправочникаПоДаннымID(СтрокаТовара.Номенклатура,"Номенклатура");
		НС.Характеристика = ПолучитьСсылкуСправочникаПоДаннымID(СтрокаТовара.ХарактеристикаНоменклатуры,"ХарактеристикиНоменклатуры"); 
	КонецЦикла;
	Если не ЗначениеЗаполнено(Распоряжение) Тогда
		Распоряжение = ЗагрузитьЗаказНаПеремещение(id,деф,СтруктураОбъекта,jsonText,Схема,"Импорт_из_RabbitMQ_УПП");
	КонецЕсли;
	ОбъектДанных.ТоварыПоРаспоряжениям.Загрузить(ОбъектДанных.ОтгружаемыеТовары.Выгрузить());
	Для каждого строка Из ОбъектДанных.ТоварыПоРаспоряжениям Цикл
		строка.Распоряжение = Распоряжение;
	КонецЦикла;
	Провести = деф.isPosted;
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции

//ПеремещениеТоваров
Функция ЗагрузитьПеремещениеТоваров(id,деф,СтруктураОбъекта,jsonText,Схема,ИмяСобытияЖР,ЗаказСсылка = Неопределено)
	ВидОбъекта = "ПеремещениеТоваров";

	////------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если (НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных)) и ЗначениеЗаполнено(ДанныеСсылка.Номер) = Ложь и ЗначениеЗаполнено(ДанныеСсылка.Дата) = Ложь Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	Иначе
		ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		//Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
		Блокировка = СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	//------------------------------------- Заполнение реквизитов
	Провести = ложь;
	Попытка			
		ДанныеСсылка = ЗаполнитьРеквизитыПеремещенияТоваров(ОбъектДанных, СтруктураОбъекта, Схема, jsonText, ЗаказСсылка);		
		ЗафиксироватьТранзакцию();          		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если Провести Тогда
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		Попытка
			ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный); 
			
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСсылка) Тогда
		Возврат ДанныеСсылка;
	Иначе
		Возврат Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	КонецЕсли;
	//		
КонецФункции

Функция ЗаполнитьРеквизитыПеремещенияТоваров(ОбъектДанных, СтруктураОбъекта, Схема, jsonText = "", ЗаказСсылка = Неопределено) Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ЗаказНаПеремещение = ЗаказСсылка;
	Если ЗначениеЗаполнено(ОбъектДанных.ЗаказНаПеремещение) Тогда
		ОбъектДанных.ПеремещениеПоЗаказам = Истина;
	КонецЕсли;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	ОбъектДанных.Комментарий	= деф.Комментарий;
	ОбъектДанных.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	ОбъектДанных.Подразделение = ПолучитьСсылкуСправочникаПоДаннымID(деф.Подразделение,"СтруктураПредприятия");
	ОбъектДанных.Организация = ПолучитьСсылкуСправочникаПоДаннымID(деф.Организация,"Организации");
	ОбъектДанных.СкладОтправитель = Схема.СкладОтправитель;
	ОбъектДанных.СкладПолучатель = Схема.СкладПолучатель;
	ОбъектДанных.Автор = ПолучитьСсылкуСправочникаПоДаннымID(деф.Ответственный,"Пользователи");
	ОбъектДанных.Ответственный = ОбъектДанных.Автор;
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ОбъектДанных.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ОбъектДанных.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	ОбъектДанных.ДатаПоступления = ОбъектДанных.Дата;
	ОбъектДанных.Товары.Очистить();
	Товары = деф.ТабличнаяЧасть_Товары;
	КодСтроки = 1;
	Для каждого СтрокаТовара из Товары Цикл
		НС = ОбъектДанных.Товары.Добавить();
		//НС.КодСтроки = КодСтроки;
		НС.ЗаказНаПеремещение = ЗаказСсылка;
		НС.Количество = СтрокаТовара.Количество;
		НС.КоличествоУпаковок = СтрокаТовара.Количество;
		НС.Номенклатура = ПолучитьСсылкуСправочникаПоДаннымID(СтрокаТовара.Номенклатура,"Номенклатура");
		НС.Характеристика = ПолучитьСсылкуСправочникаПоДаннымID(СтрокаТовара.ХарактеристикаНоменклатуры,"ХарактеристикиНоменклатуры");
		Если ЗначениеЗаполнено(НС.Характеристика) и ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НС.Номенклатура,"ИспользованиеХарактеристик")) = Ложь Тогда
			НС.Характеристика = Неопределено;
			Сообщить("У номенклатуры не выставлен учет по характеристикам, а характеристика в строке заполнена. Характеристика очищена");
		КонецЕсли;
		КодСтроки = КодСтроки + 1;
	КонецЦикла;
	Если деф.isPosted Тогда
		Провести = Истина;
	КонецЕсли;
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции

//ЗаказНаПеремещение
Функция ЗагрузитьЗаказНаПеремещение(id,деф,СтруктураОбъекта,jsonText,Схема,ИмяСобытияЖР)
	ВидОбъекта = "ЗаказНаПеремещение";

	////------------------------------------- работа с GUID	
	ОбъектДанных = Неопределено;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	ПредставлениеОбъекта = Строка(ДанныеСсылка);
	ЭтоНовый = Ложь;
	Если (НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных)) и ЗначениеЗаполнено(ДанныеСсылка.Номер) = Ложь и ЗначениеЗаполнено(ДанныеСсылка.Дата) = Ложь Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		ЭтоНовый = Истина;
	Иначе
		ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		//Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
		Блокировка = СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	КонецЕсли;

	НачатьТранзакцию();
	
	//------------------------------------- Заполнение реквизитов
	Провести = ложь;
	Попытка			
		ЗаполнитьРеквизитыЗаказНаПеремещение(ОбъектДанных, СтруктураОбъекта, Схема, jsonText);		
		ЗафиксироватьТранзакцию();          		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
			"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
	
	Если Провести Тогда
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		Попытка
			ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный); 
		Исключение
			
		КонецПопытки;
	КонецЕсли;	
	Возврат ДанныеСсылка;	
КонецФункции

Функция ЗаполнитьРеквизитыЗаказНаПеремещение(ОбъектДанных, СтруктураОбъекта, Схема, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	ОбъектДанных.Комментарий	= деф.Комментарий;
	ОбъектДанных.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	ОбъектДанных.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	ОбъектДанных.Подразделение = ПолучитьСсылкуСправочникаПоДаннымID(деф.Подразделение,"СтруктураПредприятия");
	ОбъектДанных.Организация = ПолучитьСсылкуСправочникаПоДаннымID(деф.Организация,"Организации");
	ОбъектДанных.СкладОтправитель = Схема.СкладОтправитель;
	ОбъектДанных.СкладПолучатель = Схема.СкладПолучатель;
	ОбъектДанных.Автор = ПолучитьСсылкуСправочникаПоДаннымID(деф.Ответственный,"Пользователи");
	ОбъектДанных.Ответственный = ОбъектДанных.Автор;
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ОбъектДанных.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ОбъектДанных.Статус = Перечисления.СтатусыВнутреннихЗаказов.КВыполнению;
	ОбъектДанных.ЖелаемаяДатаПоступления = ОбъектДанных.Дата;
	ОбъектДанных.Товары.Очистить();
	Товары = деф.ТабличнаяЧасть_Товары;
	Для каждого СтрокаТовара из Товары Цикл
		НС = ОбъектДанных.Товары.Добавить();
		НС.Количество = СтрокаТовара.Количество;
		НС.КоличествоУпаковок = СтрокаТовара.Количество;
		НС.Номенклатура = ПолучитьСсылкуСправочникаПоДаннымID(СтрокаТовара.Номенклатура,"Номенклатура");
		НС.Характеристика = ПолучитьСсылкуСправочникаПоДаннымID(СтрокаТовара.ХарактеристикаНоменклатуры,"ХарактеристикиНоменклатуры"); 
		НС.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		НС.НачалоОтгрузки = ОбъектДанных.Дата;
	КонецЦикла;
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();
	Если деф.isPosted Тогда
		ОбъектДанных.ОбменДанными.Загрузка = Ложь;
		Попытка
			ОбъектДанных.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный); 
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции

#КонецОбласти

#Область СлужебныеЗаполненияИПолученияСсылок

Функция ПолучитьСхемуСозданияДокумента(id,деф,СтруктураОбъекта,jsonText)
	Ответ = Новый Структура;
	СкладОтправительУПП = ПолучитьСсылкуСправочникаПоДаннымID(деф.СкладОтправитель, "КСП_СкладыУПП");
	СкладОтправитель = ПолучитьСкладERP(СкладОтправительУПП);
	СкладПолучательУПП = ПолучитьСсылкуСправочникаПоДаннымID(деф.СкладПолучатель, "КСП_СкладыУПП");
	СкладПолучатель = ПолучитьСкладERP(СкладПолучательУПП);
	Ответ.Вставить("СкладОтправитель",СкладОтправитель);
	Ответ.Вставить("СкладПолучатель",СкладПолучатель);
	ЛогикаСклада = ПолучитьЛогикуСклада(СкладОтправительУПП);
	Ответ.Вставить("ЛогикаСклада",ЛогикаСклада);
	ДокументОснованиеЗаполнено = ЗаполненаСсылка(деф.ДокументОснование); 
	ПеремещениеТоваровЗаполнено = ЗаполненаСсылка(деф.ДокументПеремещение);
	Ответ.Вставить("ДокументОснованиеЗаполнено",ДокументОснованиеЗаполнено);
	Ответ.Вставить("ПеремещениеТоваровЗаполнено",ПеремещениеТоваровЗаполнено);
	Если не ЗначениеЗаполнено(ЛогикаСклада) Тогда
		Ответ.Вставить("Логика","");
		Возврат Ответ;	
	КонецЕсли;
	Ответ.Вставить("Логика","Заказ+ПеремещениеТоваров");
	Возврат Ответ;	
КонецФункции

Функция ПолучитьСкладERP(СкладУПП) 

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СкладУПП", СкладУПП);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП КАК СкладУПП,
	|	КСП_ВидыОперацийПоСкладамУПП.СкладЕРП КАК СкладЕРП,
	|	КСП_ВидыОперацийПоСкладамУПП.Ссылка КАК Ссылка,
	|	КСП_ВидыОперацийПоСкладамУПП.ЛогикаОбработкиВШапке КАК ЛогикаОбработки
	|ИЗ
	|	Справочник.КСП_ВидыОперацийПоСкладамУПП КАК КСП_ВидыОперацийПоСкладамУПП
	|ГДЕ
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП = &СкладУПП";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СкладУПП;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СкладЕРП;

КонецФункции

Функция ПолучитьЛогикуСклада(СкладУПП) 

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СкладУПП", СкладУПП);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	КСП_ВидыОперацийПоСкладамУПП.ЛогикаОбработкиВШапке КАК ЛогикаОбработки
	|ИЗ
	|	Справочник.КСП_ВидыОперацийПоСкладамУПП КАК КСП_ВидыОперацийПоСкладамУПП
	|ГДЕ
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП = &СкладУПП";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ЛогикаОбработки;

КонецФункции

Функция ЗаполненаСсылка(СтруктураID) 
	Если не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	Попытка
		Ref = СтруктураID.Ref;	
		Если ЗначениеЗаполнено(Ref) Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ПолучитьСсылкуДокументаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	Если не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Ref = СтруктураID.Ref;	
		Если не ЗначениеЗаполнено(СтруктураID.Ref) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураID.Ref));
	Возврат ДанныеСсылка;
КонецФункции

Функция ПолучитьСсылкуСправочникаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	Если не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Ref = СтруктураID.Ref;	
		Если не ЗначениеЗаполнено(СтруктураID.Ref) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	ДанныеСсылка = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураID.Ref));
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		ОбъектДанных = Справочники[ВидОбъекта].СоздатьЭлемент();
		СсылкаНового = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураID.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		Попытка
			ОбъектДанных.Код = СтруктураID.code;
		Исключение
		КонецПопытки;
		Попытка
			ОбъектДанных.Наименование = СтруктураID.Description;
		Исключение
		КонецПопытки;
		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.Записать();
		Возврат СсылкаНового;
	Иначе
		Возврат ДанныеСсылка;
	КонецЕсли; 
КонецФункции

#КонецОбласти

#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("СкладОтправитель");
	мРеквизиты.Добавить("СкладПолучатель");
	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

 мВнешняяСистема = "UPP";
 
 