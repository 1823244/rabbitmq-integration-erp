Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем jsonText;
Перем мСкладПолучатель;
Перем мСкладОтправитель;
Перем мДоговор;
Перем СобиратьНенайденнуюНоменклатуру Экспорт; // дли интерактивного импорта
Перем НеНайденнаяНоменклатураМассив;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.2");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СубПлагин_импорт_РеализацияТоваровУслуг_Схема2_ПередачаНаКомиссию");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СубПлагин_импорт_РеализацияТоваровУслуг_Схема2_ПередачаНаКомиссию");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : СубПлагин_импорт_РеализацияТоваровУслуг_Схема2_ПередачаНаКомиссию",
		"Форма_СубПлагин_импорт_РеализацияТоваровУслуг_Схема2_ПередачаНаКомиссию",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Возвращает структуру. Поля различаются в зависимости от режима загрузки.
// Это нужно для отладки, а не для обычного режима работы.
//
Функция ЗагрузитьОбъект(СтруктураОбъекта, пjsonText = "", СкладЕРП = Неопределено) Экспорт

	Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.РеализацияТоваровУслуг") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	jsonText = пjsonText;
	
	ВидОперации = "";
	_знч = "";
	ЕстьЗначение = деф.ВидОперации.свойство("Значение",_знч);
	Если ЕстьЗначение Тогда
		ВидОперации = _знч;
	КонецЕсли;
	
	Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	УзелКонтрагента = Неопределено;
	
	//ЕНС. 2024-01-16. Договор теперь хранится в РС "КСП_КомиссионерыДляРеализацийУПП" для каждого контрагента
	//ДоговорКонтрагента = ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента, УзелКонтрагента, Контрагент);
	ДоговорКонтрагента = Неопределено;
	
	ЭтоКомиссионер = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.ЭтоКомиссионер(мВнешняяСистема, Контрагент, ДоговорКонтрагента, деф.date);
	
	мСкладОтправитель = СкладЕРП;
	
	мСкладПолучатель = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.СкладПолучатель(мВнешняяСистема, Контрагент, ДоговорКонтрагента, деф.date);
	мДоговор = РегистрыСведений.КСП_КомиссионерыДляРеализацийУПП.Договор(мВнешняяСистема, Контрагент, деф.date);

	Рез = Схема_2_ПередачаНаКомиссию(СтруктураОбъекта);
	
	Возврат Рез;
	
	
КонецФункции

#Область Схемы_2_ПередачаНаКомиссию



Функция Схема_2_ПередачаНаКомиссию(СтруктураОбъекта) Экспорт
	
	//ЗаказКлиента
	//РО
	//Реализация (комиссия)
	//
	//Контрагент - из реализации УПП
	//Склад - по нашей настройке
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ДокументИзУПП = "РеализацияТоваровУслуг (УПП) № "+деф.Number+" от "+строка(деф.Date);
	
	СуществующийЗаказСсылка 	= СоздатьПолучитьСсылкуДокумента(id.Ref, "ЗаказКлиента");
	СуществующийРОСсылка 		= СоздатьПолучитьСсылкуДокумента(id.Ref, "РасходныйОрдерНаТовары");
	СуществующийРТУСсылка		= СоздатьПолучитьСсылкуДокумента(id.Ref, "ПередачаТоваровХранителю");
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СуществующийЗаказСсылка);
	МассивСсылок.Добавить(СуществующийРОСсылка);
	МассивСсылок.Добавить(СуществующийРТУСсылка);

	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	// не будем различать ситуации Новый/НеНовый
	//Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	//КонецЕсли;
	
	НачатьТранзакцию();
	
	//Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки цепочки документов для "+ДокументИзУПП+". Подробности: "+т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	//КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			
		ЗаказКлиентаОбъект = СоздатьЗаказКлиента(СтруктураОбъекта, СуществующийЗаказСсылка);
		РООбъект = СоздатьРасходныйОрдер_схема2(СтруктураОбъекта, СуществующийРОСсылка, ЗаказКлиентаОбъект);
		РТУОбъект = СоздатьПередачуТоваровХранителю(СтруктураОбъекта, СуществующийРТУСсылка, РООбъект, ЗаказКлиентаОбъект);
		
		РегистрыСведений.КСП_СвязьРеализацийУППиПередачиНаКомиссию.ДобавитьЗапись(
			мВнешняяСистема, 
			id.Ref, 
			ЗаказКлиентаОбъект.Ссылка,
			РТУОбъект.Ссылка,
			РООбъект.Ссылка, 
			ДокументИзУПП,
			Комментарий);
		
		ЗафиксироватьТранзакцию();          		
		
		Рез = Новый Структура;
		Рез.Вставить("ЗаказКлиента", ЗаказКлиентаОбъект.Ссылка);
		Рез.Вставить("РО", РООбъект.Ссылка);
		Рез.Вставить("РеализацияТоваровУслуг", РТУОбъект.Ссылка);
		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа "+ДокументИзУПП+". Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	

	Возврат Рез;
		
КонецФункции

Функция СоздатьЗаказКлиента(СтруктураОбъекта, СуществующийЗаказСсылка) Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	Если ЗначениеЗаполнено(СуществующийЗаказСсылка.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийЗаказСсылка.ПолучитьОбъект();
		ПредставлениеОбъекта = Строка(СуществующийЗаказСсылка);
	Иначе 
		ОбъектДанных = Документы.ЗаказКлиента.СоздатьДокумент();
		СсылкаНового = Документы.ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	//ОбъектДанных.Номер = id.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;

	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

	ОбъектДанных.Склад = мСкладОтправитель;
	
	ОбъектДанных.Валюта = константы.ВалютаРегламентированногоУчета.Получить();
	
	ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	ОбъектДанных.Договор 	= мДоговор;//ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента);
	ОбъектДанных.Партнер 	= ОбъектДанных.Контрагент.Партнер;
	ОбъектДанных.Соглашение = 
		РегистрыСведений.ксп_СоглашенияСПартнерамиДляИнтеграций.ПоМэппингу(мВнешняяСистема, ОбъектДанных.Контрагент, ОбъектДанных.Договор);
		
	ОбъектДанных.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;

	ОбъектДанных.Приоритет = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("ПриоритетДляРТУ_схема2_УПП", мВнешняяСистема);
		
	ОбъектДанных.НеОтгружатьЧастями = Истина;

	ОбъектДанных.ДатаСогласования = ОбъектДанных.Дата;
	
	ОбъектДанных.Согласован = Истина;
	
	ОбъектДанных.ДатаОтгрузки = ОбъектДанных.Дата;
	
	ОбъектДанных.ХозяйственнаяОперация = перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	
	ОбъектДанных.ПорядокРасчетов = перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	
	ОбъектДанных.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	
	ОбъектДанных.ОбъектРасчетов = ОбъектДанных.Договор;
	
	ОбъектДанных.ЦенаВключаетНДС = деф.СуммаВключаетНДС;

	ОбъектДанных.ЭтоЗаказКакСчет = Ложь;



	////------------------------------------------------------     ТЧ Товары
	ОбъектДанных.Товары.Очистить();

    КодСтроки = 1;
	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();

		СтрокаТЧ.ДатаОтгрузки = ОбъектДанных.Дата;
		
		
		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		
		Если СобиратьНенайденнуюНоменклатуру = Истина Тогда
			
			Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И 
				НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
				
				Если НеНайденнаяНоменклатураМассив.Найти(стрк.Номенклатура.ref) = Неопределено Тогда

					НеНайденнаяНоменклатураМассив.Добавить(стрк.Номенклатура.Ref);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

        СтрокаТЧ.Номенклатура = _Номенклатура;

		
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		
		СтрокаТЧ.КодСтроки = КодСтроки;
		КодСтроки = КодСтроки + 1;
		
		СтрокаТЧ.Склад = ОбъектДанных.Склад;
		СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
		
		СтрокаТЧ.ИдентификаторСтроки = строка(Новый УникальныйИдентификатор());

        СтрокаТЧ.СтавкаНДС = СтрокаТЧ.Номенклатура.СтавкаНДС;
		
		СтрокаТЧ.Цена = стрк.Цена;
		
		Если ОбъектДанных.ЦенаВключаетНДС Тогда
			СтрокаТЧ.Сумма = стрк.Сумма - стрк.СуммаНДС;
			СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
			СтрокаТЧ.СуммаСНДС = стрк.Сумма;
		Иначе 
			СтрокаТЧ.Сумма = стрк.Сумма;
			СтрокаТЧ.СуммаНДС = стрк.СуммаНДС;
			СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
		КонецЕсли;
		
		//	СтрокаТЧ.ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(стрк.ВидЦены);

	КонецЦикла;
	
	
	ОбъектДанных.МаксимальныйКодСтроки = ОбъектДанных.Товары.Количество() - 1;//todo уточнить заполнение по типовому коду
	
	
	////------------------------------------------------------     ТЧ ЭтапыГрафикаОплаты
	ОбъектДанных.ЭтапыГрафикаОплаты.Очистить();

	////------------------------------------------------------     ТЧ СкидкиНаценки
	ОбъектДанных.СкидкиНаценки.Очистить();
    
	////------------------------------------------------------     ТЧ НачислениеБонусныхБаллов
	ОбъектДанных.НачислениеБонусныхБаллов.Очистить();
    
	////------------------------------------------------------     ТЧ ДополнительныеРеквизиты
	ОбъектДанных.ДополнительныеРеквизиты.Очистить();

	//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
	//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ДополнительныеРеквизиты.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Значение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Свойство = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);

	//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

	//КонецЦикла;


	//------------------------------------------------------ ФИНАЛ

	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();

	//------------------------------------------------------ РС.СостоянияЗаказовКлиентов
	
	НЗ = РегистрыСведений.СостоянияЗаказовКлиентов.СоздатьНаборЗаписей();
	НЗ.Отбор.Заказ.Установить(ОбъектДанных.Ссылка);
	НовСтр = НЗ.Добавить();
	НовСтр.Заказ = ОбъектДанных.Ссылка;
	НовСтр.Состояние = Перечисления.СостоянияЗаказовКлиентов.Закрыт;
	НовСтр.ДатаСобытия = ТекущаяДатаСеанса();
	НЗ.Записать();

    //------------------------------------------------------ Постобработка
	
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	Возврат ОбъектДанных;
	
КонецФункции

Функция СоздатьРасходныйОрдер_схема2(СтруктураОбъекта, СуществующийРОСсылка, ЗаказКлиентаОбъект) Экспорт
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	Если ЗначениеЗаполнено(СуществующийРОСсылка.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийРОСсылка.ПолучитьОбъект(); 
		ПредставлениеОбъекта = Строка(СуществующийРОСсылка);
	Иначе 
		ОбъектДанных = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		СсылкаНового = Документы.РасходныйОрдерНаТовары.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
		
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	//ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;

	ОбъектДанных.Склад = мСкладОтправитель;
	ОбъектДанных.Получатель = мСкладПолучатель;
	
	ОбъектДанных.СкладскаяОперация = перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
	ОбъектДанных.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	
	//ОбъектДанных.ВсегоМест = деф.ВсегоМест;

	ОбъектДанных.ДатаОтгрузки = деф.Date;
	
	ОбъектДанных.Приоритет = РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций
		.Настройка("ПриоритетДляРТУ_схема2_УПП", мВнешняяСистема);
	
	//гуид="";
	//ЕстьАтрибут = деф.ЗаданиеНаПеревозку.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ЗаданиеНаПеревозку = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗаданиеНаПеревозку.Ref ) );
	//Иначе
	//	ОбъектДанных.ЗаданиеНаПеревозку = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ЗаданиеНаПеревозку = ксп_ИмпортСлужебный.НайтиЗаданиеНаПеревозку(деф.ЗаданиеНаПеревозку);

	//гуид="";
	//ЕстьАтрибут = деф.ЗонаОтгрузки.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ЗонаОтгрузки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗонаОтгрузки.Ref ) );
	//Иначе
	//	ОбъектДанных.ЗонаОтгрузки = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ЗонаОтгрузки = ксп_ИмпортСлужебный.НайтиЗонаОтгрузки(деф.ЗонаОтгрузки);

	//ОбъектДанных.Комментарий = деф.Комментарий;

	//гуид="";
	//ЕстьАтрибут = деф.Контролер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Контролер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Контролер.Ref ) );
	//Иначе
	//	ОбъектДанных.Контролер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Контролер = ксп_ИмпортСлужебный.НайтиКонтролер(деф.Контролер);

	//гуид="";
	//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
	//Иначе
	//	ОбъектДанных.Ответственный = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);

	//ОбъектДанных.ОтгрузкаПоЗаданиюНаПеревозку = деф.ОтгрузкаПоЗаданиюНаПеревозку;

	//гуид="";
	//ЕстьАтрибут = деф.Получатель.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Получатель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Получатель.Ref ) );
	//Иначе
	//	ОбъектДанных.Получатель = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Получатель = ксп_ИмпортСлужебный.НайтиПолучатель(деф.Получатель);

	//гуид="";
	//ЕстьАтрибут = деф.Помещение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Помещение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Помещение.Ref ) );
	//Иначе
	//	ОбъектДанных.Помещение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Помещение = ксп_ИмпортСлужебный.НайтиПомещение(деф.Помещение);

	//ОбъектДанных.ПорядокДоставки = деф.ПорядокДоставки;


	//ОбъектДанных.РежимПросмотраПоТоварам = деф.РежимПросмотраПоТоварам;





	////------------------------------------------------------     ТЧ ТоварыПоРаспоряжениям



	ОбъектДанных.ТоварыПоРаспоряжениям.Очистить();


	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.ТоварыПоРаспоряжениям.Добавить();
		
		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
    	СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.Распоряжение = ЗаказКлиентаОбъект.Ссылка;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Назначение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Номенклатура = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	

	//	гуид="";
	//	ЕстьАтрибут = стрк.Распоряжение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Распоряжение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Распоряжение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Распоряжение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

	//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Характеристика = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	

	КонецЦикла;

	////------------------------------------------------------     ТЧ ОтгружаемыеТовары



	ОбъектДанных.ОтгружаемыеТовары.Очистить();


	Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
		стрк = деф.ТЧТовары[счТовары];
		СтрокаТЧ = ОбъектДанных.ОтгружаемыеТовары.Добавить();

 		СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
    	СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
        СтрокаТЧ.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
	//	_знч = "";
	//	ЕстьЗначение = стрк.Действие.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.Действие = стрк.Действие.Значение;
	//	Иначе
	//		СтрокаТЧ.Действие = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Действие = ксп_ИмпортСлужебный.НайтиПеречисление_Действие(стрк.Действие);

	//	СтрокаТЧ.Количество = стрк.Количество;

	//	СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Назначение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Номенклатура = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

	//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Упаковка = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);

	//	гуид="";
	//	ЕстьАтрибут = стрк.УпаковочныйЛист.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.УпаковочныйЛист = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.УпаковочныйЛист.Ref ) );
	//	Иначе
	//		СтрокаТЧ.УпаковочныйЛист = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.УпаковочныйЛист = ксп_ИмпортСлужебный.НайтиУпаковочныйЛист(стрк.УпаковочныйЛист);

	//	гуид="";
	//	ЕстьАтрибут = стрк.УпаковочныйЛистРодитель.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.УпаковочныйЛистРодитель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.УпаковочныйЛистРодитель.Ref ) );
	//	Иначе
	//		СтрокаТЧ.УпаковочныйЛистРодитель = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.УпаковочныйЛистРодитель = ксп_ИмпортСлужебный.НайтиУпаковочныйЛистРодитель(стрк.УпаковочныйЛистРодитель);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Характеристика = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);

	//	СтрокаТЧ.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста = стрк.ЭтоСлужебнаяСтрокаПустогоУпаковочногоЛиста;

	//	СтрокаТЧ.ЭтоУпаковочныйЛист = стрк.ЭтоУпаковочныйЛист;

	КонецЦикла;

	////------------------------------------------------------     ТЧ ДополнительныеРеквизиты



	//ОбъектДанных.ДополнительныеРеквизиты.Очистить();


	//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
	//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ДополнительныеРеквизиты.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Значение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Свойство = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);

	//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

	//КонецЦикла;

	////------------------------------------------------------     ТЧ ШтрихкодыУпаковок



	//ОбъектДанных.ШтрихкодыУпаковок.Очистить();


	//Для счТовары = 0 По деф.ТЧШтрихкодыУпаковок.Количество()-1 Цикл
	//	стрк = деф.ТЧШтрихкодыУпаковок[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ШтрихкодыУпаковок.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.ШтрихкодУпаковки.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ШтрихкодУпаковки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ШтрихкодУпаковки.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ШтрихкодУпаковки = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ШтрихкодУпаковки = ксп_ИмпортСлужебный.НайтиШтрихкодУпаковки(стрк.ШтрихкодУпаковки);

	//КонецЦикла;




	//------------------------------------------------------ ФИНАЛ


	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	Возврат ОбъектДанных;
КонецФункции

Функция СоздатьПередачуТоваровХранителю(СтруктураОбъекта, СуществующийРТУСсылка, РООбъект, ЗаказКлиентаОбъект) Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;


	//------------------------------------- работа с GUID
	
	Если ЗначениеЗаполнено(СуществующийРТУСсылка.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийРТУСсылка.ПолучитьОбъект();
	Иначе 
		
		ОбъектДанных = Документы.ПередачаТоваровХранителю.СоздатьДокумент();
		СсылкаНового = Документы.ПередачаТоваровХранителю.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов
	
	// так не получится, потому что основание должен быть проведенным, а у нас - не проводится при импорте
	//ОбъектДанных.Заполнить(ЗаказКлиентаОбъект.Ссылка);
	ЗаполнитьЗначенияСвойств(ОбъектДанных, ЗаказКлиентаОбъект.Ссылка,,"Номер");
	
	//ОбъектДанных.Номер = id.Number;
	
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;


	//ОбъектДанных.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	//
	//ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	//
	//ОбъектДанных.Склад = мСкладОтправитель;
	//
	//ОбъектДанных.Валюта = константы.ВалютаРегламентированногоУчета.Получить();
	//
	//ОбъектДанных.Контрагент = ксп_ИмпортСлужебный.НайтиКонтрагента(деф.Контрагент, мВнешняяСистема);
	//ОбъектДанных.Договор 	= мДоговор;//ксп_ИмпортСлужебный.НайтиДоговор(деф.ДоговорКонтрагента);
	//ОбъектДанных.Партнер 	= ОбъектДанных.Контрагент.Партнер;
	//ОбъектДанных.Соглашение = 
	//	РегистрыСведений.ксп_ДополнительныеНастройкиИнтеграций.Настройка("СоглашениеСКлиентамиДляРеализацяТоваровУслугИзРозница", мВнешняяСистема);
		
	ОбъектДанных.ЗаказКлиента = ЗаказКлиентаОбъект.ссылка;
	
	//ОбъектДанных.СуммаДокумента = деф.СуммаДокумента;
	
	ОбъектДанных.ПередачаПоЗаказам = Истина;
	
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	

	////------------------------------------------------------     ТЧ Товары
	ОбъектДанных.Товары.Очистить();
	Для каждого стрк Из ЗаказКлиентаОбъект.Товары Цикл
		НовСтр = ОбъектДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, стрк);	
	КонецЦикла;

	//------------------------------------------------------ ФИНАЛ


	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	Возврат ОбъектДанных;
	
КонецФункции



#КонецОбласти



#Область Тестирование

// вызывается из формы
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(JsonText) export

	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(JsonText);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Массив") Тогда
		
		НеНайденнаяНоменклатураМассив = Новый Массив;
		
		Для Каждого эл из СтруктураОбъекта Цикл
			ЗагрузитьОбъект(эл);
		КонецЦикла;                       
		
		Рез = Новый Структура;
		Рез.Вставить("НеНайденнаяНоменклатураМассив", НеНайденнаяНоменклатураМассив);
		
		Возврат Рез;
		
	Иначе
	    Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	КонецЕсли;
	
	
КонецФункции 

#КонецОбласти 	

// Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)

	СуществующийОбъект 		= Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе 
		
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);

		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;	
    
КонецФункции



Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


 мВнешняяСистема = "upp";
 
 ИмяСобытияЖР = "ИмпортИзУПП_РеализацияТоваровУслуг";
 
 СобиратьНенайденнуюНоменклатуру = Ложь;
 
 НеНайденнаяНоменклатураМассив = Новый Массив;
 