Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем мСкладОтправитель;
Перем мСкладПолучатель;
Перем мСклад;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","2.0");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СубПлагин_док_СписаниеТоваров");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СубПлагин_док_СписаниеТоваров");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : СубПлагин_док_СписаниеТоваров",
		"Форма_СубПлагин_док_СписаниеТоваров",
		ТипКоманды, 
		Ложь) ;
		
	Возврат ПараметрыРегистрации;
	
КонецФункции


Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
	
КонецПроцедуры

#КонецОбласти 	


#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "" ) Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.СписаниеТоваров") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
    ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ПредставлениеДокументаУПП = "СписаниеТоваров (УПП) №"+деф.Number+" от "+строка(деф.Date);
	
	СкладУПП = ПолучитьСсылкуСправочникаПоДаннымID(деф.Склад, "КСП_СкладыУПП");
	СкладХраненияУПП = СокрЛП(ПолучитьСсылкуСправочникаПоДаннымID(деф.СкладХранения, "КСП_СкладыХраненияУПП")); 
	

    // здесь так детально ищем "логику", потому что нужно писать ошибки в "лог"	
	ВидДокументаУППСсылка = НайтиВидДокументаУПП(СтруктураОбъекта.type); 
	
	
	// ищем элемент спр Виды операций. Там может быть несколько строк со складом хранения в ТЧ Получатели
	МассивВидОперацииПоСкладу = Найти_в_спр_КСП_ВидыОперацийПоСкладамУПП_Получатели(СкладУПП, СкладХраненияУПП);
	
		
	Если МассивВидОперацииПоСкладу = Неопределено ИЛИ МассивВидОперацииПоСкладу.Количество() = 0 Тогда
		ВидДокумента 		= СтруктураОбъекта.type;
		Склад 				= СкладУПП;
		СкладОтправитель 	= Неопределено;
		СкладПолучатель 	= СкладХраненияУПП;
		ТекстСообщения 		= "Не найден вид операции по складу в шапке и складу хранения в ТЧ Получатели! Склад: "+строка(СкладУПП)+", Склад хранения: "+строка(СкладХраненияУПП);
		ЛогикаСклад			= Неопределено;
		ЛогикаПеремещения 	= Неопределено;
		Обработчик 			= Неопределено;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
							ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, ПредставлениеДокументаУПП);

		Возврат Неопределено;
	КонецЕсли;     
	
		
	НачатьТранзакцию();
	
	Попытка
		
	ОбъектДанных = СоздатьПолучитьСсылкуДокумента(id, "ОрдерНаОтражениеНедостачТоваров");
	
	Блокировка = СоздатьБлокировкуОдногоОбъекта(id); 

	
	//------------------------------------- Заполнение реквизитов 

	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	ОбъектДанных.Склад = ПолучитьСкладERP(СкладХраненияУПП);
	ОбъектДанных.Комментарий = деф.Комментарий;
    ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию(); //деф.Ответственный.Ref;
	//ОбъектДанных.Помещение = ;

	ОбъектДанных.Товары.Очистить();

	Для счТовары = 0 По деф.ТабличнаяЧасть_Товары.Количество()-1 Цикл
		стрк = деф.ТабличнаяЧасть_Товары[счТовары];
		СтрокаТЧ = ОбъектДанных.Товары.Добавить();

		_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
		
		//Если СобиратьНенайденнуюНоменклатуру = Истина Тогда
		//	
		//	Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И 
		//		НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
		//		
		//		Если НеНайденнаяНоменклатураМассив.Найти(стрк.Номенклатура.ref) = Неопределено Тогда

		//			НеНайденнаяНоменклатураМассив.Добавить(стрк.Номенклатура.Ref);
		//			
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;

        СтрокаТЧ.Номенклатура = _Номенклатура;
		СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
		//СтрокаТЧ.Назначение = ; // Выяснить назначение 
		//СтрокаТЧ.Серия = ;  
		//СтрокаТЧ.Упаковка = ;
		СтрокаТЧ.Количество = стрк.Количество;
		СтрокаТЧ.КоличествоУпаковок = стрк.Количество;
		//СтрокаТЧ.Ячейка = ;
        //СтрокаТЧ.СтатусУказанияСерий = ;
		// пока не надо
        //СтрокаТЧ.Упаковка = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
			
	КонецЦикла;
 	//------------------------------------------------------ ФИНАЛ	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать(РежимЗаписиДокумента.Запись);
	
	
	ЗафиксироватьТранзакцию();
		
	Исключение                	
	
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа "+ПредставлениеДокументаУПП+". Подробности: "+т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
	
	КонецПопытки;
		
	jsonText = "";
	
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	//Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	
	
	Возврат Истина;
	
КонецФункции

Функция  СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка) 
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ.ОрдерНаОтражениеНедостачТоваров"); 
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка",ДанныеСсылка);
	Возврат Блокировка;
	
КонецФункции
	
#КонецОбласти 	


#Область СлужебныеЗаполненияИПолученияСсылок

// Ищет Вид операции по складу по
//- складу УПП в шапке
//- складу хранения в ТЧ Получатели
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: спр Виды операций по складам УПП
//
Функция Найти_в_спр_КСП_ВидыОперацийПоСкладамУПП_Получатели(СкладУПП, СкладХраненияУПП)   // +++

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СкладУПП", СкладУПП);
	Запрос.УстановитьПараметр("СкладХраненияУПП", СкладХраненияУПП);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТЧ.Ссылка как ВидОперацииПоСкладу
	|
	|ИЗ 
	|	Справочник.КСП_ВидыОперацийПоСкладамУПП.Получатели КАК ТЧ
	|	left join Справочник.КСП_ВидыОперацийПоСкладамУПП КАК шапка
	|	ПО шапка.ссылка = ТЧ.ссылка
	|ГДЕ 
	|	ТЧ.СкладХраненияУПП = &СкладХраненияУПП
	|	И шапка.СкладУПП = &СкладУПП
	|   И Шапка.Отключено = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивОперацийПоСкладу = Новый массив;
	
	Рез = Неопределено;
	сч = 0;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Рез = Выборка.ВидОперацииПоСкладу;
		МассивОперацийПоСкладу.Добавить(Рез);
		сч = сч + 1;
	КонецЦикла;
	
	
	Если сч > 1 Тогда
		
		т = "";
		Для сч = 0 По МассивОперацийПоСкладу.Количество() - 1 Цикл
			
			т = т + строка(МассивОперацийПоСкладу[сч])+" код "+МассивОперацийПоСкладу[сч].Код+", ";
			
		КонецЦикла;
		//ВызватьИсключение "Найдено более одного вида операции по складу! Список операций: "+т;
	КонецЕсли;
	
	Возврат МассивОперацийПоСкладу;
	
КонецФункции


 // Описание_метода
//
// Параметры:
//	ГУИД 	- строка - 36 симв
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)

	СуществующийОбъект = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД.Ref)); 
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект.ПолучитьОбъект();
	Иначе 
		
		ОбъектДанныхСсылка = Документы[ВидОбъекта].СоздатьДокумент();
		ОбъектДанныхСсылка.УстановитьСсылкуНового(СуществующийОбъект);

		Возврат ОбъектДанныхСсылка;
	КонецЕсли;	
    
КонецФункции


Функция ПолучитьСсылкуСправочникаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Ref = СтруктураID.Ref;	
		Если не ЗначениеЗаполнено(СтруктураID.Ref) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	ДанныеСсылка = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураID.Ref));
	Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
		ОбъектДанных = Справочники[ВидОбъекта].СоздатьЭлемент();
		СсылкаНового = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураID.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		Попытка
			ОбъектДанных.Код = СтруктураID.code;
		Исключение
		КонецПопытки;
		Попытка
			ОбъектДанных.Наименование = СтруктураID.Description;
		Исключение
		КонецПопытки;
		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		ОбъектДанных.Записать();
		Возврат СсылкаНового;
	Иначе
		Возврат ДанныеСсылка;
	КонецЕсли;
	
КонецФункции


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("Склад");
	мРеквизиты.Добавить("СкладХранения");
	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция Найти_в_спр_КСП_ВидыОперацийПоСкладамУПП(СкладОтправительУПП)
	
	Рез = Справочники.КСП_ВидыОперацийПоСкладамУПП.НайтиПоРеквизиту("СкладУПП", СкладОтправительУПП);
	Возврат Рез;
	
КонецФункции

 
// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: строка ТЧ Получатели справочника КСП_ВидыОперацийПоСкладамУПП
//
Функция НайтиПолучателяВТЧПолучатели( ВидОперацииПоСкладу , СкладПолучательУПП)
	
	СтрокаТЧ = ВидОперацииПоСкладу.Получатели.Найти(СкладПолучательУПП, "Склад");
	Возврат СтрокаТЧ;
			
КонецФункции


Функция ПолучитьСкладERP(СкладУПП) 

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СкладУПП", СкладУПП);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП КАК СкладУПП,
	|	КСП_ВидыОперацийПоСкладамУПП.СкладЕРП КАК СкладЕРП,
	|	КСП_ВидыОперацийПоСкладамУПП.Ссылка КАК Ссылка,
	|	КСП_ВидыОперацийПоСкладамУПП.ЛогикаОбработкиВШапке КАК ЛогикаОбработки
	|ИЗ
	|	Справочник.КСП_ВидыОперацийПоСкладамУПП КАК КСП_ВидыОперацийПоСкладамУПП
	|ГДЕ
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП = &СкладУПП";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СкладУПП;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СкладЕРП;

КонецФункции


Функция ЗаполненаСсылка(СтруктураID)
	
	Если не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	Попытка
		Ref = СтруктураID.Ref;	
		Если ЗначениеЗаполнено(Ref) Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиВидДокументаУПП(ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТТ.Ссылка КАК ВидДок
		|ИЗ
		|	Справочник.КСП_ВидыДокументовУПП КАК ТТ
		|ГДЕ
		|	
		|	ТТ.Наименование = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Не найден вид документа УПП в спр. видов документов: "+Строка(ВидДокумента);
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВидДок = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВидДок = ВыборкаДетальныеЗаписи.ВидДок;
	КонецЦикла;
		
	Возврат ВидДок;
	
КонецФункции
    
#КонецОбласти



#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти


мВнешняяСистема = "UPP";

ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";


