
#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","СозданиеДокументовРезервирования");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","СозданиеДокументовРезервирования");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
	"Открыть форму : СозданиеДокументовРезервирования",
	"Форма_СозданиеДокументовРезервирования",
	ТипКоманды, 
	Ложь) ;
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
	"Создать Документы Резервирования",
	"СозданиеДокументовРезервирования",
	ТипКоманды, 
	Ложь) ;
	
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ; 
	
КонецПроцедуры

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "СозданиеДокументовРезервирования" Тогда
		СоздатьМодифицироватьДокументРезервирования();	
	КонецЕсли;
	
КонецПроцедуры



#КонецОбласти 	



// Обработчик команды формы
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьМодифицироватьДокументРезервирования() Экспорт
	
	//ВремяНач = ТекущаяУниверсальнаяДатаВМиллисекундах();
	//
	//ИДСессии = Строка(Новый УникальныйИдентификатор);
	//
	//ЗаписьЖурналаРегистрации(МодификацияДокументовРезервирования_ИмпортИзRabbit", 
	//	УровеньЖурналаРегистрации.Информация,,,
	//	"Начало сессии отложенного проведения"
	//	+Символы.ПС+"Сессия ИД: "+ИДСессии);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КСП_ЗагрузкаДокументовПеремещений.Ссылка КАК ГУИД
	|ИЗ
	|	РегистрСведений.КСП_ЗагрузкаДокументовПеремещений КАК КСП_ЗагрузкаДокументовПеремещений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	КСП_ЗагрузкаДокументовПеремещений.Ссылка КАК Ссылка,
	|	КСП_ЗагрузкаДокументовПеремещений.Организация КАК Организация,
	|	КСП_ЗагрузкаДокументовПеремещений.Подразделение КАК Подразделение,
	|	КСП_ЗагрузкаДокументовПеремещений.Склад КАК Склад,
	|	КСП_ЗагрузкаДокументовПеремещений.Сделка КАК Сделка,
	|	КСП_ЗагрузкаДокументовПеремещений.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	КСП_ЗагрузкаДокументовПеремещений.КСП_Коллекция КАК КСП_Коллекция,
	|	КСП_ЗагрузкаДокументовПеремещений.Комментарий КАК Комментарий,
	|	КСП_ЗагрузкаДокументовПеремещений.Ответственный КАК Ответственный,
	|	КСП_ЗагрузкаДокументовПеремещений.Статус КАК Статус,
	|	КСП_ЗагрузкаДокументовПеремещений.Согласован КАК Согласован,
	|	КСП_ЗагрузкаДокументовПеремещений.МаксимальныйКодСтроки КАК МаксимальныйКодСтроки,
	|	КСП_ЗагрузкаДокументовПеремещений.ДатаОтгрузки КАК ДатаОтгрузки,
	|	КСП_ЗагрузкаДокументовПеремещений.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
	|	КСП_ЗагрузкаДокументовПеремещений.Назначение КАК Назначение,
	|	КСП_ЗагрузкаДокументовПеремещений.ДокументОснование КАК ДокументОснование,
	|	КСП_ЗагрузкаДокументовПеремещений.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
	|	КСП_ЗагрузкаДокументовПеремещений.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	КСП_ЗагрузкаДокументовПеремещений.ПотреблениеДляДеятельности КАК ПотреблениеДляДеятельности,
	|	КСП_ЗагрузкаДокументовПеремещений.Приоритет КАК Приоритет,
	|	КСП_ЗагрузкаДокументовПеремещений.Автор КАК Автор,
	|	КСП_ЗагрузкаДокументовПеремещений.Номер КАК Номер,
	|	КСП_ЗагрузкаДокументовПеремещений.Дата КАК Дата,
	|	КСП_ЗагрузкаДокументовПеремещений.КСП_ТипДокументаСлужебногоРезерва КАК КСП_ТипДокументаСлужебногоРезерва,
	|	КСП_ЗагрузкаДокументовПеремещенийТабЧасть.Номенклатура КАК Номенклатура,
	|	КСП_ЗагрузкаДокументовПеремещенийТабЧасть.Характеристика КАК Характеристика,
	|	КСП_ЗагрузкаДокументовПеремещенийТабЧасть.Упаковка КАК Упаковка,
	|	КСП_ЗагрузкаДокументовПеремещенийТабЧасть.СтатьяРасходов КАК СтатьяРасходов,
	|	КСП_ЗагрузкаДокументовПеремещенийТабЧасть.ВариантОбеспечения КАК ВариантОбеспечения,
	|	КСП_ЗагрузкаДокументовПеремещенийТабЧасть.Серия КАК Серия,
	|	КСП_ЗагрузкаДокументовПеремещенийТабЧасть.Обособленно КАК Обособленно,
	|	КСП_ЗагрузкаДокументовПеремещенийТабЧасть.ВариантОбеспеченияДоИзмененияОбновлениемИБ КАК ВариантОбеспеченияДоИзмененияОбновлениемИБ,
	|	КСП_ЗагрузкаДокументовПеремещенийТабЧасть.КоличествоУпаковок КАК КоличествоУпаковок,
	|	КСП_ЗагрузкаДокументовПеремещенийТабЧасть.Количество КАК Количество
	|ИЗ
	|	РегистрСведений.КСП_ЗагрузкаДокументовПеремещений КАК КСП_ЗагрузкаДокументовПеремещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КСП_ЗагрузкаДокументовПеремещенийТабЧасть КАК КСП_ЗагрузкаДокументовПеремещенийТабЧасть
	|		ПО (КСП_ЗагрузкаДокументовПеремещений.Ссылка = КСП_ЗагрузкаДокументовПеремещенийТабЧасть.Ссылка)";
	
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	ТаблицаГУИД = МассивРезультатов[0].Выгрузить();
	
	ДанныеУПП = МассивРезультатов[1].Выгрузить();
	
	
	Для Каждого СтрокаСсылка Из ТаблицаГУИД Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Ссылка", СтрокаСсылка.ГУИД);
		СтрокиДокПеремещения = ДанныеУПП.НайтиСтроки(СтруктураОтбора);
		
		ЗапросДокумент = Новый Запрос;
		ЗапросДокумент.Текст = "ВЫБРАТЬ
		|	ЗаказНаВнутреннееПотребление.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
		|ГДЕ
		|	ЗаказНаВнутреннееПотребление.КСП_ТипДокументаСлужебногоРезерва = &КСП_ТипДокументаСлужебногоРезерва
		|	И ЗаказНаВнутреннееПотребление.КСП_Коллекция = &КСП_Коллекция
		|	И ЗаказНаВнутреннееПотребление.Склад = &Склад
		|	И ЗаказНаВнутреннееПотребление.Подразделение = &Подразделение
		|	И ЗаказНаВнутреннееПотребление.Проведен"; 
		
		ЗапросДокумент.УстановитьПараметр("КСП_ТипДокументаСлужебногоРезерва", СтрокиДокПеремещения[0].КСП_ТипДокументаСлужебногоРезерва);
		ЗапросДокумент.УстановитьПараметр("КСП_Коллекция", СтрокиДокПеремещения[0].КСП_Коллекция);
		ЗапросДокумент.УстановитьПараметр("Склад", СтрокиДокПеремещения[0].Склад);
		ЗапросДокумент.УстановитьПараметр("Подразделение", СтрокиДокПеремещения[0].Подразделение);

		Выборка = ЗапросДокумент.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе 
			ДокументОбъект = Документы.ЗаказНаВнутреннееПотребление.СоздатьОбъект();
			ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокиДокПеремещения[0]); 
		КонецЕсли;	
		
		Для Каждого Элемент Из СтрокиДокПеремещения Цикл 
			
			ТЧТовары = ДокументОбъект.Товары;
			
			СтруктураОтбор = Новый Структура;
			СтруктураОтбор.Вставить("Номенклатура", Элемент.Номенклатура);
			СтруктураОтбор.Вставить("Характеристика", Элемент.Характеристика); 
			
			СтрокаТовары = ТЧТовары.НайтиСтроки(СтруктураОтбор);
			Если Не СтрокаТовары.Количество() = 0 Тогда
				СтрокаТовары[0].Количество = СтрокаТовары[0].Количество + Элемент.Количество;
				СтрокаТовары[0].КоличествоУпаковок = СтрокаТовары[0].КоличествоУпаковок + Элемент.КоличествоУпаковок;
			Иначе
				НоваяСтрокаТовары = ДокументОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, Элемент); 
			КонецЕсли;
			
		КонецЦикла;	
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;	
	
	//Длительность = ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНач;
	//
	//ЗаписьЖурналаРегистрации("ОтложенноеПроведение_ИмпортИзRabbit", 
	//	УровеньЖурналаРегистрации.Ошибка,,,
	//	"Завершение сессии отложенного проведения"
	//	+Символы.ПС+"Сессия ИД: "+ИДСессии+". Длительность "+строка(Длительность)+" мс");
	
	
КонецФункции


