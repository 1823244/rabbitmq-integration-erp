
Перем мИДСессии;
Перем мЧтениеJSON;

Перем Плагины; // структура
Перем КэшОбъектовПлагинов; //ТЗ

Перем ИмяСобытияЖР;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Импорт заказов из RetailCRM");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Импорт заказов из RetailCRM");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.7.306"); // ОБЯЗАТЕЛЬНО!!! //(https://forum.infostart.ru/forum9/topic179193/)
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, "Открыть форму : Импорт заказов из RetailCRM","ЗагрузитьЗаказыИзRetailCRMИнтерактивно",ТипКоманды, Ложь) ;
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, "Выполнить импорт заказов из RetailCRM","ЗагрузитьЗаказыИзRetailCRM",ТипКоманды, Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

// Интерфейс для запуска логики обработки.
Процедура ВыполнитьКоманду(ИмяКоманды, ПараметрыВыполнения) Экспорт
	
	Если ИмяКоманды = "ЗагрузитьЗаказыИзRetailCRM" Тогда
		ВыполнитьИмпортЗаказов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 	



// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура ВыполнитьИмпортЗаказов() Экспорт
	
	мИДСессии = Строка(Новый УникальныйИдентификатор);
	
	//Плагины();

	Если мЧтениеJSON = Неопределено Тогда
		мЧтениеJSON = Новый ЧтениеJSON;
	КонецЕсли;
	
	ЗагрузитьДанныеИзСайта("Заказы");	
		
КонецПроцедуры



Процедура КакПолучитьСтраницуСайтаЧерезHttpЗапросНаКлиенте()
 
    // В сети есть сайт http://example.com
    // Запросим содержимое его главной страницы.
 
    // Подключаемся к сайту.
    Соединение = Новый HTTPСоединение(
        "example.com", // сервер (хост)
        80, // порт, по умолчанию для http используется 80, для https 443
        , // пользователь для доступа к серверу (если он есть)
        , // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
 
    // Получаем текст корневой страницы через GET-запрос.
    Запрос = Новый HTTPЗапрос("/");
    // Если бы нужна была другая страница, мы бы указали,
    // например, "/about" или "/news".
 
    Результат = Соединение.Получить(Запрос);
 
    Сообщить("Нам вернули код: " + Результат.КодСостояния);
    // Что примерно означают коды результата запроса:
    // [100, 299] - хороший код возврата
    // [300, 399] - нас перенаправляют на другую страницу,
    //              причём 302 - код постоянного перенаправления
    // [400, 499] - ошибка запроса
    // [500, 599] - ошибка сервера
 
    // в теле результата запроса - текст обычной html страницы
    Сообщить("Тело результата: " + Результат.ПолучитьТелоКакСтроку());   
 
КонецПроцедуры




#Область Плагины

// Собирает плагины из спр Доп. обработки в ТЗ
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиПлагиныВДопОбработках()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	спр.Ссылка КАК Ссылка,
		|	спр.ИмяОбъекта КАК ИмяОбъекта
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК спр
		|ГДЕ
		|	спр.ИмяОбъекта ПОДОБНО ""Плагин_импорт_из_RetailCRM%"" И спр.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Подключает плагины - обработки, формирующие json-тексты из объектов базы данных
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
Процедура Плагины() Экспорт
	
	Если ТипЗнч(Плагины) <> Тип("Структура") Тогда
		Плагины = Новый Структура;
	Иначе 
		Плагины.Очистить();
	КонецЕсли;
	
	
	// универсальный код подключения плагина
	
	ТЗ = НайтиПлагиныВДопОбработках();
	Для каждого стрк Из ТЗ Цикл

		ИмяОбработки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(стрк.ИмяОбъекта, ".");//разделим на имя расширени
		
		массивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяОбработки[0], "_");
		
		//Плагин_RabbitMQ_импорт_из_ЕРП_Справочник_Номенклатура.epf	
		//ключ - тип объекта МД (напр. Справочник_Номенклатура), значение - ссылка в Доп обработках
		Ключ = массивСлов[5] + "_" + массивСлов[6];

		Плагины.Вставить(Ключ, стрк.Ссылка);
		
	КонецЦикла;	
	
	
	// теперь создание объектов обработок
	
	КэшОбъектовПлагинов = Новый ТаблицаЗначений;
	КэшОбъектовПлагинов.Колонки.Добавить("ТипОбъекта");//строка в формате "Справочник_Номенклатура"
	КэшОбъектовПлагинов.Колонки.Добавить("ПлагинСсылка");//спр ссылка Доп. обработки
	КэшОбъектовПлагинов.Колонки.Добавить("ОбъектПлагина");//объект обработки
	//индексы
	КэшОбъектовПлагинов.Индексы.Добавить("ТипОбъекта");
	КэшОбъектовПлагинов.Индексы.Добавить("ПлагинСсылка");
	
	Для каждого стрк Из Плагины Цикл
		НовСтр = КэшОбъектовПлагинов.Добавить();
		НовСтр.ТипОбъекта 		= стрк.Ключ;
		НовСтр.ПлагинСсылка 	= стрк.Значение;
		НовСтр.ОбъектПлагина 	= ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(стрк.Значение);
	КонецЦикла;
	
		
КонецПроцедуры

// Ищет плагин для указанного типа объекта в кэше - ТЗ "КэшОбъектовПлагинов"
// Параметры:
//	ТипОбъекта 	- строка - это не ТипЗнч()! а вот так: Объект.Метаданные().ПолноеИмя();
//	Плагин - объект обработки - возвращаемый параметр
//
// Возвращаемое значение:
//	Тип: Булево. Истина в случае успеха
//
Функция НайтиПлагин(Знач ТипОбъекта, Плагин = Неопределено)
	
	ТипОбъекта = СтрЗаменить(ТипОбъекта, ".", "_");
	
	Рез = КэшОбъектовПлагинов.Найти(ТипОбъекта, "ТипОбъекта");
	Если НЕ Рез = Неопределено Тогда
		Плагин = Рез.ОбъектПлагина;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции


#КонецОбласти 	

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	//Если Свойство = "Сумма" Тогда
	//	Возврат XMLЗначение(Тип("Число"),Значение);
	//КонецЕсли;
	// в 1С:Розница нет спр. Валюты!
	//Если Свойство = "Валюта" Тогда
	//	Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	//КонецЕсли;
	
КонецФункции



//--------------------------------------------------------------------------------

// Описание_метода
//
// Параметры:
//	ИмяОчереди 	- строка - очередь, откуда читаем данные
//	Клиент - Неопределено (прод) / Обработка (тест) - только для тестирования! 
//		Сюда передается мок (встроенная или внешняя обработка (объекь), которая
//		имитируем методы Рэббита.
//		Тест будет использовать объект этой обработки, созданный из
//		подсистемы Доп обработок
//
Процедура ЗагрузитьДанныеИзСайта(ТипОбъектов = "Заказы") Экспорт

	мИДСессии = Строка(Новый УникальныйИдентификатор);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Информация,,,"Сессия запущена.ИД "+мИДСессии);

	КоличествоПолученных = 0;
		
	
	//ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Информация,,,"Получено сообщений "+строка(КоличествоПолученных)+". Сессия ИД "+мИДСессии);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Информация,,,"Сессия Завершена.ИД "+мИДСессии);

КонецПроцедуры

#Область УниверсальныеДляЗапросовКСайту

Функция ЗапросCRM(АдресСкрипта, ИмяСервера = Неопределено)
	
	//попробовать убрать получение константы из функции	
	Если ИмяСервера = Неопределено Тогда 
		ИмяСервера = crm_RetailCRMОбщий.ПолучитьЗначениеКонстанты("ИмяСервера");
	КонецЕсли;
		
	Сообщить("Запрос к RetailCRM ...");	
	ответ = crm_RetailCRMОбщий.HTTPзапросGET(ИмяСервера,АдресСкрипта);		
	Сообщить("Разбор ответа ...");
	
	Возврат crm_RetailCRMОбщий.UnJSONТест(ответ);
	
КонецФункции

#КонецОбласти


#Область __ОсновнойМетодИмпорта

//ЕНС. Вызывается из Мод_ЗагрузитьЗаказы()
// Параметры
//	МассивИД - массив - элементы массива - строки, идентификаторы заказов
//	ТЗброни - ТЗ - 
//
Процедура ЗагрузкаЗаказов(МассивИД, ТЗброни = Неопределено)
	
	//Загружаем заказы пачками чтобы избавиться от переполнения строки запроса и памяти на сервере на одну операцию
	ИмяСервера  = crm_RetailCRMОбщий.ПолучитьЗначениеКонстанты("ИмяСервера");
	ApiKey 		= crm_RetailCRMОбщий.ПолучитьЗначениеКонстанты("КлючCRM");
	
	КоличествоЗаказов = 0;
	
	МассивИДЗаказов = Новый Массив;
	
	фильтрИд = "";	
	
	Для Инд = 1 по МассивИД.Количество() Цикл
		
		КоличествоЗаказов = КоличествоЗаказов  + 1;
		
		МассивИДЗаказов.Добавить(МассивИД[Инд -1]);
		
		фильтрИд = фильтрИд + "filter[ids][]=" + Формат(МассивИД[Инд -1].НомерЗаказа,"ЧГ=") + "&";
		
		Если  КоличествоЗаказов = 50 тогда 
			
			АдресСкрипта = "/api/v5/orders?" + фильтрИд + "&limit=100&apiKey=" + ApiKey;	  		
			
			Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера); 
			
			Мод_СозданиеЗаказов(Ответ["orders"]);
			
			КоличествоЗаказов =0;
			МассивИДЗаказов = Новый Массив; 
			фильтрИд = "";	
			
		КонецЕсли;
		
	КонецЦикла;
	
	АдресСкрипта = "/api/v5/orders?" + фильтрИд + "&limit=100&apiKey=" + ApiKey;
	
	Ответ = ЗапросCRM(АдресСкрипта, ИмяСервера); 
	
	Мод_СозданиеЗаказов(Ответ["orders"], ТЗброни);
	
	//Сообщить("Загрузка заказов завершена");
	
КонецПроцедуры

#КонецОбласти

ИмяСобытияЖР = "Импорт_Заказов_из_RetailCRM";

                              