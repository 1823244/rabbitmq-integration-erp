Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем мЛоггер;
Перем мИдВызова;

Перем мСкладПолучательЕРП;
Перем мСкладОтправительЕРП; 

Перем мСкладХраненияУПП_отправитель;
Перем мСкладХраненияУПП_Получатель;

Перем мjsonText;
Перем мПредставлениеДокументаУПП;

Перем мСкладОтправительУПП;
Перем мСкладПолучательУПП;

Перем мВидДокументаУППСсылка;
Перем мПроверитьОтключено;
Перем мПроверитьАктивность;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	
	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.27");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Документ_ПеремещениеТоваров");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Документ_ПеремещениеТоваров");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
	"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Документ_ПеремещениеТоваров",
	"Форма_Плагин_RabbitMQ_импорт_из_УПП_Документ_ПеремещениеТоваров",
	ТипКоманды, 
	Ложь) ;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти


#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	мjsonText = jsonText;
	
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из УПП: Перемещение товаров");
	
	Попытка
		
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.ПеремещениеТоваров") Тогда
			мЛоггер.ерр("Неверный тип входящего объекта. сообщение пропущено.");
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;
		
		мПредставлениеДокументаУПП = "Перемещение товаров №"+деф.Number+" от "+строка(деф.Date);
		
		мВидДокументаУППСсылка = НайтиВидДокументаУПП("Документ.ПеремещениеТоваров");
		
		//Виды ошибок описаны здесь:
		//https://wiki.elis.ru/pages/viewpage.action?pageId=3964935
		
		// Этап 1
		
		//-------------------------- Получатель -------------------------
		
		мСкладПолучательУПП = ПолучитьСсылкуСправочникаПоДаннымID(деф.СкладПолучатель, "КСП_СкладыУПП");
		
		Если НЕ ЗначениеЗаполнено(мСкладПолучательУПП)
			ИЛИ ( НЕ ЗначениеЗаполнено(мСкладПолучательУПП.ВерсияДанных) 
			И ТипЗнч(мСкладПолучательУПП) = Тип("СправочникСсылка.КСП_СкладыУПП") ) Тогда 
			
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			ТекстСообщения 		= "Этап 01 Поиск складов УПП. Код 110. Не найден склад-получатель!";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Ложь, // ошибки исправлены
				Id.ref);
			
			мЛоггер.ерр("Документ не загружен! " + ТекстСообщения + Символы.ПС + мПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ВидОперацииПоСкладуПолучатель = Найти_в_спр_КСП_ВидыОперацийПоСкладамУПП(мСкладПолучательУПП);
		
		Если НЕ ЗначениеЗаполнено(ВидОперацииПоСкладуПолучатель) Тогда
			
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			ТекстСообщения 		= "Этап 02 Поиск видов операций УПП. Код 210. Не найден ВидОперацииПоСкладу-Получатель!";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Ложь, // ошибки исправлены
				Id.ref);
			
			мЛоггер.ерр("Документ не загружен! " + ТекстСообщения + Символы.ПС + мПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если мПроверитьОтключено Тогда
			Если ВидОперацииПоСкладуПолучатель.Отключено Тогда
				
				ВидДокумента 		= СтруктураОбъекта.type;
				Склад 				= Неопределено;
				СкладОтправитель 	= мСкладОтправительУПП;
				СкладПолучатель 	= мСкладПолучательУПП;
				ТекстСообщения 		= "Этап 02 Поиск видов операций УПП. Код 220.
					|Для ВидОперацииПоСкладу-Получатель " + ВидОперацииПоСкладуПолучатель + " установлено ""Отключено""!";
				ЛогикаСклад			= Неопределено;
				ЛогикаПеремещения 	= Неопределено;
				Обработчик 			= Неопределено;
				РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
					ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
					деф.Number,
					деф.date,
					Ложь, // ошибки исправлены
					Id.ref);
				
				мЛоггер.ерр("Документ не загружен! " + ТекстСообщения + Символы.ПС + мПредставлениеДокументаУПП);
				
				Возврат Неопределено;
				
			КонецЕсли;
		КонецЕсли;
		
		Если мПроверитьАктивность Тогда
			Если НЕ ВидОперацииПоСкладуПолучатель.Активность Тогда
				
				ВидДокумента 		= СтруктураОбъекта.type;
				Склад 				= Неопределено;
				СкладОтправитель 	= мСкладОтправительУПП;
				СкладПолучатель 	= мСкладПолучательУПП;
				ТекстСообщения 		= "Этап 02 Поиск видов операций УПП. Код 220.
					|Для ВидОперацииПоСкладу-Получатель " + ВидОперацииПоСкладуПолучатель + " НЕ установлена ""Активность""!";
				ЛогикаСклад			= Неопределено;
				ЛогикаПеремещения 	= Неопределено;
				Обработчик 			= Неопределено;
				РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
					ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
					деф.Number,
					деф.date,
					Ложь, // ошибки исправлены
					Id.ref);
				
				мЛоггер.ерр("Документ не загружен! " + ТекстСообщения + Символы.ПС + мПредставлениеДокументаУПП);
				
				Возврат Неопределено;
				
			КонецЕсли;
		КонецЕсли;
		
		мСкладПолучательЕРП = ВидОперацииПоСкладуПолучатель.СкладЕРП;
		
		Если НЕ ЗначениеЗаполнено(мСкладПолучательЕРП) Тогда
			
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			ТекстСообщения 		= "Для ВидОперацииПоСкладу: " + Строка(ВидОперацииПоСкладуПолучатель) + " не заполнен СкладЕРП!";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Ложь, // ошибки исправлены
				id.ref);
			
			мЛоггер.ерр("ВидОперацииПоСкладу: %1
				|Реквизит СкладЕРП не заполнен!
				|Документ УПП: %2", 
				Строка(ВидОперацииПоСкладуПолучатель), мПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если ВидОперацииПоСкладуПолучатель.Отправители.Количество() = 0 Тогда
			
			мЛоггер.инфо("ВидОперацииПоСкладу: %1
				|Табличная часть Отправители не заполнена!, 
				|УПП: Документ: %2",
				строка(ВидОперацииПоСкладуПолучатель), мПредставлениеДокументаУПП);
			
		КонецЕсли;
		
		Если ВидОперацииПоСкладуПолучатель.Получатели.Количество() = 0 Тогда
			
			мЛоггер.инфо("ВидОперацииПоСкладу: %1
				|Табличная часть Получатели не заполнена!, 
				|УПП: Документ: %2",
				строка(ВидОперацииПоСкладуПолучатель), мПредставлениеДокументаУПП);
			
		КонецЕсли;
		
		мСкладХраненияУПП_Получатель = ПолучитьСсылкуСправочникаПоДаннымID(деф.СкладХраненияПолучатель, "КСП_СкладыХраненияУПП");
		
		//---------------------------------------------------------------
		
		//-------------------------- Отправитель -------------------------
		
		мСкладОтправительУПП = ПолучитьСсылкуСправочникаПоДаннымID(деф.СкладОтправитель, "КСП_СкладыУПП");
		
		Если НЕ ЗначениеЗаполнено(мСкладОтправительУПП)
			ИЛИ ( НЕ ЗначениеЗаполнено(мСкладОтправительУПП.ВерсияДанных) 
			И ТипЗнч(мСкладОтправительУПП) = Тип("СправочникСсылка.КСП_СкладыУПП") ) Тогда 
			// так проверяем на битую ссылку
			
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= Неопределено;
			ТекстСообщения 		= "Этап 01 Поиск складов УПП. Код 100. Не найден склад-отправитель!";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Ложь, // ошибки исправлены
				Id.ref);
			
			мЛоггер.ерр("Документ не загружен! " + ТекстСообщения + Символы.ПС + мПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ВидОперацииПоСкладуОтправитель = Найти_в_спр_КСП_ВидыОперацийПоСкладамУПП(мСкладОтправительУПП);
		//мСкладОтправительЕРП = Неопределено;
		//Если НЕ ЗначениеЗаполнено(ВидОперацииПоСкладуПолучатель) Тогда
		//	ТекстСообщения = "Этап 02 Поиск видов операций УПП. Код 211.
		//		|Не найден ВидОперацииПоСкладу-Отправитель! В документах не будет заполнен склад-отправитель.";
		//	мЛоггер.варн(ТекстСообщения + Символы.ПС + мПредставлениеДокументаУПП);
		//КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВидОперацииПоСкладуОтправитель) Тогда
			
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			ТекстСообщения 		= "Этап 02 Поиск видов операций УПП. Код 211. Не найден ВидОперацииПоСкладу-Отправитель!";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Ложь, // ошибки исправлены
				Id.ref);
			
			мЛоггер.ерр("Документ не загружен! " + ТекстСообщения + Символы.ПС + мПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		мСкладОтправительЕРП = ВидОперацииПоСкладуОтправитель.СкладЕРП;
		
		Если НЕ ЗначениеЗаполнено(мСкладОтправительЕРП) Тогда
			
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			ТекстСообщения 		= "Для ВидОперацииПоСкладу: " + Строка(ВидОперацииПоСкладуОтправитель) + " не заполнен СкладЕРП!";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Ложь, // ошибки исправлены
				id.ref);
			
			мЛоггер.ерр("ВидОперацииПоСкладу: %1
				|Реквизит СкладЕРП не заполнен!
				|Документ УПП: %2", 
				строка(ВидОперацииПоСкладуОтправитель), мПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		мСкладХраненияУПП_Отправитель = ПолучитьСсылкуСправочникаПоДаннымID(деф.СкладХраненияОтправитель, "КСП_СкладыХраненияУПП");
		
		//---------------------------------------------------------------
		
		Если мСкладОтправительУПП = мСкладПолучательУПП Тогда
			
			мЛоггер.инфо("Выбрана схема: ПеремещениеНаОдномСкладе");
			Возврат ОбработкаСитуацииПеремещениеНаОдномСкладе(ВидОперацииПоСкладуПолучатель, СтруктураОбъекта);
			
		Иначе
			
			мЛоггер.инфо("Выбрана схема: КогдаСкладыОтличаются");
			Возврат ОбработкаСитуацииКогдаСкладыОтличаются(ВидОперацииПоСкладуПолучатель, СтруктураОбъекта);
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = "Плагин: Плагин_RabbitMQ_импорт_из_УПП_Документ_ПеремещениеТоваров .
			|Подробности: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
		
		ВидДокумента 		= СтруктураОбъекта.type;
		Склад 				= Неопределено;
		СкладОтправитель 	= мСкладОтправительУПП;
		СкладПолучатель 	= мСкладПолучательУПП;
		ТекстСообщения 		= "Ошибка загрузки: " + ТекстОшибки;
		ЛогикаПеремещения 	= Неопределено;
		ЛогикаСклад 		= Неопределено;
		Обработчик 			= Неопределено;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
			ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);
		
		мЛоггер.ерр("Общая ошибка загрузки документа! 
			|Подробности: %1 
			|УПП: Документ: %2", 
			ТекстОшибки, мПредставлениеДокументаУПП);
		
		//    ОБЯЗАТЕЛЬНО!!! Потому что в оркестраторе вызов плагина в попытке. и если была ошибка, надо сделать BasicReject()
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецФункции

// Ищет "логику" только по виду документа в ТЧ ОбработчикиТиповДокументов
// В параметре передается массив элементов
// Подразумевается, что в этом массиве есть только один элемент, в ТЧ которого
// есть искомый вид документа УПП
// Если это не так, функция вернет первый элемент массива, проходящий по условию.
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиЛогикуПоВидуДокумента2(массивЛогик)
	
	Логика = Неопределено;
	
	Для каждого Логика Из массивЛогик Цикл
		Если НЕ ЗначениеЗаполнено(Логика) Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого строкаЛогики Из Логика.ОбработчикиТиповДокументов Цикл
			
			Если строкаЛогики.ВидДокументаУПП = мВидДокументаУППСсылка Тогда
				Возврат Логика;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Логика;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ОбработкаСитуацииКогдаСкладыОтличаются(ВидОперацииПоСкладуПолучатель, СтруктураОбъекта)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	// сначала найти строки со складом мСкладОтправительУПП
	// если не найдем - ищем с пустым складом (она всего одна для каждого вида документа)
	
	Логика = Неопределено;
	
	//МассивСтрокСкладаОтправителя = Новый Массив;
	//Для каждого СтрокаОтправитель Из ВидОперацииПоСкладуПолучатель.Отправители Цикл
	//	Если ЗначениеЗаполнено(СтрокаОтправитель.Склад) и (СтрокаОтправитель.Склад = мСкладОтправительУПП) Тогда
	//		МассивСтрокСкладаОтправителя.Добавить(СтрокаОтправитель);
	//	КонецЕсли;
	//КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Склад", мСкладОтправительУПП);
	МассивСтрокСкладаОтправителя = ВидОперацииПоСкладуПолучатель.Отправители.НайтиСтроки(ПараметрыОтбора);
	
	Если МассивСтрокСкладаОтправителя.Количество() = 0 Тогда
		
		МассивСтрокСкладПустой = Новый Массив;
		//ищем строки, где склад не заполнен. она должна быть одна. если их больше - выберем любую одну
		//Для каждого СтрокаОтправитель Из ВидОперацииПоСкладуПолучатель.Отправители Цикл
		//	Если НЕ ЗначениеЗаполнено(СтрокаОтправитель.Склад) Тогда
		//		МассивСтрокСкладПустой.Добавить(СтрокаОтправитель);
		//	КонецЕсли;
		//КонецЦикла;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Склад", Справочники.КСП_СкладыУПП.ПустаяСсылка());
		МассивСтрокСкладПустой = ВидОперацииПоСкладуПолучатель.Отправители.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрокСкладПустой.Количество() = 0 Тогда
			
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			ТекстСообщения 		= "Этап 04. Код 436. Логика не найдена. В ТЧ Отправители нет строк:
			|1) со складом-отправителем из перемещения; 
			|2) с пустым складом!";
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Ложь, // ошибки исправлены
				Id.ref);
			
			мЛоггер.ерр("Документ не загружен! %1
				|Документ: %2", 
				ТекстСообщения, мПредставлениеДокументаУПП);
			
			Возврат Неопределено;
			
		Иначе
			
			МассивЛогик = Новый Массив;
			Для каждого эл Из МассивСтрокСкладПустой Цикл
				МассивЛогик.Добавить(эл.ЛогикаОбработкиВТЧ);
			КонецЦикла;
			Логика = НайтиЛогикуПоВидуДокумента2(МассивЛогик);
			
		КонецЕсли;
		
	Иначе
		
		МассивЛогик = Новый Массив;
		Для каждого эл Из МассивСтрокСкладаОтправителя Цикл
			МассивЛогик.Добавить(эл.ЛогикаОбработкиВТЧ);
		КонецЦикла;
		Логика = НайтиЛогикуПоВидуДокумента2(МассивЛогик);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Логика) Тогда
		
		ВидДокумента 		= СтруктураОбъекта.type;
		Склад 				= Неопределено;
		СкладОтправитель 	= мСкладОтправительУПП;
		СкладПолучатель 	= мСкладПолучательУПП;
		ТекстСообщения 		= "Этап 04. Код 435. Логика не найдена";
		ЛогикаСклад			= Неопределено;
		ЛогикаПеремещения 	= Неопределено;
		Обработчик 			= Неопределено;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
		ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
		деф.Number,
		деф.date,
		Ложь, // ошибки исправлены
		Id.ref);
		
		мЛоггер.ерр("Документ не загружен! %1
			|Документ: %2", 
			ТекстСообщения, мПредставлениеДокументаУПП);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Субплагин = Неопределено;
	Для каждого СтрокаЛогики Из Логика.ОбработчикиТиповДокументов Цикл
		
		Если СтрокаЛогики.ВидДокументаУПП = мВидДокументаУППСсылка Тогда
			Субплагин = СтрокаЛогики.СсылкаНаДопОбработку;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Субплагин) Тогда
		
		ВидДокумента 		= СтруктураОбъекта.type;
		Склад 				= Неопределено;
		СкладОтправитель 	= мСкладОтправительУПП;
		СкладПолучатель 	= мСкладПолучательУПП;
		ТекстСообщения 		= "Этап 04. Код 420. Не заполнен субплагин в ТЧ элемента логики! 
			|Логика обработки: "+строка(Логика);
		ЛогикаПеремещения 	= Неопределено;
		ЛогикаСклад 		= Логика;
		Обработчик 			= Неопределено;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
			ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);
		
		мЛоггер.ерр("Документ не загружен! %1
			|Документ: %2", 
			ТекстСообщения, мПредставлениеДокументаУПП);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	// создание объекта из эл спр "Доп отчеты и обработки"
	
	ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(Субплагин);
	ОбъектОбработчика = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(Субплагин);
	
	Если ОбъектОбработчика = Неопределено Тогда
		
		ВидДокумента 		= СтруктураОбъекта.type;
		Склад 				= Неопределено;
		СкладОтправитель 	= мСкладОтправительУПП;
		СкладПолучатель 	= мСкладПолучательУПП;
		ТекстСообщения 		= "Этап 04. Код 430. НЕ удалось подключить субплагин импорта! 
			|Логика "+строка(ЛогикаПеремещения)+" Субплагин: "+строка(Субплагин);
		ЛогикаПеремещения 	= Неопределено;
		ЛогикаСклад 		= Логика;
		Обработчик 			= Субплагин;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
		ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
		деф.Number,
		деф.date,
		Ложь, // ошибки исправлены
		Id.ref);
		
		мЛоггер.ерр("Документ не загружен! %1
			|Документ: %2", 
			ТекстСообщения, мПредставлениеДокументаУПП);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// запуск импорта
	
	Попытка
		
		Результат = ОбъектОбработчика.ЗагрузитьОбъект(СтруктураОбъекта, мjsonText, мСкладОтправительЕРП, мСкладПолучательЕРП);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			//успешно
			НайденноеЗначение = "";
			Если Результат.Свойство("Перемещение", НайденноеЗначение) Тогда
				ЗагруженныйДокумент = НайденноеЗначение;
			КонецЕсли;
			
			Если Результат.Свойство("ПО", НайденноеЗначение) Тогда
				ЗагруженныйДокумент = НайденноеЗначение;
			КонецЕсли;
			
			Если Результат.Свойство("ЗаказНаВнутреннееПотреблениеСсылка", НайденноеЗначение) Тогда
				ЗагруженныйДокумент = НайденноеЗначение;
			КонецЕсли;
			
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			ТекстСообщения 		= "Успешно загружен";
			ЛогикаПеремещения 	= Неопределено;
			ЛогикаСклад 		= Логика;
			Обработчик 			= Субплагин;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Истина, // ошибки исправлены
				Id.ref,
				ЗагруженныйДокумент);
			
			мЛоггер.Варн("Загружен Документ!
				|УПП: Документ: %1,
				|ЕРП: %2,
				|ВариантЗагрузки: %3",
				мПредставлениеДокументаУПП, строка(ЗагруженныйДокумент), Субплагин);
			
		Иначе
			
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			ТекстСообщения 		= "Успешно загружен";
			ЛогикаПеремещения 	= Неопределено;
			ЛогикаСклад 		= Логика;
			Обработчик 			= Субплагин;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
				ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Ложь, // ошибки исправлены
				Id.ref);
			
			мЛоггер.ерр("Документ не создан!
				|УПП: Документ: %1,
				|ЕРП: %2,
				|ВариантЗагрузки: %3",
				мПредставлениеДокументаУПП, "", Субплагин);
			
		КонецЕсли;
		
	Исключение
		
		ВидДокумента 		= СтруктураОбъекта.type;
		Склад 				= Неопределено;
		СкладОтправитель 	= мСкладОтправительУПП;
		СкладПолучатель 	= мСкладПолучательУПП;
		ТекстСообщения 		= "Ошибка импорта: "+ОписаниеОшибки();
		ЛогикаПеремещения 	= Неопределено;
		ЛогикаСклад 		= Неопределено;
		Обработчик 			= Неопределено;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
			ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);
		
		мЛоггер.ерр("Ошибка загрузки документа!
			|Подробнее: %1,
			|Документ: %2", 
			ТекстСообщения, мПредставлениеДокументаУПП);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Результат; //здесь не всегда ссылка. может быть структура
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ОбработкаСитуацииПеремещениеНаОдномСкладе(ВидОперацииПоСкладуПолучатель, СтруктураОбъекта)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ВидДокумента 		= СтруктураОбъекта.type;
	Склад 				= Неопределено;
	СкладОтправитель 	= мСкладОтправительУПП;
	СкладПолучатель 	= мСкладПолучательУПП;
	ТекстСообщения 		= "Этап 04. Код 470. Склады Получатель и Отправитель равны! Ситуация пока не обрабатывается";
	ЛогикаСклад			= Неопределено;
	ЛогикаПеремещения 	= Неопределено;
	Обработчик 			= Неопределено;
	РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
		ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
		деф.Number,
		деф.date,
		Ложь, // ошибки исправлены
		Id.ref);
	
	мЛоггер.Варн("Документ не загружен!
		|Документ: %1, 
		|Подробнее: %2",
		мПредставлениеДокументаУПП, ТекстСообщения);
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти


#Область СлужебныеЗаполненияИПолученияСсылок

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция Найти_в_спр_КСП_ВидыОперацийПоСкладамУПП(СкладУППСсылка)
	
	Рез = Справочники.КСП_ВидыОперацийПоСкладамУПП.НайтиПоРеквизиту("СкладУПП", СкладУППСсылка);
	Возврат Рез;
	
КонецФункции

#КонецОбласти


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export
	
	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("СкладОтправитель");
	мРеквизиты.Добавить("СкладПолучатель");
	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

Функция ПолучитьСсылкуДокументаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если Не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Документы[ВидОбъекта].ПустаяСсылка();;
	КонецЕсли;
	
	ГУИД = "";
	Если СтруктураID.Свойство("Ref", ГУИД) Тогда
		Если НЕ ЗначениеЗаполнено(ГУИД) ИЛИ ГУИД="00000000-0000-0000-0000-000000000000" Тогда
			Возврат Документы[ВидОбъекта].ПустаяСсылка();
		КонецЕсли;
		Возврат Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Иначе
		Возврат Документы[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуСправочникаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	
	Если Не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();;
	КонецЕсли;
	
	ГУИД = "";
	Если СтруктураID.Свойство("Ref", ГУИД) Тогда
		Если НЕ ЗначениеЗаполнено(ГУИД) ИЛИ ГУИД="00000000-0000-0000-0000-000000000000" Тогда
			Возврат Справочники[ВидОбъекта].ПустаяСсылка();
		КонецЕсли;
		Возврат Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	Иначе
		Возврат Справочники[ВидОбъекта].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Ищет спр Вид документа УПП по строке - наименованию
//
// Параметры:
//	ВидДокумента 	- строка - 
//
// Возвращаемое значение:
//	Тип: спр ссылка КСП_ВидыДокументовУПП
//
Функция НайтиВидДокументаУПП(ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТТ.Ссылка КАК ВидДок
	|ИЗ
	|	Справочник.КСП_ВидыДокументовУПП КАК ТТ
	|ГДЕ
	|	
	|	ТТ.Наименование = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Не найден вид документа УПП в спр. видов документов: "+Строка(ВидДокумента);
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВидДок = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВидДок = ВыборкаДетальныеЗаписи.ВидДок;
	КонецЦикла;
	
	
	Возврат ВидДок;
	
КонецФункции

// ЕНС 2024-04-19 Этот алгоритм пока не используется, оставлю здесь, как идею для работч со складами хранения
// Ищет в ТЧ Получатели/Отправители "логику" с учетом вида документа и Склада и склада хранения
//
// Параметры:
//	ТЧПолучателиОтправители 	- таб часть справочника Виды операций по складам УПП - 
//
// Возвращаемое значение:
//	Тип: спр ссылка КСП_ЛогикаОбработкиДвиженияПоСкладуУПП
//
Функция НайтиЛогикуПоВидуДокумента(ТЧПолучателиОтправители, СкладХраненияУПП, мВидДокументаУППСсылка, СкладУПП)
	
	ЛогикаОбработки = Неопределено;
	
	//ЕНС. Найти все строки в ТЧ, где есть нужный склад и искомый вид документа в "логике" (там это ТЧ ОбработчикиТиповДокументов)
	// Если это одна строка - возвращаем логику
	// Если больше одной - ищем в них склад хранения УПП
	
	МассивСтрокТЧ = Новый Массив;   // строки ТЧ Получатели
	
	Для каждого стрк Из ТЧПолучателиОтправители Цикл
		Если НЕ ЗначениеЗаполнено(стрк.ЛогикаОбработкиВТЧ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ стрк.Склад = СкладУПП Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого стркЛогика Из стрк.ЛогикаОбработкиВТЧ.ОбработчикиТиповДокументов Цикл
			Если стркЛогика.ВидДокументаУПП = мВидДокументаУППСсылка Тогда
				МассивСтрокТЧ.Добавить(стрк);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если МассивСтрокТЧ.Количество() = 1 Тогда
		Возврат МассивСтрокТЧ[0].ЛогикаОбработкиВТЧ;
	КонецЕсли;
	
	// если нашли более 1 строки в ТЧ Получатели - ищем нужную по складу хранения УПП (если он заполнен)
	
	Если ЗначениеЗаполнено(СкладХраненияУПП) Тогда
		Для каждого стрк Из МассивСтрокТЧ Цикл
			Если стрк.СкладХраненияУПП = СкладХраненияУПП Тогда
				Возврат стрк.ЛогикаОбработкиВТЧ;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		// если склад хранения не указан - поищем строку с пустым (не будем надеяться сравнение пустых значений)
		Для каждого стрк Из МассивСтрокТЧ Цикл
			Если НЕ ЗначениеЗаполнено(стрк.СкладХраненияУПП) Тогда
				Возврат стрк.ЛогикаОбработкиВТЧ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// вернем любой
	Для каждого стрк Из МассивСтрокТЧ Цикл
		Возврат стрк.ЛогикаОбработкиВТЧ;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции      

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиСубПлагинВЛогикеПоВидуДокумента(ЛогикаОбработки, мВидДокументаУППСсылка)
	
	Для каждого стркОбработчик Из ЛогикаОбработки.ОбработчикиТиповДокументов Цикл
		
		Если стркОбработчик.ВидДокументаУПП = мВидДокументаУППСсылка Тогда
			
			Возврат стркОбработчик.СсылкаНаДопОбработку;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции 

Функция сетИдВызова(пИдВызова) Экспорт
	
	мИдВызова = пИдВызова;
	Возврат ЭтотОбъект;
	
КонецФункции


мВнешняяСистема = "UPP";
ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";

мПроверитьОтключено = Ложь;
мПроверитьАктивность = Истина;
