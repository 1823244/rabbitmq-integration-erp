Перем мВнешняяСистема;
Перем ИмяСобытияЖР;
Перем мЛоггер;
Перем мИдВызова;

Перем мСкладПолучательЕРП;
Перем мСкладОтправительЕРП; 

Перем мСкладХраненияУПП_отправитель;
Перем мСкладХраненияУПП_Получатель;

Перем мjsonText;
Перем мПредставлениеДокументаУПП;

Перем мСкладОтправительУПП;
Перем мСкладПолучательУПП;

Перем мВидДокументаУППСсылка;



#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.22");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Документ_ПеремещениеТоваров");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Документ_ПеремещениеТоваров");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Документ_ПеремещениеТоваров",
		"Форма_Плагин_RabbitMQ_импорт_из_УПП_Документ_ПеремещениеТоваров",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти 	


#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт

	 мjsonText = jsonText;
	
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из УПП: Оприходование товаров");
	
	Попытка
	
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.ПеремещениеТоваров") Тогда
			Возврат Неопределено;
		КонецЕсли;
	
		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;
		
		мПредставлениеДокументаУПП 			= "Перемещение товаров №"+деф.Number+" от "+строка(деф.Date);
		
		мВидДокументаУППСсылка = НайтиВидДокументаУПП("Документ.ПеремещениеТоваров");
		
		//Виды ошибок описаны здесь:
		//https://wiki.elis.ru/pages/viewpage.action?pageId=3964935
		
		// Этап 1
		
		Если деф.СкладОтправитель.Свойство("ref") Тогда
			мСкладОтправительУПП = Справочники.КСП_СкладыУПП.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.СкладОтправитель.ref));
		Иначе 
			мСкладОтправительУПП = Неопределено;
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(мСкладОтправительУПП) Тогда
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= Неопределено;
			т = "Этап 01 Поиск складов УПП. Код 100. Не найден склад-отправитель!";
			ТекстСообщения 		= т;
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
								ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);
		
			мЛоггер.ерр("Документ не загружен! %2 %1", 
				мПредставлениеДокументаУПП, т);
		
			Возврат Неопределено;
		КонецЕсли;
		
		Если деф.СкладПолучатель.Свойство("ref") Тогда
			мСкладПолучательУПП = Справочники.КСП_СкладыУПП.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.СкладПолучатель.ref));
		Иначе 
			мСкладПолучательУПП = Неопределено;
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(мСкладПолучательУПП) Тогда
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			т = "Этап 01 Поиск складов УПП. Код 110. Не найден склад-получатель!";
			ТекстСообщения 		= т;
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
								ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);
		
			мЛоггер.ерр("Документ не загружен! %2, %1", 
				мПредставлениеДокументаУПП, т);
		
			Возврат Неопределено;
		КонецЕсли;
		
		ВидОперацииПоСкладуПолучатель = Найти_в_спр_КСП_ВидыОперацийПоСкладамУПП(мСкладПолучательУПП);
		
		Если НЕ ЗначениеЗаполнено(ВидОперацииПоСкладуПолучатель) Тогда
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			т="Этап 02 Поиск видов операций УПП. Код 210. Не найден ВидОперацииПоСкладу-Получатель!";
			ТекстСообщения 		= т;
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
								ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);
		
			мЛоггер.ерр("Документ не загружен! %2 %1", 
				мПредставлениеДокументаУПП, т);
		
			Возврат Неопределено;
		КонецЕсли;                  
		
		мСкладПолучательЕРП = ВидОперацииПоСкладуПолучатель.СкладЕРП;
		
		Если ВидОперацииПоСкладуПолучатель.Отправители.Количество() = 0 Тогда
			
			мЛоггер.инфо("ВидОперацииПоСкладуПолучатель. Отправители пустые! УПП: Документ: %1, Вид операции: %2", 
				мПредставлениеДокументаУПП, строка(ВидОперацииПоСкладуПолучатель));
			
		КонецЕсли;
		
		Если ВидОперацииПоСкладуПолучатель.Получатели.Количество() = 0 Тогда
			
			мЛоггер.инфо("ВидОперацииПоСкладуПолучатель. Получатели пустые! УПП: Документ: %1, Вид операции: %2", 
				мПредставлениеДокументаУПП, строка(ВидОперацииПоСкладуПолучатель));
			
		КонецЕсли; 
		
		ВидОперацииПоСкладуОтправитель = Найти_в_спр_КСП_ВидыОперацийПоСкладамУПП(мСкладОтправительУПП);
		мСкладОтправительЕРП = Неопределено;
		Если НЕ ЗначениеЗаполнено(ВидОперацииПоСкладуПолучатель) Тогда
			т="Этап 02 Поиск видов операций УПП. Код 211. Не найден ВидОперацииПоСкладу-Отправитель! В документах не будет заполнен склад-отправитель.";
		
			мЛоггер.варн("%2, %1", 
				мПредставлениеДокументаУПП, т);
		Иначе 
			мСкладОтправительЕРП = ВидОперацииПоСкладуОтправитель.СкладЕРП;	
		КонецЕсли;    		
		
		
		Если деф.СкладХраненияОтправитель.Свойство("ref") Тогда
			мСкладХраненияУПП_отправитель = Справочники.КСП_СкладыХраненияУПП.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.СкладХраненияОтправитель.ref));
		Иначе 
			мСкладХраненияУПП_отправитель = Неопределено;
		КонецЕсли;
		Если деф.СкладХраненияПолучатель.Свойство("ref") Тогда
			мСкладХраненияУПП_Получатель = Справочники.КСП_СкладыХраненияУПП.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.СкладХраненияПолучатель.ref));
		Иначе 
			мСкладХраненияУПП_Получатель = Неопределено;
		КонецЕсли;
		
		
		Если мСкладОтправительУПП <> мСкладПолучательУПП Тогда
			
			Возврат ОбработкаСитуацииКогдаСкладыОтличаются(ВидОперацииПоСкладуПолучатель, СтруктураОбъекта);
			
		ИначеЕсли мСкладОтправительУПП = мСкладПолучательУПП Тогда
			
			Возврат ОбработкаСитуацииПеремещениеНаОдномСкладе(ВидОперацииПоСкладуПолучатель, СтруктураОбъекта);
				

		КонецЕсли;
		
	Исключение
		т = "Плагин: Плагин_RabbitMQ_импорт_из_УПП_Документ_ПеремещениеТоваров . Подробности: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,,т);
		
		ВидДокумента 		= СтруктураОбъекта.type;
		Склад 				= Неопределено;
		СкладОтправитель 	= мСкладОтправительУПП;
		СкладПолучатель 	= мСкладПолучательУПП;
		ТекстСообщения 		= "Ошибка загрузки: "+т;
		ЛогикаПеремещения 	= Неопределено;
		ЛогикаСклад 		= Неопределено;
		Обработчик 			= Неопределено;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
							ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
		деф.Number,
		деф.date,
		Ложь, // ошибки исправлены
		Id.ref);			
		
		мЛоггер.ерр("Общая ошибка загрузки документа! УПП: Документ: %1, Подробности: %2", 
				мПредставлениеДокументаУПП, т);
		
		
		//    ОБЯЗАТЕЛЬНО!!! Потому что в оркестраторе вызов плагина в попытке. и если была ошибка, надо сделать BasicReject()
		ВызватьИсключение т;
		
	КонецПопытки;

		
	
	
КонецФункции   


// Ищет "логику" только по виду документа в ТЧ ОбработчикиТиповДокументов
// В параметре передается массив элементов
// Подразумевается, что в этом массиве есть только один элемент, в ТЧ которого
// есть искомый вид документа УПП
// Если это не так, функция вернет первый элемент массива, проходящий по условию.
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиЛогикуПоВидуДокумента2(массивЛогик)
	
	Логика = Неопределено;
	
	Для каждого Логика Из массивЛогик Цикл
		Если НЕ ЗначениеЗаполнено(Логика) Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого строкаЛогики Из Логика.ОбработчикиТиповДокументов Цикл
			
			Если строкаЛогики.ВидДокументаУПП = мВидДокументаУППСсылка Тогда
				Возврат Логика;
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	Возврат Логика;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ОбработкаСитуацииКогдаСкладыОтличаются(ВидОперацииПоСкладуПолучатель, СтруктураОбъекта)

		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;
		
				
			
		// сначала найти строки со складом мСкладОтправительУПП
		// если не найдем - ищем с пустым складом (она всего одна для каждого вида документа)
		
		Логика = Неопределено;
		
		массивСтрокСкладаОтправителя = Новый Массив;
		Для каждого строкаОтправитель Из ВидОперацииПоСкладуПолучатель.Отправители Цикл
			Если ЗначениеЗаполнено(строкаОтправитель.Склад) и (строкаОтправитель.Склад = мСкладОтправительУПП) Тогда
				массивСтрокСкладаОтправителя.Добавить(строкаОтправитель);
			КонецЕсли;
		КонецЦикла;

		
		Если массивСтрокСкладаОтправителя.Количество() = 0 Тогда
			массивСтрокСкладПустой = Новый Массив;
			//ищем строки, где склад не заполнен. она должна быть одна. если их больше - выберем любую одну
			Для каждого строкаОтправитель Из ВидОперацииПоСкладуПолучатель.Отправители Цикл
				Если НЕ ЗначениеЗаполнено(строкаОтправитель.Склад) Тогда
					массивСтрокСкладПустой.Добавить(строкаОтправитель);
				КонецЕсли;
			КонецЦикла;                                  
			
			Если массивСтрокСкладПустой.Количество() = 0 Тогда
				
				ВидДокумента 		= СтруктураОбъекта.type;
				Склад 				= Неопределено;
				СкладОтправитель 	= мСкладОтправительУПП;
				СкладПолучатель 	= мСкладПолучательУПП;
				т = "Этап 04. Код 436. Логика не найдена. В ТЧ Отправители нет строк: 1) со складом-отправителем из перемещения; 2) с пустым складом!";
				ТекстСообщения 		= т;
				ЛогикаСклад			= Неопределено;
				ЛогикаПеремещения 	= Неопределено;
				Обработчик 			= Неопределено;
				РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
									ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
				деф.Number,
				деф.date,
				Ложь, // ошибки исправлены
				Id.ref);                  

				мЛоггер.варн("Документ не загружен! %2 %1", 
					мПредставлениеДокументаУПП, т);
				
				Возврат Неопределено;
			Иначе 
				МассивЛогик = Новый Массив;
				Для каждого эл Из массивСтрокСкладПустой Цикл
					МассивЛогик.Добавить(эл.ЛогикаОбработкиВТЧ);
				КонецЦикла;
				Логика = НайтиЛогикуПоВидуДокумента2(МассивЛогик);
			КонецЕсли;
			
		Иначе 
			МассивЛогик = Новый Массив;
			Для каждого эл Из массивСтрокСкладаОтправителя Цикл
				МассивЛогик.Добавить(эл.ЛогикаОбработкиВТЧ);
			КонецЦикла;
			Логика = НайтиЛогикуПоВидуДокумента2(МассивЛогик);
		КонецЕсли;
			
		
		Если НЕ ЗначениеЗаполнено(логика) Тогда
			
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			т = "Этап 04. Код 435. Логика не найдена";
			ТекстСообщения 		= т;
			ЛогикаСклад			= Неопределено;
			ЛогикаПеремещения 	= Неопределено;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
								ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);                  

			мЛоггер.варн("Документ не загружен! %2 %1", 
				мПредставлениеДокументаУПП, т);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Субплагин = Неопределено;
		Для каждого строкаЛогики Из Логика.ОбработчикиТиповДокументов Цикл
			
			Если НЕ строкаЛогики.ВидДокументаУПП = мВидДокументаУППСсылка Тогда
				Продолжить;
			КонецЕсли;
			
			Субплагин = строкаЛогики.СсылкаНаДопОбработку;
			Прервать;
			
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(Субплагин) Тогда
			//ОШИБКА для регистра ошибок
			
			
	
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			т = "Этап 04. Код 420. Не заполнен субплагин в ТЧ элемента логики! Логика обработки: "+строка(Логика);
			ТекстСообщения 		= т;
			ЛогикаПеремещения 	= Неопределено;
			ЛогикаСклад 		= Логика;
			Обработчик 			= Неопределено;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
								ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);                  

			мЛоггер.ерр("Документ не загружен! %2 %1", 
				мПредставлениеДокументаУПП, т);
			
			Возврат Неопределено;
		КонецЕсли;
		
		
		
				
		// создание объекта из эл спр "Доп отчеты и обработки"
		
		
		ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(субплагин);
		
		ОбъектОбработчика = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(субплагин);
		
		Если ОбъектОбработчика = Неопределено Тогда
	
			ВидДокумента 		= СтруктураОбъекта.type;
			Склад 				= Неопределено;
			СкладОтправитель 	= мСкладОтправительУПП;
			СкладПолучатель 	= мСкладПолучательУПП;
			т = "Этап 04. Код 430. НЕ удалось подключить субплагин импорта! Логика "+строка(ЛогикаПеремещения)+" Субплагин: "+строка(субплагин);
			ТекстСообщения 		= т;
			ЛогикаПеремещения 	= Неопределено;
			ЛогикаСклад 		= Логика;
			Обработчик 			= субплагин;
			РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
								ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
			деф.Number,
			деф.date,
			Ложь, // ошибки исправлены
			Id.ref);
			
			мЛоггер.ерр("Документ не загружен! %2 %1", 
				мПредставлениеДокументаУПП, т);

			Возврат Неопределено;
		КонецЕсли;
		
		// запуск импорта
		
		РезультатЗагрузки = ОбъектОбработчика.ЗагрузитьОбъект(СтруктураОбъекта, мjsonText, мСкладОтправительЕРП, мСкладПолучательЕРП);
		
		//успешно
	
		ВидДокумента 		= СтруктураОбъекта.type;
		Склад 				= Неопределено;
		СкладОтправитель 	= мСкладОтправительУПП;
		СкладПолучатель 	= мСкладПолучательУПП;
		ТекстСообщения 		= "Успешно загружен";
		ЛогикаПеремещения 	= Неопределено;
		ЛогикаСклад 		= Логика;
		Обработчик 			= субплагин;
		РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
							ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
		деф.Number,
		деф.date,
		Истина, // ошибки исправлены
		Id.ref);      
		
		мЛоггер.инфо("Загружен Документ! УПП: Документ: %1, ЕРП: %2", 
			мПредставлениеДокументаУПП, строка(РезультатЗагрузки));

		
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ОбработкаСитуацииПеремещениеНаОдномСкладе(ВидОперацииПоСкладуПолучатель, СтруктураОбъекта)
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	// Склады хранения - разные
			
	
	ВидДокумента 		= СтруктураОбъекта.type;
	Склад 				= Неопределено;
	СкладОтправитель 	= мСкладОтправительУПП;
	СкладПолучатель 	= мСкладПолучательУПП;
	т = "Этап 04. Код 470. Склады Получатель и Отправитель равны! Ситуация пока не обрабатывается";
		
	ТекстСообщения 		= т;
	ЛогикаСклад			= Неопределено;
	ЛогикаПеремещения 	= Неопределено;
	Обработчик 			= Неопределено;
	РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог(ВидДокумента, Склад, СкладОтправитель, СкладПолучатель, 
						ТекстСообщения, ЛогикаСклад, ЛогикаПеремещения, Обработчик, мПредставлениеДокументаУПП,
	деф.Number,
	деф.date,
	Ложь, // ошибки исправлены
	Id.ref);                  

	мЛоггер.ерр("Документ не загружен! %2 %1", 
		мПредставлениеДокументаУПП, т);
		
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти 	


#Область СлужебныеЗаполненияИПолученияСсылок


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция Найти_в_спр_КСП_ВидыОперацийПоСкладамУПП(СкладУППСсылка)
	
	Рез = Справочники.КСП_ВидыОперацийПоСкладамУПП.НайтиПоРеквизиту("СкладУПП", СкладУППСсылка);
	Возврат Рез;
	
КонецФункции


#КонецОбласти


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("СкладОтправитель");
	мРеквизиты.Добавить("СкладПолучатель");
	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
    Возврат ЭтотОбъект;
     
КонецФункции



// Ищет спр Вид документа УПП по строке - наименованию
//
// Параметры:
//	ВидДокумента 	- строка - 
//
// Возвращаемое значение:
//	Тип: спр ссылка КСП_ВидыДокументовУПП
//
Функция НайтиВидДокументаУПП(ВидДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТТ.Ссылка КАК ВидДок
		|ИЗ
		|	Справочник.КСП_ВидыДокументовУПП КАК ТТ
		|ГДЕ
		|	
		|	ТТ.Наименование = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение "Не найден вид документа УПП в спр. видов документов: "+Строка(ВидДокумента);
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВидДок = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВидДок = ВыборкаДетальныеЗаписи.ВидДок;
	КонецЦикла;
	
		
	Возврат ВидДок;
	
КонецФункции

// ЕНС 2024-04-19 Этот алгоритм пока не используется, оставлю здесь, как идею для работч со складами хранения
// Ищет в ТЧ Получатели/Отправители "логику" с учетом вида документа и Склада и склада хранения
//
// Параметры:
//	ТЧПолучателиОтправители 	- таб часть справочника Виды операций по складам УПП - 
//
// Возвращаемое значение:
//	Тип: спр ссылка КСП_ЛогикаОбработкиДвиженияПоСкладуУПП
//
Функция НайтиЛогикуПоВидуДокумента(ТЧПолучателиОтправители, СкладХраненияУПП, мВидДокументаУППСсылка, СкладУПП)
	
	ЛогикаОбработки = Неопределено;
	
	//ЕНС. Найти все строки в ТЧ, где есть нужный склад и искомый вид документа в "логике" (там это ТЧ ОбработчикиТиповДокументов)
	// Если это одна строка - возвращаем логику
	// Если больше одной - ищем в них склад хранения УПП
	
	МассивСтрокТЧ = Новый Массив;   // строки ТЧ Получатели
	
	Для каждого стрк Из ТЧПолучателиОтправители Цикл
		Если НЕ ЗначениеЗаполнено(стрк.ЛогикаОбработкиВТЧ) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ стрк.Склад = СкладУПП Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого стркЛогика Из стрк.ЛогикаОбработкиВТЧ.ОбработчикиТиповДокументов Цикл
			Если стркЛогика.ВидДокументаУПП = мВидДокументаУППСсылка Тогда
				МассивСтрокТЧ.Добавить(стрк);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если МассивСтрокТЧ.Количество() = 1 Тогда
		Возврат МассивСтрокТЧ[0].ЛогикаОбработкиВТЧ;
	КонецЕсли;
	
	// если нашли более 1 строки в ТЧ Получатели - ищем нужную по складу хранения УПП (если он заполнен)
	
	Если ЗначениеЗаполнено(СкладХраненияУПП) Тогда
		Для каждого стрк Из МассивСтрокТЧ Цикл
			Если стрк.СкладХраненияУПП = СкладХраненияУПП Тогда
				Возврат стрк.ЛогикаОбработкиВТЧ;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		// если склад хранения не указан - поищем строку с пустым (не будем надеяться сравнение пустых значений)
		Для каждого стрк Из МассивСтрокТЧ Цикл
			Если НЕ ЗначениеЗаполнено(стрк.СкладХраненияУПП) Тогда
				Возврат стрк.ЛогикаОбработкиВТЧ;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// вернем любой
	Для каждого стрк Из МассивСтрокТЧ Цикл
		Возврат стрк.ЛогикаОбработкиВТЧ;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции      

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция НайтиСубПлагинВЛогикеПоВидуДокумента(ЛогикаОбработки, мВидДокументаУППСсылка)
	
	Для каждого стркОбработчик Из ЛогикаОбработки.ОбработчикиТиповДокументов Цикл
		
		Если стркОбработчик.ВидДокументаУПП = мВидДокументаУППСсылка Тогда
			
			Возврат стркОбработчик.СсылкаНаДопОбработку;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции 


 мВнешняяСистема = "UPP";
 ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
 