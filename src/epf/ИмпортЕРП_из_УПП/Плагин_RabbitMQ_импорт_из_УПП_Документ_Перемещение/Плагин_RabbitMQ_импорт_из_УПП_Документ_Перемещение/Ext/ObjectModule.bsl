Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.1");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Документ_Перемещение");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Документ_Перемещение");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Документ_Перемещение",
		"Форма_Плагин_RabbitMQ_импорт_из_УПП_Документ_Перемещение",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	



Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("документ.Перемещение") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	
	Если деф.СкладПолучатель = "Товары в пути" Тогда
		
		Схема_1_ЗаказВнутр("Подразделение=Розница");
		
	ИначеЕсли деф.СкладПолучатель = "Товары в пути" Тогда
		
		Схема_2_Заказ_РО_Отбор("СкладОтправительЕРП=Щепкин");
		
	КонецЕсли;
	
	
	//ВидОбъекта = "ВнесениеДенежныхСредствВКассуККМ";

	////------------------------------------- работа с GUID	
	//ОбъектДанных = Неопределено;
	//ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	//ПредставлениеОбъекта = Строка(ДанныеСсылка);
	//ЭтоНовый = Ложь;
	//Если НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных) Тогда
	//	ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
	//	СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	//	ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	//	ПредставлениеОбъекта = Строка(ОбъектДанных);
	//	ЭтоНовый = Истина;
	//КонецЕсли; 
	//
	//// -------------------------------------------- БЛОКИРОВКА
	//Если НЕ ЭтоНовый Тогда
	//	Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
	//КонецЕсли;

	//НачатьТранзакцию();
	//
	//Если НЕ ЭтоНовый Тогда
	//	Попытка
	//		Блокировка.Заблокировать();
	//		ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
	//	Исключение
	//		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ОбъектДанных.Ссылка,
	//			"Объект не загружен! Ошибка блокировки объекта <"+ПредставлениеОбъекта+">. Подробности: "+т);
	//		ОтменитьТранзакцию();
	//		ВызватьИсключение;
	//	КонецПопытки;
	//КонецЕсли;
	//	
	////------------------------------------- Заполнение реквизитов
	//Попытка			
	//	ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText);		
	//	ЗафиксироватьТранзакцию();          		
	//	Возврат ДанныеСсылка;		
	//Исключение
	//	т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//	ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,ДанныеСсылка,
	//		"Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т);
	//	Если ТранзакцияАктивна() Тогда
	//		ОтменитьТранзакцию();
	//	КонецЕсли;
	//	ВызватьИсключение;
	//КонецПопытки;	
	//		
КонецФункции



// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	
	
	//	
	//Реквизит	Тип	Вид
	ОбъектДанных.Валюта	= Константы.ВалютаРегламентированногоУчета.Получить();
	Если деф.ДокументОснование.Свойство("Ref") Тогда
		РасходныйКассовыйОрдер = Документы.РасходныйКассовыйОрдер.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.ДокументОснование.Ref));
		ОбъектДанных.ДокументОснование	= РасходныйКассовыйОрдер;	
	КонецЕсли;
	//ИдентификаторДокумента	Строка	
	//Исправление	Булево	
	//ИсправляемыйДокумент	Документ	ВнесениеДенежныхСредствВКассуККМ
	
	ОбъектДанных.Касса = ксп_ИмпортСлужебный.НайтиКассу(деф.Касса, мВнешняяСистема);

	Если деф.КассаККМ.Свойство("Ref") Тогда
		КассаККМ = Справочники.КассыККМ.ПолучитьСсылку(Новый УникальныйИдентификатор(деф.КассаККМ.Ref));
		ОбъектДанных.КассаККМ	= КассаККМ;	
	КонецЕсли;
	
	//Кассир	Справочник	Пользователи
	ОбъектДанных.Комментарий	= деф.Комментарий;
	ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);
	//СторнируемыйДокумент	Документ	ВнесениеДенежныхСредствВКассуККМ
	ОбъектДанных.СуммаДокумента	= деф.СуммаДокумента;
	
	// остались реквизиты источника:
	//Реквизит	Тип	Вид
	//ДоговорКонтрагента	Справочник	ДоговорыКонтрагентов        - это "Договор платежного агента"
	// т.е. Договор, заключенный с платежным агентом (субагентом), о приеме выручки за оказанные услуги.
	
	//Ответственный	Справочник	Пользователи



	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции


// Заполняет реквизиты объекта и пишет сопутствующие данные. Должна вызываться в транзакции.
Функция ЗаполнитьРеквизиты_ЗаказНаПеремещение(ОбъектДанных, СтруктураОбъекта, jsonText = "") Экспорт

	//id = СтруктураОбъекта.identification;
	//деф = СтруктураОбъекта.definition;


	////------------------------------------- работа с GUID
	//
	//СуществующийОбъект = Документы.ЗаказНаПеремещение.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	//Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
	//	ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
	//	СуществующийОбъект = Неопределено;
	//Иначе 
	//	
	//	ОбъектДанных = Документы.ЗаказНаПеремещение.СоздатьДокумент();
	//	СсылкаНового = Документы.ЗаказНаПеремещение.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	//	ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
	//КонецЕсли;
	//
	////------------------------------------- Заполнение реквизитов
	//
	//ОбъектДанных.Номер = id.Number;
	//ОбъектДанных.Дата = id.Date;
	//ОбъектДанных.ПометкаУдаления = деф.DeletionMark;



	//гуид="";
	//ЕстьАтрибут = деф.Автор.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Автор = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Автор.Ref ) );
	//Иначе
	//	ОбъектДанных.Автор = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Автор = ксп_ИмпортСлужебный.НайтиАвтор(деф.Автор);

	//ОбъектДанных.АдресДоставки = деф.АдресДоставки;

	//ОбъектДанных.АдресДоставкиЗначение = деф.АдресДоставкиЗначение;

	//ОбъектДанных.АдресДоставкиЗначенияПолей = деф.АдресДоставкиЗначенияПолей;

	//ОбъектДанных.АдресДоставкиПеревозчика = деф.АдресДоставкиПеревозчика;

	//ОбъектДанных.АдресДоставкиПеревозчикаЗначение = деф.АдресДоставкиПеревозчикаЗначение;

	//ОбъектДанных.АдресДоставкиПеревозчикаЗначенияПолей = деф.АдресДоставкиПеревозчикаЗначенияПолей;

	//_знч = "";
	//ЕстьЗначение = деф.ВариантПриемкиТоваров.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ВариантПриемкиТоваров = деф.ВариантПриемкиТоваров.Значение;
	//Иначе
	//	ОбъектДанных.ВариантПриемкиТоваров = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ВариантПриемкиТоваров = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантПриемкиТоваров(деф.ВариантПриемкиТоваров);

	//ОбъектДанных.ВремяДоставкиПо = деф.ВремяДоставкиПо;

	//ОбъектДанных.ВремяДоставкиС = деф.ВремяДоставкиС;

	//ОбъектДанных.ДлительностьПеремещения = деф.ДлительностьПеремещения;

	//гуид="";
	//ЕстьАтрибут = деф.ДокументОснование.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ДокументОснование = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ДокументОснование.Ref ) );
	//Иначе
	//	ОбъектДанных.ДокументОснование = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ДокументОснование = ксп_ИмпортСлужебный.НайтиДокументОснование(деф.ДокументОснование);

	//ОбъектДанных.ДополнительнаяИнформацияПоДоставке = деф.ДополнительнаяИнформацияПоДоставке;

	//ОбъектДанных.ЖелаемаяДатаПоступления = деф.ЖелаемаяДатаПоступления;

	//гуид="";
	//ЕстьАтрибут = деф.ЗонаДоставки.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ЗонаДоставки = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ЗонаДоставки.Ref ) );
	//Иначе
	//	ОбъектДанных.ЗонаДоставки = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ЗонаДоставки = ксп_ИмпортСлужебный.НайтиЗонаДоставки(деф.ЗонаДоставки);

	//ОбъектДанных.ИспользоватьДлительностьПеремещения = деф.ИспользоватьДлительностьПеремещения;

	//ОбъектДанных.Комментарий = деф.Комментарий;

	//ОбъектДанных.МаксимальныйКодСтроки = деф.МаксимальныйКодСтроки;

	//гуид="";
	//ЕстьАтрибут = деф.Назначение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Назначение.Ref ) );
	//Иначе
	//	ОбъектДанных.Назначение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(деф.Назначение);

	//гуид="";
	//ЕстьАтрибут = деф.НаправлениеДеятельности.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.НаправлениеДеятельности = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.НаправлениеДеятельности.Ref ) );
	//Иначе
	//	ОбъектДанных.НаправлениеДеятельности = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.НаправлениеДеятельности = ксп_ИмпортСлужебный.НайтиНаправлениеДеятельности(деф.НаправлениеДеятельности);

	//ОбъектДанных.ОбосабливатьПоНазначениюЗаказа = деф.ОбосабливатьПоНазначениюЗаказа;

	//ОбъектДанных.Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(деф.Организация, мВнешняяСистема);

	//гуид="";
	//ЕстьАтрибут = деф.ОрганизацияПолучатель.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ОрганизацияПолучатель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ОрганизацияПолучатель.Ref ) );
	//Иначе
	//	ОбъектДанных.ОрганизацияПолучатель = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ОрганизацияПолучатель = ксп_ИмпортСлужебный.НайтиОрганизацияПолучатель(деф.ОрганизацияПолучатель);

	//ОбъектДанных.ОсобыеУсловияПеревозки = деф.ОсобыеУсловияПеревозки;

	//ОбъектДанных.ОсобыеУсловияПеревозкиОписание = деф.ОсобыеУсловияПеревозкиОписание;

	//гуид="";
	//ЕстьАтрибут = деф.Ответственный.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Ответственный = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Ответственный.Ref ) );
	//Иначе
	//	ОбъектДанных.Ответственный = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.НайтиОтветственный(деф.Ответственный);

	//гуид="";
	//ЕстьАтрибут = деф.ПеревозчикПартнер.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.ПеревозчикПартнер = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.ПеревозчикПартнер.Ref ) );
	//Иначе
	//	ОбъектДанных.ПеревозчикПартнер = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ПеревозчикПартнер = ксп_ИмпортСлужебный.НайтиПеревозчикПартнер(деф.ПеревозчикПартнер);

	//_знч = "";
	//ЕстьЗначение = деф.ПеремещениеПодДеятельность.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ПеремещениеПодДеятельность = деф.ПеремещениеПодДеятельность.Значение;
	//Иначе
	//	ОбъектДанных.ПеремещениеПодДеятельность = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ПеремещениеПодДеятельность = ксп_ИмпортСлужебный.НайтиПеречисление_ПеремещениеПодДеятельность(деф.ПеремещениеПодДеятельность);

	//гуид="";
	//ЕстьАтрибут = деф.Подразделение.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Подразделение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Подразделение.Ref ) );
	//Иначе
	//	ОбъектДанных.Подразделение = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Подразделение = ксп_ИмпортСлужебный.НайтиПодразделение(деф.Подразделение);

	//гуид="";
	//ЕстьАтрибут = деф.Приоритет.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Приоритет = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Приоритет.Ref ) );
	//Иначе
	//	ОбъектДанных.Приоритет = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Приоритет = ксп_ИмпортСлужебный.НайтиПриоритет(деф.Приоритет);

	//гуид="";
	//ЕстьАтрибут = деф.Сделка.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.Сделка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.Сделка.Ref ) );
	//Иначе
	//	ОбъектДанных.Сделка = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Сделка = ксп_ИмпортСлужебный.НайтиСделка(деф.Сделка);

	//гуид="";
	//ЕстьАтрибут = деф.СкладОтправитель.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.СкладОтправитель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.СкладОтправитель.Ref ) );
	//Иначе
	//	ОбъектДанных.СкладОтправитель = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СкладОтправитель = ксп_ИмпортСлужебный.НайтиСкладОтправитель(деф.СкладОтправитель);

	//гуид="";
	//ЕстьАтрибут = деф.СкладПолучатель.свойство("Ref",гуид);
	//Если ЕстьАтрибут Тогда
	//	ОбъектДанных.СкладПолучатель = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( деф.СкладПолучатель.Ref ) );
	//Иначе
	//	ОбъектДанных.СкладПолучатель = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СкладПолучатель = ксп_ИмпортСлужебный.НайтиСкладПолучатель(деф.СкладПолучатель);

	//_знч = "";
	//ЕстьЗначение = деф.СостояниеЗаполненияМногооборотнойТары.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = деф.СостояниеЗаполненияМногооборотнойТары.Значение;
	//Иначе
	//	ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СостояниеЗаполненияМногооборотнойТары = ксп_ИмпортСлужебный.НайтиПеречисление_СостояниеЗаполненияМногооборотнойТары(деф.СостояниеЗаполненияМногооборотнойТары);

	//_знч = "";
	//ЕстьЗначение = деф.СпособДоставки.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.СпособДоставки = деф.СпособДоставки.Значение;
	//Иначе
	//	ОбъектДанных.СпособДоставки = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.СпособДоставки = ксп_ИмпортСлужебный.НайтиПеречисление_СпособДоставки(деф.СпособДоставки);

	//_знч = "";
	//ЕстьЗначение = деф.Статус.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.Статус = деф.Статус.Значение;
	//Иначе
	//	ОбъектДанных.Статус = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.Статус = ксп_ИмпортСлужебный.НайтиПеречисление_Статус(деф.Статус);

	//_знч = "";
	//ЕстьЗначение = деф.ХозяйственнаяОперация.свойство("Значение",_знч);
	//Если ЕстьЗначение Тогда
	//	ОбъектДанных.ХозяйственнаяОперация = деф.ХозяйственнаяОперация.Значение;
	//Иначе
	//	ОбъектДанных.ХозяйственнаяОперация = Неопределено;
	//КонецЕсли;
	//// на случай, если есть метод поиска ссылки:
	//ОбъектДанных.ХозяйственнаяОперация = ксп_ИмпортСлужебный.НайтиПеречисление_ХозяйственнаяОперация(деф.ХозяйственнаяОперация);




	////------------------------------------------------------     ТЧ Товары



	//ОбъектДанных.Товары.Очистить();


	//Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
	//	стрк = деф.ТЧТовары[счТовары];
	//	СтрокаТЧ = ОбъектДанных.Товары.Добавить();


	//	_знч = "";
	//	ЕстьЗначение = стрк.ВариантОбеспечения.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.ВариантОбеспечения = стрк.ВариантОбеспечения.Значение;
	//	Иначе
	//		СтрокаТЧ.ВариантОбеспечения = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВариантОбеспечения = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантОбеспечения(стрк.ВариантОбеспечения);

	//	_знч = "";
	//	ЕстьЗначение = стрк.ВариантОбеспеченияДоИзмененияОбновлениемИБ.свойство("Значение",_знч);
	//	Если ЕстьЗначение Тогда
	//		СтрокаТЧ.ВариантОбеспеченияДоИзмененияОбновлениемИБ = стрк.ВариантОбеспеченияДоИзмененияОбновлениемИБ.Значение;
	//	Иначе
	//		СтрокаТЧ.ВариантОбеспеченияДоИзмененияОбновлениемИБ = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ВариантОбеспеченияДоИзмененияОбновлениемИБ = ксп_ИмпортСлужебный.НайтиПеречисление_ВариантОбеспеченияДоИзмененияОбновлениемИБ(стрк.ВариантОбеспеченияДоИзмененияОбновлениемИБ);

	//	СтрокаТЧ.КодСтроки = стрк.КодСтроки;

	//	СтрокаТЧ.Количество = стрк.Количество;

	//	СтрокаТЧ.КоличествоУпаковок = стрк.КоличествоУпаковок;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Назначение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Назначение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Назначение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Назначение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Назначение = ксп_ИмпортСлужебный.НайтиНазначение(стрк.Назначение);

	//	СтрокаТЧ.НачалоОтгрузки = стрк.НачалоОтгрузки;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Номенклатура.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Номенклатура = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Номенклатура.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Номенклатура = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатура(стрк.Номенклатура);

	//	гуид="";
	//	ЕстьАтрибут = стрк.НоменклатураНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.НоменклатураНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.НоменклатураНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.НоменклатураНабора = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.НоменклатураНабора = ксп_ИмпортСлужебный.НайтиНоменклатураНабора(стрк.НоменклатураНабора);

	//	СтрокаТЧ.Обособленно = стрк.Обособленно;

	//	СтрокаТЧ.ОкончаниеПоступления = стрк.ОкончаниеПоступления;

	//	СтрокаТЧ.Отменено = стрк.Отменено;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Серия.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Серия = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Серия.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Серия = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Серия = ксп_ИмпортСлужебный.НайтиСерия(стрк.Серия);

	//	СтрокаТЧ.СтатусУказанияСерий = стрк.СтатусУказанияСерий;

	//	гуид="";
	//	ЕстьАтрибут = стрк.Упаковка.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Упаковка = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Упаковка.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Упаковка = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Упаковка = ксп_ИмпортСлужебный.НайтиУпаковка(стрк.Упаковка);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Характеристика.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Характеристика = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Характеристика.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Характеристика = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристика(стрк.Характеристика);

	//	гуид="";
	//	ЕстьАтрибут = стрк.ХарактеристикаНабора.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.ХарактеристикаНабора = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.ХарактеристикаНабора.Ref ) );
	//	Иначе
	//		СтрокаТЧ.ХарактеристикаНабора = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.ХарактеристикаНабора = ксп_ИмпортСлужебный.НайтиХарактеристикаНабора(стрк.ХарактеристикаНабора);

	//КонецЦикла;

	////------------------------------------------------------     ТЧ ДополнительныеРеквизиты



	//ОбъектДанных.ДополнительныеРеквизиты.Очистить();


	//Для счТовары = 0 По деф.ТЧДополнительныеРеквизиты.Количество()-1 Цикл
	//	стрк = деф.ТЧДополнительныеРеквизиты[счТовары];
	//	СтрокаТЧ = ОбъектДанных.ДополнительныеРеквизиты.Добавить();


	//	гуид="";
	//	ЕстьАтрибут = стрк.Значение.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Значение = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Значение.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Значение = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Значение = ксп_ИмпортСлужебный.НайтиЗначение(стрк.Значение);

	//	гуид="";
	//	ЕстьАтрибут = стрк.Свойство.свойство("Ref",гуид);
	//	Если ЕстьАтрибут Тогда
	//		СтрокаТЧ.Свойство = Справочники_Документы.КакойТоВидМД.ПолучитьСсылку( Новый УникальныйИдентификатор( стрк.Свойство.Ref ) );
	//	Иначе
	//		СтрокаТЧ.Свойство = Неопределено;
	//	КонецЕсли;
	//	// на случай, если есть метод поиска ссылки:
	//	СтрокаТЧ.Свойство = ксп_ИмпортСлужебный.НайтиСвойство(стрк.Свойство);

	//	СтрокаТЧ.ТекстоваяСтрока = стрк.ТекстоваяСтрока;

	//КонецЦикла;


	//------------------------------------------------------ ФИНАЛ	
	
	ОбъектДанных.ОбменДанными.Загрузка = Истина;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);

КонецФункции


#Область СхемыСозданияДокументов


Процедура Схема_1_ЗаказВнутр(Подразделение) Экспорт
		
КонецПроцедуры

Процедура Схема_2_Заказ_РО_Отбор(СкладОтправительЕРП) Экспорт
		
КонецПроцедуры

#КонецОбласти





#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	


Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	//мРеквизиты.Добавить("Склад");
	//мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции


 мВнешняяСистема = "retail";
 
 