Перем мВнешняяСистема;   
//+
Перем ИмяСобытияЖР;
Перем jsonText;
Перем СобиратьНенайденнуюНоменклатуру Экспорт;
Перем НеНайденнаяНоменклатураМассив;


#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.3");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Документ_УстановкаЦенНоменклатуры");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Документ_УстановкаЦенНоменклатуры");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Документ_УстановкаЦенНоменклатуры",
		"Форма_Плагин_RabbitMQ_импорт_из_УПП_Документ_ОтчетОРозничныхПродажах",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти 	


#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
	Если НЕ СтруктураОбъекта.Свойство("type") Тогда // на случай, если передадут пустой объект
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.УстановкаЦенНоменклатуры") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";

	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	Рез = ЗаполнениеОбъекта(СтруктураОбъекта);	
	//*************************** Экспорт ненайденной номенклатуры ****************  
	
	Если НеНайденнаяНоменклатураМассив.Количество() > 0 Тогда 
		ЗаписьJson = Новый ЗаписьJson;
		ЗаписьJson.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJson, НеНайденнаяНоменклатураМассив);
		jsonGoods = ЗаписьJson.Закрыть();
		
		МассивОбъектовJson = Новый Массив;
		МассивОбъектовJson.Добавить(jsonGoods);
		
		Попытка
			ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_СписокJsonИзМассива(МассивОбъектовJson, "goods.guid" );
			Сообщить("Выполнен экспорт ненайденной номенклатуры - " + Строка(НеНайденнаяНоменклатураМассив.Количество()) + " позиций");
		Исключение
		    т=ОписаниеОшибки();
			Сообщить("Ошибка экспорта ненайденной номенклатуры в УПП.");
	        ЗаписьЖурналаРегистрации("ИмпортИзУПП", УровеньЖурналаРегистрации.Предупреждение,,,
			"Ошибка экспорта ненайденной номенклатуры в УПП. Подробности: "+т);
		КонецПопытки;            
	КонецЕсли;	
	//***************************
	Возврат Рез;

КонецФункции

#КонецОбласти

#Область ЗаполнениеОбъекта

Функция ЗаполнениеОбъекта(СтруктураОбъекта) Экспорт
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	ДокументИзУПП = "Установка Цен Номенклатуры (УПП) № " + деф.Number + " от " + строка(деф.Date);
	СуществующийДокСсылка = СоздатьПолучитьСсылкуДокумента(id.Ref, "УстановкаЦенНоменклатуры");
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СуществующийДокСсылка);
	Комментарий = "";
	
	// -------------------------------------------- БЛОКИРОВКА
	// не будем различать ситуации Новый/НеНовый
	//Если НЕ ЭтоНовый Тогда
		Блокировка = ксп_Блокировки.СоздатьБлокировкуНесколькихОбъектов(МассивСсылок);
	//КонецЕсли;
	
	НачатьТранзакцию();
	
	//Если НЕ ЭтоНовый Тогда
		Попытка
			Блокировка.Заблокировать();
		Исключение
			т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
				"Объект не загружен! Ошибка блокировки цепочки документов для " + ДокументИзУПП + ". Подробности: " + т);
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	//КонецЕсли;
		
	//------------------------------------- Заполнение реквизитов
	Попытка			

		ДокУстановкаЦен = СоздатьДокументУЦН(СтруктураОбъекта, СуществующийДокСсылка);		
		
		
		ЗафиксироватьТранзакцию();          		
		
		Рез = Новый Структура;
		Рез.Вставить("УстановкаЦенНоменклатуры", ДокУстановкаЦен.Ссылка);
		
	Исключение
		т = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,
			"Объект не загружен! Ошибка в процессе загрузки документа " + ДокументИзУПП + ". Подробности: " + т);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;	

	Возврат Рез;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция СоздатьДокументУЦН(СтруктураОбъекта, СуществующийДокСсылка)
	
	ОбъектДанных = Неопределено;
	
	id = СтруктураОбъекта.identification;
	деф = СтруктураОбъекта.definition;
	
	Если ЗначениеЗаполнено(СуществующийДокСсылка.ВерсияДанных) Тогда
		ОбъектДанных = СуществующийДокСсылка.ПолучитьОбъект();
		ПредставлениеОбъекта = Строка(СуществующийДокСсылка);
	Иначе   

		ОбъектДанных = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		СсылкаНового = Документы.УстановкаЦенНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка(ОбъектДанных);
	КонецЕсли;
	
	//------------------------------------- Заполнение реквизитов -----------------------------------
	//ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.ПометкаУдаления = деф.DeletionMark;
	ОбъектДанных.ДокументОснование = деф.ДокументОснование;
	ОбъектДанных.Комментарий = деф.Комментарий + "[ №" + деф.Number + " от " + деф.Date + " ]";
	
    ОбъектДанных.Ответственный = ксп_ИмпортСлужебный.ОтветственныйПоУмолчанию();
	
	ОбъектДанных.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;

	//------------------------------------------------------     ТЧ Товары
	Если деф.ТЧТовары.Количество()> 0 Тогда
		
		ОбъектДанных.Товары.Очистить();  
		
		Для счТовары = 0 По деф.ТЧТовары.Количество()-1 Цикл
			стрк = деф.ТЧТовары[счТовары];
			СтрокаТЧ = ОбъектДанных.Товары.Добавить();
			
			СтрокаТЧ.Валюта = ксп_ИмпортСлужебный.НайтиВалюту(стрк.Валюта.currencyCode);
			//СтрокаТЧ.ВидЦены =
			СтрокаТЧ.Цена = стрк.Цена;
			//СтрокаТЧ.ЦенаИзмененаВручную		
			//СтрокаТЧ.Формула
			
			_Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(стрк.Номенклатура);
			
			Если СобиратьНенайденнуюНоменклатуру и стрк.Номенклатура.Свойство("ref") Тогда
				Если ТипЗнч(_Номенклатура) = Тип("СправочникСсылка.Номенклатура") И НЕ ЗначениеЗаполнено(_Номенклатура.ВерсияДанных) Тогда
					Если НеНайденнаяНоменклатураМассив.Найти(стрк.Номенклатура.ref) = Неопределено Тогда
						НеНайденнаяНоменклатураМассив.Добавить(стрк.Номенклатура.Ref);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТЧ.Номенклатура = _Номенклатура;
			СтрокаТЧ.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(стрк.ХарактеристикаНоменклатуры);
			//СтрокаТЧ.Упаковка = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
			//СтрокаТЧ.Упаковка = СправочникСсылка.УпаковкиЕдиницыИзмерения;
			
		КонецЦикла;	
		
	КонецЕсли;
	
	//------------------------------------------------------     ТЧ ВидыЦен
	Если деф.ТЧТипыЦен.Количество()> 0 Тогда

	ОбъектДанных.ВидыЦен.Очистить();  
	
	Для счТипы = 0 По деф.ТЧТипыЦен.Количество()-1 Цикл
		стрк = деф.ТЧТипыЦен[счТипы];
		СтрокаТЧ = ОбъектДанных.ВидыЦен.Добавить();
		
		//СтрокаТЧ.Валюта = ксп_ИмпортСлужебный.НайтиВалюту(стрк.Валюта.currencyCode);
		СтрокаТЧ.ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(стрк.ТипЦен.Description)
     КонецЦикла;	
	
 	КонецЕсли;
	
		
	//------------------------------------------------------ ФИНАЛ	
	
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();

	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_01(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_02(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_03(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_04(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);
	ксп_ИмпортСлужебный.Документы_ПослеИмпорта_05(ОбъектДанных, мВнешняяСистема, СтруктураОбъекта, jsonText, ЭтотОбъект);	

	Возврат ОбъектДанных;
	
КонецФункции
Функция СоздатьПолучитьСсылкуДокумента(ГУИД, ВидОбъекта)

	СуществующийОбъект = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
		Возврат СуществующийОбъект;
	Иначе 
		
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИД));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);

		Возврат ОбъектДанных.Ссылка;
	КонецЕсли;	
    
КонецФункции 
#КонецОбласти





// ЕНС. todo. Перенести в общий модуль ксп_ИмпортСлужебный
Функция ПолучитьСсылкаНаЛогикуПеремещения(ЛогикаОбработкиСкладОтправительУПП,
		ЛогикаОбработкиСкладПолучательУПП)
		
		Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЛогикаСкладПолучатель", ЛогикаОбработкиСкладПолучательУПП);
	Запрос.УстановитьПараметр("ЛогикаСкладОтправитель", ЛогикаОбработкиСкладОтправительУПП);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КСП_ЛогикаОбработкиПеремещений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КСП_ЛогикаОбработкиПеремещений КАК КСП_ЛогикаОбработкиПеремещений
		|ГДЕ
		|	КСП_ЛогикаОбработкиПеремещений.ЛогикаСкладОтправитель = &ЛогикаСкладОтправитель
		|	И КСП_ЛогикаОбработкиПеремещений.ЛогикаСкладПолучатель = &ЛогикаСкладПолучатель";

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
КонецФункции


#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);
	//Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
	//+ Сарычев
	Если ТипЗнч(СтруктураОбъекта) = Тип("Структура") Тогда 
		
		НеНайденнаяНоменклатураМассив = Новый Массив;
		
		Рез = Новый Структура;		
	    Рез = ЗагрузитьОбъект(СтруктураОбъекта);
		Рез.Вставить("НеНайденнаяНоменклатураМассив", НеНайденнаяНоменклатураМассив);
		Возврат Рез; 
		
	Иначе       
		Рез = Новый Структура;
		Рез = ЗагрузитьОбъект(СтруктураОбъекта);
	    Возврат Рез;
	КонецЕсли;

КонецФункции

#КонецОбласти 	

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
//	мРеквизиты.Добавить("СкладОтправитель");
//	мРеквизиты.Добавить("СкладПолучатель");
//	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

 мВнешняяСистема = "UPP";
 
 //+ 
 мВнешняяСистема = "upp";        
 ИмяСобытияЖР = "ИмпортИзУПП_УстановкаЦенНоменклатуры";
 СобиратьНенайденнуюНоменклатуру = Истина;
 НеНайденнаяНоменклатураМассив = Новый Массив;
