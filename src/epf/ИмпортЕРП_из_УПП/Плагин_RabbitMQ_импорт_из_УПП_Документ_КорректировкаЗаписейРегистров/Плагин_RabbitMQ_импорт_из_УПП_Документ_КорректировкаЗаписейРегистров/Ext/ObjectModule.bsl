Перем мВнешняяСистема;
Перем СкладУПП;
Перем мНеНайденныхТоваров;
Перем мЛоггер;
Перем мИдВызова;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","1.16");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_УПП_Документ_КорректировкаЗаписейРегистров");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_УПП_Документ_КорректировкаЗаписейРегистров");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_УПП_Документ_КорректировкаЗаписейРегистров",
		"Форма_Плагин_RabbitMQ_импорт_из_УПП_Документ_КорректировкаЗаписейРегистров",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры

#КонецОбласти 	

#Область ПолучениеВнешнейОбработкиПоИмени

Функция ПолучитьОбъектВнешнейОбработкиПоНаименованию(Наименование)
	ТекСсылка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(Наименование);
	Если не ЗначениеЗаполнено(ТекСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(ТекСсылка);
	Возврат ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ТекСсылка);
КонецФункции

Функция ПолучитьОбъектВнешнейОбработкиПоСсылке(ТекСсылка)
	Если не ЗначениеЗаполнено(ТекСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(ТекСсылка);
	Возврат ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ТекСсылка);
КонецФункции

#КонецОбласти

#Область ЗагрузитьОбъект_

Функция ЗагрузитьОбъект(СтруктураОбъекта, jsonText = "") Экспорт
	
  	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт документов из УПП: Корректировка записей регистров");
     
    Попытка
		Если НЕ НРег(СтруктураОбъекта.type) = НРег("Документ.КорректировкаЗаписейРегистров") Тогда
			Возврат Неопределено;
		КонецЕсли;

		ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";

		id = СтруктураОбъекта.identification;
		деф = СтруктураОбъекта.definition;
		Если Лев(деф.Комментарий,15) = "остатки для ERP" и деф.DeletionMark Тогда
			СсылкаВводОстатков = ЗагрузкаОстатков(id,деф,СтруктураОбъекта);
			мЛоггер.инфо("Создан/обновлен документ: %1", СсылкаВводОстатков);
			Возврат  СсылкаВводОстатков;
		Иначе
			СсылкаКорректировкаЗаписейРегистров = ЗагрузкаКорректировкаЗаписейРегистров(id,деф,СтруктураОбъекта);
			мЛоггер.инфо("Создан/обновлен документ: %1", СсылкаКорректировкаЗаписейРегистров);
			Возврат  СсылкаКорректировкаЗаписейРегистров;
		КонецЕсли;
		
    Исключение
        мЛоггер.ерр("Плагин: Плагин_RabbitMQ_импорт_из_УПП_Документ_КорректировкаЗаписейРегистров . Подробности: "+ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки;
	

КонецФункции

Функция ЗагрузкаОстатков(id, деф, СтруктураОбъекта, ВидОбъекта = "ВводОстатковТоваров")
	ИмяСобытияЖР = "Импорт_из_RabbitMQ_УПП";
	
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
	
	ЭтоНовый = Ложь;
	Если (НЕ ЗначениеЗаполнено(ДанныеСсылка.ВерсияДанных)) и ЗначениеЗаполнено(ДанныеСсылка.Номер) = Ложь и ЗначениеЗаполнено(ДанныеСсылка.Дата) = Ложь Тогда
		ОбъектДанных = Документы[ВидОбъекта].СоздатьДокумент();
		СсылкаНового = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
		ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
		ПредставлениеОбъекта = Строка("Новый документ ВводОстатковТоваров. Дата = "+строка(деф.Date));
		ЭтоНовый = Истина;
	Иначе
		ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		ПредставлениеОбъекта = Строка(ДанныеСсылка);
		
		// ОТМЕНА ПРОВЕДЕНИЯ
		
		Если ОбъектДанных.Проведен Тогда
			ОбъектДанных.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			// перечитаем документ, чтобы не было ошибки "Данные изменены"
			ДанныеСсылка = ОбъектДанных.Ссылка;
			ОбъектДанных = ДанныеСсылка.ПолучитьОбъект();
		КонецЕсли;			
	КонецЕсли; 
	
	// -------------------------------------------- БЛОКИРОВКА
	Если НЕ ЭтоНовый Тогда
		//Блокировка = ксп_Блокировки.СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка);
		Блокировка = СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка, ВидОбъекта);
	КонецЕсли;

	
	//------------------------------------- Заполнение реквизитов

	Попытка			
		ЗаполнитьДокументВводОстатковТоваров(ОбъектДанных, деф);		
	Исключение
		т=ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		т="Объект не загружен! Ошибка в процессе загрузки объекта: <"+ПредставлениеОбъекта+">. Подробности: "+т;
		ЗаписьЖурналаРегистрации(ИмяСобытияЖР,УровеньЖурналаРегистрации.Ошибка,,,т);
		мЛоггер.ерр(т);
		ВызватьИсключение;
	КонецПопытки;
	
	Если мНеНайденныхТоваров.Количество()>0 Тогда
		ЗаписьJson = Новый ЗаписьJson;
		ЗаписьJson.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJson, мНеНайденныхТоваров);
		jsonGoods = ЗаписьJson.Закрыть();
		
		МассивОбъектовJson = Новый Массив;
		МассивОбъектовJson.Добавить(jsonGoods);
		
		ксп_ЭкспортСлужебный.ВыполнитьЭкспорт_СписокJsonИзМассива( МассивОбъектовJson, "goods.guid" );
	КонецЕсли;
	Возврат ДанныеСсылка;	

КонецФункции

Процедура ЗаполнитьДокументВводОстатковТоваров(ОбъектДанных, деф)
	ОбъектДанных.Дата = деф.Date;
	ОбъектДанных.Номер = деф.Number;
	ОбъектДанных.ПометкаУдаления = Ложь;
	ОбъектДанных.Валюта	= Константы.ВалютаРегламентированногоУчета.Получить();
	ОбъектДанных.Комментарий = деф.Number;
	ОбъектДанных.ЦенаВключаетНДС = Истина;
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковСобственныхТоваров;
	ОбъектДанных.ОтражатьВОперативномУчете = Истина;
	ОбъектДанных.ОтражатьСебестоимость = Истина;  //Нужно проверить есть ли записи в ценах
	ОбъектДанных.ОтражатьВУУ = Истина;
	ОбъектДанных.ВидДеятельностиНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
	ОбъектДанных.Склад = Неопределено;
	ТЗ_Цены = Новый ТаблицаЗначений;
	ТЗ_Цены.Колонки.Добавить("НоменклатураГУИД",Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(50)));
	ТЗ_Цены.Колонки.Добавить("ХарактеристикаНоменклатурыГУИД",Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(50)));
	ТЗ_Цены.Колонки.Добавить("Цена",Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(15,2)));
	Организация = Неопределено;
	Склад = Неопределено;
	Для каждого строка из деф.РегистрНакопления_Продажи Цикл
		НС = ТЗ_Цены.Добавить();
		НС.НоменклатураГУИД = "";
		Если строка.Номенклатура.Свойство("Ref") Тогда
			НС.НоменклатураГУИД = строка.Номенклатура.Ref;
		КонецЕсли;
		НС.ХарактеристикаНоменклатурыГУИД = "";
		Если строка.ХарактеристикаНоменклатуры.Свойство("Ref") Тогда
			НС.ХарактеристикаНоменклатурыГУИД = строка.ХарактеристикаНоменклатуры.Ref;
		КонецЕсли;

		НС.Цена = строка.Стоимость /  строка.Количество;
		Если Организация = Неопределено Тогда
			Организация = ПолучитьСсылкуСправочникаПоДаннымID(строка.Организация, "Организации");
		КонецЕсли;
	КонецЦикла;
	ОбъектДанных.Организация = Организация;
	
	ОбъектДанных.Товары.Очистить();
	
	Для каждого строка из деф.РегистрНакопления_ТоварыНаСкладах Цикл
		НоваяСтрока = ОбъектДанных.Товары.Добавить();

		НоваяСтрока.ВидЗапасов = ксп_ИмпортСлужебный.НайтиВидЗапасовСобственныйТовар(ОбъектДанных.Организация);
		
			НоваяСтрока.Номенклатура = ксп_ИмпортСлужебный.НайтиНоменклатуру(строка.Номенклатура);
			Если Не ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВерсияДанных) Тогда
				Если мНеНайденныхТоваров.Найти(НоваяСтрока.Номенклатура) = Неопределено Тогда
					Если строка.Номенклатура.Свойство("Ref") Тогда
						мНеНайденныхТоваров.Добавить(строка.Номенклатура.Ref);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		Если ЗаполненаСсылка(строка.Номенклатура) Тогда
			НоваяСтрока.Характеристика = ксп_ИмпортСлужебный.НайтиХарактеристику(строка.ХарактеристикаНоменклатуры);
		КонецЕсли;
		НоваяСтрока.Количество = строка.Количество; 
		НоваяСтрока.КоличествоУпаковок = строка.Количество;
		Попытка
			НоменклатураГУИД = строка.Номенклатура.Ref;
		Исключение
			НоменклатураГУИД = "";
		КонецПопытки;
		Попытка
			ХарактеристикаНоменклатурыГУИД = строка.ХарактеристикаНоменклатуры.Ref;
		Исключение
			ХарактеристикаНоменклатурыГУИД = "";
		КонецПопытки;
		Цена = 0;
		ПоискЦены = Новый Структура("НоменклатураГУИД,ХарактеристикаНоменклатурыГУИД",НоменклатураГУИД,ХарактеристикаНоменклатурыГУИД);
		НайдСтрокаЦены = ТЗ_Цены.НайтиСтроки(ПоискЦены);
		Если НайдСтрокаЦены.Количество()>0 Тогда 
			Цена = НайдСтрокаЦены[0].Цена;
		КонецЕсли;
		НоваяСтрока.Цена = Цена;
		НоваяСтрока.Сумма = Цена * НоваяСтрока.Количество; 
		НоваяСтрока.СуммаСНДС = Цена * НоваяСтрока.Количество; 
		НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
		Если НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.БезНДС или НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка() Тогда
			СтНДС = 0;
		Иначе
			СтНДС = НоваяСтрока.СтавкаНДС.Ставка/100;
		КонецЕсли;	
		НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаСНДС / (1 + СтНДС) * СтНДС;
		НоваяСтрока.СуммаБезНДС = НоваяСтрока.СуммаСНДС - НоваяСтрока.СуммаНДС;
		Если Склад = Неопределено Тогда
			Если ЗаполненаСсылка(строка.Склад) Тогда
				СкладУПП = ПолучитьСсылкуСправочникаПоДаннымID(строка.Склад, "КСП_СкладыУПП");
				Склад = ПолучитьСкладERP(СкладУПП);
				Если не ЗначениеЗаполнено(Склад) Тогда
					РегистрыСведений.КСП_УПП_ОшибкиИмпорта.лог("Документ.ВводОстатков",СкладУПП,Неопределено,Неопределено,"не найден склад ЕРП",
						Неопределено,Неопределено,Неопределено,"",ОбъектДанных.Номер,ОбъектДанных.Дата); 
                КонецЕсли;
				ОбъектДанных.Склад = Склад;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбъектДанных.ОбменДанными.Загрузка = Ложь;
	ОбъектДанных.Записать();
КонецПроцедуры


Функция ПолучитьСсылкаНаДопОбработку(СтруктураОбъекта)
	
	Если СкладУПП = Неопределено Тогда
		Возврат неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("СкладУПП", СкладУПП);
	Запрос.УстановитьПараметр("ВидДокументаУПП", "Документ.КорректировкаЗаписейРегистров");

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КСП_ВидыОперацийПоСкладамУПП.ЛогикаОбработкиВШапке КАК ЛогикаОбработкиВШапке,
	|	КСП_ВидыОперацийПоСкладамУПП.Ссылка КАК Ссылка,
	|	КСП_ЛогикаОбработкиДвиженияПоСкладуУППОбработчикиТиповДокументов.СсылкаНаДопОбработку КАК СсылкаНаДопОбработку
	|ИЗ
	|	Справочник.КСП_ВидыОперацийПоСкладамУПП КАК КСП_ВидыОперацийПоСкладамУПП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КСП_ЛогикаОбработкиДвиженияПоСкладуУПП.ОбработчикиТиповДокументов КАК КСП_ЛогикаОбработкиДвиженияПоСкладуУППОбработчикиТиповДокументов
	|		ПО (КСП_ВидыОперацийПоСкладамУПП.ЛогикаОбработкиВШапке = КСП_ЛогикаОбработкиДвиженияПоСкладуУППОбработчикиТиповДокументов.Ссылка)
	|ГДЕ
	|	КСП_ЛогикаОбработкиДвиженияПоСкладуУППОбработчикиТиповДокументов.ВидДокументаУПП.Наименование = &ВидДокументаУПП
	|	И КСП_ВидыОперацийПоСкладамУПП.СкладУПП = &СкладУПП";

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат неопределено;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СсылкаНаДопОбработку;
	
КонецФункции

Функция ПолучитьРезервы(ДанныеСсылка, СтруктураОбъекта)
	СсылкаОбработчика = ПолучитьСсылкаНаДопОбработку(СтруктураОбъекта);
	Если не ЗначениеЗаполнено(СсылкаОбработчика) Тогда
		// записываем ошибку в регистр
		Возврат Неопределено;
	КонецЕсли;
	ОбъектОбработчика = ПолучитьОбъектВнешнейОбработкиПоСсылке(СсылкаОбработчика);
	Если ОбъектОбработчика = Неопределено или ЗначениеЗаполнено(ОбъектОбработчика) = ложь Тогда
		// записываем ошибку в регистр
		Возврат Неопределено;
	КонецЕсли;
	СсылкаЗаказ = ОбъектОбработчика.ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

Функция ЗагрузкаКорректировкаЗаписейРегистров(id, деф, СтруктураОбъекта, ВидОбъекта = "КорректировкаРегистров")
	Возврат Неопределено;	
КонецФункции

Функция  СоздатьБлокировкуОдногоОбъекта(ДанныеСсылка,ВидОбъекта) 
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Документ."+ВидОбъекта); 
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка",ДанныеСсылка);
	Возврат Блокировка;
КонецФункции
	
#КонецОбласти 	

#Область СлужебныеЗаполненияИПолученияСсылок
Функция ПолучитьСкладERP(СкладУПП) 

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СкладУПП", СкладУПП);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП КАК СкладУПП,
	|	КСП_ВидыОперацийПоСкладамУПП.СкладЕРП КАК СкладЕРП,
	|	КСП_ВидыОперацийПоСкладамУПП.Ссылка КАК Ссылка,
	|	КСП_ВидыОперацийПоСкладамУПП.ЛогикаОбработкиВШапке КАК ЛогикаОбработки
	|ИЗ
	|	Справочник.КСП_ВидыОперацийПоСкладамУПП КАК КСП_ВидыОперацийПоСкладамУПП
	|ГДЕ
	|	КСП_ВидыОперацийПоСкладамУПП.СкладУПП = &СкладУПП";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.СкладЕРП;

КонецФункции

Функция ЗаполненаСсылка(СтруктураID) 
	Если не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	Попытка
		Ref = СтруктураID.Ref;	
		Если ЗначениеЗаполнено(Ref) Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ПолучитьСсылкуДокументаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	Если не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Ref = СтруктураID.Ref;	
		Если не ЗначениеЗаполнено(СтруктураID.Ref) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	ДанныеСсылка = Документы[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураID.Ref));
	Возврат ДанныеСсылка;
КонецФункции

Функция ПолучитьСсылкуСправочникаПоДаннымID(СтруктураID, ВидОбъекта) Экспорт
	Если не ТипЗнч(СтруктураID) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Ref = СтруктураID.Ref;	
		Если не ЗначениеЗаполнено(СтруктураID.Ref) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	ДанныеСсылка = Справочники[ВидОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураID.Ref));
	Возврат ДанныеСсылка;
КонецФункции

#КонецОбласти

#Область Тестирование

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export

	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.УстановитьСтроку(Json);
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

#КонецОбласти 	

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date" Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период" Тогда
		Попытка
			Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
		Исключение
			Возврат Значение;
		КонецПопытки;
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Возврат Значение;
		Иначе
			Возврат XMLЗначение(Тип("Число"),Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция МассивРеквизитовШапкиДляПроверки() Экспорт
	
	мРеквизиты = Новый Массив;
	мРеквизиты.Добавить("СкладОтправитель");
	мРеквизиты.Добавить("СкладПолучатель");
	мРеквизиты.Добавить("Организация");
	Возврат мРеквизиты;
	
КонецФункции

Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
    Возврат ЭтотОбъект;
     
КонецФункции

мВнешняяСистема = "UPP";
СкладУПП = Неопределено;
мНеНайденныхТоваров = Новый Массив;
 