Перем мЛоггер;
Перем мИдВызова;
Перем мВнешняяСистема;

#Область ПодключениеОбработкиКБСП

Функция СведенияОВнешнейОбработке() Экспорт

	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();

	ПараметрыРегистрации.Вставить("Вид",ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка());
	ПараметрыРегистрации.Вставить("Версия","22май24-01");
	//ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование","Плагин_RabbitMQ_импорт_из_БП_Справочник_ДоговорыКонтрагентов");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация","Плагин_RabbitMQ_импорт_из_БП_Справочник_ДоговорыКонтрагентов");
	ПараметрыРегистрации.Вставить("ВерсияБСП", "3.1.5.180");
	//ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	
	ТипКоманды = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	ДобавитьКоманду(ПараметрыРегистрации.Команды, 
		"Открыть форму : Плагин_RabbitMQ_импорт_из_БП_Справочник_ДоговорыКонтрагентов",
		"Форма_Плагин_RabbitMQ_импорт_из_БП_Справочник_ДоговорыКонтрагентов",
		ТипКоманды, 
		Ложь) ;
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	//ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	//ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	//ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	//ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
//           ** Использование - Строка - тип команды:
//               "ВызовКлиентскогоМетода",
//               "ВызовСерверногоМетода",
//               "ЗаполнениеФормы",
//               "ОткрытиеФормы" или
//               "СценарийВБезопасномРежиме".
//               Для получения типов команд рекомендуется использовать функции
//               ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКоманды<ИмяТипа>.
//               В комментариях к этим функциям также даны шаблоны процедур-обработчиков команд.

	НоваяКоманда = ТаблицаКоманд.Добавить() ;
	НоваяКоманда.Представление = Представление ;
	НоваяКоманда.Идентификатор = Идентификатор ;
	НоваяКоманда.Использование = Использование ;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение ;
	НоваяКоманда.Модификатор = Модификатор ;
КонецПроцедуры


#КонецОбласти 	


// Описание_метода
//
// Параметры:
//	СтруктураОбъекта	- структура - после метода тДанные = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьОбъект(СтруктураОбъекта) Экспорт
	
	мЛоггер = мис_ЛоггерСервер.getLogger(мИдВызова, "Импорт НСИ из БазаПоказов: договоры контрагентов");

	Попытка
		
	
		Если НЕ НРег(СтруктураОбъекта.type) = "справочник.договорыконтрагентов" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		id = СтруктураОбъекта.identification;
		def = СтруктураОбъекта.definition;
		
		СуществующийОбъект = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			
		Если НЕ ЗначениеЗаполнено(СуществующийОбъект.ВерсияДанных) Тогда
			ОбъектДанных = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			СсылкаНового = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(id.Ref));
			ОбъектДанных.УстановитьСсылкуНового(СсылкаНового);
			ОбъектДанных.УстановитьНовыйКод();
		Иначе 
			ОбъектДанных = СуществующийОбъект.ПолучитьОбъект();
		КонецЕсли;
			
		//ОбъектДанных.Код = id.code;
		
		ParentRef = "";
		Если def.Свойство("parent") И def.parent.Свойство("Ref", ParentRef) Тогда
			ОбъектДанных.Родитель = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(ParentRef));
		КонецЕсли;
	
	
		ОбъектДанных.ПометкаУдаления = def.DeletionMark;       

   	
		
		//------------------------------------
		
	//	Свойство	Тип
	//
	//	АдресДоставки	Строка
	//	АдресДоставкиДляПоставщика	Строка
	//	АдресДоставкиЗначение	Строка
	//	АдресДоставкиЗначенияПолей	Строка
	//	АдресДоставкиПеревозчика	Строка
	//	АдресДоставкиПеревозчикаЗначение	Строка
	//	АдресДоставкиПеревозчикаЗначенияПолей	Строка
	//	БанковскийСчет	Банковский счет организации
	//	БанковскийСчетКонтрагента	Банковский счет
	//	ВалютаВзаиморасчетов	Валюта
		Если def.ВалютаВзаиморасчетов.Свойство("currencyCode") Тогда
			ОбъектДанных.ВалютаВзаиморасчетов = ксп_ИмпортСлужебный.НайтиВалюту(def.ВалютаВзаиморасчетов.currencyCode);
		КонецЕсли;
	//	ВариантВыбытияМаркируемойПродукции	Варианты выбытия маркируемой продукции
	//	ВариантКурсаДоговора	Варианты курса договора
	ОбъектДанных.Варианты3фКурсаДоговора = Перечисления.ВариантыКурсаДоговора.Переменный;
	//	ВариантОформленияЗакупок	Варианты оформления закупок
	ОбъектДанных.ВариантОформленияЗакупок	= перечисления.ВариантыОформленияЗакупок.НеРазделять;
	//	ВариантПриемкиТоваров	Варианты приемки товаров
	ОбъектДанных.ВариантПриемкиТоваров	= перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	//	ВестиРасчетыЧерезКонечныхПокупателей	Булево
	//	ВидАгентскогоДоговора	Виды агентских договоров
	//	ВидЦенПродажи	Вид цены
	//	ВидЦенУчетный	Вид цены
		Если def.Свойство("ТипЦен") И def.ТипЦен.Свойство("Ref") Тогда
			ВидЦены = ксп_ИмпортСлужебный.НайтиВидЦены(def.ТипЦен, мВнешняяСистема);
			ОбъектДанных.ВидЦенПродажи = ВидЦены;			
			ОбъектДанных.ВидЦенУчетный = ВидЦены;
		КонецЕсли;
	
	//	ВремяДоставкиПо	Дата
	//	ВремяДоставкиС	Дата
	//	ВыполненыОбязательстваПоДоговоруГОЗ	Булево
	//	ГосударственныйКонтракт	Государственный контракт
	//	ГрафикИсполненияДоговора	График исполнения договора
	//	ГруппаФинансовогоУчета	Группа финансового учета расчетов
	//	ГруппаФинансовогоУчетаКлиента	Группа финансового учета расчетов
	//	Дата	Дата
		объектДанных.Дата = def.Дата;
	//	ДатаНачалаДействия	Дата
		ОбъектДанных.ДатаНачалаДействия = def.Дата;
	//	ДатаОкончанияДействия	Дата
	//	ДоговорСКомиссионером	Договор с контрагентом
	//	ДоговорСУчастникомГОЗ	Булево
	//	ДоговорыСЗаказчиками	ТабличнаяЧасть
	//	ДополнительнаяИнформацияПоДоставке	Строка
	//	ДополнительныеРеквизиты	ТабличнаяЧасть
	//	ДопустимаяСуммаЗадолженности	Число
	//	ЗаданГрафикИсполнения	Булево
	//	ЗакупкаПодДеятельность	Типы налогообложения НДС
	//	ЗакупкаПодДеятельностьОпределяетсяВДокументе	Булево
	//	ЗапрещаетсяПросроченнаяЗадолженность	Булево
	//	ЗонаДоставки	Зоны доставки
	//	ИдентификаторГосКонтракта	Строка
	//	ИдентификаторПлатежа	Строка
	ОбъектДанных.ИдентификаторПлатежа = Строка(Новый УникальныйИдентификатор);
	//	ИмяПредопределенныхДанных	Строка
	//	ИностранныйИсполнительВУтвержденномПеречнеГОЗ	Булево
	//	КодРаздел7ДекларацииНДС	Код операции раздела 7 декларации по НДС
	//	КомиссионерКонтрагент	Контрагент
	//	КомиссионерПартнер	Партнер
	//	КомиссионныеПродажи25	Булево
	//	Комментарий	Строка
	//	КонтактноеЛицо	Контактное лицо
	//	Контрагент	Контрагент
		Если def.Владелец.Свойство("ref") Тогда
			Контрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(def.Владелец.ref)); 	

			ОбъектДанных.Контрагент = Контрагент;
			ОбъектДанных.Партнер 	= Контрагент.Партнер;
		КонецЕсли;
		
	//	Менеджер	Пользователь
	//	Назначение	Назначение
	//	Наименование	Строка
		ОбъектДанных.Наименование = def.description;  
	//	НаименованиеДляПечати	Строка
		ОбъектДанных.НаименованиеДляПечати = def.description;
	//	НалогообложениеНДС	Типы налогообложения НДС
	//	НалогообложениеНДСОпределяетсяВДокументе	Булево
	ОбъектДанных.НалогообложениеНДСОпределяетсяВДокументе = Истина;
	//	НаправлениеДеятельности	Направление деятельности
	//	Номер	Строка
		ОбъектДанных.Номер = def.Номер;
	//	ОбъектРасчетов	Объект расчетов
	//	ОграничиватьСуммуЗадолженности	Булево
	//	ОплатаВВалюте	Булево
	//	ОплатаРасходовПоТарифамСГосрегулированием	Булево
	//	Организация	Организация
		Организация = ксп_ИмпортСлужебный.НайтиОрганизацию(def.Организация, мВнешняяСистема);
		ОбъектДанных.Организация = Организация;
	//	Партнер	Партнер
	//	ПеревозчикПартнер	Партнер
	//	ПереоцениватьТоварыУслугиКОтчетуКомитенту	Булево
	ОбъектДанных.ПереоцениватьТоварыУслугиКОтчетуКомитенту = Истина;
	//	ПлатежиПо275ФЗ	Булево
	//	Подразделение	Подразделение
	//	ПодтверждающиеДокументы	ТабличнаяЧасть
	//	ПометкаУдаления	Булево
	//	ф4ыы4		 v                         	
	ОбъектДанных.ПорядокОтраженияНеотфактурованныхПоставокНУ = перечисления.ВариантыОтраженияНеотфактурованныхПоставокНУ.ОтражатьПриПоступлении;
	//	ПорядокОформленияСписанияВПроизводствоТоваровПринятыхНаХранение	Порядок оформления списания товаров, принятых на хранение
	//	ПорядокОформленияСписанияНедостачТоваровПринятыхНаХранение	Порядок оформления списания товаров, принятых на хранение
	//	ПорядокРасчетов	Детализация расчетов
	ОбъектДанных.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам;
	//	Предопределенный	Булево
	//	РазбиватьОтчетПоДокументам	Булево
	//	РазрешаетсяПередачаОплатМеждуФилиалами	Булево
	//	РазрешенаРаботаСДочернимиПартнерами	Булево
	//	Согласован	Булево
	ОбъектДанных.Согласован = Истина;
	//	СпособДоставки	Способы доставки
	ОбъектДанных.СпособДоставки = Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении;
	//	СрокДляПримененияДисконтирования	Число
	//	СрокОплаты	Число
	//	Ссылка	Договор с контрагентом
	//	СтавкаДисконтирования	Число
	//	СтавкаНДС	Ставки НДС
	ОбъектДанных.СтавкаНДС = Справочники.СтавкиНДС.НайтиПоРеквизиту("ПеречислениеСтавкаНДС",Перечисления.СтавкиНДС.НДС20);
	//	Статус	Статусы договоров контрагентов
	ОбъектДанных.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	//	СтатьяДвиженияДенежныхСредств	Статья движения денежных средств
	//	Сумма	Число
	//	СуммаПредоплатыДоОтгрузки	Число
	//	СуммаПрибыли	Число
	//	ТипДоговора	Типы договоров
	ОбъектДанных.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем;
	//	ТипПлатежаФЗ275	Типы платежей 275-ФЗ
	//	УникальныйНомерВалютногоКонтроля	Строка
	//	УстановленСрокОплаты	Булево
	//	УчетАгентскогоНДС	Булево
	//	Филиалы	ТабличнаяЧасть
	//	ХозяйственнаяОперация	Хозяйственные операции
	ОбъектДанных.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	//	ЦентрализованныйДоговор	Булево
	ОбъектДанных.ЦентрализованныйДоговор = ЛОЖЬ;

		//------------------------------------
		
		ОбъектДанных.ОбменДанными.Загрузка = Истина;
		
		ОбъектДанных.Записать();
		
		Возврат ОбъектДанных.Ссылка;
    Исключение
        мЛоггер.ерр("Плагин: Импорт Договоры контрагентов. Подробности: "+ОписаниеОшибки());
		ВызватьИсключение;// для помещения в retry
	КонецПопытки;
	
	
КонецФункции


#Область Тестирование


// Описание_метода
//
// Параметры:
//	Параметр1 	- Тип1 - 
//
// Возвращаемое значение:
//	Тип: Тип_значения
//
Функция ЗагрузитьИзJsonНаСервере(Json) export


	мЧтениеJSON = Новый ЧтениеJSON;

	
	мЧтениеJSON.УстановитьСтроку(Json);
		
	СтруктураОбъекта = ПрочитатьJSON(мЧтениеJSON,,,,"ФункцияВосстановленияJSON",ЭтотОбъект);//структура

	
	
	Возврат ЗагрузитьОбъект(СтруктураОбъекта);
	
КонецФункции

Функция ФункцияВосстановленияJSON(Свойство, Значение, ДопПараметры) Экспорт
	
	Если Свойство = "Date"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Период"Тогда
		Возврат ПрочитатьДатуJSON(Значение, ФорматДатыJSON.ISO);
	КонецЕсли;
	Если Свойство = "Сумма" Тогда
		Возврат XMLЗначение(Тип("Число"),Значение);
	КонецЕсли;
	Если Свойство = "Валюта" Тогда
		Возврат Справочники.Валюты.НайтиПоКоду(Значение);
	КонецЕсли;
	
КонецФункции


#КонецОбласти 	


// Описание_метода              
//
// Параметры:
//  Параметр1   - Тип1 -
//
Функция сетИдВызова(пИдВызова) Экспорт
     
    мИдВызова = пИдВызова;
    Возврат ЭтотОбъект;
     
КонецФункции




мВнешняяСистема = "bazap";

