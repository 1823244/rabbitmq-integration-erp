  ТелоСообщения = ОбъектСообщение.Body;
	xdtoСправочник = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.XML, ТелоСообщения); 
	
	Попытка
		
		ID             = Строка(xdtoСправочник.ID);  
		
		НачатьТранзакцию();  		
				
		СсылкаНаОбъект = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.ПересчетТоваров");
										
		Если СсылкаНаОбъект = Неопределено Тогда 				
			ОбъектПересчетТоваров = Документы.ПересчетТоваров.СоздатьДокумент();
			ОбъектПересчетТоваров.Дата = ТекущаяДата(); 
		Иначе  					
			ОбъектПересчетТоваров = СсылкаНаОбъект.ПолучитьОбъект(); 
			ОбъектПересчетТоваров.Товары.Очистить();
		КонецЕсли; 
		
		Узел = ПланыОбмена.усОбменУправлениеСкладом.ЭтотУзел();
		Если Узел.WMSСклады.Количество() Тогда 
			Склад = Узел.WMSСклады[0].Склад;	
		КонецЕсли;
		
		Если СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано Тогда 
			
			ОбъектПересчетТоваров.Склад = Склад;
			ОбъектПересчетТоваров.Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе; 								
			
			ТипДокумента = xdtoСправочник.TypeDocument;  							
			
			// строки
			Товары = Новый ТаблицаЗначений;
			Товары.Колонки.Добавить("Номенклатура"); 					
			Товары.Колонки.Добавить("Количество"); 		   		
			
			текТаблица = xdtoСправочник.GoodsLine.Последовательность();
			Для ИндексXDTO = 0 По текТаблица.Количество()-1 Цикл
				СтрокаАкта = текТаблица.ПолучитьЗначение(ИндексXDTO);                   
				
				НоваяСтрока = Товары.Добавить();   
				НоваяСтрока.Количество        = Число(СтрокаАкта.Quantity);		
				
				NomenclatureID = Строка(СтрокаАкта.NomenclatureID);
				Номенклатура = упОбменПоWebСервису.ПолучитьОбъектыПоИдентификаторам(NomenclatureID);
				
				Если упОбменПоWebСервису.ИдентификаторЗаполнен(NomenclatureID) И Номенклатура = Неопределено Тогда
					ЗаписьЖурналаРегистрации("Обмен по ESB.Загрузка:", УровеньЖурналаРегистрации.Ошибка, , ,"При загрузке ожидаемой приемки с идентификатором:" + ID + ". Не найдена номенклатура с идентификатором " + NomenclatureID);
					СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;  
				Иначе
					НоваяСтрока.Номенклатура    = Номенклатура;
				КонецЕсли;     					
	
							
			КонецЦикла; 
			
			Товары.Свернуть("Номенклатура", "Количество");
			
			СписокНомен = Новый СписокЗначений;
			СписокНомен.ЗагрузитьЗначения(Товары.ВыгрузитьКолонку("Номенклатура"));
			
			СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоСкладу");
			
			ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"&ТекстЗапросаКоэффициентУпаковки",
				Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ТоварыВЯчейках.Упаковка", Неопределено));
			СхемаКомпоновкиДанных.НаборыДанных.ЗаполнениеПоОтборам.Запрос = ТекстЗапроса; 
			
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
		    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		    Настройки = КомпоновщикНастроек.Настройки;
			
			Параметр = Настройки.ПараметрыДанных.Элементы.Найти("ДатаОстатков");	
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ?(ЗначениеЗаполнено(ОбъектПересчетТоваров.Дата), ОбъектПересчетТоваров.Дата, ТекущаяДатаСеанса());
				Параметр.Использование = Истина;
			КонецЕсли;
			
			Параметр = Настройки.ПараметрыДанных.Элементы.Найти("Склад");	
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ОбъектПересчетТоваров.Склад;
				Параметр.Использование = Истина;
			КонецЕсли;

		    
		    Настройки.Отбор.Элементы[0].ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;  
			Настройки.Отбор.Элементы[0].ПравоеЗначение = СписокНомен;
			Настройки.Отбор.Элементы[0].Использование  = Истина;
			Настройки.Отбор.Элементы[3].Использование  = Ложь;
			
			ОбъектПересчетТоваров.ОтборПересчета = Новый ХранилищеЗначения(Настройки, Новый СжатиеДанных(9));

			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ОбъектПересчетТоваров.Товары.Загрузить(ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных)); 
			
			Для Каждого Стр Из ОбъектПересчетТоваров.Товары Цикл 
				
				СтрокаТовара = Товары.Найти(Стр.Номенклатура, "Номенклатура");
				Если СтрокаТовара <> Неопределено Тогда 
					Если ТипДокумента = "СписаниеТоваров" Тогда  
						СписаниеКол = Мин(Стр.Количество, СтрокаТовара.Количество);
						Стр.КоличествоФакт = Стр.Количество - СтрокаТовара.Количество;		
						СтрокаТовара.Количество = СписаниеКол;
						Стр.КоличествоУпаковокФакт = Стр.КоличествоФакт;
					Иначе 
						Стр.КоличествоФакт = Стр.Количество + СтрокаТовара.Количество;		
						СтрокаТовара.Количество = 0;
						Стр.КоличествоУпаковокФакт = Стр.КоличествоФакт;    	
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;	   

			ОбъектПересчетТоваров.Записать(РежимЗаписиДокумента.Проведение);
			
			упОбменПоWebСервису.ЗаписатьВИдентификаторОбмена(ОбъектПересчетТоваров.Ссылка, ID);
			
			
			ОбъектПересчетТоваровВыполнить = ОбъектПересчетТоваров.Ссылка.ПолучитьОбъект();
			ОбъектПересчетТоваровВыполнить.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено;
			ОбъектПересчетТоваровВыполнить.Записать();
			
			
			//----------------------------
			Если ТипДокумента = "СписаниеТоваров" Тогда 
				
				СсылкаДокумнтСписаниеОприходование = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.СписаниеНедостачТоваров");
										
				Если СсылкаДокумнтСписаниеОприходование = Неопределено Тогда 				
					ДокумнтСписаниеОприходование = Документы.СписаниеНедостачТоваров.СоздатьДокумент();
					ДокумнтСписаниеОприходование.Дата = ТекущаяДата(); 
				Иначе  					
					ДокумнтСписаниеОприходование = СсылкаДокумнтСписаниеОприходование.ПолучитьОбъект(); 
					ДокумнтСписаниеОприходование.Товары.Очистить();
				КонецЕсли;
				
				//ДокумнтСписаниеОприходование = Документы.СписаниеНедостачТоваров.СоздатьДокумент();	
				
				ДанныеЗаполнения = ОбъектПересчетТоваров.Ссылка; 
				СтруктураРезультат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Статус, Склад");
				ДокумнтСписаниеОприходование.Склад = СтруктураРезультат.Склад;
				ДокументОснование = ДанныеЗаполнения;
				ДокумнтСписаниеОприходование.ПересчетТоваров = ОбъектПересчетТоваров.Ссылка;
				
				ДокумнтСписаниеОприходование.СтатьяРасходов = Узел.СтатьяРасходов;
				ДокумнтСписаниеОприходование.Организация   = Узел.Организация;
				ДокумнтСписаниеОприходование.ИсточникИнформацииОЦенахДляПечати =  Узел.ИсточникИнформацииОЦенахДляПечати;

								
				Если Не ЗначениеЗаполнено(ДокумнтСписаниеОприходование.ИсточникИнформацииОЦенахДляПечати) Тогда 
					ИсточникИнформацииОЦенахДляПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокумнтСписаниеОприходование.Склад, "ИсточникИнформацииОЦенахДляПечати");
					Если НЕ ЗначениеЗаполнено(ИсточникИнформацииОЦенахДляПечати) И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
						ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;
					КонецЕсли;
					Если ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости Тогда
						ДокумнтСписаниеОприходование.ВидЦены = Неопределено;
					Иначе
						ДокумнтСписаниеОприходование.ВидЦены = Справочники.Склады.УчетныйВидЦены(ДокумнтСписаниеОприходование.Склад);
					КонецЕсли;
				КонецЕсли;

				
				Запрос = Новый Запрос;
	
				ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(ДокумнтСписаниеОприходование.Склад);
				
				Если ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда 

					Запрос.Текст =
					"ВЫБРАТЬ
					|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
					|	ТоварыКОформлению.Характеристика КАК Характеристика,
					|	ТоварыКОформлению.Назначение КАК Назначение,
					|	ТоварыКОформлению.Серия КАК Серия,
					|	СУММА(ТоварыКОформлению.КОформлениюАктовОстаток) КАК Количество
					|ПОМЕСТИТЬ ТоварыКОформлению
					|ИЗ
					|	(ВЫБРАТЬ
					|		ТоварыКОформлению.Номенклатура КАК Номенклатура,
					|		ТоварыКОформлению.Характеристика КАК Характеристика,
					|		ТоварыКОформлению.Назначение КАК Назначение,
					|		ТоварыКОформлению.Серия КАК Серия,
					|		-ТоварыКОформлению.КОформлениюАктовОстаток КАК КОформлениюАктовОстаток
					|	ИЗ
					|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(, Склад = &Склад) КАК ТоварыКОформлению
					|	ГДЕ
					|		ТоварыКОформлению.КОформлениюАктовОстаток < 0
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		ТоварыКОформлению.Номенклатура,
					|		ТоварыКОформлению.Характеристика,
					|		ТоварыКОформлению.Назначение,
					|		ТоварыКОформлению.Серия,
					|		ТоварыКОформлению.КОформлениюАктов
					|	ИЗ
					|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач КАК ТоварыКОформлению
					|	ГДЕ
					|		ТоварыКОформлению.Регистратор = &СписаниеНедостачТоваров
					|		И ТоварыКОформлению.Активность = ИСТИНА) КАК ТоварыКОформлению
					|
					|СГРУППИРОВАТЬ ПО
					|	ТоварыКОформлению.Номенклатура,
					|	ТоварыКОформлению.Характеристика,
					|	ТоварыКОформлению.Назначение,
					|	ТоварыКОформлению.Серия
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТоварыКОформлению.Номенклатура,
					|	ТоварыКОформлению.Характеристика,
					|	ТоварыКОформлению.Серия,
					|	ТоварыКОформлению.Назначение,
					|	ТоварыКОформлению.Количество
					|ИЗ
					|	ТоварыКОформлению КАК ТоварыКОформлению
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
					|		ПО (&НаОснованииПересчета)
					|			И ТоварыКОформлению.Номенклатура = ПересчетТоваровТовары.Номенклатура
					|			И ТоварыКОформлению.Характеристика = ПересчетТоваровТовары.Характеристика
					|			И ТоварыКОформлению.Назначение = ПересчетТоваровТовары.Назначение
					|			И (ПересчетТоваровТовары.СтатусУказанияСерий <> 14
					|				ИЛИ ТоварыКОформлению.Серия = ПересчетТоваровТовары.Серия)
					|			И (ПересчетТоваровТовары.Количество <> ПересчетТоваровТовары.КоличествоФакт)
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОрдерНаОтражениеНедостачТоваров.Товары КАК ОрдерНаОтражениеНедостачТоваровТовары
					|		ПО (&НаОснованииОрдера)
					|			И ТоварыКОформлению.Номенклатура = ОрдерНаОтражениеНедостачТоваровТовары.Номенклатура
					|			И ТоварыКОформлению.Характеристика = ОрдерНаОтражениеНедостачТоваровТовары.Характеристика
					|			И ТоварыКОформлению.Назначение = ОрдерНаОтражениеНедостачТоваровТовары.Назначение
					|			И (ОрдерНаОтражениеНедостачТоваровТовары.СтатусУказанияСерий <> 14
					|				ИЛИ ТоварыКОформлению.Серия = ОрдерНаОтражениеНедостачТоваровТовары.Серия)
					|ГДЕ
					|	(НЕ &НаОснованииПересчета
					|			ИЛИ &НаОснованииПересчета
					|				И НЕ ПересчетТоваровТовары.Номенклатура ЕСТЬ NULL 
					|				И ПересчетТоваровТовары.Ссылка = &ДокументОснование)
					|	И (НЕ &НаОснованииОрдера
					|			ИЛИ &НаОснованииОрдера
					|				И НЕ ОрдерНаОтражениеНедостачТоваровТовары.Номенклатура ЕСТЬ NULL 
					|				И ОрдерНаОтражениеНедостачТоваровТовары.Ссылка = &ДокументОснование)";
					
					Запрос.УстановитьПараметр("СписаниеНедостачТоваров", ДокумнтСписаниеОприходование.Ссылка);
					Запрос.УстановитьПараметр("Склад", ДокумнтСписаниеОприходование.Склад);
					Запрос.УстановитьПараметр("ДокументОснование", ДокумнтСписаниеОприходование.ДокументОснование);
					НаОснованииПересчета = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПересчетТоваров");
					Запрос.УстановитьПараметр("НаОснованииПересчета", НаОснованииПересчета);
					НаОснованииОрдера = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОрдерНаОтражениеНедостачТоваров");
					Запрос.УстановитьПараметр("НаОснованииОрдера", НаОснованииОрдера);
					
				Иначе
					
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	докСписаниеНедостач.Ссылка.ПересчетТоваров КАК ПересчетТоваров,
					|	докСписаниеНедостач.Номенклатура КАК Номенклатура,
					|	докСписаниеНедостач.Характеристика КАК Характеристика,
					|	СУММА(докСписаниеНедостач.Количество) КАК Количество
					|ПОМЕСТИТЬ втОприходовано
					|ИЗ
					|	Документ.СписаниеНедостачТоваров.Товары КАК докСписаниеНедостач
					|ГДЕ
					|	докСписаниеНедостач.Ссылка.ПересчетТоваров = &Ссылка
					|	И докСписаниеНедостач.Ссылка.Проведен
					|
					|СГРУППИРОВАТЬ ПО
					|	докСписаниеНедостач.Ссылка.ПересчетТоваров,
					|	докСписаниеНедостач.Номенклатура,
					|	докСписаниеНедостач.Характеристика
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Номенклатура,
					|	Характеристика
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	докПересчет.Номенклатура КАК Номенклатура,
					|	докПересчет.Характеристика КАК Характеристика,
					|	докПересчет.Назначение,
					|	докПересчет.Серия,
					|	-1 * (докПересчет.КоличествоФакт - докПересчет.Количество + ЕСТЬNULL(втОприходовано.Количество, 0)) КАК Количество
					|ИЗ
					|	Документ.ПересчетТоваров.Товары КАК докПересчет
					|		ЛЕВОЕ СОЕДИНЕНИЕ втОприходовано КАК втОприходовано
					|		ПО докПересчет.Ссылка = втОприходовано.ПересчетТоваров
					|			И докПересчет.Номенклатура = втОприходовано.Номенклатура
					|			И докПересчет.Характеристика = втОприходовано.Характеристика
					|ГДЕ
					|	докПересчет.Ссылка = &Ссылка
					|	И докПересчет.КоличествоФакт - докПересчет.Количество + ЕСТЬNULL(втОприходовано.Количество, 0) < 0";
					// взлет
					
					Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
					
				КонецЕсли;
					
				УстановитьПривилегированныйРежим(Истина);
				Результат = Запрос.Выполнить();
				УстановитьПривилегированныйРежим(Ложь);
				Если Не Результат.Пустой() Тогда

					ДокумнтСписаниеОприходование.Товары.Загрузить(Результат.Выгрузить());
					
				КонецЕсли;
				
				ДокумнтСписаниеОприходование.Записать(РежимЗаписиДокумента.Проведение);
				
				упОбменПоWebСервису.ЗаписатьВИдентификаторОбмена(ДокумнтСписаниеОприходование.Ссылка, ID); 

			Иначе 
				
				СсылкаДокумнтСписаниеОприходование = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.ОприходованиеИзлишковТоваров");
										
				Если СсылкаДокумнтСписаниеОприходование = Неопределено Тогда 				
					ДокумнтСписаниеОприходование = Документы.ОприходованиеИзлишковТоваров.СоздатьДокумент();
					ДокумнтСписаниеОприходование.Дата = ТекущаяДата(); 
				Иначе  					
					ДокумнтСписаниеОприходование = СсылкаДокумнтСписаниеОприходование.ПолучитьОбъект(); 
					ДокумнтСписаниеОприходование.Товары.Очистить();
				КонецЕсли; 
				
				//ДокумнтСписаниеОприходование = Документы.ОприходованиеИзлишковТоваров.СоздатьДокумент();	
				
				ДанныеЗаполнения = ОбъектПересчетТоваров.Ссылка; 

				СтруктураРезультат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения, "Статус, Склад");
				Если СтруктураРезультат.Статус <> Перечисления.СтатусыПересчетовТоваров.Выполнено Тогда 
					ТекстСообщения = НСтр("ru='Документ ""%ДокументПересчет%"" находится в статусе ""%СтатусПересчета%"". Ввод документа ""%ДокументАкт%"" на основании разрешен только в статусе ""%СтатусВыполнено%"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументПересчет%", ДанныеЗаполнения);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументАкт%", Метаданные.Документы.ОприходованиеИзлишковТоваров.Синоним);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусВыполнено%", Перечисления.СтатусыПересчетовТоваров.Выполнено);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусПересчета%", СтруктураРезультат.Статус);
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				ДокумнтСписаниеОприходование.Склад = СтруктураРезультат.Склад;
				ДокумнтСписаниеОприходование.ПересчетТоваров = ДанныеЗаполнения;   
				ДокумнтСписаниеОприходование.СтатьяДоходов = Узел.СтатьяДоходов;
				ДокумнтСписаниеОприходование.Организация   = Узел.Организация; 
				
				ДокументОснование = ДанныеЗаполнения;
				
				
				Запрос = Новый Запрос;
				
				ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач(ДокумнтСписаниеОприходование.Склад);
				
				Если ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда 
					
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
					|	ТоварыКОформлению.Характеристика КАК Характеристика,
					|	ТоварыКОформлению.Назначение КАК Назначение,
					|	ТоварыКОформлению.Серия КАК Серия,
					|	СУММА(ТоварыКОформлению.КОформлениюАктовОстаток) КАК Количество
					|ПОМЕСТИТЬ ТоварыКОформлению
					|ИЗ
					|	(ВЫБРАТЬ
					|		ТоварыКОформлению.Номенклатура КАК Номенклатура,
					|		ТоварыКОформлению.Характеристика КАК Характеристика,
					|		ТоварыКОформлению.Серия КАК Серия,
					|		ТоварыКОформлению.Назначение КАК Назначение,
					|		ТоварыКОформлению.КОформлениюАктовОстаток КАК КОформлениюАктовОстаток
					|	ИЗ
					|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(, Склад = &Склад) КАК ТоварыКОформлению
					|	ГДЕ
					|		ТоварыКОформлению.КОформлениюАктовОстаток > 0
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		ТоварыКОформлению.Номенклатура,
					|		ТоварыКОформлению.Характеристика,
					|		ТоварыКОформлению.Серия,
					|		ТоварыКОформлению.Назначение,
					|		ТоварыКОформлению.КОформлениюАктов
					|	ИЗ
					|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач КАК ТоварыКОформлению
					|	ГДЕ
					|		ТоварыКОформлению.Регистратор = &Ссылка
					|		И ТоварыКОформлению.Активность = ИСТИНА) КАК ТоварыКОформлению
					|
					|СГРУППИРОВАТЬ ПО
					|	ТоварыКОформлению.Номенклатура,
					|	ТоварыКОформлению.Характеристика,
					|	ТоварыКОформлению.Назначение,
					|	ТоварыКОформлению.Серия
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТоварыКОформлению.Номенклатура,
					|	ТоварыКОформлению.Характеристика,
					|	ТоварыКОформлению.Серия,
					|	ТоварыКОформлению.Назначение,
					|	ТоварыКОформлению.Количество
					|ИЗ
					|	ТоварыКОформлению КАК ТоварыКОформлению
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
					|		ПО (&НаОснованииПересчета)
					|			И ТоварыКОформлению.Номенклатура = ПересчетТоваровТовары.Номенклатура
					|			И ТоварыКОформлению.Характеристика = ПересчетТоваровТовары.Характеристика
					|			И ТоварыКОформлению.Назначение = ПересчетТоваровТовары.Назначение
					|			И (ПересчетТоваровТовары.СтатусУказанияСерий <> 14
					|				ИЛИ ТоварыКОформлению.Серия = ПересчетТоваровТовары.Серия)
					|			И (ПересчетТоваровТовары.Количество <> ПересчетТоваровТовары.КоличествоФакт)
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОрдерНаОтражениеИзлишковТоваров.Товары КАК ОрдерНаОтражениеИзлишковТоваровТовары
					|		ПО (&НаОснованииОрдера)
					|			И ТоварыКОформлению.Номенклатура = ОрдерНаОтражениеИзлишковТоваровТовары.Номенклатура
					|			И ТоварыКОформлению.Характеристика = ОрдерНаОтражениеИзлишковТоваровТовары.Характеристика
					|			И ТоварыКОформлению.Назначение = ОрдерНаОтражениеИзлишковТоваровТовары.Назначение
					|			И (ОрдерНаОтражениеИзлишковТоваровТовары.СтатусУказанияСерий <> 14
					|				ИЛИ ТоварыКОформлению.Серия = ОрдерНаОтражениеИзлишковТоваровТовары.Серия)
					|ГДЕ
					|	(НЕ &НаОснованииПересчета
					|			ИЛИ &НаОснованииПересчета
					|				И НЕ ПересчетТоваровТовары.Номенклатура ЕСТЬ NULL 
					|				И ПересчетТоваровТовары.Ссылка = &ДокументОснование)
					|	И (НЕ &НаОснованииОрдера
					|			ИЛИ &НаОснованииОрдера
					|				И НЕ ОрдерНаОтражениеИзлишковТоваровТовары.Номенклатура ЕСТЬ NULL 
					|				И ОрдерНаОтражениеИзлишковТоваровТовары.Ссылка = &ДокументОснование)";
					
					Запрос.УстановитьПараметр("Ссылка", ДокумнтСписаниеОприходование.Ссылка);
					Запрос.УстановитьПараметр("Склад", ДокумнтСписаниеОприходование.Склад);
					Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
					НаОснованииПересчета = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПересчетТоваров");
					Запрос.УстановитьПараметр("НаОснованииПересчета", НаОснованииПересчета);
					НаОснованииОрдера = ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОрдерНаОтражениеИзлишковТоваров");
					Запрос.УстановитьПараметр("НаОснованииОрдера", НаОснованииОрдера);
					
				Иначе 
					
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	докОприходованиеИзлишков.Ссылка.ПересчетТоваров КАК ПересчетТоваров,
					|	докОприходованиеИзлишков.Номенклатура КАК Номенклатура,
					|	докОприходованиеИзлишков.Характеристика КАК Характеристика,
					|	СУММА(докОприходованиеИзлишков.Количество) КАК Количество
					|ПОМЕСТИТЬ втОприходовано
					|ИЗ
					|	Документ.ОприходованиеИзлишковТоваров.Товары КАК докОприходованиеИзлишков
					|ГДЕ
					|	докОприходованиеИзлишков.Ссылка.ПересчетТоваров = &Ссылка
					|	И докОприходованиеИзлишков.Ссылка.Проведен
					|
					|СГРУППИРОВАТЬ ПО
					|	докОприходованиеИзлишков.Ссылка.ПересчетТоваров,
					|	докОприходованиеИзлишков.Номенклатура,
					|	докОприходованиеИзлишков.Характеристика
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Номенклатура,
					|	Характеристика
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	докПересчет.Номенклатура КАК Номенклатура,
					|	докПересчет.Характеристика КАК Характеристика,
					|	докПересчет.Назначение,
					|	докПересчет.Серия,
					|	докПересчет.КоличествоФакт - докПересчет.Количество - ЕСТЬNULL(втОприходовано.Количество, 0) КАК Количество
					|ИЗ
					|	Документ.ПересчетТоваров.Товары КАК докПересчет
					|		ЛЕВОЕ СОЕДИНЕНИЕ втОприходовано КАК втОприходовано
					|		ПО докПересчет.Ссылка = втОприходовано.ПересчетТоваров
					|			И докПересчет.Номенклатура = втОприходовано.Номенклатура
					|			И докПересчет.Характеристика = втОприходовано.Характеристика
					|ГДЕ
					|	докПересчет.Ссылка = &Ссылка
					|	И докПересчет.КоличествоФакт - докПересчет.Количество - ЕСТЬNULL(втОприходовано.Количество, 0) > 0";
									
					Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
					
				КонецЕсли;
				
				УстановитьПривилегированныйРежим(Истина);
				Результат = Запрос.Выполнить();
				УстановитьПривилегированныйРежим(Ложь);
				
				Если Не Результат.Пустой() Тогда
					
					ДокумнтСписаниеОприходование.Товары.Загрузить(Результат.Выгрузить());
					
					Если ЗначениеЗаполнено(ДокумнтСписаниеОприходование.ВидЦены) И Товары.Количество() > 0 Тогда
						
						ПараметрыЗаполнения = Новый Структура;
						КолонкиПоЗначению = Новый Структура("Упаковка", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
						
						ПараметрыЗаполнения.Вставить("Дата", ДокумнтСписаниеОприходование.Дата);
						ПараметрыЗаполнения.Вставить("Валюта", Константы.ВалютаУправленческогоУчета.Получить());
						ПараметрыЗаполнения.Вставить("ВидЦены", ДокумнтСписаниеОприходование.ВидЦены);
						ПараметрыЗаполнения.Вставить("КолонкиПоЗначению", КолонкиПоЗначению);
						
						СтруктураДействий = Новый Структура("ПересчитатьСумму", "Количество");
						
						ПродажиСервер.ЗаполнитьЦены(
						Товары,,
						ПараметрыЗаполнения, 
						СтруктураДействий);
					КонецЕсли;
					          									
				КонецЕсли;
				
				ДокумнтСписаниеОприходование.Записать(РежимЗаписиДокумента.Проведение); 
				
			КонецЕсли;
			//---------------------------------
						
		КонецЕсли;
		
		Если СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано Тогда 
			ЗафиксироватьТранзакцию();
		Иначе	
			ОтменитьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение "Обмен по ESB.Загрузка: При загрузке документа с ID:" + ID + " произошла ошибка: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
	КонецПопытки;
	
