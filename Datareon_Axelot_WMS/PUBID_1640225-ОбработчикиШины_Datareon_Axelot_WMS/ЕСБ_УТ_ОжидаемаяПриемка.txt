ТелоСообщения = ОбъектСообщение.Body;
	xdtoСправочник = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.XML, ТелоСообщения); 
	
	Попытка
		
		ID             = Строка(xdtoСправочник.KISOwnerID);  
		
		НачатьТранзакцию();  				
				
		Если xdtoСправочник.Source = "Приемка от поставщика" Тогда 
			
			СсылкаНаОбъект = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.ЗаказПоставщику");	
			
		ИначеЕсли xdtoСправочник.Source = "Отказ клиента" Тогда 
			
			СсылкаНаОбъект = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.КорректировкаРеализации");
			
		Иначе
			
			МассивИдентификаторов = Новый Массив;
			МассивИдентификаторов.Добавить(ID);
		
			Результат = упОбменПоWebСервису.ПолучитьОбъектыПоИдентификаторам(МассивИдентификаторов);

			СсылкаНаОбъект = Результат[ID];	
			
		КонецЕсли;
							
		Если упОбменПоWebСервису.ИдентификаторЗаполнен(ID) И СсылкаНаОбъект = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен по ESB.Загрузка:", УровеньЖурналаРегистрации.Ошибка, , ,"При загрузке ожидаемой приемки с идентификатором:" + ID + ". Не найден документ источник.");
			СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;   
		КонецЕсли;
		
		Если СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано Тогда
			
			УзелНастроек = ПланыОбмена.усОбменУправлениеСкладом.ЭтотУзел();
								
			ОбъектДок = СсылкаНаОбъект.ПолучитьОбъект();
			ТипЗначения = ТипЗнч(ОбъектДок);  				
						
			КоличествоНульСтрок = 0; //кол-во строк в которых количество позиций по номенклатуре = 0
			
			// строки
			Товары = Новый ТаблицаЗначений;
			Товары.Колонки.Добавить("Номенклатура");
			Товары.Колонки.Добавить("НомерСтроки"); 
			Товары.Колонки.Добавить("УпаковкаНоменклатуры"); 				
			Товары.Колонки.Добавить("Количество"); 		   		
			
			текТаблица = xdtoСправочник.GoodsLine.Последовательность();
			Для ИндексXDTO = 0 По текТаблица.Количество()-1 Цикл
				СтрокаОждПриемки = текТаблица.ПолучитьЗначение(ИндексXDTO);                   
				
				НоваяСтрока = Товары.Добавить();   
				НоваяСтрока.Количество        = СтрокаОждПриемки.Quantity;		
								
				NomenclatureID = Строка(СтрокаОждПриемки.NomenclatureID);
				Номенклатура = упОбменПоWebСервису.ПолучитьОбъектыПоИдентификаторам(NomenclatureID);
				
				Если упОбменПоWebСервису.ИдентификаторЗаполнен(NomenclatureID) И Номенклатура = Неопределено Тогда
					ЗаписьЖурналаРегистрации("Обмен по ESB.Загрузка:", УровеньЖурналаРегистрации.Ошибка, , ,"При загрузке ожидаемой приемки с идентификатором:" + ID + ". Не найдена номенклатура с идентификатором " + NomenclatureID);
					СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;  
				Иначе
					НоваяСтрока.Номенклатура    = Номенклатура;
				КонецЕсли;
				
				НоваяСтрока.Количество  = Число(СтрокаОждПриемки["Quantity"]);	
				НоваяСтрока.НомерСтроки = СтрокаОждПриемки["LineNum"];
							
			КонецЦикла;   
			
			Товары.Свернуть("Номенклатура", "Количество"); 			
			
			Если ТипЗначения <> Тип("ДокументОбъект.КорректировкаРеализации")
				И ТипЗначения <> Тип("ДокументОбъект.ЗаказПоставщику") Тогда 
				
				Для Каждого ТекСтрока Из ОбъектДок.Товары Цикл 					
					
					НайденнаяСтрока = Товары.Найти(ТекСтрока.Номенклатура, "Номенклатура"); 
				    
					Если НайденнаяСтрока <> Неопределено Тогда 
						ТекСтрока.Количество = НайденнаяСтрока.Количество;
						Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда 
							ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество 
															* ?(ТекСтрока.Упаковка.Знаменатель = 0, 1, ТекСтрока.Упаковка.Знаменатель)
															/ ?(ТекСтрока.Упаковка.Числитель = 0, 1, ТекСтрока.Упаковка.Числитель);  		
							  
						Иначе 
							ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;	
						КонецЕсли;
						
						СтруктураДействий = Новый Структура;	
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок); 
						
						СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");

						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, Неопределено); 					  					
						
					Иначе 
						
						ТекСтрока.Количество = 0;
						Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда 
							ТекСтрока.КоличествоУпаковок = 0; 						  
						Иначе 
							ТекСтрока.КоличествоУпаковок = 0;	
						КонецЕсли; 
						
					КонецЕсли;
											
				КонецЦикла;
							
				СтруктураДляПоиска = Новый Структура("Количество", 0); 
				
				МассивПустыхСтрок = ОбъектДок.Товары.НайтиСтроки(СтруктураДляПоиска); 
				Для каждого Строка Из МассивПустыхСтрок Цикл 
					ОбъектДок.Товары.Удалить(Строка); 
				КонецЦикла; 				
				                       	
				Попытка
					ОбъектДок.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Ложь);
					ОбъектДок.ДополнительныеСвойства.Вставить("НеРегистрироватьДляОбмена");
					ОбъектДок.ДополнительныеСвойства.Вставить("СШПНеобрабатывать");
					ОбъектДок.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ЗаписьЖурналаРегистрации("Обмен по ESB.Загрузка:", УровеньЖурналаРегистрации.Ошибка, , ,"При загрузке ожидаемой приемки с идентификатором:" + ID + ". Ошибка проведения документа:" + ОписаниеОшибки());
					СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки; 	
				КонецПопытки;
						
			КонецЕсли;
			
			Если ТипЗначения = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
				
				//Создаем перемещение на склад брака 
				СсылкаНаОбъектПеремещение = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.ПеремещениеТоваров");
				
				Если СсылкаНаОбъектПеремещение = Неопределено Тогда 					
					ОбъектПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
					ОбъектПеремещение.Дата = ТекущаяДата(); 									
				Иначе 					
					ОбъектПеремещение = СсылкаНаОбъектПеремещение.ПолучитьОбъект(); 	
					ОбъектПеремещение.Товары.Очистить();  				
				КонецЕсли;
				
				Запрос = Новый Запрос();
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	*
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|ГДЕ
				|	РеализацияТоваровУслуг.Ссылка = &СсылкаРеализация";
				Запрос.УстановитьПараметр("СсылкаРеализация", СсылкаНаОбъект.ДокументОснование);
				
				Результат = Запрос.Выполнить().Выбрать();
				Результат.Следующий();
				
				//ЗаполнитьЗначенияСвойств(ОбъектПеремещение, Результат);
				ОбъектПеремещение.Организация      = Результат.Организация;
				ОбъектПеремещение.СкладПолучатель  = УзелНастроек.СкладБрака;
				ОбъектПеремещение.СкладОтправитель = СсылкаНаОбъект.ДокументОснование.Склад; 				
				ОбъектПеремещение.ПеремещениеПоЗаказам = Ложь;
				ОбъектПеремещение.Статус           = Перечисления.СтатусыПеремещенийТоваров.Отгружено;
				ОбъектПеремещение.ДатаРаспоряжения = ТекущаяДата();
				ОбъектПеремещение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
				ОбъектПеремещение.СпособДоставки   = Перечисления.СпособыДоставки.Самовывоз;
				ОбъектПеремещение.ВидыЗапасовУказаныВручную = Ложь;
				ОбъектПеремещение.ОсобыеУсловияПеревозки = Ложь;
				ОбъектПеремещение.ЕстьАлкогольнаяПродукцияДляРеализацииЕГАИС = Ложь;
				
				Для Каждого стр Из Товары Цикл
					
					НоваяСтр = ОбъектПеремещение.Товары.Добавить();									
					НайденнаяСтрока  = СсылкаНаОбъект.Товары.Найти(стр.Номенклатура, "Номенклатура");
					ЗаполнитьЗначенияСвойств(НоваяСтр, НайденнаяСтрока);					
					НоваяСтр.Количество   = стр.Количество;
					НоваяСтр.КоличествоУпаковок  = стр.Количество;
					НоваяСтр.КодСтроки = 0;
					
				КонецЦикла;
				
				ОбъектПеремещение.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Ложь);
				ОбъектПеремещение.ДополнительныеСвойства.Вставить("НеРегистрироватьДляОбмена");
				ОбъектПеремещение.ДополнительныеСвойства.Вставить("СШПНеобрабатывать");  
				ОбъектПеремещение.ДополнительныеСвойства.Вставить("ID", ID);
				ОбъектПеремещение.Записать(РежимЗаписиДокумента.Проведение);
				
				упОбменПоWebСервису.ЗаписатьВИдентификаторОбмена(ОбъектПеремещение.Ссылка, ID);
				
			ИначеЕсли ТипЗначения = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
				
				СсылкаНаОбъектПосупление = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.ПоступлениеТоваровУслуг");
				
				Если СсылкаНаОбъектПосупление = Неопределено Тогда 					
					ОбъектПоступление = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					ОбъектПоступление.Дата = ТекущаяДата();  									
				Иначе  					
					ОбъектПоступление = СсылкаНаОбъектПосупление.ПолучитьОбъект(); 	
					ОбъектПоступление.Товары.Очистить();  				
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("ДокументОснование", СсылкаНаОбъект);
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЗаказПоставщику.Сделка КАК Сделка,
				|	ЗаказПоставщику.Соглашение.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
				|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику,
				|	ЗаказПоставщику.Партнер КАК Партнер,
				|	ЗаказПоставщику.Контрагент КАК Контрагент,
				|	ЗаказПоставщику.Договор КАК Договор,
				|	ЗаказПоставщику.Организация КАК Организация,
				|	ЗаказПоставщику.Соглашение КАК Соглашение,
				|	ЗаказПоставщику.Валюта КАК Валюта,
				|	ЗаказПоставщику.Валюта КАК ВалютаВзаиморасчетов,
				|	ВЫБОР
				|		КОГДА ЗаказПоставщику.Склад.ЭтоГруппа
				|				И ЗаказПоставщику.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
				|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|		ИНАЧЕ ЗаказПоставщику.Склад
				|	КОНЕЦ КАК Склад,
				|	ВЫБОР
				|		КОГДА ЗаказПоставщику.Склад.ЭтоГруппа
				|				И ЗаказПоставщику.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
				|	ЗаказПоставщику.ФормаОплаты КАК ФормаОплаты,
				|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
				|	ЗаказПоставщику.НалогообложениеНДС КАК НалогообложениеНДС,
				|	ЗаказПоставщику.ЗакупкаПодДеятельность КАК ЗакупкаПодДеятельность,
				|	ЗаказПоставщику.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ЗаказПоставщику.Статус КАК СтатусДокумента,
				|	ЗаказПоставщику.Подразделение КАК Подразделение,
				|	ЗаказПоставщику.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
				|	ЗаказПоставщику.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
				|	ЗаказПоставщику.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
				|	ЗаказПоставщику.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
				|	ЕСТЬNULL(ЗаказПоставщику.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю,Ложь) КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
				|	ЕСТЬNULL(ЗаказПоставщику.Соглашение.КалендарьВозвратаТары,ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)) КАК КалендарьВозвратаТары,
				|	НЕ ЗаказПоставщику.Проведен КАК ЕстьОшибкиПроведен,
				|	ВЫБОР
				|		КОГДА ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
				|				ИЛИ ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК ЕстьОшибкиСтатус,
				|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчетОрганизации,
				|	ЗаказПоставщику.ПорядокРасчетов КАК ПорядокРасчетов,
				|	ЗаказПоставщику.НаправлениеДеятельности КАК НаправлениеДеятельности,
				|	ЗаказПоставщику.ПорядокОплаты КАК ПорядокОплаты
				|ИЗ
				|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
				|ГДЕ
				|	ЗаказПоставщику.Ссылка = &ДокументОснование
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗаказыОстатки.Склад КАК Склад
				|ИЗ
				|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ДокументОснование) КАК ЗаказыОстатки";
				
				РезультатЗапроса = Запрос.ВыполнитьПакет();
				
				РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
				РеквизитыЗаказа.Следующий();
				
				МассивДопустимыхСтатусов = Новый Массив();
				МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Подтвержден);
				МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Закрыт);
								
				// Заполнение шапки.
				ЗаполнитьЗначенияСвойств(ОбъектПоступление, РеквизитыЗаказа);
								
				Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
					МассивСкладов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
				КонецЕсли;
		
		        ОбъектПоступление.ПоступлениеПоЗаказам = Истина;
	
				Если СсылкаНаОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
					УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(СсылкаНаОбъект.Соглашение);   					
					
					//-------------------------------------------------				
					ОбъектПоступление.ФормаОплаты = УсловияЗакупок.ФормаОплаты;
					
					Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация = СсылкаНаОбъект.Организация Тогда
						СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
						СтруктураПараметров.Организация    		= СсылкаНаОбъект.Организация;
						СтруктураПараметров.БанковскийСчет		= РеквизитыЗаказа.БанковскийСчетОрганизации;
						СтруктураПараметров.НаправлениеДеятельности	= РеквизитыЗаказа.НаправлениеДеятельности;
						ОбъектПоступление.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
					КонецЕсли;   					
										
					Если НЕ ЗначениеЗаполнено(ОбъектПоступление.ДатаПлатежа) Тогда
						ОбъектПоступление.ДатаПлатежа = ТекущаяДатаСеанса();
					КонецЕсли;    				
					//-------------------------------------------------  

				КонецЕсли;
				
				ОбъектПоступление.Склад = СсылкаНаОбъект.Склад; 
				
				ЗаполнятьПоОстаткам = Истина;
				Если ЗаполнятьПоОстаткам Тогда
					
					МассивЗаказов = Новый Массив();
					МассивЗаказов.Добавить(СсылкаНаОбъект);
										
					Документы.ПоступлениеТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
						ОбъектПоступление,
						ОбъектПоступление.Товары,
						ОбъектПоступление.Склад,
						МассивЗаказов);
					
					ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(СсылкаНаОбъект, ОбъектПоступление.Товары, "ЗаказПоставщику");  					
				
				КонецЕсли;
				
				////--------  								
				//Для Каждого СтрТовары Из ОбъектПоступление.Товары Цикл
				//	
				//	Если ЗначениеЗаполнено(СтрТовары.Упаковка) Тогда 
				//		СтрТовары.КоличествоУпаковок = СтрТовары.Количество; 
				//		СтрТовары.Цена               = СтрТовары.Цена
				//									   * ?(СтрТовары.Упаковка.Знаменатель = 0, 1, СтрТовары.Упаковка.Знаменатель) 
				//									   / ?(СтрТовары.Упаковка.Числитель = 0, 1, СтрТовары.Упаковка.Числитель);
				//		СтрТовары.Упаковка = СтрТовары.Номенклатура.ЕдиницаИзмерения;
				//	КонецЕсли;
				//	
				//КонецЦикла;				
				////--------  
				
				//---13032019+
				
				Для Каждого ТекСтрока Из ОбъектПоступление.Товары Цикл 					
					
					НайденнаяСтрока = Товары.Найти(ТекСтрока.Номенклатура, "Номенклатура"); 
				    
					Если НайденнаяСтрока <> Неопределено Тогда 
						ТекСтрока.Количество = НайденнаяСтрока.Количество;
						Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда 
							ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;	
							ТекСтрока.Цена     =  ТекСтрока.Цена 
												  * ?(ТекСтрока.Упаковка.Знаменатель = 0, 1, ТекСтрока.Упаковка.Знаменатель)
												  / ?(ТекСтрока.Упаковка.Числитель = 0, 1, ТекСтрока.Упаковка.Числитель);
							ТекСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();							
;  
						//	ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество 
						//									* ?(ТекСтрока.Упаковка.Знаменатель = 0, 1, ТекСтрока.Упаковка.Знаменатель)
						//									/ ?(ТекСтрока.Упаковка.Числитель = 0, 1, ТекСтрока.Упаковка.Числитель);  		
						//	  
						//Иначе 
						//	ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;	
						КонецЕсли;
						
						СтруктураДействий = Новый Структура;	
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектПоступление); 
						
						СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");

						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, Неопределено); 					  					
						
					Иначе 
						
						ТекСтрока.Количество = 0;
						Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда 
							ТекСтрока.КоличествоУпаковок = 0; 						  
						Иначе 
							ТекСтрока.КоличествоУпаковок = 0;	
						КонецЕсли; 
						
					КонецЕсли;
											
				КонецЦикла;
							
				СтруктураДляПоиска = Новый Структура("Количество", 0); 
				
				МассивПустыхСтрок = ОбъектПоступление.Товары.НайтиСтроки(СтруктураДляПоиска); 
				Для каждого Строка Из МассивПустыхСтрок Цикл 
					ОбъектПоступление.Товары.Удалить(Строка); 
				КонецЦикла; 
				
				//---13032019-
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам") Тогда
					Сделка = Справочники.СделкиСКлиентами.ПустаяСсылка();
				КонецЕсли;	
				ОбъектПоступление.СпособДоставки = СсылкаНаОбъект.СпособДоставки;
				
				Для Каждого Стр Из ОбъектПоступление.Товары Цикл 
					Стр.СуммаРучнойСкидки = 0;	
				КонецЦикла;
				
				ОбъектПоступление.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Ложь);  
				ОбъектПоступление.ДополнительныеСвойства.Вставить("НеРегистрироватьДляОбмена");
				ОбъектПоступление.ДополнительныеСвойства.Вставить("СШПНеобрабатывать");  
				ОбъектПоступление.ДополнительныеСвойства.Вставить("ID", ID);   				  
				ОбъектПоступление.Записать(РежимЗаписиДокумента.Проведение); 
				//ОбъектПоступление.Записать(); 
				
				упОбменПоWebСервису.ЗаписатьВИдентификаторОбмена(ОбъектПоступление.Ссылка, ID);  
					
			КонецЕсли;			
				
		КонецЕсли;
		
		Если СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано Тогда 
			ЗафиксироватьТранзакцию();
		Иначе	
			ОтменитьТранзакцию();
		КонецЕсли;	
	Исключение
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение "Обмен по ESB.Загрузка: При загрузке документа с ID:" + ID + " произошла ошибка: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
	КонецПопытки;


