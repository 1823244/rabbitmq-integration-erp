	ТелоСообщения = ОбъектСообщение.Body;
	xdtoСправочник = сшпОбщегоНазначения.ПолучитьОбъектXDTO(Перечисления.сшпФорматыСообщений.XML, ТелоСообщения); 
	
	Попытка   
		
		ID             = Строка(xdtoСправочник.KISOwnerID);  
		
		НачатьТранзакцию(); 
		
		Бонус = Ложь;
		
		Если xdtoСправочник.OrderSource = "ОтгрузкаКлиенту" Тогда 
			СсылкаНаОбъект = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.ЗаказКлиента");	
			Бонус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Авэкс_СтатьяРасходов") = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоКоду("00-000058"); 
		ИначеЕсли xdtoСправочник.OrderSource = "ОтгрузкаНаСклад" Тогда  
			СсылкаНаОбъект = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.ЗаказНаПеремещение");		
		КонецЕсли;
		//СсылкаНаОбъект = Результат[ID];	
							
		Если упОбменПоWebСервису.ИдентификаторЗаполнен(ID) И СсылкаНаОбъект = Неопределено Тогда
			ЗаписьЖурналаРегистрации("Обмен по ESB.Загрузка:", УровеньЖурналаРегистрации.Ошибка, , ,"При загрузке заказа на отгрузку с идентификатором:" + ID + ". Не найден документ источник.");
			СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;   
		КонецЕсли;
		
		Если СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано Тогда 
						
			ОбъектДок = СсылкаНаОбъект.ПолучитьОбъект();
			ТипЗначения = ТипЗнч(ОбъектДок);  			 			
				
						
			КоличествоНульСтрок = 0; //кол-во строк в которых количество позиций по номенклатуре = 0
			
			// строки
			Товары = Новый ТаблицаЗначений;
			Товары.Колонки.Добавить("Номенклатура");
			Товары.Колонки.Добавить("НомерСтроки"); 
			Товары.Колонки.Добавить("УпаковкаНоменклатуры"); 				
			Товары.Колонки.Добавить("Количество"); 		   		
			
			текТаблица = xdtoСправочник.GoodsLine.Последовательность();
			Для ИндексXDTO = 0 По текТаблица.Количество()-1 Цикл
				СтрокаОждПриемки = текТаблица.ПолучитьЗначение(ИндексXDTO);                   
				
				НоваяСтрока = Товары.Добавить();   
				НоваяСтрока.Количество        = СтрокаОждПриемки.Quantity;		
								
				NomenclatureID = Строка(СтрокаОждПриемки.NomenclatureID);
				Номенклатура = упОбменПоWebСервису.ПолучитьОбъектыПоИдентификаторам(NomenclatureID);
				
				Если упОбменПоWebСервису.ИдентификаторЗаполнен(NomenclatureID) И Номенклатура = Неопределено Тогда
					ЗаписьЖурналаРегистрации("Обмен по ESB.Загрузка:", УровеньЖурналаРегистрации.Ошибка, , ,"При загрузке ожидаемой приемки с идентификатором:" + ID + ". Не найдена номенклатура с идентификатором " + NomenclatureID);
					СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;  
				Иначе
					НоваяСтрока.Номенклатура    = Номенклатура;
				КонецЕсли;
				
				НоваяСтрока.Количество  = Число(СтрокаОждПриемки["Quantity"]);	
				НоваяСтрока.НомерСтроки = СтрокаОждПриемки["LineNum"];
							
			КонецЦикла;
			
			Товары.Свернуть("Номенклатура", "Количество");   		                                               			
			
			Для Каждого ТекСтрока Из ОбъектДок.Товары Цикл   					
								 
				НайденнаяСтрока = Товары.Найти(ТекСтрока.Номенклатура, "Номенклатура"); 
				
				Если НайденнаяСтрока = Неопределено
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрока.Номенклатура, "Авэкс_АкционныйТовар") Тогда
					Массив = Новый Массив;
					Массив.Добавить(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Прототип Акции", Ложь)));
					БонусНоменклатураСвойства =  УправлениеСвойствами.ПолучитьЗначенияСвойств(ТекСтрока.Номенклатура, Истина, Ложь, Массив);
					Если БонусНоменклатураСвойства.Количество() Тогда 
						БонусНоменклатура = БонусНоменклатураСвойства[0].Значение;
						НайденнаяСтрока = Товары.Найти(БонусНоменклатура, "Номенклатура");
					Иначе 
						НайденнаяСтрока = Неопределено;	
					КонецЕсли;
				КонецЕсли;    					
					
				Если НайденнаяСтрока <> Неопределено Тогда 
					ТекСтрока.Количество = НайденнаяСтрока.Количество;
					Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда 
						ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество 
														* ?(ТекСтрока.Упаковка.Знаменатель = 0, 1, ТекСтрока.Упаковка.Знаменатель)
														/ ?(ТекСтрока.Упаковка.Числитель = 0, 1, ТекСтрока.Упаковка.Числитель);  		
					Иначе 
						ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;	
					КонецЕсли;  							
					
				Иначе 
					ТекСтрока.Количество = 0;
					ТекСтрока.КоличествоУпаковок = 0;
				КонецЕсли;  
				
				Если xdtoСправочник.OrderSource = "ОтгрузкаКлиенту" Тогда  
					СтруктураДействий = Новый Структура;	
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ОбъектДок);  						
					//СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСумму");

					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, Неопределено);  
				КонецЕсли;
										
			КонецЦикла;  			
			
			СтруктураДляПоиска = Новый Структура("Количество", 0); 
			
			МассивПустыхСтрок = ОбъектДок.Товары.НайтиСтроки(СтруктураДляПоиска); 
			Для каждого Строка Из МассивПустыхСтрок Цикл 
				ОбъектДок.Товары.Удалить(Строка); 
			КонецЦикла; 
			
			
			Попытка
				
				Если Бонус Тогда 
					ОбъектДок.Статус = Перечисления.СтатусыЗаказовКлиентов.Отменен;	
				КонецЕсли;
				
				ОбъектДок.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Ложь);
				ОбъектДок.ДополнительныеСвойства.Вставить("НеРегистрироватьДляОбмена");
				ОбъектДок.ДополнительныеСвойства.Вставить("СШПНеобрабатывать");
				ОбъектДок.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				ЗаписьЖурналаРегистрации("Обмен по ESB.Загрузка:", УровеньЖурналаРегистрации.Ошибка, , ,"При загрузке ожидаемой приемки с идентификатором:" + ID + ". Ошибка проведения документа:" + ОписаниеОшибки());
				СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки; 	
			КонецПопытки;
			
			Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказКлиента") 
				И НЕ Бонус Тогда 
				
				СсылкаНаОбъектРеализация = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.РеализацияТоваровУслуг");
				
				Если СсылкаНаОбъектРеализация = Неопределено Тогда 				
					ОбъектРеализация = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
					ОбъектРеализация.Дата = ТекущаяДата();
					//ОбъектРеализация.УстановитьНовыйНомер();
				Иначе  					
					ОбъектРеализация = СсылкаНаОбъектРеализация.ПолучитьОбъект();
					ОбъектРеализация.Товары.Очистить();
				КонецЕсли;
				
				Дата = ЗаказыСервер.ПолучитьМинимальнуюДатуОтгрузкиЗаказа(ОбъектРеализация.Дата);
				//-----
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ЗаказКлиента.Ссылка                КАК ЗаказКлиента,
				|	ЗаказКлиента.Партнер               КАК Партнер,
				|	ЗаказКлиента.Контрагент            КАК Контрагент,
				|	ЗаказКлиента.КонтактноеЛицо        КАК КонтактноеЛицо,
				|	ЗаказКлиента.Договор               КАК Договор,
				|	ЗаказКлиента.Организация           КАК Организация,
				|	ЗаказКлиента.ФормаОплаты           КАК ФормаОплаты,
				|	ЗаказКлиента.Соглашение            КАК Соглашение,
				|	ЗаказКлиента.КартаЛояльности       КАК КартаЛояльности,
				|	ЗаказКлиента.Сделка                КАК Сделка,
				|	ЗаказКлиента.Валюта                КАК Валюта,
				|	ЗаказКлиента.Валюта                КАК ВалютаВзаиморасчетов,
				|	ЗаказКлиента.ГрафикОплаты          КАК ГрафикОплаты,
				|	ЗаказКлиента.Подразделение         КАК Подразделение,
				|	ЗаказКлиента.ДатаОтгрузки          КАК ДатаОтгрузки,
				|	ВЫБОР
				|		КОГДА
				|			ЗаказКлиента.Склад.ЭтоГруппа И ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
				|		ТОГДА
				|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|		ИНАЧЕ
				|			ЗаказКлиента.Склад
				|	КОНЕЦ КАК Склад,
				|	ВЫБОР
				|		КОГДА
				|			ЗаказКлиента.Склад.ЭтоГруппа И ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
				|		ТОГДА
				|			ИСТИНА
				|		ИНАЧЕ
				|			ЛОЖЬ
				|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
				|	ЗаказКлиента.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
				|	ЗаказКлиента.НалогообложениеНДС    КАК НалогообложениеНДС,
				|	ЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ЗаказКлиента.НеОтгружатьЧастями    КАК НеОтгружатьЧастями,
				|	ЗаказКлиента.АдресДоставки         КАК АдресДоставки,
				|	ЗаказКлиента.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке   КАК ОрдернаяСхемаПриОтгрузке,
				|
				|	ЗаказКлиента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
				|	ЗаказКлиента.Статус                КАК СтатусДокумента,
				|	НЕ ЗаказКлиента.Проведен           КАК ЕстьОшибкиПроведен,
				|	ИСТИНА                             КАК ЕстьОшибкиСтатус,
				|
				|	ЗаказКлиента.БанковскийСчет                 КАК БанковскийСчетОрганизации,
				|	ЗаказКлиента.БанковскийСчетКонтрагента      КАК БанковскийСчетКонтрагента,
				|	ЗаказКлиента.Грузоотправитель               КАК Грузоотправитель,
				|	ЗаказКлиента.Грузополучатель                КАК Грузополучатель,
				|	ЗаказКлиента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
				|	ЗаказКлиента.БанковскийСчетГрузополучателя  КАК БанковскийСчетГрузополучателя,
				|	ЗаказКлиента.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
				|	ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
				|	ЗаказКлиента.ТребуетсяЗалогЗаТару           КАК ТребуетсяЗалогЗаТару,
				|	ВЫБОР
				|		КОГДА &ИспользоватьСоглашенияСКлиентами 
				|			ТОГДА ЗаказКлиента.Соглашение.КалендарьВозвратаТары
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
				|	КОНЕЦ                                       КАК КалендарьВозвратаТары,
				|	ВЫБОР
				|		КОГДА &ИспользоватьСоглашенияСКлиентами 
				|			ТОГДА ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
				|		ИНАЧЕ ЛОЖЬ
				|	КОНЕЦ                                       КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
				|
				|	ЗаказКлиента.СкидкиНаценки.(
				|		КлючСвязи,
				|		СкидкаНаценка,
				|		Сумма
				|	) КАК СкидкиНаценки,
				|	ЗаказКлиента.АдресДоставкиЗначенияПолей     КАК АдресДоставкиЗначенияПолей,
				|
				|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
				|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
				|		ЗаказКлиента.СпособДоставки
				|	КОНЕЦ                                       КАК СпособДоставки,
				|
				|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
				|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
				|		ЗаказКлиента.ПеревозчикПартнер
				|	КОНЕЦ                                       КАК ПеревозчикПартнер,
				|
				|	ВЫБОР КОГДА НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
				|		И ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика) ТОГДА
				|		ЗаказКлиента.ДополнительнаяИнформацияПоДоставке
				|	КОНЕЦ                                       КАК ДополнительнаяИнформацияПоДоставке,
				|	
				|	ЗаказКлиента.ПорядокРасчетов                КАК ПорядокРасчетов,
				|	ЗаказКлиента.НаправлениеДеятельности        КАК НаправлениеДеятельности,
				|	ЗаказКлиента.ПорядокОплаты                  КАК ПорядокОплаты
				|
				|ИЗ
				|	Документ.ЗаказКлиента КАК ЗаказКлиента
				|ГДЕ
				|	ЗаказКлиента.Ссылка = &ЗаказКлиента
				|;
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗаказыОстатки.Склад КАК Склад
				|ИЗ
				|	РегистрНакопления.ЗаказыКлиентов.Остатки(
				|		,
				|		ЗаказКлиента = &ЗаказКлиента
				|) КАК ЗаказыОстатки
				|");
				
				Запрос.УстановитьПараметр("ЗаказКлиента", СсылкаНаОбъект);
				Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", Ложь);
				Запрос.УстановитьПараметр("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками",
				ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками"));
				
				РезультатЗапроса = Запрос.ВыполнитьПакет();
				
				РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
				РеквизитыЗаказа.Следующий();
				
				//Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
				//РеквизитыЗаказа.ЗаказКлиента,
				//РеквизитыЗаказа.СтатусДокумента,
				//РеквизитыЗаказа.ЕстьОшибкиПроведен);
				
				// Заполнение шапки
				ЗаполнитьЗначенияСвойств(ОбъектРеализация, РеквизитыЗаказа);
				Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
					Если НЕ ЗначениеЗаполнено(Дата) Тогда
						Дата = ТекущаяДатаСеанса();
					КонецЕсли;
				КонецЕсли;
				
				Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
					МассивСкладов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
				КонецЕсли;			    	 				
				   				
				ОбъектРеализация.Склад = СсылкаНаОбъект.Склад;	
				ОбъектРеализация.СпособДоставки = СсылкаНаОбъект.СпособДоставки;
					
				МассивЗаказов = Новый Массив();
				МассивЗаказов.Добавить(СсылкаНаОбъект);    				
				
				ПараметрыЗаполнения = Новый Структура;
				ПараметрыЗаполнения.Вставить("ВариантОформления", Неопределено);
				ПараметрыОформления = Новый Структура; 						
				ПараметрыОформления.Вставить("ПоЗаказам", Истина);
				ПараметрыОформления.Вставить("ПоОрдерам", Ложь);  
				ПараметрыЗаполнения.Вставить("ПараметрыОформления", ПараметрыОформления); 
				
				Документы.РеализацияТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
					ОбъектРеализация,
					ОбъектРеализация.Товары,
					ОбъектРеализация.СкидкиНаценки,
					ОбъектРеализация.Склад,
					МассивЗаказов,
					ПараметрыЗаполнения);
				//ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
				ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(СсылкаНаОбъект, ОбъектРеализация.Товары, "ЗаказКлиента");
				
				ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ОбъектРеализация, Документы.РеализацияТоваровУслуг);
				НоменклатураСервер.ЗаполнитьСерииПоFEFO(ОбъектРеализация,ПараметрыУказанияСерий, Ложь);  					
		
				
				Если НЕ ЗначениеЗаполнено(ОбъектРеализация.Статус) Тогда
					ОбъектРеализация.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
				КонецЕсли;
				
				СтруктураОснование = Документы.РеализацияТоваровУслуг.СтруктураОснованияДляПечати(ОбъектРеализация);
				ЗаполнитьЗначенияСвойств(ОбъектРеализация, СтруктураОснование);
				ОбъектРеализация.ДатаПлатежа = ТекущаяДата(); 
				
				//-----
				//ОбъектРеализация.ЗаполненНаОснованииДокумента = Истина;
				ОбъектРеализация.РеализацияПоЗаказам   = Истина;
				ОбъектРеализация.Авэкс_ЕстьИсправление = Истина;
				ОбъектРеализация.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Ложь);
				ОбъектРеализация.ДополнительныеСвойства.Вставить("НеРегистрироватьДляОбмена", Истина);
				ОбъектРеализация.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина); 
				ОбъектРеализация.Записать(РежимЗаписиДокумента.Проведение);  				
				//ОбъектРеализация.Записать();

				
				упОбменПоWebСервису.ЗаписатьВИдентификаторОбмена(ОбъектРеализация.Ссылка, ID);
				
			ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказКлиента") 
					И Бонус Тогда
					
				СсылкаНаОбъектСписаниеНаРасходы = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.ВнутреннееПотреблениеТоваров");
				
				Если СсылкаНаОбъектСписаниеНаРасходы = Неопределено Тогда 				
					ОбъектСписаниеНаРасходы = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
					ОбъектСписаниеНаРасходы.Дата = ТекущаяДата();
					ОбъектСписаниеНаРасходы.ДатаРаспоряжения = ОбъектСписаниеНаРасходы.Дата;
				Иначе  					
					ОбъектСписаниеНаРасходы = СсылкаНаОбъектСписаниеНаРасходы.ПолучитьОбъект();
					ОбъектСписаниеНаРасходы.Товары.Очистить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОбъектСписаниеНаРасходы, СсылкаНаОбъект); 
				
				Для Каждого Стр Из СсылкаНаОбъект.Товары Цикл 
					НоваяСтр = ОбъектСписаниеНаРасходы.Товары.Добавить();	
					ЗаполнитьЗначенияСвойств(НоваяСтр, Стр);
					НоваяСтр.СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию("2-06 Дегустационный товар для внешней дегустации");			
					НоваяСтр.АналитикаРасходов = СсылкаНаОбъект.Подразделение;		
				КонецЦикла;
				
				ОбъектСписаниеНаРасходы.ВидЦены = Справочники.ВидыЦен.НайтиПоНаименованию("01 ЗАКУПОЧНАЯ ЦЕНА");
								
				ОбъектСписаниеНаРасходы.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
				ОбъектСписаниеНаРасходы.Дата = ТекущаяДата();  
				
				ОбъектСписаниеНаРасходы.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Ложь);
				ОбъектСписаниеНаРасходы.ДополнительныеСвойства.Вставить("НеРегистрироватьДляОбмена", Истина);
				ОбъектСписаниеНаРасходы.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина); 
				ОбъектСписаниеНаРасходы.Записать(РежимЗаписиДокумента.Проведение); 
				
				упОбменПоWebСервису.ЗаписатьВИдентификаторОбмена(ОбъектСписаниеНаРасходы.Ссылка, ID); 
				
			ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда  
				
				СсылкаНаОбъектПеремещение = сшпМодульОбработкиДанных.ПолучитьДокументПоИдентификатору(ID, "И усИдентификаторыОбменаПоискОбъекта.Объект ССЫЛКА Документ.ПеремещениеТоваров");
				
				Если СсылкаНаОбъектПеремещение = Неопределено Тогда 				
					ОбъектПеремещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
					ОбъектПеремещение.Дата = ТекущаяДата();
					ОбъектПеремещение.УстановитьНовыйНомер();
				Иначе  					
					ОбъектПеремещение = СсылкаНаОбъектПеремещение.ПолучитьОбъект();
					ОбъектПеремещение.Товары.Очистить();  
				КонецЕсли;
				
				
				ДанныеЗаполнения = Новый Структура;
				МассивЗаказов    = Новый Массив;
				МассивЗаказов.Добавить(СсылкаНаОбъект);
				ДанныеЗаполнения.Вставить("МассивЗаказов", МассивЗаказов);
				
				РеквизитыШапки = Новый Структура("АдресДоставки, 
												|АдресДоставкиЗначенияПолей,
												|ВидЦены,
												|ДополнительнаяИнформацияПоДоставке,
												|ЕстьНесовместимыеСпособыДоставки,
												|ЕстьОрдера,
												|ЗаказПроведен,
												|Организация,
												|ОрганизацияПолучатель,
												|ПеревозчикПартнер,
												|Подразделение,
												|РазличныхОпераций,
												|РазличныхОрганизаций,
												|РазличныхОрганизацийПолучателей,
												|РазличныхСкладовОтправителей,
												|РазличныхСкладовПолучателей,
												|Склад,
												|СкладОтправитель,
												|СкладПолучатель,
												|СпособДоставки,
												|ХозяйственнаяОперация");
				ЗаполнитьЗначенияСвойств(РеквизитыШапки, СсылкаНаОбъект);  
				ДанныеЗаполнения.Вставить("РеквизитыШапки", РеквизитыШапки);
				
				
				//ЗаполнитьПоЗаказу+++++++++++++++
				
				МассивЗаказов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ДанныеЗаполнения.МассивЗаказов);
				МассивЗаказов.Добавить(СсылкаНаОбъектПеремещение);
				
				СкладОтправитель = ДанныеЗаполнения.РеквизитыШапки.СкладОтправитель;
				СкладПолучатель  = ДанныеЗаполнения.РеквизитыШапки.СкладПолучатель;
				
				Если ДанныеЗаполнения.Свойство("ЗаполнятьПоОрдеру") Тогда
					ЗаполнятьПоОрдеру = ДанныеЗаполнения.ЗаполнятьПоОрдеру;
				Иначе
					УстановитьПривилегированныйРежим(Истина);
					ИспользоватьОрдернуюСхему = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(СкладОтправитель, ТекущаяДатаСеанса());
					УстановитьПривилегированныйРежим(Ложь);
					
					ПорядокОформления = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить();
					СначалаОрдера = (ПорядокОформления = Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаОрдера);
					
					ЗаполнятьПоОрдеру = ИспользоватьОрдернуюСхему И СначалаОрдера;
				КонецЕсли;
				
				ПараметрыЗаполнения = Документы.ПеремещениеТоваров.ПараметрыЗаполненияДокумента();
				ПараметрыЗаполнения.РеквизитыШапки = ДанныеЗаполнения.РеквизитыШапки;
				ПараметрыЗаполнения.ФормаОткрыта   = Ложь;
				ПараметрыЗаполнения.ЗаполнятьПоОрдеру = ЗаполнятьПоОрдеру;
				
				ТаблицаНакладная = Документы.ПеремещениеТоваров.ДанныеТаблицыТоварыДокумента(СсылкаНаОбъектПеремещение);
				
				Документы.ПеремещениеТоваров.ЗаполнитьПоЗаказамОрдерам(ТаблицаНакладная, СсылкаНаОбъектПеремещение, МассивЗаказов, ПараметрыЗаполнения);
				
				Если ЗаполнятьПоОрдеру Тогда
					ТаблицаНакладная.Колонки.Количество.Имя        = "КоличествоДоИзменения";
					ТаблицаНакладная.Колонки.КоличествоВОрдере.Имя = "Количество";
				Иначе
					ТаблицаНакладная.Колонки.Количество.Имя        = "КоличествоДоИзменения";
					ТаблицаНакладная.Колонки.КоличествоВЗаказе.Имя = "Количество";
				КонецЕсли;
				
				НакладныеСервер.УдалитьПустыеСтроки(ТаблицаНакладная, "Количество");
				
				ОбъектПеремещение.Товары.Загрузить(ТаблицаНакладная);
				
				Документы.ПеремещениеТоваров.ЗаполнитьШапкуДокументаПоЗаказу(ОбъектПеремещение, ПараметрыЗаполнения, ДанныеЗаполнения.МассивЗаказов);

				// Информация о шапке документа актуализирована в ЗаполнитьШапкуДокументаПоЗаказу
				ПараметрыЗаполнения.Вставить("Организация",           ОбъектПеремещение.Организация);
				ПараметрыЗаполнения.Вставить("Подразделение",         ОбъектПеремещение.Подразделение);
				ПараметрыЗаполнения.Вставить("ХозяйственнаяОперация", ОбъектПеремещение.ХозяйственнаяОперация);
				
				Документы.ПеремещениеТоваров.ОбновитьЗависимыеРеквизитыТабличнойЧасти(ОбъектПеремещение.Товары, ПараметрыЗаполнения);
				
				//ЗаполнитьПоЗаказу	---------------------
				
				ОбъектПеремещение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
				
				//ИнициализироватьДокумент++++++
				ОбъектПеремещение.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(СсылкаНаОбъект.Организация);
				
				ОбъектПеремещение.Ответственный = Пользователи.ТекущийПользователь();
				ОбъектПеремещение.ДатаРаспоряжения = ТекущаяДатаСеанса();
				ОбъектПеремещение.ВидЦены = Справочники.Склады.УчетныйВидЦены(ОбъектПеремещение.СкладОтправитель);
				ОбъектПеремещение.Статус = Перечисления.СтатусыПеремещенийТоваров.Отгружено;
								
				Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПеремещенийТоваров") Тогда
					ОбъектПеремещение.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
				КонецЕсли;  

				//ИнициализироватьДокумент------
				
				//-----
				ОбъектПеремещение.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Ложь);
				ОбъектПеремещение.ДополнительныеСвойства.Вставить("НеРегистрироватьДляОбмена", Истина);
				ОбъектПеремещение.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина); 
				ОбъектПеремещение.Записать(РежимЗаписиДокумента.Проведение);  				
				//ОбъектПеремещение.Записать();
				
			КонецЕсли;		
				
			
		КонецЕсли;
		
		Если СостояниеСообщения = Перечисления.сшпСтатусыСообщений.Обработано Тогда 
			ЗафиксироватьТранзакцию();
		Иначе	
			ОтменитьТранзакцию();
		КонецЕсли;	
	Исключение
		Если ТранзакцияАктивна() Тогда 
			ОтменитьТранзакцию();
		КонецЕсли;
		//сшпМодульОбработкиДанных.УстановитьСостояниеСообщения(ОбъектСообщение, Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки, 60);
		СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОшибкаОбработки;
		ВызватьИсключение "Обмен по ESB.Загрузка: При загрузке документа с ID :" + ID + " произошла ошибка: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()); 
	КонецПопытки;  
