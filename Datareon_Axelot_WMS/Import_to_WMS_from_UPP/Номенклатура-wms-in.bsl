	
	// ЕНС. 2024-02-19. AS-IS. Это то, что есть сейчас в демо-контуре Элис
	// Это обработчик на стороне 1C:Axelot WMS X5, direction = IN (from Platform)
	// В этом направлении данный код выполняется обработкой
	//		"сшпОбработчикИзDatareon"
	// т.е. всё происходит в контексте модуля объекта этой обработки

	/////////////////////////////////////////////////////////////////////////////

	// Далее - код обработчика
	
	//ИмяТаблицыБазыОбмена=dbo_inItem
		
	//Определение переменных
	Локализация = "ru";
	КлассПакета_ВидНоменклатуры = 2;
	КлассПакета_Номенклатура = 3;
	КлассПакета_ЕдиницыИзмерения = 4;
	КлассПакета_УпаковкаНоменклатуры = 10;
	КлассПакета_Характеристика = 13;
	КлассПакета_НаборыУпаковок = 18;
    КлассПакета_ПартияНоменклатуры = 11;

	КоэффициентКонвертацииМассы = 1; // (кг -> кг)
	КоэффициентКонвертацииОбъема = 1000; // (м3 -> л)

	сткСообщение = Новый Структура("СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания, Задержка, Отказ, Узел, СоответствиеНеНайденныхИдентификаторов", 
		СостояниеСообщения, ТекстОшибки, КоличествоПопытокОжидания,	Задержка, Ложь, 
		GetSource() // метод GetSource компоненты
			//https://docs-platform.datareon.ru/administrator/external/1c_system.html
			//Boolean GetSource(out initialSourceName)
			//Функция необходима для получения свойства InitialSourceName последнего полученного сообщения.
			//initialSourceName – Строка – Результат выполнения.
		, Новый Соответствие);

	//Получение тела сообщения
	xdtoОбъект = сшпОбщегоНазначения.ПолучитьОбъектXDTO(
			сшпФункциональныеОпции.ФорматСообщения(),
			ТелоСообщения //ЕНС. переменная модуля обработки: Перем ТелоСообщения Экспорт; // Тело полученного сообщения
	);

	//Получение значений полей
	СсылкаXDTO 			= xdtoОбъект.Получить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация));
	ЭтоГруппаXDTO 		= xdtoОбъект.Получить(НСтр("ru = 'ЭтоГруппа'; en = 'IsGroup'", Локализация));
	ДатаРегистрацииXDTO = xdtoОбъект.Получить(НСтр("ru = 'ДатаРегистрации'; en = 'RegistrationDate'", Локализация));
	ПометкаУдаленияXDTO = xdtoОбъект.Получить(НСтр("ru = 'ПометкаУдаления'; en = 'DeletionMark'", Локализация));
	РодительXDTO 		= xdtoОбъект.Получить(НСтр("ru = 'Родитель'; en = 'Parent'", Локализация));
	НаименованиеXDTO 	= xdtoОбъект.Получить(НСтр("ru = 'Наименование'; en = 'Description'", Локализация));
	//КодXDTO = xdtoОбъект.Получить(НСтр("ru = 'Код'; en = 'Code'", Локализация));
	
	//Поиск объекта
	//ЕНС. Это конфа Axelot, не забываем
	// получает ГУИД из РС.СоответствиеИдентификаторов 
	ЛокальныйИдентификатор_Ссылка = ИнтеграцияСервер.ПолучитьЛокальныйИдентификатор(СсылкаXDTO, КлассПакета_Номенклатура, сткСообщение.Узел);
	//ЕНС. ну здесь понятно.
	СсылкаНаЭлемент = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ЛокальныйИдентификатор_Ссылка));

	//ЭтоГруппа
	ЭтоГруппа = ЭтоГруппаXDTO;

	новыйОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
	Если новыйОбъект = Неопределено Тогда
		Если Не ЭтоГруппа Тогда
			новыйОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		Иначе
			новыйОбъект = Справочники.Номенклатура.СоздатьГруппу();
		КонецЕсли;
		новыйОбъект.УстановитьСсылкуНового(СсылкаНаЭлемент);
		новыйОбъект.ДатаЗагрузки = ИнтеграцияСервер.ПолучитьДату(ДатаРегистрацииXDTO);
        новыйОбъект.УстановитьНовыйКод();
	Иначе
		ДатаЗагрузки = ИнтеграцияСервер.ПолучитьДату(ДатаРегистрацииXDTO);
		Если новыйОбъект.ДатаЗагрузки > ДатаЗагрузки Тогда
			СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОбработкаОтменена;
			Перейти ~Выход;
		Иначе
			новыйОбъект.ДатаЗагрузки = ДатаЗагрузки;
		КонецЕсли;	
	КонецЕсли;

	//Реквизиты шапки
	новыйОбъект.ПометкаУдаления = ПометкаУдаленияXDTO;
	новыйОбъект.Родитель = ИнтеграцияСервер.ПолучитьСсылку(РодительXDTO, "Справочник.Номенклатура", КлассПакета_Номенклатура, сткСообщение);
    //Информация("59: "+сткСообщение.СостояниеСообщения);
	новыйОбъект.Наименование = НаименованиеXDTO;
	// новыйОбъект.Код = КодXDTO;

	Если Не ЭтоГруппа Тогда
		
		//Получение значений полей
		АртикулXDTO = xdtoОбъект.Получить(НСтр("ru = 'Артикул'; en = 'Article'", Локализация));
		ВидНоменклатурыXDTO = xdtoОбъект.Получить(НСтр("ru = 'ВидНоменклатуры'; en = 'ItemType'", Локализация));
		ЕдиницаИзмеренияXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЕдиницаИзмерения'; en = 'UnitOfMeasure'", Локализация));
		НаборУпаковокXDTO = xdtoОбъект.Получить(НСтр("ru = 'НаборУпаковок'; en = 'OwnerIsSetOfPackages'", Локализация));
		КомментарийXDTO = xdtoОбъект.Получить(НСтр("ru = 'Комментарий'; en = 'Comment'", Локализация));
		МассаXDTO = xdtoОбъект.Получить(НСтр("ru = 'Масса'; en = 'Weight'", Локализация));
		НаименованиеПолноеXDTO = xdtoОбъект.Получить(НСтр("ru = 'НаименованиеПолное'; en = 'LongDescription'", Локализация));
		ОбъемXDTO = xdtoОбъект.Получить(НСтр("ru = 'Объем'; en = 'Volume'", Локализация));
		ЕдиницаИзмеренияСрокаХраненияXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЕдиницаИзмеренияСрокаХранения'; en = 'UnitOfMeasureForShelfLife'", Локализация));
		СрокХраненияXDTO = xdtoОбъект.Получить(НСтр("ru = 'СрокХранения'; en = 'ShelfLife'", Локализация));
		ЯвляетсяКомплектомXDTO = xdtoОбъект.Получить(НСтр("ru = 'ЯвляетсяКомплектом'; en = 'IsKit'", Локализация));	
        
        ВидПродукцииXDTO = xdtoОбъект.Получить(НСтр("ru = 'ВидПродукции'; en = 'KindOfProduction'", Локализация));
        ВидКоллекцииXDTO = xdtoОбъект.Получить(НСтр("ru = 'ВидКоллекции'; en = 'KindOfCollection'", Локализация));
    	МаркируемаяПродукцияXDTO = xdtoОбъект.Получить(НСтр("ru = 'МаркируемаяПродукция'; en = 'IsMarkedItem'", Локализация));
        ТорговаяМаркаXDTO = xdtoОбъект.Получить(НСтр("ru = 'ТорговаяМарка'; en = 'TradeMark'", Локализация));
        КлассВязальнойМашиныXDTO = xdtoОбъект.Получить(НСтр("ru = 'КлассВязальнойМашины'; en = 'KnittingMachineClass'", Локализация));

		//Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "МаркируемаяПродукция_15970319575a44bc894c5ffba9bec678");
		//Если ЗначениеЗаполнено(Свойство) Тогда
		//    СтрокаДополнительныхРеквизитов = новыйОбъект.ДополнительныеРеквизиты.Найти(Свойство, "Свойство");
		//    Если СтрокаДополнительныхРеквизитов = Неопределено Тогда
		//        СтрокаДополнительныхРеквизитов = новыйОбъект.ДополнительныеРеквизиты.Добавить();
		//        СтрокаДополнительныхРеквизитов.Свойство = Свойство;
		//    КонецЕсли;
		//    СтрокаДополнительныхРеквизитов.Значение = МаркируемаяПродукцияXDTO;
		//КонецЕсли;
        новыйОбъект.МаркируемаяПродукция = МаркируемаяПродукцияXDTO;
		
        Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "КлассВязальнойМашины_302c7be94b5c42d49f16f25b02bffd50");
        Если ЗначениеЗаполнено(Свойство) Тогда
            СтрокаДополнительныхРеквизитов = новыйОбъект.ДополнительныеРеквизиты.Найти(Свойство, "Свойство");
            Если СтрокаДополнительныхРеквизитов = Неопределено Тогда
                СтрокаДополнительныхРеквизитов = новыйОбъект.ДополнительныеРеквизиты.Добавить();
                СтрокаДополнительныхРеквизитов.Свойство = Свойство;
            КонецЕсли;
            СтрокаДополнительныхРеквизитов.Значение = КлассВязальнойМашиныXDTO;
        КонецЕсли;

        Если ЗначениеЗаполнено(ТорговаяМаркаXDTO) Тогда
            ТорговаяМарка = Справочники.ТорговыеМарки.НайтиПоНаименованию(ТорговаяМаркаXDTO);
            Если ЗначениеЗаполнено(ТорговаяМарка) Тогда
                новыйОбъект.ТорговаяМарка = ТорговаяМарка;
            КонецЕсли;
        КонецЕсли;
 
		новыйОбъект.Артикул = АртикулXDTO;
		новыйОбъект.ВидНоменклатуры = ИнтеграцияСервер.ПолучитьСсылку(ВидНоменклатурыXDTO, "Справочник.ВидыОбъектовХранения", КлассПакета_ВидНоменклатуры, сткСообщение);
        //Информация("80: "+сткСообщение.СостояниеСообщения);
		новыйОбъект.ЕдиницаИзмерения = ИнтеграцияСервер.ПолучитьСсылку(ЕдиницаИзмеренияXDTO, "Справочник.ЕдиницыИзмерения", КлассПакета_ЕдиницыИзмерения, сткСообщение);
        //Информация("82: "+сткСообщение.СостояниеСообщения);
		новыйОбъект.НаборУпаковок = ИнтеграцияСервер.ПолучитьСсылку(НаборУпаковокXDTO, "Справочник.НаборыУпаковок", КлассПакета_НаборыУпаковок, сткСообщение);
        //Информация("84: "+сткСообщение.СостояниеСообщения);
		новыйОбъект.Комментарий = КомментарийXDTO;
		Если ЗначениеЗаполнено(МассаXDTO) Тогда
			новыйОбъект.Масса = МассаXDTO * КоэффициентКонвертацииМассы;
		КонецЕсли;
		новыйОбъект.НаименованиеПолное = НаименованиеПолноеXDTO;
		Если ЗначениеЗаполнено(ОбъемXDTO) Тогда
			новыйОбъект.Объем = ОбъемXDTO * КоэффициентКонвертацииОбъема;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЕдиницаИзмеренияСрокаХраненияXDTO) Тогда
			новыйОбъект.ЕдиницаИзмеренияСрокаХранения = XMLЗначение(Тип("ПеречислениеСсылка.ЕдиницыИзмеренияВремени"), ЕдиницаИзмеренияСрокаХраненияXDTO);
		КонецЕсли;
		Если ЗначениеЗаполнено(СрокХраненияXDTO) Тогда
			новыйОбъект.СрокХранения = СрокХраненияXDTO;
		КонецЕсли;
		новыйОбъект.ЯвляетсяКомплектом = ЯвляетсяКомплектомXDTO;
        
        новыйОбъект.ВидПродукции = ВидПродукцииXDTO;
		//Если ЗначениеЗаполнено(ВидКоллекцииXDTO) Тогда
        Если НЕ ВидКоллекцииXDTO = "" Тогда
			Попытка
				новыйОбъект.ВидКоллекции = Перечисления.ВидыКоллекций[Число(ВидКоллекцииXDTO)];
			Исключение
			КонецПопытки
		КонецЕсли;
	КонецЕсли;

	//Запись объекта
	ИнтеграцияСервер.ЗаписатьОбъектВБазуДанных(новыйОбъект, сткСообщение);
    //Информация("104: "+сткСообщение.СостояниеСообщения);

	//Упаковки ставим на загрузку при удачной загрузке самой номенклатуры
	Если Не сткСообщение.Отказ И Не ЭтоГруппа Тогда
		текТаблица = xdtoОбъект[НСтр("ru = 'Упаковки'; en = 'ItemPackages'", Локализация)].Последовательность();
		Для Инд = 0 По текТаблица.Количество() - 1 Цикл
			//Поиск объекта
			xdtoСтрока = текТаблица.ПолучитьЗначение(Инд);
			СсылкаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Ссылка'; en = 'ID'", Локализация));
			ЛокальныйИдентификатор_Ссылка = ИнтеграцияСервер.ПолучитьЛокальныйИдентификатор(СсылкаXDTO, КлассПакета_УпаковкаНоменклатуры, сткСообщение.Узел);
			СсылкаНаЭлемент = Справочники.УпаковкиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ЛокальныйИдентификатор_Ссылка));

			новыйОбъектУпаковка = СсылкаНаЭлемент.ПолучитьОбъект();
			Если новыйОбъектУпаковка = Неопределено Тогда
				сткСообщение.СоответствиеНеНайденныхИдентификаторов.Вставить(ЛокальныйИдентификатор_Ссылка, КлассПакета_УпаковкаНоменклатуры);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	//Штрихкоды ставим на загрузку, если загружена номенклатура
	Если Не сткСообщение.Отказ И Не ЭтоГруппа Тогда
		новыйНабор = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		новыйНабор.Отбор.Номенклатура.Установить(новыйОбъект.Ссылка);

		текТаблица = xdtoОбъект[НСтр("ru = 'Штрихкоды'; en = 'Barcodes'", Локализация)].Последовательность();
		Для Инд = 0 По текТаблица.Количество() - 1 Цикл
			xdtoСтрока = текТаблица.ПолучитьЗначение(Инд);

			УпаковкаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Упаковка'; en = 'ItemPackage'", Локализация));
			ХарактеристикаXDTO = xdtoСтрока.Получить(НСтр("ru = 'Характеристика'; en = 'ItemCharacteristic'", Локализация));
			ШтрихкодXDTO = xdtoСтрока.Получить(НСтр("ru = 'Штрихкод'; en = 'Barcode'", Локализация));
            ПартияXDTO = xdtoСтрока.Получить(НСтр("ru = 'Партия'; en = 'ItemBatch'", Локализация));

			текСтрока = новыйНабор.Добавить();
			текСтрока.Номенклатура = новыйОбъект.Ссылка;
			текСтрока.УпаковкаНоменклатуры = ИнтеграцияСервер.ПолучитьСсылку(УпаковкаXDTO, "Справочник.УпаковкиНоменклатуры", КлассПакета_УпаковкаНоменклатуры, сткСообщение);
			текСтрока.ХарактеристикаНоменклатуры = ИнтеграцияСервер.ПолучитьСсылку(ХарактеристикаXDTO, "Справочник.ХарактеристикиНоменклатуры", КлассПакета_Характеристика,
				сткСообщение);
			текСтрока.Штрихкод = ШтрихкодXDTO;
            //!КВВ, 19.01.23 - Начало блока 
			текСтрока.ПартияНоменклатуры = ИнтеграцияСервер.ПолучитьСсылку(ПартияXDTO, "Справочник.ПартииНоменклатуры", КлассПакета_ПартияНоменклатуры, сткСообщение);
            //!КВВ, 19.01.23 - Конец блока
			Если ЗначениеЗаполнено(текСтрока.ХарактеристикаНоменклатуры) Тогда
				ОбъектХранения = Справочники.Номенклатура.НайтиОбъектХранения(текСтрока.Номенклатура, текСтрока.ХарактеристикаНоменклатуры);
				Если НЕ ЗначениеЗаполнено(ОбъектХранения) Тогда
					Контрагент = Справочники.Контрагенты.ПустаяСсылка();
					КонвертацияУспешна = КонвертацияДокументов.КонвертироватьНоменклатуруВОбъектХранения(текСтрока.Номенклатура, текСтрока.ХарактеристикаНоменклатуры, Контрагент, Контрагент, Неопределено);
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

		Если Не сткСообщение.Отказ Тогда
		//	Попытка
				новыйНабор.ДополнительныеСвойства.Вставить("СШПНеобрабатывать", Истина);
				новыйНабор.Записать();
		//	Исключение
		//		сткСообщение.Отказ = Истина;
        //        Ошибка(ОписаниеОшибки());
		//		сткСообщение.СостояниеСообщения = Перечисления.сшпСтатусыСообщений.ОжиданиеОбработки;
		//	КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	//Дозапрос недостающих данных
	Если сткСообщение.СоответствиеНеНайденныхИдентификаторов.Количество() Тогда
		Интервал = 900;
        Для каждого текСтрока из сткСообщение.СоответствиеНеНайденныхИдентификаторов цикл
		МенеджерЗаписи = РегистрыСведений.ИнтеграцияЗапрошенныеИдентификаторы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторВнешний = текСтрока.Ключ;
		МенеджерЗаписи.КлассСообщения       = текСтрока.Значение;
		МенеджерЗаписи.Узел                 = сткСообщение.Узел;
		МенеджерЗаписи.Прочитать(); 
		Информация("МенеджерЗаписи.ДатаЗапроса = " + МенеджерЗаписи.ДатаЗапроса + Символы.ПС + 
		"МенеджерЗаписи.ИдентификаторВнешний = " + МенеджерЗаписи.ИдентификаторВнешний + Символы.ПС +
		"МенеджерЗаписи.КлассСообщения = " + МенеджерЗаписи.КлассСообщения + Символы.ПС +
		"МенеджерЗаписи.Узел = " + МенеджерЗаписи.Узел + Символы.ПС +
		"текСтрока.Ключ = " + текСтрока.Ключ + Символы.ПС +
		"текСтрока.Значение = " + текСтрока.Значение + Символы.ПС +
		"ТекущаяДата() - МенеджерЗаписи.ДатаЗапроса > Интервал = " + (ТекущаяДата() - МенеджерЗаписи.ДатаЗапроса > Интервал));
	КонецЦикла; 
               
        ИнтеграцияСервер.СформироватьЗапросНаПолучениеДанных(сткСообщение.СоответствиеНеНайденныхИдентификаторов, сткСообщение.Узел);
        //Информация("158: "+сткСообщение.СостояниеСообщения);
	КонецЕсли;

	СостояниеСообщения = сткСообщение.СостояниеСообщения;
    //Информация("162: "+сткСообщение.СостояниеСообщения);
	ТекстОшибки = сткСообщение.ТекстОшибки;
    //Информация("164: "+сткСообщение.СостояниеСообщения);
	Задержка = сткСообщение.Задержка;
    //Информация("166: "+сткСообщение.СостояниеСообщения);
    ~Выход: